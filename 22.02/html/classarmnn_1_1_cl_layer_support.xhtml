<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ClLayerSupport Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_cl_layer_support.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_cl_layer_support-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ClLayerSupport Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ClLayerSupport:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_cl_layer_support.png" usemap="#ClLayerSupport_map" alt=""/>
  <map id="ClLayerSupport_map" name="ClLayerSupport_map">
<area href="classarmnn_1_1_layer_support_base.xhtml" alt="LayerSupportBase" shape="rect" coords="0,56,117,80"/>
<area href="classarmnn_1_1_i_layer_support.xhtml" alt="ILayerSupport" shape="rect" coords="0,0,117,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:adcaa3eb3d4e1bf48a235b97170dccd15"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adcaa3eb3d4e1bf48a235b97170dccd15">ClLayerSupport</a> (const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> &amp;modelContextPtr)</td></tr>
<tr class="separator:adcaa3eb3d4e1bf48a235b97170dccd15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1dc1384ae65a68453cd3f5fd4a6adbd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ac1dc1384ae65a68453cd3f5fd4a6adbd">ClLayerSupport</a> ()</td></tr>
<tr class="separator:ac1dc1384ae65a68453cd3f5fd4a6adbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35c41b0cdf5faf11fb39554c269e7f9b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a35c41b0cdf5faf11fb39554c269e7f9b">~ClLayerSupport</a> ()</td></tr>
<tr class="separator:a35c41b0cdf5faf11fb39554c269e7f9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9365ac4251c03d9d6ec4802886bcbc4e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a9365ac4251c03d9d6ec4802886bcbc4e">IsLayerSupported</a> (const <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> &amp;type, const std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;infos, const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &gt; &amp;lstmParamsInfo, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &gt; &amp;quantizedLstmParamsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:a9365ac4251c03d9d6ec4802886bcbc4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3adb3a28736529682e4ff0ea976dcd3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">IsActivationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab3adb3a28736529682e4ff0ea976dcd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48177e22e47448adb3d83e145dadf735"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">IsAdditionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a48177e22e47448adb3d83e145dadf735"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f4841f89f21fd794786b4c03c2425fd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">IsArgMinMaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0f4841f89f21fd794786b4c03c2425fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67c970dd054b991e14369de523ca3a5a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">IsBatchNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a>, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a67c970dd054b991e14369de523ca3a5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc5695cc25f4055c7ed54bdc8604a098"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">IsBatchToSpaceNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adc5695cc25f4055c7ed54bdc8604a098"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae18f598a589683c3094a7bb41dcd3a3e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">IsCastSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae18f598a589683c3094a7bb41dcd3a3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f1cae30d95bbd28dbac2a570c26c5f7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a6f1cae30d95bbd28dbac2a570c26c5f7">IsChannelShuffleSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a6f1cae30d95bbd28dbac2a570c26c5f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad16b29b7f1c73187775e7b1d044d7bc0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad16b29b7f1c73187775e7b1d044d7bc0">IsComparisonSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a076bc5e2bfb7bf8fb352b4b8fb8e3c2e">ouput</a>, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad16b29b7f1c73187775e7b1d044d7bc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1542179a03961e3635bb5bef993c8e0e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a1542179a03961e3635bb5bef993c8e0e">IsConcatSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a1542179a03961e3635bb5bef993c8e0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf18c4fa8fc9e0cdae1967990aa90fe8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">IsConstantSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adf18c4fa8fc9e0cdae1967990aa90fe8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1efcaf6f02892442fefca09f49ea3d7c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">IsConvertFp16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a1efcaf6f02892442fefca09f49ea3d7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91fb5f44d8b9427dc45443aa9ebfe13e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">IsConvertFp32ToFp16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a91fb5f44d8b9427dc45443aa9ebfe13e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ff06bd8115a6a9cc6d41e5c762798e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">IsConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af7ff06bd8115a6a9cc6d41e5c762798e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052f289a5b4e48bb2b50c732753e2cfa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a052f289a5b4e48bb2b50c732753e2cfa">IsConvolution3dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a052f289a5b4e48bb2b50c732753e2cfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e89c72cf60df7c2d2d7e5d98822b672"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">IsDequantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a2e89c72cf60df7c2d2d7e5d98822b672"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a128fb9890897e08251a3f621e570cd23"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">IsDepthToSpaceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a128fb9890897e08251a3f621e570cd23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc84390751f227fe03a115b5fa10b0fc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">IsDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adc84390751f227fe03a115b5fa10b0fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16c8cd49a7fa487b904b5c9cc83673e7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a16c8cd49a7fa487b904b5c9cc83673e7">IsDilatedDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; reason=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a16c8cd49a7fa487b904b5c9cc83673e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08f55136b1f0907e7083d70d719f697f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">IsDivisionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a08f55136b1f0907e7083d70d719f697f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d99bdae7b6b2d5d1243f21cd59befb8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a5d99bdae7b6b2d5d1243f21cd59befb8">IsElementwiseUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a076bc5e2bfb7bf8fb352b4b8fb8e3c2e">ouput</a>, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5d99bdae7b6b2d5d1243f21cd59befb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc5d9a4c8f29984de3bbdca87684f317"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">IsFillSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:acc5d9a4c8f29984de3bbdca87684f317"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53c7593d1aa26207eac5d5814a9d56dc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">IsFloorSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a53c7593d1aa26207eac5d5814a9d56dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">IsFullyConnectedSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e8fbdda1125eb5e22f14eacbe9fb351"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a5e8fbdda1125eb5e22f14eacbe9fb351">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:a5e8fbdda1125eb5e22f14eacbe9fb351"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad29d99ecd719c640ed22dcf5c688c6a5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">IsInputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad29d99ecd719c640ed22dcf5c688c6a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0813546a09bf2caba6794014d1960624"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">IsInstanceNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0813546a09bf2caba6794014d1960624"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca4acda7ab553edfda828658d8f3882b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">IsL2NormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aca4acda7ab553edfda828658d8f3882b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a772790c60d70814e30b5bec70fd98776"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776">IsLogicalBinarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:a772790c60d70814e30b5bec70fd98776"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0380b797cb9932fb03067dbe2cdecfb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">IsLogSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa0380b797cb9932fb03067dbe2cdecfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a862535721737220f62a49f14ff494dd5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">IsLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1137f204e3ac4cbe3183443fe3bd321">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a862535721737220f62a49f14ff494dd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afef9436c86b37b973471f2ae546ac00a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">IsMaximumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:afef9436c86b37b973471f2ae546ac00a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab268618580d4f53bf5e9b5a47dee3f6a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">IsMeanSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab268618580d4f53bf5e9b5a47dee3f6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d0eafb3de560b3482f857b56b2b2116"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">IsMinimumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3d0eafb3de560b3482f857b56b2b2116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a421e1f3865d99d52613003048342c49a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">IsMultiplicationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a421e1f3865d99d52613003048342c49a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a994c2065561141bf37fcd2ff7bb4af4d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">IsNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a994c2065561141bf37fcd2ff7bb4af4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef3244c0ef64c8f2f352d21ce0c06985"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">IsOutputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aef3244c0ef64c8f2f352d21ce0c06985"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0534291adf9f3436ba331552eba29a43"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">IsPadSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0534291adf9f3436ba331552eba29a43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d553495d9a94fa55588ae159d8bda30"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">IsPermuteSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9d553495d9a94fa55588ae159d8bda30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa955675303d67b1d1fb51fb7f09d8c21"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">IsPooling2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa955675303d67b1d1fb51fb7f09d8c21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b36dcedd5edbd5142b3548967aadc2f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">IsPreluSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4b36dcedd5edbd5142b3548967aadc2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf54bcad228c0ac21f6735d31460cf31"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">IsQLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1137f204e3ac4cbe3183443fe3bd321">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adf54bcad228c0ac21f6735d31460cf31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1be52d9f968bfab069344756bf232c4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#af1be52d9f968bfab069344756bf232c4">IsQuantizedLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af1be52d9f968bfab069344756bf232c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2c7be6b84b04444e514f52f593b3df7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">IsQuantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad2c7be6b84b04444e514f52f593b3df7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a917c126e64314263b8b5f7bca455ddfb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a917c126e64314263b8b5f7bca455ddfb">IsReduceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a917c126e64314263b8b5f7bca455ddfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa02f01bbcb48c67f5b2efc4132ec5e86"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">IsReshapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa02f01bbcb48c67f5b2efc4132ec5e86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d27a3fc6a7df0b68d80cb113aff8b6c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">IsResizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3d27a3fc6a7df0b68d80cb113aff8b6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e14dafa85cfcd4a6b6b752284b51e63"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">IsSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0e14dafa85cfcd4a6b6b752284b51e63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8385cf8227907904a6a86fac318fc099"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">IsSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8385cf8227907904a6a86fac318fc099"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3adfc31e079a970e028e537ec05fabf5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">IsSpaceToBatchNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3adfc31e079a970e028e537ec05fabf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2af1e7da9490d29e569d271e16b0d5c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">IsSpaceToDepthSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab2af1e7da9490d29e569d271e16b0d5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa746e752ce8874669ea549f8e50896da"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa746e752ce8874669ea549f8e50896da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4609f1baf5fcd295951f3c8abdffd90"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">IsStackSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab4609f1baf5fcd295951f3c8abdffd90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac054cb25099005eac854afb1511340f0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">IsStridedSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac054cb25099005eac854afb1511340f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6c947e4d4b25bc49d92d18d4ff26736"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">IsSubtractionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af6c947e4d4b25bc49d92d18d4ff26736"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c69484f19ed650ad48b716719114e51"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">IsTransposeConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0c69484f19ed650ad48b716719114e51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0189645f33641b280877a1b2f6ba9fee"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">IsTransposeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0189645f33641b280877a1b2f6ba9fee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_layer_support_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_layer_support_base')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td></tr>
<tr class="memitem:ab3adb3a28736529682e4ff0ea976dcd3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">IsActivationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab3adb3a28736529682e4ff0ea976dcd3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48177e22e47448adb3d83e145dadf735 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a48177e22e47448adb3d83e145dadf735">IsAdditionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a48177e22e47448adb3d83e145dadf735 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f4841f89f21fd794786b4c03c2425fd inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0f4841f89f21fd794786b4c03c2425fd">IsArgMinMaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0f4841f89f21fd794786b4c03c2425fd inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67c970dd054b991e14369de523ca3a5a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a67c970dd054b991e14369de523ca3a5a">IsBatchNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a>, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a67c970dd054b991e14369de523ca3a5a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc5695cc25f4055c7ed54bdc8604a098 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc5695cc25f4055c7ed54bdc8604a098">IsBatchToSpaceNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adc5695cc25f4055c7ed54bdc8604a098 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae18f598a589683c3094a7bb41dcd3a3e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">IsCastSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae18f598a589683c3094a7bb41dcd3a3e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f1cae30d95bbd28dbac2a570c26c5f7 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a6f1cae30d95bbd28dbac2a570c26c5f7">IsChannelShuffleSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a6f1cae30d95bbd28dbac2a570c26c5f7 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c52726a684dd76258c61af124012537 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7c52726a684dd76258c61af124012537">IsComparisonSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7c52726a684dd76258c61af124012537 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1542179a03961e3635bb5bef993c8e0e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1542179a03961e3635bb5bef993c8e0e">IsConcatSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a1542179a03961e3635bb5bef993c8e0e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf18c4fa8fc9e0cdae1967990aa90fe8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">IsConstantSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adf18c4fa8fc9e0cdae1967990aa90fe8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad330b6e7dcf25410ea878af0557f2197 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad330b6e7dcf25410ea878af0557f2197">IsConvertBf16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad330b6e7dcf25410ea878af0557f2197 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1efcaf6f02892442fefca09f49ea3d7c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">IsConvertFp16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a1efcaf6f02892442fefca09f49ea3d7c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0947498c6cc747db6219a22132a1b89a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0947498c6cc747db6219a22132a1b89a">IsConvertFp32ToBf16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0947498c6cc747db6219a22132a1b89a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91fb5f44d8b9427dc45443aa9ebfe13e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">IsConvertFp32ToFp16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a91fb5f44d8b9427dc45443aa9ebfe13e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ff06bd8115a6a9cc6d41e5c762798e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">IsConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af7ff06bd8115a6a9cc6d41e5c762798e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052f289a5b4e48bb2b50c732753e2cfa inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a052f289a5b4e48bb2b50c732753e2cfa">IsConvolution3dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a052f289a5b4e48bb2b50c732753e2cfa inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87a66c5e87a19534ce3e6c374c9b8f09 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a87a66c5e87a19534ce3e6c374c9b8f09">IsDebugSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a87a66c5e87a19534ce3e6c374c9b8f09 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a128fb9890897e08251a3f621e570cd23 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a128fb9890897e08251a3f621e570cd23">IsDepthToSpaceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a128fb9890897e08251a3f621e570cd23 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc84390751f227fe03a115b5fa10b0fc inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc84390751f227fe03a115b5fa10b0fc">IsDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adc84390751f227fe03a115b5fa10b0fc inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e89c72cf60df7c2d2d7e5d98822b672 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">IsDequantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a2e89c72cf60df7c2d2d7e5d98822b672 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50af275d7755a5bb1be69736d7e4b02f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a50af275d7755a5bb1be69736d7e4b02f">IsDetectionPostProcessSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;boxEncodings, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a97cbe8ac8df2e213185599d693079acf">scores</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1e19982da8ec2840ca14748c2d8522c">anchors</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d0c2ca9c78e81a5e9e0f3db51934782">detectionBoxes</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a56d52f01c9d80f3710ddace11e534434">detectionClasses</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac8776b306c349e20905e7ae17255b395">detectionScores</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3b204a7fda471668ab54dc967c5a7917">numDetections</a>, const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a50af275d7755a5bb1be69736d7e4b02f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55d91a97ff664f42cd5cd62b60c15f80 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a55d91a97ff664f42cd5cd62b60c15f80">IsDilatedDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a55d91a97ff664f42cd5cd62b60c15f80 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08f55136b1f0907e7083d70d719f697f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a08f55136b1f0907e7083d70d719f697f">IsDivisionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a08f55136b1f0907e7083d70d719f697f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61c5b4e5dc224ef0c876e43353b34030 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a61c5b4e5dc224ef0c876e43353b34030">IsElementwiseUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a61c5b4e5dc224ef0c876e43353b34030 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab7318aa8adc0a8a3b6a1780cfc1f90b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aab7318aa8adc0a8a3b6a1780cfc1f90b">IsFakeQuantizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aab7318aa8adc0a8a3b6a1780cfc1f90b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53c7593d1aa26207eac5d5814a9d56dc inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">IsFloorSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a53c7593d1aa26207eac5d5814a9d56dc inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaf971dd9dffd6f6bc7e5a1ae6b6af5c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">IsFullyConnectedSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aeaf971dd9dffd6f6bc7e5a1ae6b6af5c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f51fda38409c3768a7bd28cedf3f075 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a2f51fda38409c3768a7bd28cedf3f075">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a2f51fda38409c3768a7bd28cedf3f075 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad29d99ecd719c640ed22dcf5c688c6a5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">IsInputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad29d99ecd719c640ed22dcf5c688c6a5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0813546a09bf2caba6794014d1960624 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0813546a09bf2caba6794014d1960624">IsInstanceNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0813546a09bf2caba6794014d1960624 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca4acda7ab553edfda828658d8f3882b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aca4acda7ab553edfda828658d8f3882b">IsL2NormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aca4acda7ab553edfda828658d8f3882b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fab6937a1010b5ed674b930b4f143cb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8fab6937a1010b5ed674b930b4f143cb">IsLogicalBinarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8fab6937a1010b5ed674b930b4f143cb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20134883695508a2192eecd403e7c44b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a20134883695508a2192eecd403e7c44b">IsLogicalUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a20134883695508a2192eecd403e7c44b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0380b797cb9932fb03067dbe2cdecfb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">IsLogSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa0380b797cb9932fb03067dbe2cdecfb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a862535721737220f62a49f14ff494dd5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a862535721737220f62a49f14ff494dd5">IsLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1137f204e3ac4cbe3183443fe3bd321">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a862535721737220f62a49f14ff494dd5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afef9436c86b37b973471f2ae546ac00a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#afef9436c86b37b973471f2ae546ac00a">IsMaximumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:afef9436c86b37b973471f2ae546ac00a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab268618580d4f53bf5e9b5a47dee3f6a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">IsMeanSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab268618580d4f53bf5e9b5a47dee3f6a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d25fabf725313fda40a41400155bafe inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9d25fabf725313fda40a41400155bafe">IsMemCopySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9d25fabf725313fda40a41400155bafe inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a334181d8098b943d03ccd820753ace75 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a334181d8098b943d03ccd820753ace75">IsMemImportSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a334181d8098b943d03ccd820753ace75 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9bbc383cac59d6f02d2ef7d2cc0076f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa9bbc383cac59d6f02d2ef7d2cc0076f">IsMergeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa9bbc383cac59d6f02d2ef7d2cc0076f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d0eafb3de560b3482f857b56b2b2116 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d0eafb3de560b3482f857b56b2b2116">IsMinimumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3d0eafb3de560b3482f857b56b2b2116 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a421e1f3865d99d52613003048342c49a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a421e1f3865d99d52613003048342c49a">IsMultiplicationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a421e1f3865d99d52613003048342c49a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a994c2065561141bf37fcd2ff7bb4af4d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">IsNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a994c2065561141bf37fcd2ff7bb4af4d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef3244c0ef64c8f2f352d21ce0c06985 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">IsOutputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aef3244c0ef64c8f2f352d21ce0c06985 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0534291adf9f3436ba331552eba29a43 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0534291adf9f3436ba331552eba29a43">IsPadSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0534291adf9f3436ba331552eba29a43 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d553495d9a94fa55588ae159d8bda30 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9d553495d9a94fa55588ae159d8bda30">IsPermuteSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9d553495d9a94fa55588ae159d8bda30 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa955675303d67b1d1fb51fb7f09d8c21 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">IsPooling2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa955675303d67b1d1fb51fb7f09d8c21 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5aec1c6fb4f73909a10f72f45815d2cb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a5aec1c6fb4f73909a10f72f45815d2cb">IsPooling3dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5aec1c6fb4f73909a10f72f45815d2cb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc1a598f2f572564818e3d343af93486 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adc1a598f2f572564818e3d343af93486">IsPreCompiledSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adc1a598f2f572564818e3d343af93486 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93cf81b28c4275a338f41c536a451158 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a93cf81b28c4275a338f41c536a451158">IsPreluSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:a93cf81b28c4275a338f41c536a451158 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2c7be6b84b04444e514f52f593b3df7 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad2c7be6b84b04444e514f52f593b3df7">IsQuantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad2c7be6b84b04444e514f52f593b3df7 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf54bcad228c0ac21f6735d31460cf31 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#adf54bcad228c0ac21f6735d31460cf31">IsQLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1137f204e3ac4cbe3183443fe3bd321">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:adf54bcad228c0ac21f6735d31460cf31 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1be52d9f968bfab069344756bf232c4 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af1be52d9f968bfab069344756bf232c4">IsQuantizedLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af1be52d9f968bfab069344756bf232c4 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a707638bc045d261dff4faaf4a2acc72b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a707638bc045d261dff4faaf4a2acc72b">IsRankSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:a707638bc045d261dff4faaf4a2acc72b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a917c126e64314263b8b5f7bca455ddfb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a917c126e64314263b8b5f7bca455ddfb">IsReduceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a917c126e64314263b8b5f7bca455ddfb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa02f01bbcb48c67f5b2efc4132ec5e86 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">IsReshapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa02f01bbcb48c67f5b2efc4132ec5e86 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d27a3fc6a7df0b68d80cb113aff8b6c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">IsResizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3d27a3fc6a7df0b68d80cb113aff8b6c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c6816950ad290155bde03b7fb31e160 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3c6816950ad290155bde03b7fb31e160">IsShapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3c6816950ad290155bde03b7fb31e160 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e14dafa85cfcd4a6b6b752284b51e63 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">IsSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0e14dafa85cfcd4a6b6b752284b51e63 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8385cf8227907904a6a86fac318fc099 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8385cf8227907904a6a86fac318fc099">IsSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8385cf8227907904a6a86fac318fc099 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3adfc31e079a970e028e537ec05fabf5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3adfc31e079a970e028e537ec05fabf5">IsSpaceToBatchNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3adfc31e079a970e028e537ec05fabf5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2af1e7da9490d29e569d271e16b0d5c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">IsSpaceToDepthSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab2af1e7da9490d29e569d271e16b0d5c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa746e752ce8874669ea549f8e50896da inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa746e752ce8874669ea549f8e50896da">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa746e752ce8874669ea549f8e50896da inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4609f1baf5fcd295951f3c8abdffd90 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">IsStackSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab4609f1baf5fcd295951f3c8abdffd90 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68a4c180fc48e266995db8596f6279d3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a68a4c180fc48e266995db8596f6279d3">IsStandInSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;inputs, const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>, const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a68a4c180fc48e266995db8596f6279d3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac054cb25099005eac854afb1511340f0 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac054cb25099005eac854afb1511340f0">IsStridedSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac054cb25099005eac854afb1511340f0 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6c947e4d4b25bc49d92d18d4ff26736 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">IsSubtractionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af6c947e4d4b25bc49d92d18d4ff26736 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c12a49b0d261836c11a57916e01805d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8c12a49b0d261836c11a57916e01805d">IsSwitchSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5c2243c4c3b723129082dd38daf0387f">output0</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a53e5afe9ffb176f1f3c98a4222ceb2b9">output1</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8c12a49b0d261836c11a57916e01805d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c69484f19ed650ad48b716719114e51 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0c69484f19ed650ad48b716719114e51">IsTransposeConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0c69484f19ed650ad48b716719114e51 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0189645f33641b280877a1b2f6ba9fee inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0189645f33641b280877a1b2f6ba9fee">IsTransposeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0189645f33641b280877a1b2f6ba9fee inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aceff0e3aa5ba49b0fdcfc66f2bd31b5c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aceff0e3aa5ba49b0fdcfc66f2bd31b5c">IsUnidirectionalSequenceLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa0c5f67ad67fcfdadb1f9a082b7ff28f">hiddenStateOutput</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad6e8cb5712ff6fe9e126b1018c8cba52">cellStateOutput</a>, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aceff0e3aa5ba49b0fdcfc66f2bd31b5c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_layer_support"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_layer_support')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td></tr>
<tr class="memitem:abbfb82bfc5144e893e11597c535325e4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abbfb82bfc5144e893e11597c535325e4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a6e7dc8639c4b2f0a93031afff5182735">IsActivationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:abbfb82bfc5144e893e11597c535325e4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0245e82d56b9ccea519bb87638f54dd5 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0245e82d56b9ccea519bb87638f54dd5">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ab5569e5b664498e011e8bd92cc3cc5b2">IsAdditionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a0245e82d56b9ccea519bb87638f54dd5 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07778306251b73c2fcc2690f53d3c0a6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a07778306251b73c2fcc2690f53d3c0a6">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsArgMinMaxSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a07778306251b73c2fcc2690f53d3c0a6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ff429620e7a9cbf4aef24cf20a4a5f3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9ff429620e7a9cbf4aef24cf20a4a5f3">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a49b7a701c6a0c569015309102221c702">IsBatchNormalizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a9ff429620e7a9cbf4aef24cf20a4a5f3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad75f03d6863882332cc2f2b287abbbd3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad75f03d6863882332cc2f2b287abbbd3">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#abb893c7adb7b64d0964bd244c46dd06b">IsBatchToSpaceNdSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ad75f03d6863882332cc2f2b287abbbd3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4045c2080dc7ef6e8f8d0e1b6bad9fa3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4045c2080dc7ef6e8f8d0e1b6bad9fa3">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsCastSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a4045c2080dc7ef6e8f8d0e1b6bad9fa3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a744d99b515d862cf26cffd09ebafb935 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a744d99b515d862cf26cffd09ebafb935">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsChannelShuffleSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a744d99b515d862cf26cffd09ebafb935 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6eaa372daca09fe433735dee17cb22e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa6eaa372daca09fe433735dee17cb22e">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsComparisonSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:aa6eaa372daca09fe433735dee17cb22e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7191bcc015006b847e7cfaf67886248 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac7191bcc015006b847e7cfaf67886248">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsConvertBf16ToFp32Supported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ac7191bcc015006b847e7cfaf67886248 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67a7761a0e1bbd1c3d1032a98f2d38bc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a67a7761a0e1bbd1c3d1032a98f2d38bc">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsConvertFp32ToBf16Supported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a67a7761a0e1bbd1c3d1032a98f2d38bc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ea8a528633c5c439658009a69d80ccc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1ea8a528633c5c439658009a69d80ccc">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#af9decd6720482e602efc6ac5ef7dab50">IsConvertFp16ToFp32Supported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a1ea8a528633c5c439658009a69d80ccc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa4180c8a75ba8672f7411965a27e9b0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aaa4180c8a75ba8672f7411965a27e9b0">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a080c11383c6a29b4295ae359cde5c19c">IsConvertFp32ToFp16Supported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aaa4180c8a75ba8672f7411965a27e9b0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05429b9f26e6ed08f726e6b3650a3649 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a05429b9f26e6ed08f726e6b3650a3649">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#aff785aa7c076b1d2f51f76fa0f0647e4">IsConvolution2dSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a05429b9f26e6ed08f726e6b3650a3649 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2544b1c2111668bdfab0d101f0172f4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa2544b1c2111668bdfab0d101f0172f4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsConvolution3dSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aa2544b1c2111668bdfab0d101f0172f4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fa0b52af55fbda42c443d746a7eae55 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2fa0b52af55fbda42c443d746a7eae55">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#aa6503439334e0a79181a51e084b0268f">IsDebugSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a2fa0b52af55fbda42c443d746a7eae55 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54b1a15299b6ef767bf9062814c7ddf4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a54b1a15299b6ef767bf9062814c7ddf4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsDepthToSpaceSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a54b1a15299b6ef767bf9062814c7ddf4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaf79549482a8da3a1aa66b63e0f6185 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#adaf79549482a8da3a1aa66b63e0f6185">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a87f06345ddd902d027eb8f792ca8cdb4">IsDepthwiseConvolutionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:adaf79549482a8da3a1aa66b63e0f6185 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6131fc509a3b977e4be140038f4b340 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa6131fc509a3b977e4be140038f4b340">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1b4b4304198668d3af8e9d0c40d9343d">IsDequantizeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aa6131fc509a3b977e4be140038f4b340 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87b73dc78e17f6e46959b96647e307d7 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a87b73dc78e17f6e46959b96647e307d7">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsDetectionPostProcessSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;boxEncodings</td></tr>
<tr class="separator:a87b73dc78e17f6e46959b96647e307d7 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a025d058bb4988abe332959df7b6339 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4a025d058bb4988abe332959df7b6339">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsDilatedDepthwiseConvolutionSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a4a025d058bb4988abe332959df7b6339 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6217dd4347013f2774bea2fccbd09946 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6217dd4347013f2774bea2fccbd09946">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a3378acd6bc867577ee4bf1657945f1b5">IsDivisionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a6217dd4347013f2774bea2fccbd09946 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54de65ca68a449efb5c3f6a8a2ae8435 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a54de65ca68a449efb5c3f6a8a2ae8435">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsElementwiseUnarySupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a54de65ca68a449efb5c3f6a8a2ae8435 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bb960c49da7e212382c391bbcbd086e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7bb960c49da7e212382c391bbcbd086e">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a4539c40ac5e36641f8ec10b88d658db1">IsFakeQuantizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a7bb960c49da7e212382c391bbcbd086e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36a9c661087e3dd010194954cc9440e3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a36a9c661087e3dd010194954cc9440e3">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsFillSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a36a9c661087e3dd010194954cc9440e3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac028dd3a450d20cb9b79504a39b1e67 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aac028dd3a450d20cb9b79504a39b1e67">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a2b6003e1d9226301e4badcac0b53c0ef">IsFloorSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aac028dd3a450d20cb9b79504a39b1e67 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae56a325b9bb486d713230205108bd00b inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae56a325b9bb486d713230205108bd00b">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a0a72d1f8a0d43ee551c7ac654f8816fa">IsFullyConnectedSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ae56a325b9bb486d713230205108bd00b inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abac21778f3f8d2fb27e91b2aeab86e22 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abac21778f3f8d2fb27e91b2aeab86e22">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsGatherSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:abac21778f3f8d2fb27e91b2aeab86e22 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdba9ae1763d47a728721692300c4ed9 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abdba9ae1763d47a728721692300c4ed9">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a3512b2f24950886288c5d01df1488f15">IsInputSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:abdba9ae1763d47a728721692300c4ed9 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add8a2b6a224fbf7642c209f181a91fd1 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#add8a2b6a224fbf7642c209f181a91fd1">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsInstanceNormalizationSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:add8a2b6a224fbf7642c209f181a91fd1 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afefd7eb943989c8624e1c71e4cc493f5 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afefd7eb943989c8624e1c71e4cc493f5">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a57862de9b939281d1fe0242a8f04ead9">IsL2NormalizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:afefd7eb943989c8624e1c71e4cc493f5 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b308d2b0fdd12b4c22fa440dbc3bcd8 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1b308d2b0fdd12b4c22fa440dbc3bcd8">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsLogicalBinarySupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a1b308d2b0fdd12b4c22fa440dbc3bcd8 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5acc9d9c41c562cef2dcd5fbdfe9ed84 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5acc9d9c41c562cef2dcd5fbdfe9ed84">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsLogicalUnarySupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a5acc9d9c41c562cef2dcd5fbdfe9ed84 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95ff87a02413a040c18f73a2c517da45 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a95ff87a02413a040c18f73a2c517da45">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsLogSoftmaxSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a95ff87a02413a040c18f73a2c517da45 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f89786fb9e3a7f6ddfa3128887a9ba2 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2f89786fb9e3a7f6ddfa3128887a9ba2">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a2c62d8aa5aeab36458f9ecfa5db1f785">IsLstmSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a2f89786fb9e3a7f6ddfa3128887a9ba2 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10fb131ac347a4a86396fd73da512855 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a10fb131ac347a4a86396fd73da512855">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a977729771e5ab4263e933f785fa532a6">IsMaximumSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a10fb131ac347a4a86396fd73da512855 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90d381d21aec23548b915dc17565488a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a90d381d21aec23548b915dc17565488a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a79698fa98352bffccc6723de84677680">IsMeanSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a90d381d21aec23548b915dc17565488a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a063c73dbb6d7d7cfcc19bc572af634b0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a063c73dbb6d7d7cfcc19bc572af634b0">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1401f21967557c5f70830e06f9b10d4d">IsMemCopySupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a063c73dbb6d7d7cfcc19bc572af634b0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1a5d034f682570fb8ec8e197a035224 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac1a5d034f682570fb8ec8e197a035224">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsMemImportSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ac1a5d034f682570fb8ec8e197a035224 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbe5cc2a6018742fd655fd9e3572cbca inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acbe5cc2a6018742fd655fd9e3572cbca">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a8c24c4caabe9282b927f8777d7ca993f">IsMergeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:acbe5cc2a6018742fd655fd9e3572cbca inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31befae0f455ccd4ac3aed83aacf5e6c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a31befae0f455ccd4ac3aed83aacf5e6c">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a29bdc2efd75bb437f4292dd9fcb5c89a">IsMinimumSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a31befae0f455ccd4ac3aed83aacf5e6c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a185b75d74619d4cc1b06f1398159a7f4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a185b75d74619d4cc1b06f1398159a7f4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a9624be7520f71d00bfb769d94e0b088b">IsMultiplicationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a185b75d74619d4cc1b06f1398159a7f4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaad9672268bc97b370d51f01d1fa7ce0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aaad9672268bc97b370d51f01d1fa7ce0">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a23d54c0b96b63178811174d5e7b2d328">IsNormalizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aaad9672268bc97b370d51f01d1fa7ce0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adde27ee8e4653b56429bd5730a6f6095 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#adde27ee8e4653b56429bd5730a6f6095">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a60699e7f86e142739ccddd43c20c4fc0">IsOutputSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a></td></tr>
<tr class="separator:adde27ee8e4653b56429bd5730a6f6095 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d34a50e394ad8d803dae6be24efb814 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3d34a50e394ad8d803dae6be24efb814">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ae467c9a579c8fb41427227a1c1e1cb4c">IsPadSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a3d34a50e394ad8d803dae6be24efb814 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a890ca8b50ff5f787405d3ad9f7fc986f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a890ca8b50ff5f787405d3ad9f7fc986f">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ab4c606b53ae4d03aec1fcfe537c757ef">IsPermuteSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a890ca8b50ff5f787405d3ad9f7fc986f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21cc91d3c76a03d575f2a06fad1ae6d4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a21cc91d3c76a03d575f2a06fad1ae6d4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#af4f2d40a67380e91bd7ed0c1bcc4658f">IsPooling2dSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a21cc91d3c76a03d575f2a06fad1ae6d4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85ccfcf8bdeb15d75ddb7aa3e476776c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a85ccfcf8bdeb15d75ddb7aa3e476776c">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsPooling3dSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a85ccfcf8bdeb15d75ddb7aa3e476776c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae41a7ef8d710306476e53efd99a75191 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae41a7ef8d710306476e53efd99a75191">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a3b4773564c3fd8c88e697ffe0afbe10d">IsPreCompiledSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ae41a7ef8d710306476e53efd99a75191 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefeec6b473f2d80d98cb5021ac5fc4e6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aefeec6b473f2d80d98cb5021ac5fc4e6">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a36d55a20000a7b50f7369c3ceeca46bd">IsPreluSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aefeec6b473f2d80d98cb5021ac5fc4e6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a025eae210dcaa001155b2df0e4d07b11 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a025eae210dcaa001155b2df0e4d07b11">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsQuantizeSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a025eae210dcaa001155b2df0e4d07b11 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af053939e81526d117f83f7ec78152a7a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af053939e81526d117f83f7ec78152a7a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsQLstmSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:af053939e81526d117f83f7ec78152a7a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8b407722edbb1ea0c7aa7aec17a042d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac8b407722edbb1ea0c7aa7aec17a042d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a237992b29706fe1c1653dae916ea67ef">IsQuantizedLstmSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ac8b407722edbb1ea0c7aa7aec17a042d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf9b66b692a63f0625c6e45d9fb5c105 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abf9b66b692a63f0625c6e45d9fb5c105">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsRankSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:abf9b66b692a63f0625c6e45d9fb5c105 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a6ee39e062cf27c564cfdf08c498d4a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2a6ee39e062cf27c564cfdf08c498d4a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#aefa2e47c23dc8faac4b7edb12b5d1c2c">IsReduceSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a2a6ee39e062cf27c564cfdf08c498d4a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dd52d2ba36af39889837294e7df94bc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3dd52d2ba36af39889837294e7df94bc">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#af5014cbc003abcf201d4372b0012734c">IsReshapeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a3dd52d2ba36af39889837294e7df94bc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cf873c61290e73175071d43ae78429a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5cf873c61290e73175071d43ae78429a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a0c70182e7d26983945ae75229d607cce">IsResizeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a5cf873c61290e73175071d43ae78429a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab424d3a0345c194e7f2fed30deddd6a1 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab424d3a0345c194e7f2fed30deddd6a1">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsShapeSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ab424d3a0345c194e7f2fed30deddd6a1 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b3b10fbfed1ed56496f64dc3db160f8 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1b3b10fbfed1ed56496f64dc3db160f8">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsSliceSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a1b3b10fbfed1ed56496f64dc3db160f8 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a814bc47dde60bd56fb3a1311586bedd3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a814bc47dde60bd56fb3a1311586bedd3">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a242f6c2f0376aaacd7d65a6f1498dea9">IsSoftmaxSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a814bc47dde60bd56fb3a1311586bedd3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e6a14603841845cf422e2483393acfd inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6e6a14603841845cf422e2483393acfd">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a55f4c243c58ee7a084f4a674d3c69948">IsSpaceToBatchNdSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a6e6a14603841845cf422e2483393acfd inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05a52251295d02cb31ac263adeba109c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a05a52251295d02cb31ac263adeba109c">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a32e51e4810a549b4a15d59ba73c64d2c">IsSpaceToDepthSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a05a52251295d02cb31ac263adeba109c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f65ee22b9d2e3a63f94ee82ba0b3733 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3f65ee22b9d2e3a63f94ee82ba0b3733">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#adf1e16300483fadf9fd19299ca8a67c4">IsSplitterSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a3f65ee22b9d2e3a63f94ee82ba0b3733 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9ff7aaabe1ac6b8accc56bd86212732 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af9ff7aaabe1ac6b8accc56bd86212732">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1a74a4ecd0f25e6031ef05210a0cfe51">IsSubtractionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:af9ff7aaabe1ac6b8accc56bd86212732 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fc5f400a7a8a6c3a9db11f812caa5f0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1fc5f400a7a8a6c3a9db11f812caa5f0">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ae8a3ee5f60ae5ae2df15626eaf727ed0">IsSwitchSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a1fc5f400a7a8a6c3a9db11f812caa5f0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac76fb379b8c1b6484e5afae7761c36ec inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac76fb379b8c1b6484e5afae7761c36ec">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ac6cc8e0bd35d229486fe6d844d88e0d4">IsTransposeConvolution2dSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ac76fb379b8c1b6484e5afae7761c36ec inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a292d17b3d4580023e03f3a8de66b2f52 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a292d17b3d4580023e03f3a8de66b2f52">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsTransposeSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a292d17b3d4580023e03f3a8de66b2f52 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec7b3875928abd02b3351bc34bd9bc38 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec7b3875928abd02b3351bc34bd9bc38">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsUnidirectionalSequenceLstmSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aec7b3875928abd02b3351bc34bd9bc38 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_attribs_classarmnn_1_1_i_layer_support"><td colspan="2" onclick="javascript:toggleInherit('pub_attribs_classarmnn_1_1_i_layer_support')"><img src="closed.png" alt="-"/>&#160;Public Attributes inherited from <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td></tr>
<tr class="memitem:a270213ba0d973536f85375d4f839b697 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a></td></tr>
<tr class="separator:a270213ba0d973536f85375d4f839b697 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a859feaa966620ae0ea88abf5226f2d04 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a></td></tr>
<tr class="separator:a859feaa966620ae0ea88abf5226f2d04 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac75f9a02b051716a0cc1cc0818dfe454 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ac75f9a02b051716a0cc1cc0818dfe454 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab82416560ced17268c6ba4443a3aac5e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a></td></tr>
<tr class="separator:ab82416560ced17268c6ba4443a3aac5e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae84bf10ef48c058969781b1b6a409e3e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae84bf10ef48c058969781b1b6a409e3e">output</a></td></tr>
<tr class="separator:ae84bf10ef48c058969781b1b6a409e3e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65adc68847fa1162957c412061d433c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae65adc68847fa1162957c412061d433c">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ae65adc68847fa1162957c412061d433c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e5d6597e95614c4736b8bb9c5044653 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5e5d6597e95614c4736b8bb9c5044653">descriptor</a></td></tr>
<tr class="separator:a5e5d6597e95614c4736b8bb9c5044653 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa6f9f63e1cd44519053cb463315260a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aaa6f9f63e1cd44519053cb463315260a">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aaa6f9f63e1cd44519053cb463315260a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a895a8451e0799b95d65caf7ffe0a32d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a></td></tr>
<tr class="separator:a895a8451e0799b95d65caf7ffe0a32d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a903053b422754682265fba0c03d94a52 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a></td></tr>
<tr class="separator:a903053b422754682265fba0c03d94a52 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83a99de40f6bffaa36f0333d04690b2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a></td></tr>
<tr class="separator:a83a99de40f6bffaa36f0333d04690b2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5cccb3233f5eff2119e8acc80cec209 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a></td></tr>
<tr class="separator:ab5cccb3233f5eff2119e8acc80cec209 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dd4d7e0f9ef6a222d4485824e3c0a56 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8dd4d7e0f9ef6a222d4485824e3c0a56">descriptor</a></td></tr>
<tr class="separator:a8dd4d7e0f9ef6a222d4485824e3c0a56 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20b9a294f37b4775bc1fabbbd63eb120 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a20b9a294f37b4775bc1fabbbd63eb120">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a20b9a294f37b4775bc1fabbbd63eb120 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac839b39c94dd578e651f516f43c13d2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac839b39c94dd578e651f516f43c13d2a">descriptor</a></td></tr>
<tr class="separator:ac839b39c94dd578e651f516f43c13d2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc86745c8b6d5363bc2646244c67a351 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abc86745c8b6d5363bc2646244c67a351">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:abc86745c8b6d5363bc2646244c67a351 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29ad9d5b956606cb36fd58a434cc2e23 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a29ad9d5b956606cb36fd58a434cc2e23">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a29ad9d5b956606cb36fd58a434cc2e23 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41ded06f4f66acf111aedf45a93cbe15 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a41ded06f4f66acf111aedf45a93cbe15">descriptor</a></td></tr>
<tr class="separator:a41ded06f4f66acf111aedf45a93cbe15 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e9bc16a6e56f65862b22c90306f6e82 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2e9bc16a6e56f65862b22c90306f6e82">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a2e9bc16a6e56f65862b22c90306f6e82 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9cacb12fe0d3a0a6d6cb108f8a65487 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab9cacb12fe0d3a0a6d6cb108f8a65487">descriptor</a></td></tr>
<tr class="separator:ab9cacb12fe0d3a0a6d6cb108f8a65487 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dc09e407b409b429f1c79d5bed8fd90 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8dc09e407b409b429f1c79d5bed8fd90">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a8dc09e407b409b429f1c79d5bed8fd90 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57dd2c000057de48849f985419021a39 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abbfb82bfc5144e893e11597c535325e4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a757df85e956e425c1a082d35a98ca4a9">IsConcatSupported</a>(const std <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a57dd2c000057de48849f985419021a39">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a57dd2c000057de48849f985419021a39 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7f4c641d6fbd044a923ec4d869f1ce5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae7f4c641d6fbd044a923ec4d869f1ce5">descriptor</a></td></tr>
<tr class="separator:ae7f4c641d6fbd044a923ec4d869f1ce5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a631f893f44415523924016ed3f54a661 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a></td></tr>
<tr class="separator:a631f893f44415523924016ed3f54a661 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71cf13fc7f7aeac054919e0c6dcab52e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a></td></tr>
<tr class="separator:a71cf13fc7f7aeac054919e0c6dcab52e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9779892a1f4195b2a3e81d0013b42657 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9779892a1f4195b2a3e81d0013b42657">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a9779892a1f4195b2a3e81d0013b42657 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f5fdd0c0139292c1abc64114844d1f4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7f5fdd0c0139292c1abc64114844d1f4">descriptor</a></td></tr>
<tr class="separator:a7f5fdd0c0139292c1abc64114844d1f4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78f86eb2582e7c771b9bd0c6ce50faac inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a78f86eb2582e7c771b9bd0c6ce50faac">weights</a></td></tr>
<tr class="separator:a78f86eb2582e7c771b9bd0c6ce50faac inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65b1330e0be2c2a52f65cbfb193c872 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae65b1330e0be2c2a52f65cbfb193c872">biases</a></td></tr>
<tr class="separator:ae65b1330e0be2c2a52f65cbfb193c872 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad75429b6fbe944b033b5500e30f8d1f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aad75429b6fbe944b033b5500e30f8d1f">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aad75429b6fbe944b033b5500e30f8d1f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba6f06f1c1fecfbf4aace221f43e3294 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aba6f06f1c1fecfbf4aace221f43e3294">descriptor</a></td></tr>
<tr class="separator:aba6f06f1c1fecfbf4aace221f43e3294 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfa7d2b012931907e00b5b309adc53cd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acfa7d2b012931907e00b5b309adc53cd">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:acfa7d2b012931907e00b5b309adc53cd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a851286140a843c9e576fdd0da5323397 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a851286140a843c9e576fdd0da5323397">descriptor</a></td></tr>
<tr class="separator:a851286140a843c9e576fdd0da5323397 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b02295b42222ccd14fa4e525b3b209b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2b02295b42222ccd14fa4e525b3b209b">weights</a></td></tr>
<tr class="separator:a2b02295b42222ccd14fa4e525b3b209b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a293d81775f1cf5fc4212960d93f2e663 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a293d81775f1cf5fc4212960d93f2e663">biases</a></td></tr>
<tr class="separator:a293d81775f1cf5fc4212960d93f2e663 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a150b84957a8a590ecad5e8b7aa3419c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a150b84957a8a590ecad5e8b7aa3419c6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a150b84957a8a590ecad5e8b7aa3419c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97cbe8ac8df2e213185599d693079acf inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a97cbe8ac8df2e213185599d693079acf">scores</a></td></tr>
<tr class="separator:a97cbe8ac8df2e213185599d693079acf inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1e19982da8ec2840ca14748c2d8522c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1e19982da8ec2840ca14748c2d8522c">anchors</a></td></tr>
<tr class="separator:ae1e19982da8ec2840ca14748c2d8522c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d0c2ca9c78e81a5e9e0f3db51934782 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d0c2ca9c78e81a5e9e0f3db51934782">detectionBoxes</a></td></tr>
<tr class="separator:a6d0c2ca9c78e81a5e9e0f3db51934782 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56d52f01c9d80f3710ddace11e534434 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a56d52f01c9d80f3710ddace11e534434">detectionClasses</a></td></tr>
<tr class="separator:a56d52f01c9d80f3710ddace11e534434 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8776b306c349e20905e7ae17255b395 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac8776b306c349e20905e7ae17255b395">detectionScores</a></td></tr>
<tr class="separator:ac8776b306c349e20905e7ae17255b395 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b204a7fda471668ab54dc967c5a7917 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3b204a7fda471668ab54dc967c5a7917">numDetections</a></td></tr>
<tr class="separator:a3b204a7fda471668ab54dc967c5a7917 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a730ea10711ec9b130de59852b061d3bd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a730ea10711ec9b130de59852b061d3bd">descriptor</a></td></tr>
<tr class="separator:a730ea10711ec9b130de59852b061d3bd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd1d3d219373a3b773be1bd29a03840f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afd1d3d219373a3b773be1bd29a03840f">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const =0</td></tr>
<tr class="separator:afd1d3d219373a3b773be1bd29a03840f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75e6a2fd11b81665527cef162e51d995 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a75e6a2fd11b81665527cef162e51d995">descriptor</a></td></tr>
<tr class="separator:a75e6a2fd11b81665527cef162e51d995 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0882060fd5b0aa781212b94f73dfe63c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0882060fd5b0aa781212b94f73dfe63c">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a0882060fd5b0aa781212b94f73dfe63c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af044b1f8e48ba25b3a7573aa9a67d10c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af044b1f8e48ba25b3a7573aa9a67d10c">descriptor</a></td></tr>
<tr class="separator:af044b1f8e48ba25b3a7573aa9a67d10c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac48e5137a5a809909297c5ae3b882ea6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac48e5137a5a809909297c5ae3b882ea6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ac48e5137a5a809909297c5ae3b882ea6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad57391891b17ad49107ae84c8ee5a69e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad57391891b17ad49107ae84c8ee5a69e">descriptor</a></td></tr>
<tr class="separator:ad57391891b17ad49107ae84c8ee5a69e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58540f633cf1bab7b2bfea01169383c4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a58540f633cf1bab7b2bfea01169383c4">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a58540f633cf1bab7b2bfea01169383c4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98ace67e4b8ff91da426a011e7b1630b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a98ace67e4b8ff91da426a011e7b1630b">weights</a></td></tr>
<tr class="separator:a98ace67e4b8ff91da426a011e7b1630b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada7c27be0ec37a4c98459164e00cd618 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ada7c27be0ec37a4c98459164e00cd618">biases</a></td></tr>
<tr class="separator:ada7c27be0ec37a4c98459164e00cd618 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85d6ba46a89488436d0fff881f2370ba inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a85d6ba46a89488436d0fff881f2370ba">descriptor</a></td></tr>
<tr class="separator:a85d6ba46a89488436d0fff881f2370ba inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a389e8924fffa57dd73ffead6fde9d1a9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a389e8924fffa57dd73ffead6fde9d1a9">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a389e8924fffa57dd73ffead6fde9d1a9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10b6c65d39b282401448aff724037aae inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a10b6c65d39b282401448aff724037aae">descriptor</a></td></tr>
<tr class="separator:a10b6c65d39b282401448aff724037aae inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a435bee1e83fa5d5fb2753525f6ff5162 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a435bee1e83fa5d5fb2753525f6ff5162">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a435bee1e83fa5d5fb2753525f6ff5162 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81b3c2919b174e2d6d4a2217e14858c9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a81b3c2919b174e2d6d4a2217e14858c9">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a81b3c2919b174e2d6d4a2217e14858c9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a939cab6010bf54769aadbbbe1a2ccb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7a939cab6010bf54769aadbbbe1a2ccb">descriptor</a></td></tr>
<tr class="separator:a7a939cab6010bf54769aadbbbe1a2ccb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa459040aa42210d103192b224b6b5d79 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa459040aa42210d103192b224b6b5d79">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa459040aa42210d103192b224b6b5d79 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac53977992deddc04c00092e967aaf0d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac53977992deddc04c00092e967aaf0d7">descriptor</a></td></tr>
<tr class="separator:ac53977992deddc04c00092e967aaf0d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31130b6d97bbc90b428a410a03a3bf06 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a31130b6d97bbc90b428a410a03a3bf06">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a31130b6d97bbc90b428a410a03a3bf06 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bee7ba1901580222cded96f938ac8df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3bee7ba1901580222cded96f938ac8df">descriptor</a></td></tr>
<tr class="separator:a3bee7ba1901580222cded96f938ac8df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af20317b332f276b5c4c4ff755fe61016 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af20317b332f276b5c4c4ff755fe61016">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:af20317b332f276b5c4c4ff755fe61016 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c38b1f3b73fb1b67b0928c9cd390a3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad7c38b1f3b73fb1b67b0928c9cd390a3">descriptor</a></td></tr>
<tr class="separator:ad7c38b1f3b73fb1b67b0928c9cd390a3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e509e880a10237c69d74ca18a276706 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9e509e880a10237c69d74ca18a276706">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a9e509e880a10237c69d74ca18a276706 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a01de4e3851a25f2df77897fb8f7083 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a></td></tr>
<tr class="separator:a5a01de4e3851a25f2df77897fb8f7083 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec04a02758804219fb461623464a8e96 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a></td></tr>
<tr class="separator:aec04a02758804219fb461623464a8e96 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f6f59c4e91c7c37d9a119d615093ed3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a></td></tr>
<tr class="separator:a4f6f59c4e91c7c37d9a119d615093ed3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1137f204e3ac4cbe3183443fe3bd321 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1137f204e3ac4cbe3183443fe3bd321">outputStateOut</a></td></tr>
<tr class="separator:ae1137f204e3ac4cbe3183443fe3bd321 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f64b4bd88c5b89212af9a3e68a613b0 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">cellStateOut</a></td></tr>
<tr class="separator:a4f64b4bd88c5b89212af9a3e68a613b0 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa930d13649875f8801e323a212445a16 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa930d13649875f8801e323a212445a16">output</a></td></tr>
<tr class="separator:aa930d13649875f8801e323a212445a16 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd4dba56c2ef1c650c48c525cb56f5c0 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acd4dba56c2ef1c650c48c525cb56f5c0">descriptor</a></td></tr>
<tr class="separator:acd4dba56c2ef1c650c48c525cb56f5c0 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca7a974c8803242968a8d6540275264a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a></td></tr>
<tr class="separator:aca7a974c8803242968a8d6540275264a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52c5081cfb456749136ad9a392f9ea3a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a52c5081cfb456749136ad9a392f9ea3a">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a52c5081cfb456749136ad9a392f9ea3a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f04d51318166c899ede06bb45850bbe inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9f04d51318166c899ede06bb45850bbe">descriptor</a></td></tr>
<tr class="separator:a9f04d51318166c899ede06bb45850bbe inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab97ebc2c58cc8f57e52a54eb1413c358 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab97ebc2c58cc8f57e52a54eb1413c358">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab97ebc2c58cc8f57e52a54eb1413c358 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a076bc5e2bfb7bf8fb352b4b8fb8e3c2e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a076bc5e2bfb7bf8fb352b4b8fb8e3c2e">ouput</a></td></tr>
<tr class="separator:a076bc5e2bfb7bf8fb352b4b8fb8e3c2e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcd0960fc6f0018d8232b054dab379d9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afcd0960fc6f0018d8232b054dab379d9">descriptor</a></td></tr>
<tr class="separator:afcd0960fc6f0018d8232b054dab379d9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35711aefa941f96db71b995722aa39eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a35711aefa941f96db71b995722aa39eb">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a35711aefa941f96db71b995722aa39eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ce43368e08d80c272b521c463f11e7b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9ce43368e08d80c272b521c463f11e7b">descriptor</a></td></tr>
<tr class="separator:a9ce43368e08d80c272b521c463f11e7b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9befa35b9485c78ddba2f9e710eed05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad9befa35b9485c78ddba2f9e710eed05">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ad9befa35b9485c78ddba2f9e710eed05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9617f94c779168d6208c2732d50b701e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9617f94c779168d6208c2732d50b701e">descriptor</a></td></tr>
<tr class="separator:a9617f94c779168d6208c2732d50b701e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa844a2559a5c5a13520b3c5f4dd21ba3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa844a2559a5c5a13520b3c5f4dd21ba3">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa844a2559a5c5a13520b3c5f4dd21ba3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ffc76ae21b0e36f386a580678379708 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5ffc76ae21b0e36f386a580678379708">descriptor</a></td></tr>
<tr class="separator:a5ffc76ae21b0e36f386a580678379708 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fa61de2e37218b13b6065132be433eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6fa61de2e37218b13b6065132be433eb">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a6fa61de2e37218b13b6065132be433eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2de917e7d1e41ef25c94aa699ce7019 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad2de917e7d1e41ef25c94aa699ce7019">descriptor</a></td></tr>
<tr class="separator:ad2de917e7d1e41ef25c94aa699ce7019 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d1114dd734cd87b78a87148e3eae2d3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4d1114dd734cd87b78a87148e3eae2d3">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a4d1114dd734cd87b78a87148e3eae2d3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bea23d979ad4bfdfda7f2f96be55ca7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0bea23d979ad4bfdfda7f2f96be55ca7">descriptor</a></td></tr>
<tr class="separator:a0bea23d979ad4bfdfda7f2f96be55ca7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e0dcfaa4069d35d315fbdcc8a0ec2ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2e0dcfaa4069d35d315fbdcc8a0ec2ff">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a2e0dcfaa4069d35d315fbdcc8a0ec2ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a218e2ebb5babb8323688906b8997eafb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a></td></tr>
<tr class="separator:a218e2ebb5babb8323688906b8997eafb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b09834cc88bb4156e291c37bd2434ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a></td></tr>
<tr class="separator:a5b09834cc88bb4156e291c37bd2434ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5e0e3fb8a59107ac3366028a057db12 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a></td></tr>
<tr class="separator:ad5e0e3fb8a59107ac3366028a057db12 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff8d75a6c22d819b2f00d22f7a8df868 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aff8d75a6c22d819b2f00d22f7a8df868">outputStateOut</a></td></tr>
<tr class="separator:aff8d75a6c22d819b2f00d22f7a8df868 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7369eda0b60ec397afbecbc1f1cc686e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7369eda0b60ec397afbecbc1f1cc686e">cellStateOut</a></td></tr>
<tr class="separator:a7369eda0b60ec397afbecbc1f1cc686e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc8db3bfb13b523f94d8df0917940ba9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afc8db3bfb13b523f94d8df0917940ba9">output</a></td></tr>
<tr class="separator:afc8db3bfb13b523f94d8df0917940ba9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae88892fd128211c5c66f6b875f53e634 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae88892fd128211c5c66f6b875f53e634">descriptor</a></td></tr>
<tr class="separator:ae88892fd128211c5c66f6b875f53e634 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a671c5ab0aaf443061ecd29858eb0c27e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a671c5ab0aaf443061ecd29858eb0c27e">paramsInfo</a></td></tr>
<tr class="separator:a671c5ab0aaf443061ecd29858eb0c27e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ae68a93565a313b372c3454a281a30e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9ae68a93565a313b372c3454a281a30e">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a9ae68a93565a313b372c3454a281a30e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad996e1751e73c950760b7f2372a5f1b7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad996e1751e73c950760b7f2372a5f1b7">previousCellStateIn</a></td></tr>
<tr class="separator:ad996e1751e73c950760b7f2372a5f1b7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee968b67d55019bc399fd9305382c946 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aee968b67d55019bc399fd9305382c946">previousOutputIn</a></td></tr>
<tr class="separator:aee968b67d55019bc399fd9305382c946 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab23b6d2020ea2dc447e70ae7a899b05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aab23b6d2020ea2dc447e70ae7a899b05">cellStateOut</a></td></tr>
<tr class="separator:aab23b6d2020ea2dc447e70ae7a899b05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c883c1fe0ab4c6e0bb0cf1973e7bb86 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9c883c1fe0ab4c6e0bb0cf1973e7bb86">output</a></td></tr>
<tr class="separator:a9c883c1fe0ab4c6e0bb0cf1973e7bb86 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6538a383d19e83aabba1aa625f608a8b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6538a383d19e83aabba1aa625f608a8b">paramsInfo</a></td></tr>
<tr class="separator:a6538a383d19e83aabba1aa625f608a8b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c3d94577f10865f35c9e8a75b456e29 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6c3d94577f10865f35c9e8a75b456e29">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a6c3d94577f10865f35c9e8a75b456e29 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a286560bd886ad2694d524d82bc6691 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3a286560bd886ad2694d524d82bc6691">descriptor</a></td></tr>
<tr class="separator:a3a286560bd886ad2694d524d82bc6691 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22417051704e7e34a77b2aa84f81f447 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a22417051704e7e34a77b2aa84f81f447">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a22417051704e7e34a77b2aa84f81f447 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8925984b66dd710f605a0787ec21a98c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8925984b66dd710f605a0787ec21a98c">descriptor</a></td></tr>
<tr class="separator:a8925984b66dd710f605a0787ec21a98c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab56e5339be7133a62ac75257eb9ed457 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab56e5339be7133a62ac75257eb9ed457">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab56e5339be7133a62ac75257eb9ed457 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad80fdfd6b8520aad7f3b4e642770bb76 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad80fdfd6b8520aad7f3b4e642770bb76">descriptor</a></td></tr>
<tr class="separator:ad80fdfd6b8520aad7f3b4e642770bb76 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa073ddc855c3a77e9abc6e2bcf385682 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa073ddc855c3a77e9abc6e2bcf385682">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa073ddc855c3a77e9abc6e2bcf385682 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3637b7ecf8b3ac293667439e68ca5e05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3637b7ecf8b3ac293667439e68ca5e05">descriptor</a></td></tr>
<tr class="separator:a3637b7ecf8b3ac293667439e68ca5e05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec1ad6717dc6152700644e22663ae529 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec1ad6717dc6152700644e22663ae529">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aec1ad6717dc6152700644e22663ae529 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052da8f6981ac7c0983b15d6fd255b67 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a052da8f6981ac7c0983b15d6fd255b67">descriptor</a></td></tr>
<tr class="separator:a052da8f6981ac7c0983b15d6fd255b67 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec2b0f9142a47b16e695d1e4c43b78c5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec2b0f9142a47b16e695d1e4c43b78c5">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aec2b0f9142a47b16e695d1e4c43b78c5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99573c8d31f135ab27d42a2026b19dcd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a99573c8d31f135ab27d42a2026b19dcd">descriptor</a></td></tr>
<tr class="separator:a99573c8d31f135ab27d42a2026b19dcd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3231c01123af9b82028f8d82295f4df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad3231c01123af9b82028f8d82295f4df">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ad3231c01123af9b82028f8d82295f4df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33fc1676a91f2295365e18b00311a7f1 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a33fc1676a91f2295365e18b00311a7f1">descriptor</a></td></tr>
<tr class="separator:a33fc1676a91f2295365e18b00311a7f1 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab39984d1114858f962d5d770640fa5c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab39984d1114858f962d5d770640fa5c6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab39984d1114858f962d5d770640fa5c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a311602de6b1e53b4feb3b8a37a433f44 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a></td></tr>
<tr class="separator:a311602de6b1e53b4feb3b8a37a433f44 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9973ef4f89338f01171369b4fb64cf93 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &gt; const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9973ef4f89338f01171369b4fb64cf93">descriptor</a></td></tr>
<tr class="separator:a9973ef4f89338f01171369b4fb64cf93 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6be296df135df66f2a0f81ef6696bcc inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &gt; const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab6be296df135df66f2a0f81ef6696bcc">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab6be296df135df66f2a0f81ef6696bcc inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab654ce5248a347e0b5e5a22ec181a5f5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abbfb82bfc5144e893e11597c535325e4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a10e8442be2b8596afd5770e98b904caa">IsStackSupported</a>(const std <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abbfb82bfc5144e893e11597c535325e4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsStandInSupported(const std const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab654ce5248a347e0b5e5a22ec181a5f5">output</a></td></tr>
<tr class="separator:ab654ce5248a347e0b5e5a22ec181a5f5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe3da148086f5482f5cec6928c40dc30 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abbfb82bfc5144e893e11597c535325e4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a10e8442be2b8596afd5770e98b904caa">IsStackSupported</a>(const std <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abbfb82bfc5144e893e11597c535325e4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsStandInSupported(const std const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abe3da148086f5482f5cec6928c40dc30">descriptor</a></td></tr>
<tr class="separator:abe3da148086f5482f5cec6928c40dc30 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a39cd9dba8140c10f06b348384bd29a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abbfb82bfc5144e893e11597c535325e4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a10e8442be2b8596afd5770e98b904caa">IsStackSupported</a>(const std <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abbfb82bfc5144e893e11597c535325e4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac65dd8d3d726c22b135ffdaaf0fac33e">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;22.11&quot;) virtual bool IsStandInSupported(const std const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9a39cd9dba8140c10f06b348384bd29a">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a9a39cd9dba8140c10f06b348384bd29a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c2243c4c3b723129082dd38daf0387f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5c2243c4c3b723129082dd38daf0387f">output0</a></td></tr>
<tr class="separator:a5c2243c4c3b723129082dd38daf0387f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53e5afe9ffb176f1f3c98a4222ceb2b9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a53e5afe9ffb176f1f3c98a4222ceb2b9">output1</a></td></tr>
<tr class="separator:a53e5afe9ffb176f1f3c98a4222ceb2b9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3a9012fc339e9bfc9e5e3d84805653e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa3a9012fc339e9bfc9e5e3d84805653e">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa3a9012fc339e9bfc9e5e3d84805653e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed34ce46eb939133d71d4f47ee39df22 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aed34ce46eb939133d71d4f47ee39df22">descriptor</a></td></tr>
<tr class="separator:aed34ce46eb939133d71d4f47ee39df22 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc7d09b6ee3bd1d5d07ff8b2f3a16ec3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afc7d09b6ee3bd1d5d07ff8b2f3a16ec3">weights</a></td></tr>
<tr class="separator:afc7d09b6ee3bd1d5d07ff8b2f3a16ec3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2daef2df1f67976f598368fe21ac9154 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2daef2df1f67976f598368fe21ac9154">biases</a></td></tr>
<tr class="separator:a2daef2df1f67976f598368fe21ac9154 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f103a30a0d120c7984c507ceb20b2d6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2f103a30a0d120c7984c507ceb20b2d6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a2f103a30a0d120c7984c507ceb20b2d6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cbc317bc6d7c12e54f852cd20636840 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7cbc317bc6d7c12e54f852cd20636840">descriptor</a></td></tr>
<tr class="separator:a7cbc317bc6d7c12e54f852cd20636840 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0046a9c32fc1066cc22eaaee8876d41 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac0046a9c32fc1066cc22eaaee8876d41">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ac0046a9c32fc1066cc22eaaee8876d41 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8126d22427f09de91bf8cf83fe1d47a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab8126d22427f09de91bf8cf83fe1d47a">output</a></td></tr>
<tr class="separator:ab8126d22427f09de91bf8cf83fe1d47a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0c5f67ad67fcfdadb1f9a082b7ff28f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa0c5f67ad67fcfdadb1f9a082b7ff28f">hiddenStateOutput</a></td></tr>
<tr class="separator:aa0c5f67ad67fcfdadb1f9a082b7ff28f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6e8cb5712ff6fe9e126b1018c8cba52 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad6e8cb5712ff6fe9e126b1018c8cba52">cellStateOutput</a></td></tr>
<tr class="separator:ad6e8cb5712ff6fe9e126b1018c8cba52 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3719af00d34b86fe5f1993b33025e87 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af3719af00d34b86fe5f1993b33025e87">descriptor</a></td></tr>
<tr class="separator:af3719af00d34b86fe5f1993b33025e87 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26e7288e9dbda87654dadee78af080a8 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a26e7288e9dbda87654dadee78af080a8">paramsInfo</a></td></tr>
<tr class="separator:a26e7288e9dbda87654dadee78af080a8 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1ce5c4d2e0e4a012f6f2268e711d315 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af1ce5c4d2e0e4a012f6f2268e711d315">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:af1ce5c4d2e0e4a012f6f2268e711d315 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_layer_support"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_layer_support')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td></tr>
<tr class="memitem:aab2a487bc88047443d8a0f87c3c40b8d inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aab2a487bc88047443d8a0f87c3c40b8d">ILayerSupport</a> ()</td></tr>
<tr class="separator:aab2a487bc88047443d8a0f87c3c40b8d inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e7f4f28576904804cd759e49173beeb inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9e7f4f28576904804cd759e49173beeb">~ILayerSupport</a> ()</td></tr>
<tr class="separator:a9e7f4f28576904804cd759e49173beeb inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00014">14</a> of file <a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="adcaa3eb3d4e1bf48a235b97170dccd15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcaa3eb3d4e1bf48a235b97170dccd15">&#9670;&nbsp;</a></span>ClLayerSupport() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>modelContextPtr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00169">169</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    : m_ModelContextPtr(modelContextPtr)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac1dc1384ae65a68453cd3f5fd4a6adbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1dc1384ae65a68453cd3f5fd4a6adbd">&#9670;&nbsp;</a></span>ClLayerSupport() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00174">174</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    : m_ModelContextPtr(<span class="keyword">nullptr</span>)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a35c41b0cdf5faf11fb39554c269e7f9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35c41b0cdf5faf11fb39554c269e7f9b">&#9670;&nbsp;</a></span>~ClLayerSupport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">19</a> of file <a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a>.</p>

<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00404">ILayerSupport::alpha</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport::beta</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport::biases</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport::cellStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport::cellStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::descriptor</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport::gamma</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00588">ClLayerSupport::IsActivationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00600">ClLayerSupport::IsAdditionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00613">ClLayerSupport::IsArgMinMaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00626">ClLayerSupport::IsBatchNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00647">ClLayerSupport::IsBatchToSpaceNdSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00659">ClLayerSupport::IsCastSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00669">ClLayerSupport::IsChannelShuffleSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00681">ClLayerSupport::IsComparisonSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00695">ClLayerSupport::IsConcatSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00736">ClLayerSupport::IsConstantSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00744">ClLayerSupport::IsConvertFp16ToFp32Supported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00754">ClLayerSupport::IsConvertFp32ToFp16Supported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00764">ClLayerSupport::IsConvolution2dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00797">ClLayerSupport::IsConvolution3dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00840">ClLayerSupport::IsDepthToSpaceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00852">ClLayerSupport::IsDepthwiseConvolutionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00830">ClLayerSupport::IsDequantizeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00869">ClLayerSupport::IsDilatedDepthwiseConvolutionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00887">ClLayerSupport::IsDivisionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00900">ClLayerSupport::IsElementwiseUnarySupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00947">ClLayerSupport::IsFillSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00959">ClLayerSupport::IsFloorSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00969">ClLayerSupport::IsFullyConnectedSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00986">ClLayerSupport::IsGatherSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01000">ClLayerSupport::IsInputSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01006">ClLayerSupport::IsInstanceNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01018">ClLayerSupport::IsL2NormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01030">ClLayerSupport::IsLogicalBinarySupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01058">ClLayerSupport::IsLogSoftmaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01070">ClLayerSupport::IsLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01094">ClLayerSupport::IsMaximumSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01106">ClLayerSupport::IsMeanSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01118">ClLayerSupport::IsMinimumSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01130">ClLayerSupport::IsMultiplicationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01143">ClLayerSupport::IsNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01151">ClLayerSupport::IsOutputSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01157">ClLayerSupport::IsPadSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01169">ClLayerSupport::IsPermuteSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01177">ClLayerSupport::IsPooling2dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01185">ClLayerSupport::IsPreluSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01193">ClLayerSupport::IsQLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01227">ClLayerSupport::IsQuantizedLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01245">ClLayerSupport::IsQuantizeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01255">ClLayerSupport::IsReduceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01267">ClLayerSupport::IsReshapeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01276">ClLayerSupport::IsResizeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01284">ClLayerSupport::IsSliceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01292">ClLayerSupport::IsSoftmaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01300">ClLayerSupport::IsSpaceToBatchNdSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01312">ClLayerSupport::IsSpaceToDepthSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01324">ClLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01357">ClLayerSupport::IsStackSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01369">ClLayerSupport::IsStridedSliceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01381">ClLayerSupport::IsSubtractionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01394">ClLayerSupport::IsTransposeConvolution2dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01410">ClLayerSupport::IsTransposeSupported()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport::mean</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00344">ILayerSupport::ouput</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00500">ILayerSupport::outputs</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport::outputStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport::outputStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport::paramsInfo</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00417">ILayerSupport::previousCellStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00417">ILayerSupport::previousOutputIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport::scratchBuffer</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport::var</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport::weights</a>.</p>
<div class="fragment"><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab3adb3a28736529682e4ff0ea976dcd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3adb3a28736529682e4ff0ea976dcd3">&#9670;&nbsp;</a></span>IsActivationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsActivationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00588">588</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_activation_workload_8cpp_source.xhtml#l00017">armnn::ClActivationWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;{</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a42ef3cee193102dc7755193579209cca">ClActivationWorkloadValidate</a>,</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                                   input,</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a42ef3cee193102dc7755193579209cca"><div class="ttname"><a href="namespacearmnn.xhtml#a42ef3cee193102dc7755193579209cca">armnn::ClActivationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClActivationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_activation_workload_8cpp_source.xhtml#l00017">ClActivationWorkload.cpp:17</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a48177e22e47448adb3d83e145dadf735"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48177e22e47448adb3d83e145dadf735">&#9670;&nbsp;</a></span>IsAdditionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAdditionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00600">600</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_addition_workload_8cpp_source.xhtml#l00045">armnn::ClAdditionValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;{</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a24fc3e8e29d3fa56cc6b2d81e48625d1">ClAdditionValidate</a>,</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                                   input0,</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a24fc3e8e29d3fa56cc6b2d81e48625d1"><div class="ttname"><a href="namespacearmnn.xhtml#a24fc3e8e29d3fa56cc6b2d81e48625d1">armnn::ClAdditionValidate</a></div><div class="ttdeci">arm_compute::Status ClAdditionValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_addition_workload_8cpp_source.xhtml#l00045">ClAdditionWorkload.cpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0f4841f89f21fd794786b4c03c2425fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f4841f89f21fd794786b4c03c2425fd">&#9670;&nbsp;</a></span>IsArgMinMaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsArgMinMaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00613">613</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_arg_min_max_workload_8cpp_source.xhtml#l00031">armnn::ClArgMinMaxWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;{</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab80423b306d8e0436b9a316922911d4d">ClArgMinMaxWorkloadValidate</a>,</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                                   input,</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab80423b306d8e0436b9a316922911d4d"><div class="ttname"><a href="namespacearmnn.xhtml#ab80423b306d8e0436b9a316922911d4d">armnn::ClArgMinMaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClArgMinMaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_arg_min_max_workload_8cpp_source.xhtml#l00031">ClArgMinMaxWorkload.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a67c970dd054b991e14369de523ca3a5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67c970dd054b991e14369de523ca3a5a">&#9670;&nbsp;</a></span>IsBatchNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00626">626</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_batch_normalization_float_workload_8cpp_source.xhtml#l00019">armnn::ClBatchNormalizationValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;{</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a29bd65c1ec4ff9f75b636ec8e7b038be">ClBatchNormalizationValidate</a>,</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                                   input,</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a>,</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a>,</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a>,</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a>,</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab5cccb3233f5eff2119e8acc80cec209"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">armnn::ILayerSupport::gamma</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; gamma</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a903053b422754682265fba0c03d94a52"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">armnn::ILayerSupport::var</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo &amp; var</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a83a99de40f6bffaa36f0333d04690b2a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">armnn::ILayerSupport::beta</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; beta</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport.hpp:62</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a29bd65c1ec4ff9f75b636ec8e7b038be"><div class="ttname"><a href="namespacearmnn.xhtml#a29bd65c1ec4ff9f75b636ec8e7b038be">armnn::ClBatchNormalizationValidate</a></div><div class="ttdeci">arm_compute::Status ClBatchNormalizationValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_batch_normalization_float_workload_8cpp_source.xhtml#l00019">ClBatchNormalizationFloatWorkload.cpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a895a8451e0799b95d65caf7ffe0a32d7"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">armnn::ILayerSupport::mean</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; mean</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport.hpp:62</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adc5695cc25f4055c7ed54bdc8604a098"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc5695cc25f4055c7ed54bdc8604a098">&#9670;&nbsp;</a></span>IsBatchToSpaceNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchToSpaceNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00647">647</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_batch_to_space_nd_workload_8cpp_source.xhtml#l00057">armnn::ClBatchToSpaceNdWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;{</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae87476befb36d9cc4fb926337ba65b5d">ClBatchToSpaceNdWorkloadValidate</a>,</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                                   input,</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae87476befb36d9cc4fb926337ba65b5d"><div class="ttname"><a href="namespacearmnn.xhtml#ae87476befb36d9cc4fb926337ba65b5d">armnn::ClBatchToSpaceNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClBatchToSpaceNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_batch_to_space_nd_workload_8cpp_source.xhtml#l00057">ClBatchToSpaceNdWorkload.cpp:57</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae18f598a589683c3094a7bb41dcd3a3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae18f598a589683c3094a7bb41dcd3a3e">&#9670;&nbsp;</a></span>IsCastSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCastSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00659">659</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_cast_workload_8cpp_source.xhtml#l00020">armnn::ClCastValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;{</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7f82264f26183ae3c66390e33be14ec6">ClCastValidate</a>,</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                                   input,</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7f82264f26183ae3c66390e33be14ec6"><div class="ttname"><a href="namespacearmnn.xhtml#a7f82264f26183ae3c66390e33be14ec6">armnn::ClCastValidate</a></div><div class="ttdeci">arm_compute::Status ClCastValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_cast_workload_8cpp_source.xhtml#l00020">ClCastWorkload.cpp:20</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6f1cae30d95bbd28dbac2a570c26c5f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f1cae30d95bbd28dbac2a570c26c5f7">&#9670;&nbsp;</a></span>IsChannelShuffleSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsChannelShuffleSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00669">669</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_channel_shuffle_workload_8cpp_source.xhtml#l00020">armnn::ClChannelShuffleValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;{</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a02e646180897aca9fcbc02d16efdd784">ClChannelShuffleValidate</a>,</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                                   input,</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a02e646180897aca9fcbc02d16efdd784"><div class="ttname"><a href="namespacearmnn.xhtml#a02e646180897aca9fcbc02d16efdd784">armnn::ClChannelShuffleValidate</a></div><div class="ttdeci">arm_compute::Status ClChannelShuffleValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ChannelShuffleDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_channel_shuffle_workload_8cpp_source.xhtml#l00020">ClChannelShuffleWorkload.cpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad16b29b7f1c73187775e7b1d044d7bc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad16b29b7f1c73187775e7b1d044d7bc0">&#9670;&nbsp;</a></span>IsComparisonSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsComparisonSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>ouput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00681">681</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_comparison_workload_8cpp_source.xhtml#l00024">armnn::ClComparisonWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;{</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af6f6476c5d1c4c85153020f5229ebd14">ClComparisonWorkloadValidate</a>,</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                                   input0,</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_af6f6476c5d1c4c85153020f5229ebd14"><div class="ttname"><a href="namespacearmnn.xhtml#af6f6476c5d1c4c85153020f5229ebd14">armnn::ClComparisonWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClComparisonWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_comparison_workload_8cpp_source.xhtml#l00024">ClComparisonWorkload.cpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1542179a03961e3635bb5bef993c8e0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1542179a03961e3635bb5bef993c8e0e">&#9670;&nbsp;</a></span>IsConcatSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConcatSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00695">695</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_concat_workload_8cpp_source.xhtml#l00027">armnn::ClConcatWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00162">OriginsDescriptor::GetConcatAxis()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00192">OriginsDescriptor::GetNumDimensions()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00434">TensorInfo::IsTypeSpaceMatch()</a>, and <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00017">armnn::SetValueChecked()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;{</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &lt;= <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.GetConcatAxis())</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Cl Concat: Concat axis &gt; Number of dimensions.&quot;</span>);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    }</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> concatInnerAxis = (<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() - <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.GetConcatAxis()) - 1;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordflow">if</span>(concatInnerAxis &lt; 3) <span class="comment">// Width, height, or channels</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    {</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7782f0809076f14363eacb4a38964b9f">ClConcatWorkloadValidate</a>,</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                                       inputs,</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    }</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (concatInnerAxis == 3)</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    {</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        <span class="comment">// We rely on the sub-tensor optimization to handle the batch dimension for 4D tensors. If we can&#39;t use</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        <span class="comment">// sub-tensors for this then we can&#39;t support it. Here is where we check that the sub-tensors will work.</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; input : inputs)</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        {</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;            <span class="keywordflow">if</span> (input &amp;&amp; !<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">IsTypeSpaceMatch</a>(*input)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            {</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Cl Concat: Types and quantization parameters must match.&quot;</span>);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            }</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        }</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>; <span class="comment">// Sub-tensors support concat along batch</span></div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    }</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// &gt; 4 dimensions not supported.</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    {</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Cl Concat: Maximum of 4 dimensions supported.&quot;</span>);</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    }</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a22f377fc4e10dc1773a3f979061e85f1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">armnn::TensorInfo::IsTypeSpaceMatch</a></div><div class="ttdeci">bool IsTypeSpaceMatch(const TensorInfo &amp;other) const</div><div class="ttdoc">Check that the types are the same and, if quantize, that the quantization parameters are the same...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00434">Tensor.cpp:434</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a13c7d751e4d37f65a6d40c3c6e50d2b8"><div class="ttname"><a href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">armnn::SetValueChecked</a></div><div class="ttdeci">void SetValueChecked(Optional&lt; T &amp;&gt; optionalRef, V &amp;&amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00017">LayerSupportCommon.hpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7782f0809076f14363eacb4a38964b9f"><div class="ttname"><a href="namespacearmnn.xhtml#a7782f0809076f14363eacb4a38964b9f">armnn::ClConcatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConcatWorkloadValidate(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_concat_workload_8cpp_source.xhtml#l00027">ClConcatWorkload.cpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adf18c4fa8fc9e0cdae1967990aa90fe8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf18c4fa8fc9e0cdae1967990aa90fe8">&#9670;&nbsp;</a></span>IsConstantSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConstantSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00736">736</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_constant_workload_8cpp_source.xhtml#l00018">armnn::ClConstantWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;{</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2f5c2e8794174361f2308f4a0d3f9c73">ClConstantWorkloadValidate</a>,</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2f5c2e8794174361f2308f4a0d3f9c73"><div class="ttname"><a href="namespacearmnn.xhtml#a2f5c2e8794174361f2308f4a0d3f9c73">armnn::ClConstantWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConstantWorkloadValidate(const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_constant_workload_8cpp_source.xhtml#l00018">ClConstantWorkload.cpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1efcaf6f02892442fefca09f49ea3d7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1efcaf6f02892442fefca09f49ea3d7c">&#9670;&nbsp;</a></span>IsConvertFp16ToFp32Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertFp16ToFp32Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00744">744</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00044">armnn::ClConvertFp16ToFp32WorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;{</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a46efae0191388fd33db4e95c5d79e2be">ClConvertFp16ToFp32WorkloadValidate</a>,</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                                   input,</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a46efae0191388fd33db4e95c5d79e2be"><div class="ttname"><a href="namespacearmnn.xhtml#a46efae0191388fd33db4e95c5d79e2be">armnn::ClConvertFp16ToFp32WorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvertFp16ToFp32WorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00044">ClConvertFp16ToFp32Workload.cpp:44</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a91fb5f44d8b9427dc45443aa9ebfe13e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91fb5f44d8b9427dc45443aa9ebfe13e">&#9670;&nbsp;</a></span>IsConvertFp32ToFp16Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertFp32ToFp16Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00754">754</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00044">armnn::ClConvertFp32ToFp16WorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;{</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a37f6946bfb7a9c7d64881b7a2e13945f">ClConvertFp32ToFp16WorkloadValidate</a>,</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                                   input,</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a37f6946bfb7a9c7d64881b7a2e13945f"><div class="ttname"><a href="namespacearmnn.xhtml#a37f6946bfb7a9c7d64881b7a2e13945f">armnn::ClConvertFp32ToFp16WorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvertFp32ToFp16WorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00044">ClConvertFp32ToFp16Workload.cpp:44</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af7ff06bd8115a6a9cc6d41e5c762798e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7ff06bd8115a6a9cc6d41e5c762798e">&#9670;&nbsp;</a></span>IsConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00764">764</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_convolution2d_workload_8cpp_source.xhtml#l00023">armnn::ClConvolution2dWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_cl_backend_model_context_8cpp_source.xhtml#l00066">ClBackendModelContext::IsFastMathEnabled()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;{</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTECL_ENABLED)</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    {</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        {</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;            <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span>ClBackendModelContext*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;            <span class="keywordflow">if</span> (modelOptions)</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;            {</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                isFastMathEnabled = modelOptions-&gt;IsFastMathEnabled();</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;            }</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        }</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    }</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a61cf0886d4c1a6e24c101a57ccb2ec31">ClConvolution2dWorkloadValidate</a>,</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                                   input,</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                                   isFastMathEnabled,</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a61cf0886d4c1a6e24c101a57ccb2ec31"><div class="ttname"><a href="namespacearmnn.xhtml#a61cf0886d4c1a6e24c101a57ccb2ec31">armnn::ClConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convolution2d_workload_8cpp_source.xhtml#l00023">ClConvolution2dWorkload.cpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a71cf13fc7f7aeac054919e0c6dcab52e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">armnn::ILayerSupport::biases</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo const Optional&lt; TensorInfo &gt; &amp; biases</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a631f893f44415523924016ed3f54a661"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">armnn::ILayerSupport::weights</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo &amp; weights</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a052f289a5b4e48bb2b50c732753e2cfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a052f289a5b4e48bb2b50c732753e2cfa">&#9670;&nbsp;</a></span>IsConvolution3dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvolution3dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00797">797</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_convolution3d_workload_8cpp_source.xhtml#l00023">armnn::ClConvolution3dWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_cl_backend_model_context_8cpp_source.xhtml#l00066">ClBackendModelContext::IsFastMathEnabled()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;{</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTECL_ENABLED)</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;{</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    {</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span>ClBackendModelContext*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        <span class="keywordflow">if</span> (modelOptions)</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;        {</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            isFastMathEnabled = modelOptions-&gt;IsFastMathEnabled();</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        }</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    }</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;}</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae387b3587bcce82eb33623b300097a8c">ClConvolution3dWorkloadValidate</a>,</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                                   input,</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                                   isFastMathEnabled,</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae387b3587bcce82eb33623b300097a8c"><div class="ttname"><a href="namespacearmnn.xhtml#ae387b3587bcce82eb33623b300097a8c">armnn::ClConvolution3dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvolution3dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution3dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convolution3d_workload_8cpp_source.xhtml#l00023">ClConvolution3dWorkload.cpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a71cf13fc7f7aeac054919e0c6dcab52e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">armnn::ILayerSupport::biases</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo const Optional&lt; TensorInfo &gt; &amp; biases</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a631f893f44415523924016ed3f54a661"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">armnn::ILayerSupport::weights</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo &amp; weights</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a128fb9890897e08251a3f621e570cd23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a128fb9890897e08251a3f621e570cd23">&#9670;&nbsp;</a></span>IsDepthToSpaceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDepthToSpaceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00840">840</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_depth_to_space_workload_8cpp_source.xhtml#l00022">armnn::ClDepthToSpaceWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;{</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab3624c723d9a0ec93722b19060b76115">ClDepthToSpaceWorkloadValidate</a>,</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                                   input,</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab3624c723d9a0ec93722b19060b76115"><div class="ttname"><a href="namespacearmnn.xhtml#ab3624c723d9a0ec93722b19060b76115">armnn::ClDepthToSpaceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDepthToSpaceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_depth_to_space_workload_8cpp_source.xhtml#l00022">ClDepthToSpaceWorkload.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adc84390751f227fe03a115b5fa10b0fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc84390751f227fe03a115b5fa10b0fc">&#9670;&nbsp;</a></span>IsDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00852">852</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">armnn::ClDepthwiseConvolutionWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;{</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">ClDepthwiseConvolutionWorkloadValidate</a>,</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                                   input,</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a71cf13fc7f7aeac054919e0c6dcab52e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">armnn::ILayerSupport::biases</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo const Optional&lt; TensorInfo &gt; &amp; biases</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa6670a2fcf9f365da69f3f3092dfa64b"><div class="ttname"><a href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">armnn::ClDepthwiseConvolutionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDepthwiseConvolutionWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">ClDepthwiseConvolutionWorkload.cpp:26</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a631f893f44415523924016ed3f54a661"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">armnn::ILayerSupport::weights</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo &amp; weights</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2e89c72cf60df7c2d2d7e5d98822b672"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e89c72cf60df7c2d2d7e5d98822b672">&#9670;&nbsp;</a></span>IsDequantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDequantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00830">830</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_dequantize_workload_8cpp_source.xhtml#l00022">armnn::ClDequantizeWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;{</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a75045734c29d7d6635342c05adbc151b">ClDequantizeWorkloadValidate</a>,</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                                   input,</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a75045734c29d7d6635342c05adbc151b"><div class="ttname"><a href="namespacearmnn.xhtml#a75045734c29d7d6635342c05adbc151b">armnn::ClDequantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDequantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_dequantize_workload_8cpp_source.xhtml#l00022">ClDequantizeWorkload.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a16c8cd49a7fa487b904b5c9cc83673e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16c8cd49a7fa487b904b5c9cc83673e7">&#9670;&nbsp;</a></span>IsDilatedDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDilatedDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reason</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00869">869</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">armnn::ClDepthwiseConvolutionWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;{</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">ClDepthwiseConvolutionWorkloadValidate</a>,</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                                   input,</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a71cf13fc7f7aeac054919e0c6dcab52e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">armnn::ILayerSupport::biases</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo const Optional&lt; TensorInfo &gt; &amp; biases</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa6670a2fcf9f365da69f3f3092dfa64b"><div class="ttname"><a href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">armnn::ClDepthwiseConvolutionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDepthwiseConvolutionWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">ClDepthwiseConvolutionWorkload.cpp:26</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a631f893f44415523924016ed3f54a661"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">armnn::ILayerSupport::weights</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo &amp; weights</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a08f55136b1f0907e7083d70d719f697f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08f55136b1f0907e7083d70d719f697f">&#9670;&nbsp;</a></span>IsDivisionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDivisionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00887">887</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_division_workload_8cpp_source.xhtml#l00018">armnn::ClDivisionWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;{</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a0591ff61ac269187164ea23713d33852">ClDivisionWorkloadValidate</a>,</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                                   input0,</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a0591ff61ac269187164ea23713d33852"><div class="ttname"><a href="namespacearmnn.xhtml#a0591ff61ac269187164ea23713d33852">armnn::ClDivisionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDivisionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_division_workload_8cpp_source.xhtml#l00018">ClDivisionWorkload.cpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5d99bdae7b6b2d5d1243f21cd59befb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d99bdae7b6b2d5d1243f21cd59befb8">&#9670;&nbsp;</a></span>IsElementwiseUnarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsElementwiseUnarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>ouput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00900">900</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::Abs</a>, <a class="el" href="_cl_abs_workload_8cpp_source.xhtml#l00019">armnn::ClAbsWorkloadValidate()</a>, <a class="el" href="_cl_exp_workload_8cpp_source.xhtml#l00018">armnn::ClExpWorkloadValidate()</a>, <a class="el" href="_cl_logical_not_workload_8cpp_source.xhtml#l00020">armnn::ClLogicalNotWorkloadValidate()</a>, <a class="el" href="_cl_log_workload_8cpp_source.xhtml#l00018">armnn::ClLogWorkloadValidate()</a>, <a class="el" href="_cl_neg_workload_8cpp_source.xhtml#l00018">armnn::ClNegWorkloadValidate()</a>, <a class="el" href="_cl_rsqrt_workload_8cpp_source.xhtml#l00018">armnn::ClRsqrtWorkloadValidate()</a>, <a class="el" href="_cl_sin_workload_8cpp_source.xhtml#l00018">armnn::ClSinWorkloadValidate()</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::Exp</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::Log</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::LogicalNot</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00125">ElementwiseUnaryDescriptor::m_Operation</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::Neg</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::Rsqrt</a>, and <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">armnn::Sin</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;{</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.m_Operation)</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    {</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>:</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1391582cd6e145b67c98f3410667968e">ClAbsWorkloadValidate</a>,</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                                           input,</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">UnaryOperation::Exp</a>:</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9831849c09391e90e50de46e2ee16403">ClExpWorkloadValidate</a>,</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;                                           input,</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">UnaryOperation::Log</a>:</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a64806be3c31d35b75546da7c6b6b46d0">ClLogWorkloadValidate</a>,</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;                                           input,</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">UnaryOperation::LogicalNot</a>:</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ace776a194a715c709136a9966ada1a48">ClLogicalNotWorkloadValidate</a>,</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;                                           input,</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">UnaryOperation::Neg</a>:</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a66a3a6c05b38e48508bbbb3f32023ab7">ClNegWorkloadValidate</a>,</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                                           input,</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>:</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a3f6f9f0d3567ae04b49ea88727845900">ClRsqrtWorkloadValidate</a>,</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                                           input,</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">UnaryOperation::Sin</a>:</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac5cd8464c73415025cb8c8f6ada74e15">ClSinWorkloadValidate</a>,</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                                           input,</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    }</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::UnaryOperation::Log</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::UnaryOperation::Neg</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::UnaryOperation::LogicalNot</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac5cd8464c73415025cb8c8f6ada74e15"><div class="ttname"><a href="namespacearmnn.xhtml#ac5cd8464c73415025cb8c8f6ada74e15">armnn::ClSinWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSinWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_sin_workload_8cpp_source.xhtml#l00018">ClSinWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">armnn::UnaryOperation::Sin</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace776a194a715c709136a9966ada1a48"><div class="ttname"><a href="namespacearmnn.xhtml#ace776a194a715c709136a9966ada1a48">armnn::ClLogicalNotWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogicalNotWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_logical_not_workload_8cpp_source.xhtml#l00020">ClLogicalNotWorkload.cpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1391582cd6e145b67c98f3410667968e"><div class="ttname"><a href="namespacearmnn.xhtml#a1391582cd6e145b67c98f3410667968e">armnn::ClAbsWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClAbsWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_abs_workload_8cpp_source.xhtml#l00019">ClAbsWorkload.cpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a66a3a6c05b38e48508bbbb3f32023ab7"><div class="ttname"><a href="namespacearmnn.xhtml#a66a3a6c05b38e48508bbbb3f32023ab7">armnn::ClNegWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClNegWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_neg_workload_8cpp_source.xhtml#l00018">ClNegWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9831849c09391e90e50de46e2ee16403"><div class="ttname"><a href="namespacearmnn.xhtml#a9831849c09391e90e50de46e2ee16403">armnn::ClExpWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClExpWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_exp_workload_8cpp_source.xhtml#l00018">ClExpWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::UnaryOperation::Exp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a64806be3c31d35b75546da7c6b6b46d0"><div class="ttname"><a href="namespacearmnn.xhtml#a64806be3c31d35b75546da7c6b6b46d0">armnn::ClLogWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_log_workload_8cpp_source.xhtml#l00018">ClLogWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3f6f9f0d3567ae04b49ea88727845900"><div class="ttname"><a href="namespacearmnn.xhtml#a3f6f9f0d3567ae04b49ea88727845900">armnn::ClRsqrtWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClRsqrtWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_rsqrt_workload_8cpp_source.xhtml#l00018">ClRsqrtWorkload.cpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acc5d9a4c8f29984de3bbdca87684f317"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc5d9a4c8f29984de3bbdca87684f317">&#9670;&nbsp;</a></span>IsFillSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFillSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#acc5d9a4c8f29984de3bbdca87684f317">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00947">947</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;{</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    <span class="keywordflow">return</span> IsClBackendSupported(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a53c7593d1aa26207eac5d5814a9d56dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53c7593d1aa26207eac5d5814a9d56dc">&#9670;&nbsp;</a></span>IsFloorSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFloorSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00959">959</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_floor_float_workload_8cpp_source.xhtml#l00014">armnn::ClFloorWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;{</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8874961260f35da85229554f92e16ca9">ClFloorWorkloadValidate</a>,</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                                   input,</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8874961260f35da85229554f92e16ca9"><div class="ttname"><a href="namespacearmnn.xhtml#a8874961260f35da85229554f92e16ca9">armnn::ClFloorWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClFloorWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_floor_float_workload_8cpp_source.xhtml#l00014">ClFloorFloatWorkload.cpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">&#9670;&nbsp;</a></span>IsFullyConnectedSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFullyConnectedSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00969">969</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_fully_connected_workload_8cpp_source.xhtml#l00019">armnn::ClFullyConnectedWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;{</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a18c7eef8533ca0acbbe081cd1a1fec98">ClFullyConnectedWorkloadValidate</a>,</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;                                   input,</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a18c7eef8533ca0acbbe081cd1a1fec98"><div class="ttname"><a href="namespacearmnn.xhtml#a18c7eef8533ca0acbbe081cd1a1fec98">armnn::ClFullyConnectedWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClFullyConnectedWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const FullyConnectedDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fully_connected_workload_8cpp_source.xhtml#l00019">ClFullyConnectedWorkload.cpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a71cf13fc7f7aeac054919e0c6dcab52e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">armnn::ILayerSupport::biases</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo const Optional&lt; TensorInfo &gt; &amp; biases</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a631f893f44415523924016ed3f54a661"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">armnn::ILayerSupport::weights</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo &amp; weights</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5e8fbdda1125eb5e22f14eacbe9fb351"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e8fbdda1125eb5e22f14eacbe9fb351">&#9670;&nbsp;</a></span>IsGatherSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsGatherSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00986">986</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_gather_workload_8cpp_source.xhtml#l00015">armnn::ClGatherWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;{</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aff9e3b78a938c14a4420ce6365b997fb">ClGatherWorkloadValidate</a>,</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                                   input0,</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aff9e3b78a938c14a4420ce6365b997fb"><div class="ttname"><a href="namespacearmnn.xhtml#aff9e3b78a938c14a4420ce6365b997fb">armnn::ClGatherWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClGatherWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;indices, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_gather_workload_8cpp_source.xhtml#l00015">ClGatherWorkload.cpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad29d99ecd719c640ed22dcf5c688c6a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad29d99ecd719c640ed22dcf5c688c6a5">&#9670;&nbsp;</a></span>IsInputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01000">1000</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;{</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    <span class="keywordflow">return</span> IsClBackendSupported(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input);</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0813546a09bf2caba6794014d1960624"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0813546a09bf2caba6794014d1960624">&#9670;&nbsp;</a></span>IsInstanceNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInstanceNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01006">1006</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_instance_normalization_workload_8cpp_source.xhtml#l00018">armnn::ClInstanceNormalizationWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;{</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a79d362f0c6e04d51807e0d81b5b05f3a">ClInstanceNormalizationWorkloadValidate</a>,</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;                                   input,</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a79d362f0c6e04d51807e0d81b5b05f3a"><div class="ttname"><a href="namespacearmnn.xhtml#a79d362f0c6e04d51807e0d81b5b05f3a">armnn::ClInstanceNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClInstanceNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_instance_normalization_workload_8cpp_source.xhtml#l00018">ClInstanceNormalizationWorkload.cpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aca4acda7ab553edfda828658d8f3882b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca4acda7ab553edfda828658d8f3882b">&#9670;&nbsp;</a></span>IsL2NormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsL2NormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01018">1018</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00017">armnn::ClL2NormalizationWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;{</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aef334cdb24000c330f4d2e5f1b384784">ClL2NormalizationWorkloadValidate</a>,</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                                   input,</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_aef334cdb24000c330f4d2e5f1b384784"><div class="ttname"><a href="namespacearmnn.xhtml#aef334cdb24000c330f4d2e5f1b384784">armnn::ClL2NormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClL2NormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00017">ClL2NormalizationFloatWorkload.cpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9365ac4251c03d9d6ec4802886bcbc4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9365ac4251c03d9d6ec4802886bcbc4e">&#9670;&nbsp;</a></span>IsLayerSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> &amp;&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>infos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>lstmParamsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>quantizedLstmParamsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8424740ae08cca0a5548b598331f35a5">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">179</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::Activation</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::Addition</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::ArgMinMax</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::BatchNormalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::BatchToSpaceNd</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">armnn::Cast</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">armnn::ChannelShuffle</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::Comparison</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::Concat</a>, <a class="el" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::Constant</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a">armnn::ConvertBf16ToFp32</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::ConvertFp16ToFp32</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da">armnn::ConvertFp32ToBf16</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::ConvertFp32ToFp16</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::Convolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">armnn::Convolution3d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::DepthToSpace</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::DepthwiseConvolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::Dequantize</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::descriptor</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::Division</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::ElementwiseUnary</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">armnn::Fill</a>, <a class="el" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::Floor</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::FullyConnected</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::Gather</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::InstanceNormalization</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00588">ClLayerSupport::IsActivationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00600">ClLayerSupport::IsAdditionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00613">ClLayerSupport::IsArgMinMaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00626">ClLayerSupport::IsBatchNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00647">ClLayerSupport::IsBatchToSpaceNdSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00659">ClLayerSupport::IsCastSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00669">ClLayerSupport::IsChannelShuffleSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00681">ClLayerSupport::IsComparisonSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00695">ClLayerSupport::IsConcatSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00736">ClLayerSupport::IsConstantSupported()</a>, <a class="el" href="_layer_support_base_8cpp_source.xhtml#l00167">LayerSupportBase::IsConvertBf16ToFp32Supported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00744">ClLayerSupport::IsConvertFp16ToFp32Supported()</a>, <a class="el" href="_layer_support_base_8cpp_source.xhtml#l00181">LayerSupportBase::IsConvertFp32ToBf16Supported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00754">ClLayerSupport::IsConvertFp32ToFp16Supported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00764">ClLayerSupport::IsConvolution2dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00797">ClLayerSupport::IsConvolution3dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00840">ClLayerSupport::IsDepthToSpaceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00852">ClLayerSupport::IsDepthwiseConvolutionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00830">ClLayerSupport::IsDequantizeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00887">ClLayerSupport::IsDivisionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00900">ClLayerSupport::IsElementwiseUnarySupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00947">ClLayerSupport::IsFillSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00959">ClLayerSupport::IsFloorSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00969">ClLayerSupport::IsFullyConnectedSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00986">ClLayerSupport::IsGatherSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01000">ClLayerSupport::IsInputSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01006">ClLayerSupport::IsInstanceNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01018">ClLayerSupport::IsL2NormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01030">ClLayerSupport::IsLogicalBinarySupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01058">ClLayerSupport::IsLogSoftmaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01070">ClLayerSupport::IsLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01094">ClLayerSupport::IsMaximumSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01106">ClLayerSupport::IsMeanSupported()</a>, <a class="el" href="_layer_support_base_8cpp_source.xhtml#l00405">LayerSupportBase::IsMemCopySupported()</a>, <a class="el" href="_layer_support_base_8cpp_source.xhtml#l00412">LayerSupportBase::IsMemImportSupported()</a>, <a class="el" href="_layer_support_base_8cpp_source.xhtml#l00419">LayerSupportBase::IsMergeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01118">ClLayerSupport::IsMinimumSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01130">ClLayerSupport::IsMultiplicationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01143">ClLayerSupport::IsNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01151">ClLayerSupport::IsOutputSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01157">ClLayerSupport::IsPadSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01169">ClLayerSupport::IsPermuteSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01177">ClLayerSupport::IsPooling2dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01185">ClLayerSupport::IsPreluSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01193">ClLayerSupport::IsQLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01227">ClLayerSupport::IsQuantizedLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01245">ClLayerSupport::IsQuantizeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01255">ClLayerSupport::IsReduceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01267">ClLayerSupport::IsReshapeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01276">ClLayerSupport::IsResizeSupported()</a>, <a class="el" href="_layer_support_base_8cpp_source.xhtml#l00566">LayerSupportBase::IsShapeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01284">ClLayerSupport::IsSliceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01292">ClLayerSupport::IsSoftmaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01300">ClLayerSupport::IsSpaceToBatchNdSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01312">ClLayerSupport::IsSpaceToDepthSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01324">ClLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01357">ClLayerSupport::IsStackSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01369">ClLayerSupport::IsStridedSliceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01381">ClLayerSupport::IsSubtractionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01394">ClLayerSupport::IsTransposeConvolution2dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01410">ClLayerSupport::IsTransposeSupported()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::L2Normalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">armnn::LogicalBinary</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LogSoftmax</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::Lstm</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c">armnn::Map</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">armnn::Maximum</a>, <a class="el" href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d">armnn::Mean</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::MemCopy</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::MemImport</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">armnn::Merge</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::Minimum</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::Multiplication</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::Normalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::Pad</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::Permute</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::Pooling2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::Prelu</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::QLstm</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::Quantize</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">armnn::QuantizedLstm</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">armnn::Rank</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::Reduce</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::Reshape</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::Resize</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">armnn::Shape</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::Slice</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::Softmax</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::SpaceToBatchNd</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::SpaceToDepth</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::Splitter</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::Stack</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::StridedSlice</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::Subtraction</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::Transpose</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::TransposeConvolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410">armnn::Unmap</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">switch</span> (type)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">LayerType::Activation</a>:</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">IsActivationSupported</a>(infos[0],</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                         infos[1],</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                         *(PolymorphicDowncast&lt;const ActivationDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>:</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">IsAdditionSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">LayerType::ArgMinMax</a>:</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">IsArgMinMaxSupported</a>(infos[0],</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                        infos[1],</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                        *(PolymorphicDowncast&lt;const ArgMinMaxDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">LayerType::BatchNormalization</a>:</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">IsBatchNormalizationSupported</a>(infos[0],</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                                 infos[1],</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                                 infos[2],</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                                 infos[3],</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                                 infos[4],</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                                 infos[5],</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                                 *(PolymorphicDowncast&lt;const BatchNormalizationDescriptor*&gt;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                                     (&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                                 <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">LayerType::BatchToSpaceNd</a>:</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">IsBatchToSpaceNdSupported</a>(infos[0],</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                             infos[1],</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                             *(PolymorphicDowncast&lt;const BatchToSpaceNdDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                                             <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">LayerType::Comparison</a>:</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ad16b29b7f1c73187775e7b1d044d7bc0">IsComparisonSupported</a>(infos[0],</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                         infos[1],</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                         infos[2],</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                         *(PolymorphicDowncast&lt;const ComparisonDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">LayerType::Concat</a>:</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            std::vector&lt;const TensorInfo*&gt; inputInfos;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; (infos.size() - 1); i++)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                inputInfos.push_back(&amp;infos[i]);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a1542179a03961e3635bb5bef993c8e0e">IsConcatSupported</a>(inputInfos,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                     infos[infos.size() - 1],</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                     *(PolymorphicDowncast&lt;const OriginsDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                     <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">LayerType::Constant</a>:</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">IsConstantSupported</a>(infos[0], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">LayerType::ConvertFp16ToFp32</a>:</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">IsConvertFp16ToFp32Supported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">LayerType::ConvertFp32ToFp16</a>:</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">IsConvertFp32ToFp16Supported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">LayerType::Convolution2d</a>:</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Invalid number of Convolution2d TensorInfos. &quot;</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const Convolution2dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">if</span> (infos[3] == TensorInfo())</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">IsConvolution2dSupported</a>(infos[0],</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                                infos[1],</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                                desc,</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                                infos[2],</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                                EmptyOptional(),</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">IsConvolution2dSupported</a>(infos[0],</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                                infos[1],</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                                desc,</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                                infos[2],</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                                infos[3],</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                                <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">LayerType::DepthToSpace</a>:</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">IsDepthToSpaceSupported</a>(infos[0],</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                           infos[1],</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                           *(PolymorphicDowncast&lt;const DepthToSpaceDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">LayerType::DepthwiseConvolution2d</a>:</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        {</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Invalid number of DepthwiseConvolution2d TensorInfos. &quot;</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const DepthwiseConvolution2dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="keywordflow">if</span> (infos[3] == TensorInfo())</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            {</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">IsDepthwiseConvolutionSupported</a>(infos[0],</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                                infos[1],</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                                desc,</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                                                infos[2],</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                                EmptyOptional(),</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                                <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            }</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">IsDepthwiseConvolutionSupported</a>(infos[0],</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                                         infos[1],</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                                         desc,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                                         infos[2],</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                                         infos[3],</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        }</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">LayerType::Dequantize</a>:</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">IsDequantizeSupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">LayerType::Division</a>:</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">IsDivisionSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">LayerType::ElementwiseUnary</a>:</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a5d99bdae7b6b2d5d1243f21cd59befb8">IsElementwiseUnarySupported</a>(infos[0],</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                               infos[1],</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                               *(PolymorphicDowncast&lt;const ElementwiseUnaryDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                               <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">LayerType::Fill</a>:</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">IsFillSupported</a>(infos[0],</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                   infos[1],</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                   *(PolymorphicDowncast&lt;const FillDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a>:</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">IsFloorSupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">LayerType::FullyConnected</a>:</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">IsFullyConnectedSupported</a>(infos[0],</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                             infos[1],</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                             infos[2],</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                             infos[3],</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                             *(PolymorphicDowncast&lt;const FullyConnectedDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                             <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">LayerType::Gather</a>:</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a5e8fbdda1125eb5e22f14eacbe9fb351">IsGatherSupported</a>(infos[0],</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                     infos[1],</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                                     infos[2],</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                     *(PolymorphicDowncast&lt;const GatherDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                     <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a>:</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">IsInputSupported</a>(infos[0], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">LayerType::InstanceNormalization</a>:</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">IsInstanceNormalizationSupported</a>(infos[0],</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                                                    infos[1],</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                                    *(PolymorphicDowncast&lt;const InstanceNormalizationDescriptor*&gt;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                                        (&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                                    <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">LayerType::L2Normalization</a>:</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">IsL2NormalizationSupported</a>(infos[0],</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                              infos[1],</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                              *(PolymorphicDowncast&lt;const L2NormalizationDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                              <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">LayerType::LogicalBinary</a>:</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776">IsLogicalBinarySupported</a>(infos[0],</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                            infos[1],</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                            infos[2],</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                            *(PolymorphicDowncast&lt;const LogicalBinaryDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                            <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">LayerType::LogSoftmax</a>:</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">IsLogSoftmaxSupported</a>(infos[0],</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                         infos[1],</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                         *(PolymorphicDowncast&lt;const LogSoftmaxDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">LayerType::Lstm</a>:</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">IsLstmSupported</a>(infos[0],</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                   infos[1],</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                   infos[2],</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                   infos[3],</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                   infos[4],</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                   infos[5],</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                   infos[6],</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                   *(PolymorphicDowncast&lt;const LstmDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                   lstmParamsInfo.value(),</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">LayerType::QLstm</a>:</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">IsQLstmSupported</a>(infos[0],</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                    infos[1],</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                    infos[2],</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                    infos[3],</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                    infos[4],</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                    infos[5],</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                    *(PolymorphicDowncast&lt;const QLstmDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                    lstmParamsInfo.value(),</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                    <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">LayerType::Maximum</a>:</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">IsMaximumSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d">LayerType::Mean</a>:</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">IsMeanSupported</a>(infos[0],</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                                   infos[1],</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                   *(PolymorphicDowncast&lt;const MeanDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">LayerType::Minimum</a>:</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">IsMinimumSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">LayerType::Multiplication</a>:</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">IsMultiplicationSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">LayerType::Normalization</a>:</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">IsNormalizationSupported</a>(infos[0],</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                            infos[1],</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                            *(PolymorphicDowncast&lt;const NormalizationDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                            <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>:</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">IsOutputSupported</a>(infos[0], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">LayerType::Pad</a>:</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">IsPadSupported</a>(infos[0],</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                  infos[1],</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                  *(PolymorphicDowncast&lt;const PadDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                  <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">LayerType::Permute</a>:</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">IsPermuteSupported</a>(infos[0],</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                      infos[1],</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                      *(PolymorphicDowncast&lt;const PermuteDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                      <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">LayerType::Pooling2d</a>:</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">IsPooling2dSupported</a>(infos[0],</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                        infos[1],</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                        *(PolymorphicDowncast&lt;const Pooling2dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">LayerType::Prelu</a>:</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">IsPreluSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">LayerType::Quantize</a>:</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">IsQuantizeSupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">LayerType::QuantizedLstm</a>:</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#af1be52d9f968bfab069344756bf232c4">IsQuantizedLstmSupported</a>(infos[0],</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                            infos[1],</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                            infos[2],</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                            infos[3],</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                            infos[4],</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                            quantizedLstmParamsInfo.value(),</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                            <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">LayerType::Reshape</a>:</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">IsReshapeSupported</a>(infos[0],</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                      infos[1],</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                      *(PolymorphicDowncast&lt;const ReshapeDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                      <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">LayerType::Resize</a>:</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">IsResizeSupported</a>(infos[0],</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                     infos[1],</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                     *(PolymorphicDowncast&lt;const ResizeDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                     <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">LayerType::Reduce</a>:</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a917c126e64314263b8b5f7bca455ddfb">IsReduceSupported</a>(infos[0],</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                     infos[1],</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                     *(PolymorphicDowncast&lt;const ReduceDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                     <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">LayerType::Slice</a>:</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">IsSliceSupported</a>(infos[0],</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                                    infos[1],</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                                    *(PolymorphicDowncast&lt;const SliceDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                                    <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">LayerType::Softmax</a>:</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">IsSoftmaxSupported</a>(infos[0],</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                      infos[1],</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                      *(PolymorphicDowncast&lt;const SoftmaxDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                      <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">LayerType::SpaceToBatchNd</a>:</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">IsSpaceToBatchNdSupported</a>(infos[0],</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                             infos[1],</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                             *(PolymorphicDowncast&lt;const SpaceToBatchNdDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                             <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">LayerType::SpaceToDepth</a>:</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">IsSpaceToDepthSupported</a>(infos[0],</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                           infos[1],</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                                           *(PolymorphicDowncast&lt;const SpaceToDepthDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">LayerType::Splitter</a>:</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        {</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            std::vector&lt;TensorInfo&gt; outputInfos;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; infos.size(); i++)</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            {</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                outputInfos.push_back(infos[i]);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            }</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da">IsSplitterSupported</a>(infos[0],</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                       {outputInfos.begin(), outputInfos.end()},</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                       *(PolymorphicDowncast&lt;const ViewsDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        }</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">LayerType::Stack</a>:</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            std::vector&lt;const TensorInfo*&gt; inputInfos;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; infos.size() - 1; i++)</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            {</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                inputInfos.push_back(&amp;infos[i]);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            }</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">IsStackSupported</a>(inputInfos,</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                                    infos[infos.size() - 1],</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                                    *(PolymorphicDowncast&lt;const StackDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                                    <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        }</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">LayerType::StridedSlice</a>:</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">IsStridedSliceSupported</a>(infos[0],</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                                           infos[1],</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                                           *(PolymorphicDowncast&lt;const StridedSliceDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">LayerType::Subtraction</a>:</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">IsSubtractionSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">LayerType::Transpose</a>:</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">IsTransposeSupported</a>(infos[0],</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                        infos[1],</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                                        *(PolymorphicDowncast&lt;const TransposeDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                                        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">LayerType::TransposeConvolution2d</a>:</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        {</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Invalid number of TransposeConvolution2d TensorInfos. &quot;</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            }</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const TransposeConvolution2dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            <span class="keywordflow">if</span> (infos[3] == TensorInfo())</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            {</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">IsTransposeConvolution2dSupported</a>(infos[0],</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                                                         infos[1],</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                                                         desc,</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                                         infos[2],</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                                         EmptyOptional(),</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            {</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">IsTransposeConvolution2dSupported</a>(infos[0],</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                                                         infos[1],</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                                                         desc,</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                                                         infos[2],</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                                                         infos[3],</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            }</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        }</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">LayerType::Cast</a>:</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">IsCastSupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">LayerType::ChannelShuffle</a>:</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a6f1cae30d95bbd28dbac2a570c26c5f7">IsChannelShuffleSupported</a>(infos[0],</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                                             infos[1],</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                                             *(PolymorphicDowncast&lt;const ChannelShuffleDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                                             <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">LayerType::Convolution3d</a>:</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        {</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            {</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Invalid number of Convolution3d TensorInfos. &quot;</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            }</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const Convolution3dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            <span class="keywordflow">if</span> (infos[3] == TensorInfo())</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            {</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a052f289a5b4e48bb2b50c732753e2cfa">IsConvolution3dSupported</a>(infos[0],</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                                                infos[1],</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                                                desc,</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                                                infos[2],</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                                                EmptyOptional(),</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                                                <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            }</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            {</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a052f289a5b4e48bb2b50c732753e2cfa">IsConvolution3dSupported</a>(infos[0],</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                                                infos[1],</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                                                desc,</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                                                infos[2],</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                                                infos[3],</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                                <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            }</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        }</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">LayerType::MemCopy</a>:</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#a9d25fabf725313fda40a41400155bafe">LayerSupportBase::IsMemCopySupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">LayerType::MemImport</a>:</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#a334181d8098b943d03ccd820753ace75">LayerSupportBase::IsMemImportSupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c">LayerType::Map</a>:</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410">LayerType::Unmap</a>:</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">LayerType::Merge</a>:</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#aa9bbc383cac59d6f02d2ef7d2cc0076f">LayerSupportBase::IsMergeSupported</a>(infos[0],</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                                                      infos[1],</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                                                      infos[2],</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                                                      <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">LayerType::Rank</a>:</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">LayerType::Shape</a>:</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#a3c6816950ad290155bde03b7fb31e160">LayerSupportBase::IsShapeSupported</a>(infos[0],</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                                                      infos[1],</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                                                      <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a">LayerType::ConvertBf16ToFp32</a>:</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#ad330b6e7dcf25410ea878af0557f2197">LayerSupportBase::IsConvertBf16ToFp32Supported</a>(infos[0],</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                                                                  infos[1],</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                                                                  <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da">LayerType::ConvertFp32ToBf16</a>:</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#a0947498c6cc747db6219a22132a1b89a">LayerSupportBase::IsConvertFp32ToBf16Supported</a>(infos[0],</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                                                  infos[1],</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                                                  <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            <span class="comment">// layers not supported in cl by default:</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            <span class="comment">// debug, detectionpostprocess, fakequantization, precompiled,</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="comment">// standin, switch, unidirectionalsequencelstm, pooling3d</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    }</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a3d0eafb3de560b3482f857b56b2b2116"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">armnn::ClLayerSupport::IsMinimumSupported</a></div><div class="ttdeci">bool IsMinimumSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01118">ClLayerSupport.cpp:1118</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">armnn::LayerType::Convolution3d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::LayerType::TransposeConvolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::LayerType::ElementwiseUnary</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_aef3244c0ef64c8f2f352d21ce0c06985"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">armnn::ClLayerSupport::IsOutputSupported</a></div><div class="ttdeci">bool IsOutputSupported(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01151">ClLayerSupport.cpp:1151</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a0189645f33641b280877a1b2f6ba9fee"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">armnn::ClLayerSupport::IsTransposeSupported</a></div><div class="ttdeci">bool IsTransposeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01410">ClLayerSupport.cpp:1410</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a53c7593d1aa26207eac5d5814a9d56dc"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">armnn::ClLayerSupport::IsFloorSupported</a></div><div class="ttdeci">bool IsFloorSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00959">ClLayerSupport.cpp:959</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::LayerType::Concat</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::LayerType::Comparison</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a0f4841f89f21fd794786b4c03c2425fd"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">armnn::ClLayerSupport::IsArgMinMaxSupported</a></div><div class="ttdeci">bool IsArgMinMaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00613">ClLayerSupport.cpp:613</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a917c126e64314263b8b5f7bca455ddfb"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a917c126e64314263b8b5f7bca455ddfb">armnn::ClLayerSupport::IsReduceSupported</a></div><div class="ttdeci">bool IsReduceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01255">ClLayerSupport.cpp:1255</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3"><div class="ttname"><a href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::OutputShapeRounding::Floor</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml_a334181d8098b943d03ccd820753ace75"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#a334181d8098b943d03ccd820753ace75">armnn::LayerSupportBase::IsMemImportSupported</a></div><div class="ttdeci">bool IsMemImportSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00412">LayerSupportBase.cpp:412</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::LayerType::BatchToSpaceNd</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_af6c947e4d4b25bc49d92d18d4ff26736"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">armnn::ClLayerSupport::IsSubtractionSupported</a></div><div class="ttdeci">bool IsSubtractionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01381">ClLayerSupport.cpp:1381</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a4b36dcedd5edbd5142b3548967aadc2f"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">armnn::ClLayerSupport::IsPreluSupported</a></div><div class="ttdeci">bool IsPreluSupported(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01185">ClLayerSupport.cpp:1185</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a0e14dafa85cfcd4a6b6b752284b51e63"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">armnn::ClLayerSupport::IsSliceSupported</a></div><div class="ttdeci">bool IsSliceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01284">ClLayerSupport.cpp:1284</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::LayerType::Stack</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::LayerType::StridedSlice</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_ad2c7be6b84b04444e514f52f593b3df7"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">armnn::ClLayerSupport::IsQuantizeSupported</a></div><div class="ttdeci">bool IsQuantizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01245">ClLayerSupport.cpp:1245</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">armnn::LayerType::Cast</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a0534291adf9f3436ba331552eba29a43"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">armnn::ClLayerSupport::IsPadSupported</a></div><div class="ttdeci">bool IsPadSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01157">ClLayerSupport.cpp:1157</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a862535721737220f62a49f14ff494dd5"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">armnn::ClLayerSupport::IsLstmSupported</a></div><div class="ttdeci">bool IsLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01070">ClLayerSupport.cpp:1070</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::LayerType::ConvertFp32ToFp16</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_ac054cb25099005eac854afb1511340f0"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">armnn::ClLayerSupport::IsStridedSliceSupported</a></div><div class="ttdeci">bool IsStridedSliceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01369">ClLayerSupport.cpp:1369</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml_a3c6816950ad290155bde03b7fb31e160"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#a3c6816950ad290155bde03b7fb31e160">armnn::LayerSupportBase::IsShapeSupported</a></div><div class="ttdeci">bool IsShapeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00566">LayerSupportBase.cpp:566</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::LayerType::Normalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::LayerType::SpaceToBatchNd</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::LayerType::FullyConnected</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::LayerType::Reduce</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a772790c60d70814e30b5bec70fd98776"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776">armnn::ClLayerSupport::IsLogicalBinarySupported</a></div><div class="ttdeci">bool IsLogicalBinarySupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const LogicalBinaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01030">ClLayerSupport.cpp:1030</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_aa0380b797cb9932fb03067dbe2cdecfb"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">armnn::ClLayerSupport::IsLogSoftmaxSupported</a></div><div class="ttdeci">bool IsLogSoftmaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01058">ClLayerSupport.cpp:1058</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::LayerType::InstanceNormalization</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a9d553495d9a94fa55588ae159d8bda30"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">armnn::ClLayerSupport::IsPermuteSupported</a></div><div class="ttdeci">bool IsPermuteSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01169">ClLayerSupport.cpp:1169</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a1542179a03961e3635bb5bef993c8e0e"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a1542179a03961e3635bb5bef993c8e0e">armnn::ClLayerSupport::IsConcatSupported</a></div><div class="ttdeci">bool IsConcatSupported(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00695">ClLayerSupport.cpp:695</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_ad16b29b7f1c73187775e7b1d044d7bc0"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ad16b29b7f1c73187775e7b1d044d7bc0">armnn::ClLayerSupport::IsComparisonSupported</a></div><div class="ttdeci">bool IsComparisonSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;ouput, const ComparisonDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00681">ClLayerSupport.cpp:681</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">armnn::LayerType::Merge</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a994c2065561141bf37fcd2ff7bb4af4d"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">armnn::ClLayerSupport::IsNormalizationSupported</a></div><div class="ttdeci">bool IsNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01143">ClLayerSupport.cpp:1143</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::LayerType::L2Normalization</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_af7ff06bd8115a6a9cc6d41e5c762798e"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">armnn::ClLayerSupport::IsConvolution2dSupported</a></div><div class="ttdeci">bool IsConvolution2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00764">ClLayerSupport.cpp:764</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::LayerType::Prelu</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d"><div class="ttname"><a href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d">armnn::ReduceOperation::Mean</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">armnn::LayerType::LogicalBinary</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a052f289a5b4e48bb2b50c732753e2cfa"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a052f289a5b4e48bb2b50c732753e2cfa">armnn::ClLayerSupport::IsConvolution3dSupported</a></div><div class="ttdeci">bool IsConvolution3dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution3dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00797">ClLayerSupport.cpp:797</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_af1be52d9f968bfab069344756bf232c4"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#af1be52d9f968bfab069344756bf232c4">armnn::ClLayerSupport::IsQuantizedLstmSupported</a></div><div class="ttdeci">bool IsQuantizedLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QuantizedLstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01227">ClLayerSupport.cpp:1227</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::LayerType::Quantize</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a5d99bdae7b6b2d5d1243f21cd59befb8"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a5d99bdae7b6b2d5d1243f21cd59befb8">armnn::ClLayerSupport::IsElementwiseUnarySupported</a></div><div class="ttdeci">bool IsElementwiseUnarySupported(const TensorInfo &amp;input, const TensorInfo &amp;ouput, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00900">ClLayerSupport.cpp:900</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a5e8fbdda1125eb5e22f14eacbe9fb351"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a5e8fbdda1125eb5e22f14eacbe9fb351">armnn::ClLayerSupport::IsGatherSupported</a></div><div class="ttdeci">bool IsGatherSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00986">ClLayerSupport.cpp:986</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::LayerType::ConvertFp16ToFp32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da">armnn::LayerType::ConvertFp32ToBf16</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a67c970dd054b991e14369de523ca3a5a"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">armnn::ClLayerSupport::IsBatchNormalizationSupported</a></div><div class="ttdeci">bool IsBatchNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00626">ClLayerSupport.cpp:626</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a1efcaf6f02892442fefca09f49ea3d7c"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">armnn::ClLayerSupport::IsConvertFp16ToFp32Supported</a></div><div class="ttdeci">bool IsConvertFp16ToFp32Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00744">ClLayerSupport.cpp:744</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a128fb9890897e08251a3f621e570cd23"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">armnn::ClLayerSupport::IsDepthToSpaceSupported</a></div><div class="ttdeci">bool IsDepthToSpaceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00840">ClLayerSupport.cpp:840</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a3adfc31e079a970e028e537ec05fabf5"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">armnn::ClLayerSupport::IsSpaceToBatchNdSupported</a></div><div class="ttdeci">bool IsSpaceToBatchNdSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01300">ClLayerSupport.cpp:1300</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a3d27a3fc6a7df0b68d80cb113aff8b6c"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">armnn::ClLayerSupport::IsResizeSupported</a></div><div class="ttdeci">bool IsResizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01276">ClLayerSupport.cpp:1276</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::LayerType::Gather</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::LayerType::Permute</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::LayerType::Resize</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::LayerType::Convolution2d</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_aa746e752ce8874669ea549f8e50896da"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da">armnn::ClLayerSupport::IsSplitterSupported</a></div><div class="ttdeci">bool IsSplitterSupported(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, const ViewsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01324">ClLayerSupport.cpp:1324</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::LayerType::MemCopy</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::LayerType::Pad</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">armnn::LayerType::Maximum</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_acc5d9a4c8f29984de3bbdca87684f317"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">armnn::ClLayerSupport::IsFillSupported</a></div><div class="ttdeci">bool IsFillSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const FillDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00947">ClLayerSupport.cpp:947</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_ab4609f1baf5fcd295951f3c8abdffd90"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">armnn::ClLayerSupport::IsStackSupported</a></div><div class="ttdeci">bool IsStackSupported(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01357">ClLayerSupport.cpp:1357</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_aa02f01bbcb48c67f5b2efc4132ec5e86"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">armnn::ClLayerSupport::IsReshapeSupported</a></div><div class="ttdeci">bool IsReshapeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReshapeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01267">ClLayerSupport.cpp:1267</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::LayerType::Reshape</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml_aa9bbc383cac59d6f02d2ef7d2cc0076f"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#aa9bbc383cac59d6f02d2ef7d2cc0076f">armnn::LayerSupportBase::IsMergeSupported</a></div><div class="ttdeci">bool IsMergeSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00419">LayerSupportBase.cpp:419</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::LayerType::Pooling2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::LayerType::Dequantize</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a6f1cae30d95bbd28dbac2a570c26c5f7"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a6f1cae30d95bbd28dbac2a570c26c5f7">armnn::ClLayerSupport::IsChannelShuffleSupported</a></div><div class="ttdeci">bool IsChannelShuffleSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ChannelShuffleDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00669">ClLayerSupport.cpp:669</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_adf54bcad228c0ac21f6735d31460cf31"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">armnn::ClLayerSupport::IsQLstmSupported</a></div><div class="ttdeci">bool IsQLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01193">ClLayerSupport.cpp:1193</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml_a9d25fabf725313fda40a41400155bafe"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#a9d25fabf725313fda40a41400155bafe">armnn::LayerSupportBase::IsMemCopySupported</a></div><div class="ttdeci">bool IsMemCopySupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00405">LayerSupportBase.cpp:405</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">armnn::LayerType::ChannelShuffle</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a08f55136b1f0907e7083d70d719f697f"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">armnn::ClLayerSupport::IsDivisionSupported</a></div><div class="ttdeci">bool IsDivisionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00887">ClLayerSupport.cpp:887</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a421e1f3865d99d52613003048342c49a"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">armnn::ClLayerSupport::IsMultiplicationSupported</a></div><div class="ttdeci">bool IsMultiplicationSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01130">ClLayerSupport.cpp:1130</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::LayerType::SpaceToDepth</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410">armnn::LayerType::Unmap</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::LayerType::DepthwiseConvolution2d</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">armnn::ClLayerSupport::IsFullyConnectedSupported</a></div><div class="ttdeci">bool IsFullyConnectedSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const TensorInfo &amp;biases, const FullyConnectedDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00969">ClLayerSupport.cpp:969</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a2e89c72cf60df7c2d2d7e5d98822b672"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">armnn::ClLayerSupport::IsDequantizeSupported</a></div><div class="ttdeci">bool IsDequantizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00830">ClLayerSupport.cpp:830</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml_ad330b6e7dcf25410ea878af0557f2197"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#ad330b6e7dcf25410ea878af0557f2197">armnn::LayerSupportBase::IsConvertBf16ToFp32Supported</a></div><div class="ttdeci">bool IsConvertBf16ToFp32Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00167">LayerSupportBase.cpp:167</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">armnn::LayerType::Rank</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_ae18f598a589683c3094a7bb41dcd3a3e"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">armnn::ClLayerSupport::IsCastSupported</a></div><div class="ttdeci">bool IsCastSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00659">ClLayerSupport.cpp:659</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::LayerType::MemImport</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::LayerType::Splitter</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c">armnn::LayerType::Map</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a48177e22e47448adb3d83e145dadf735"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">armnn::ClLayerSupport::IsAdditionSupported</a></div><div class="ttdeci">bool IsAdditionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00600">ClLayerSupport.cpp:600</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">armnn::LayerType::Shape</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_afef9436c86b37b973471f2ae546ac00a"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">armnn::ClLayerSupport::IsMaximumSupported</a></div><div class="ttdeci">bool IsMaximumSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01094">ClLayerSupport.cpp:1094</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_ab268618580d4f53bf5e9b5a47dee3f6a"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">armnn::ClLayerSupport::IsMeanSupported</a></div><div class="ttdeci">bool IsMeanSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01106">ClLayerSupport.cpp:1106</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">armnn::LayerType::QuantizedLstm</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::LayerType::ArgMinMax</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::LayerType::Lstm</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_ad29d99ecd719c640ed22dcf5c688c6a5"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">armnn::ClLayerSupport::IsInputSupported</a></div><div class="ttdeci">bool IsInputSupported(const TensorInfo &amp;input, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01000">ClLayerSupport.cpp:1000</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a8385cf8227907904a6a86fac318fc099"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">armnn::ClLayerSupport::IsSoftmaxSupported</a></div><div class="ttdeci">bool IsSoftmaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01292">ClLayerSupport.cpp:1292</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LayerType::LogSoftmax</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::LayerType::DepthToSpace</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::LayerType::Minimum</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">armnn::LayerType::Fill</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_aca4acda7ab553edfda828658d8f3882b"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">armnn::ClLayerSupport::IsL2NormalizationSupported</a></div><div class="ttdeci">bool IsL2NormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01018">ClLayerSupport.cpp:1018</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_adc84390751f227fe03a115b5fa10b0fc"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">armnn::ClLayerSupport::IsDepthwiseConvolutionSupported</a></div><div class="ttdeci">bool IsDepthwiseConvolutionSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00852">ClLayerSupport.cpp:852</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml_a0947498c6cc747db6219a22132a1b89a"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#a0947498c6cc747db6219a22132a1b89a">armnn::LayerSupportBase::IsConvertFp32ToBf16Supported</a></div><div class="ttdeci">bool IsConvertFp32ToBf16Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00181">LayerSupportBase.cpp:181</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::LayerType::Transpose</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a91fb5f44d8b9427dc45443aa9ebfe13e"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">armnn::ClLayerSupport::IsConvertFp32ToFp16Supported</a></div><div class="ttdeci">bool IsConvertFp32ToFp16Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00754">ClLayerSupport.cpp:754</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a0813546a09bf2caba6794014d1960624"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">armnn::ClLayerSupport::IsInstanceNormalizationSupported</a></div><div class="ttdeci">bool IsInstanceNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01006">ClLayerSupport.cpp:1006</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::PaddingMode::Constant</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_aa955675303d67b1d1fb51fb7f09d8c21"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">armnn::ClLayerSupport::IsPooling2dSupported</a></div><div class="ttdeci">bool IsPooling2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01177">ClLayerSupport.cpp:1177</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_ab3adb3a28736529682e4ff0ea976dcd3"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">armnn::ClLayerSupport::IsActivationSupported</a></div><div class="ttdeci">bool IsActivationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00588">ClLayerSupport.cpp:588</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::LayerType::Slice</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::LayerType::Division</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_ab2af1e7da9490d29e569d271e16b0d5c"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">armnn::ClLayerSupport::IsSpaceToDepthSupported</a></div><div class="ttdeci">bool IsSpaceToDepthSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01312">ClLayerSupport.cpp:1312</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a">armnn::LayerType::ConvertBf16ToFp32</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_adc5695cc25f4055c7ed54bdc8604a098"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">armnn::ClLayerSupport::IsBatchToSpaceNdSupported</a></div><div class="ttdeci">bool IsBatchToSpaceNdSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00647">ClLayerSupport.cpp:647</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_adf18c4fa8fc9e0cdae1967990aa90fe8"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">armnn::ClLayerSupport::IsConstantSupported</a></div><div class="ttdeci">bool IsConstantSupported(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00736">ClLayerSupport.cpp:736</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::LayerType::QLstm</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_layer_support_xhtml_a0c69484f19ed650ad48b716719114e51"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">armnn::ClLayerSupport::IsTransposeConvolution2dSupported</a></div><div class="ttdeci">bool IsTransposeConvolution2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01394">ClLayerSupport.cpp:1394</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a772790c60d70814e30b5bec70fd98776"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a772790c60d70814e30b5bec70fd98776">&#9670;&nbsp;</a></span>IsLogicalBinarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLogicalBinarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01030">1030</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_logical_and_workload_8cpp_source.xhtml#l00020">armnn::ClLogicalAndWorkloadValidate()</a>, <a class="el" href="_cl_logical_or_workload_8cpp_source.xhtml#l00020">armnn::ClLogicalOrWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalAnd</a>, <a class="el" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalOr</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l01479">LogicalBinaryDescriptor::m_Operation</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;{</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.m_Operation)</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    {</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">LogicalBinaryOperation::LogicalAnd</a>:</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7900acef495ac8033a08d3ed74f06970">ClLogicalAndWorkloadValidate</a>,</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;                                           input0,</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">LogicalBinaryOperation::LogicalOr</a>:</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a89391e63f7a679b023e6bd1798186db6">ClLogicalOrWorkloadValidate</a>,</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;                                           input0,</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;    }</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a89391e63f7a679b023e6bd1798186db6"><div class="ttname"><a href="namespacearmnn.xhtml#a89391e63f7a679b023e6bd1798186db6">armnn::ClLogicalOrWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogicalOrWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_logical_or_workload_8cpp_source.xhtml#l00020">ClLogicalOrWorkload.cpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalBinaryOperation::LogicalAnd</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalBinaryOperation::LogicalOr</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7900acef495ac8033a08d3ed74f06970"><div class="ttname"><a href="namespacearmnn.xhtml#a7900acef495ac8033a08d3ed74f06970">armnn::ClLogicalAndWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogicalAndWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_logical_and_workload_8cpp_source.xhtml#l00020">ClLogicalAndWorkload.cpp:20</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa0380b797cb9932fb03067dbe2cdecfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0380b797cb9932fb03067dbe2cdecfb">&#9670;&nbsp;</a></span>IsLogSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLogSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01058">1058</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_log_softmax_workload_8cpp_source.xhtml#l00017">armnn::ClLogSoftmaxWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;{</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7071f5d6693d3014ddcb34c886ffc734">ClLogSoftmaxWorkloadValidate</a>,</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                                   input,</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a7071f5d6693d3014ddcb34c886ffc734"><div class="ttname"><a href="namespacearmnn.xhtml#a7071f5d6693d3014ddcb34c886ffc734">armnn::ClLogSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_log_softmax_workload_8cpp_source.xhtml#l00017">ClLogSoftmaxWorkload.cpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a862535721737220f62a49f14ff494dd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a862535721737220f62a49f14ff494dd5">&#9670;&nbsp;</a></span>IsLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>scratchBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01070">1070</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_lstm_float_workload_8cpp_source.xhtml#l00270">armnn::ClLstmFloatWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;{</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a90ab88fe4c7aa9466c4653404a6b2213">ClLstmFloatWorkloadValidate</a>,</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                                   input,</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>,</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>,</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a>,</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1137f204e3ac4cbe3183443fe3bd321">outputStateOut</a>,</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">cellStateOut</a>,</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aca7a974c8803242968a8d6540275264a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">armnn::ILayerSupport::paramsInfo</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const LstmDescriptor const LstmInputParamsInfo &amp; paramsInfo</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a90ab88fe4c7aa9466c4653404a6b2213"><div class="ttname"><a href="namespacearmnn.xhtml#a90ab88fe4c7aa9466c4653404a6b2213">armnn::ClLstmFloatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLstmFloatWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_lstm_float_workload_8cpp_source.xhtml#l00270">ClLstmFloatWorkload.cpp:270</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ae1137f204e3ac4cbe3183443fe3bd321"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ae1137f204e3ac4cbe3183443fe3bd321">armnn::ILayerSupport::outputStateOut</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; outputStateOut</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a5a01de4e3851a25f2df77897fb8f7083"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">armnn::ILayerSupport::outputStateIn</a></div><div class="ttdeci">const TensorInfo &amp; outputStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aec04a02758804219fb461623464a8e96"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">armnn::ILayerSupport::cellStateIn</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; cellStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a4f6f59c4e91c7c37d9a119d615093ed3"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">armnn::ILayerSupport::scratchBuffer</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo &amp; scratchBuffer</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a4f64b4bd88c5b89212af9a3e68a613b0"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">armnn::ILayerSupport::cellStateOut</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; cellStateOut</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afef9436c86b37b973471f2ae546ac00a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afef9436c86b37b973471f2ae546ac00a">&#9670;&nbsp;</a></span>IsMaximumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMaximumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01094">1094</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_maximum_workload_8cpp_source.xhtml#l00024">armnn::ClMaximumWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;{</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a553706c6338ffc52b0d916859f642587">ClMaximumWorkloadValidate</a>,</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                                   input0,</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a553706c6338ffc52b0d916859f642587"><div class="ttname"><a href="namespacearmnn.xhtml#a553706c6338ffc52b0d916859f642587">armnn::ClMaximumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClMaximumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_maximum_workload_8cpp_source.xhtml#l00024">ClMaximumWorkload.cpp:24</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab268618580d4f53bf5e9b5a47dee3f6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab268618580d4f53bf5e9b5a47dee3f6a">&#9670;&nbsp;</a></span>IsMeanSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMeanSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01106">1106</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_mean_workload_8cpp_source.xhtml#l00017">armnn::ClMeanValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;{</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a048a8ea8b1b39343a73ca7458024ea54">ClMeanValidate</a>,</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                                   input,</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a048a8ea8b1b39343a73ca7458024ea54"><div class="ttname"><a href="namespacearmnn.xhtml#a048a8ea8b1b39343a73ca7458024ea54">armnn::ClMeanValidate</a></div><div class="ttdeci">arm_compute::Status ClMeanValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_mean_workload_8cpp_source.xhtml#l00017">ClMeanWorkload.cpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3d0eafb3de560b3482f857b56b2b2116"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d0eafb3de560b3482f857b56b2b2116">&#9670;&nbsp;</a></span>IsMinimumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMinimumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01118">1118</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_minimum_workload_8cpp_source.xhtml#l00024">armnn::ClMinimumWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;{</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8c04c8e796a4fbec706df42ed9c27e4e">ClMinimumWorkloadValidate</a>,</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;                                   input0,</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8c04c8e796a4fbec706df42ed9c27e4e"><div class="ttname"><a href="namespacearmnn.xhtml#a8c04c8e796a4fbec706df42ed9c27e4e">armnn::ClMinimumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClMinimumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_minimum_workload_8cpp_source.xhtml#l00024">ClMinimumWorkload.cpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a421e1f3865d99d52613003048342c49a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a421e1f3865d99d52613003048342c49a">&#9670;&nbsp;</a></span>IsMultiplicationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMultiplicationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01130">1130</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_multiplication_workload_8cpp_source.xhtml#l00018">armnn::ClMultiplicationWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;{</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9638165cb6c1baae3b2b5fd9f0f75201">ClMultiplicationWorkloadValidate</a>,</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;                                   input0,</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9638165cb6c1baae3b2b5fd9f0f75201"><div class="ttname"><a href="namespacearmnn.xhtml#a9638165cb6c1baae3b2b5fd9f0f75201">armnn::ClMultiplicationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClMultiplicationWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_multiplication_workload_8cpp_source.xhtml#l00018">ClMultiplicationWorkload.cpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a994c2065561141bf37fcd2ff7bb4af4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a994c2065561141bf37fcd2ff7bb4af4d">&#9670;&nbsp;</a></span>IsNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01143">1143</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_normalization_float_workload_8cpp_source.xhtml#l00019">armnn::ClNormalizationWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;{</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a144c2e243a255715f309999077ed1792">ClNormalizationWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a144c2e243a255715f309999077ed1792"><div class="ttname"><a href="namespacearmnn.xhtml#a144c2e243a255715f309999077ed1792">armnn::ClNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_normalization_float_workload_8cpp_source.xhtml#l00019">ClNormalizationFloatWorkload.cpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aef3244c0ef64c8f2f352d21ce0c06985"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef3244c0ef64c8f2f352d21ce0c06985">&#9670;&nbsp;</a></span>IsOutputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsOutputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01151">1151</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;{</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <span class="keywordflow">return</span> IsClBackendSupported(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0534291adf9f3436ba331552eba29a43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0534291adf9f3436ba331552eba29a43">&#9670;&nbsp;</a></span>IsPadSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPadSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01157">1157</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_pad_workload_8cpp_source.xhtml#l00062">armnn::ClPadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;{</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#adcf7b7d939bac1cfaeb333c7b3175bb8">ClPadValidate</a>,</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                                   input,</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adcf7b7d939bac1cfaeb333c7b3175bb8"><div class="ttname"><a href="namespacearmnn.xhtml#adcf7b7d939bac1cfaeb333c7b3175bb8">armnn::ClPadValidate</a></div><div class="ttdeci">arm_compute::Status ClPadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_pad_workload_8cpp_source.xhtml#l00062">ClPadWorkload.cpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9d553495d9a94fa55588ae159d8bda30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d553495d9a94fa55588ae159d8bda30">&#9670;&nbsp;</a></span>IsPermuteSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPermuteSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01169">1169</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_permute_workload_8cpp_source.xhtml#l00017">armnn::ClPermuteWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;{</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a26c25df9e2271333ab4d4ef71db41dca">ClPermuteWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a26c25df9e2271333ab4d4ef71db41dca"><div class="ttname"><a href="namespacearmnn.xhtml#a26c25df9e2271333ab4d4ef71db41dca">armnn::ClPermuteWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClPermuteWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_permute_workload_8cpp_source.xhtml#l00017">ClPermuteWorkload.cpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa955675303d67b1d1fb51fb7f09d8c21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa955675303d67b1d1fb51fb7f09d8c21">&#9670;&nbsp;</a></span>IsPooling2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPooling2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01177">1177</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_pooling2d_workload_8cpp_source.xhtml#l00018">armnn::ClPooling2dWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;{</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8a21bb33f7f054ce7b48a8c7df9e6d4a">ClPooling2dWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8a21bb33f7f054ce7b48a8c7df9e6d4a"><div class="ttname"><a href="namespacearmnn.xhtml#a8a21bb33f7f054ce7b48a8c7df9e6d4a">armnn::ClPooling2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClPooling2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_pooling2d_workload_8cpp_source.xhtml#l00018">ClPooling2dWorkload.cpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4b36dcedd5edbd5142b3548967aadc2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b36dcedd5edbd5142b3548967aadc2f">&#9670;&nbsp;</a></span>IsPreluSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPreluSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01185">1185</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_prelu_workload_8cpp_source.xhtml#l00016">armnn::ClPreluWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;{</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae58d1f4437a779274037bc86efac9e26">ClPreluWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a218e2ebb5babb8323688906b8997eafb"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">armnn::ILayerSupport::alpha</a></div><div class="ttdeci">const TensorInfo &amp; alpha</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00404">ILayerSupport.hpp:404</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae58d1f4437a779274037bc86efac9e26"><div class="ttname"><a href="namespacearmnn.xhtml#ae58d1f4437a779274037bc86efac9e26">armnn::ClPreluWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClPreluWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_prelu_workload_8cpp_source.xhtml#l00016">ClPreluWorkload.cpp:16</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adf54bcad228c0ac21f6735d31460cf31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf54bcad228c0ac21f6735d31460cf31">&#9670;&nbsp;</a></span>IsQLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousOutputIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousCellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01193">1193</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_q_lstm_workload_8cpp_source.xhtml#l00247">armnn::ClQLstmWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;{</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    <span class="keywordflow">if</span> (input.GetDataType()               == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()    == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1137f204e3ac4cbe3183443fe3bd321">outputStateOut</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()      == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">cellStateOut</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()        == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()              == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>)</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    {</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;        <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8cdb508cb0ebc06e39dc1661815d73b0">ClQLstmWorkloadValidate</a>,</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;                                       input,</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>,</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>,</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">cellStateOut</a>,</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1137f204e3ac4cbe3183443fe3bd321">outputStateOut</a>,</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    }</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    {</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    }</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aca7a974c8803242968a8d6540275264a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">armnn::ILayerSupport::paramsInfo</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const LstmDescriptor const LstmInputParamsInfo &amp; paramsInfo</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ae1137f204e3ac4cbe3183443fe3bd321"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ae1137f204e3ac4cbe3183443fe3bd321">armnn::ILayerSupport::outputStateOut</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; outputStateOut</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ad5e0e3fb8a59107ac3366028a057db12"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">armnn::ILayerSupport::previousCellStateIn</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; previousCellStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00417">ILayerSupport.hpp:417</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a5b09834cc88bb4156e291c37bd2434ff"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">armnn::ILayerSupport::previousOutputIn</a></div><div class="ttdeci">const TensorInfo &amp; previousOutputIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00417">ILayerSupport.hpp:417</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8cdb508cb0ebc06e39dc1661815d73b0"><div class="ttname"><a href="namespacearmnn.xhtml#a8cdb508cb0ebc06e39dc1661815d73b0">armnn::ClQLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClQLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_q_lstm_workload_8cpp_source.xhtml#l00247">ClQLstmWorkload.cpp:247</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a4f64b4bd88c5b89212af9a3e68a613b0"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">armnn::ILayerSupport::cellStateOut</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; cellStateOut</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af1be52d9f968bfab069344756bf232c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1be52d9f968bfab069344756bf232c4">&#9670;&nbsp;</a></span>IsQuantizedLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantizedLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousCellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousOutputIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01227">1227</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_quantized_lstm_workload_8cpp_source.xhtml#l00018">armnn::ClQuantizedLstmWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;{</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a5fb7fe07abfb2373103d842b47a24726">ClQuantizedLstmWorkloadValidate</a>,</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;                                   input,</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>,</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>,</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">cellStateOut</a>,</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aca7a974c8803242968a8d6540275264a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">armnn::ILayerSupport::paramsInfo</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const LstmDescriptor const LstmInputParamsInfo &amp; paramsInfo</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ad5e0e3fb8a59107ac3366028a057db12"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">armnn::ILayerSupport::previousCellStateIn</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; previousCellStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00417">ILayerSupport.hpp:417</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a5b09834cc88bb4156e291c37bd2434ff"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">armnn::ILayerSupport::previousOutputIn</a></div><div class="ttdeci">const TensorInfo &amp; previousOutputIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00417">ILayerSupport.hpp:417</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a4f64b4bd88c5b89212af9a3e68a613b0"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4f64b4bd88c5b89212af9a3e68a613b0">armnn::ILayerSupport::cellStateOut</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; cellStateOut</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5fb7fe07abfb2373103d842b47a24726"><div class="ttname"><a href="namespacearmnn.xhtml#a5fb7fe07abfb2373103d842b47a24726">armnn::ClQuantizedLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClQuantizedLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QuantizedLstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_quantized_lstm_workload_8cpp_source.xhtml#l00018">ClQuantizedLstmWorkload.cpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad2c7be6b84b04444e514f52f593b3df7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2c7be6b84b04444e514f52f593b3df7">&#9670;&nbsp;</a></span>IsQuantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01245">1245</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_quantize_workload_8cpp_source.xhtml#l00022">armnn::ClQuantizeWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;{</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9c1b478e30a1e8a4ecac874cf15f13d4">ClQuantizeWorkloadValidate</a>,</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;                                   input,</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9c1b478e30a1e8a4ecac874cf15f13d4"><div class="ttname"><a href="namespacearmnn.xhtml#a9c1b478e30a1e8a4ecac874cf15f13d4">armnn::ClQuantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClQuantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_quantize_workload_8cpp_source.xhtml#l00022">ClQuantizeWorkload.cpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a917c126e64314263b8b5f7bca455ddfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a917c126e64314263b8b5f7bca455ddfb">&#9670;&nbsp;</a></span>IsReduceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsReduceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01255">1255</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_reduce_workload_8cpp_source.xhtml#l00018">armnn::ClReduceWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;{</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4c42dfd9db4a47e470b5800bb11a8374">ClReduceWorkloadValidate</a>,</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;                                   input,</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4c42dfd9db4a47e470b5800bb11a8374"><div class="ttname"><a href="namespacearmnn.xhtml#a4c42dfd9db4a47e470b5800bb11a8374">armnn::ClReduceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClReduceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_reduce_workload_8cpp_source.xhtml#l00018">ClReduceWorkload.cpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa02f01bbcb48c67f5b2efc4132ec5e86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa02f01bbcb48c67f5b2efc4132ec5e86">&#9670;&nbsp;</a></span>IsReshapeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsReshapeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01267">1267</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_reshape_workload_8cpp_source.xhtml#l00015">armnn::ClReshapeWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, and <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;{</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af5bb7a834a74983cbbc249785d0c392b">ClReshapeWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>);</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af5bb7a834a74983cbbc249785d0c392b"><div class="ttname"><a href="namespacearmnn.xhtml#af5bb7a834a74983cbbc249785d0c392b">armnn::ClReshapeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClReshapeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_reshape_workload_8cpp_source.xhtml#l00015">ClReshapeWorkload.cpp:15</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3d27a3fc6a7df0b68d80cb113aff8b6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d27a3fc6a7df0b68d80cb113aff8b6c">&#9670;&nbsp;</a></span>IsResizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsResizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01276">1276</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_resize_workload_8cpp_source.xhtml#l00022">armnn::ClResizeWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;{</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a95b187d3c6b7b46f4fbdc60be69fc02c">ClResizeWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a95b187d3c6b7b46f4fbdc60be69fc02c"><div class="ttname"><a href="namespacearmnn.xhtml#a95b187d3c6b7b46f4fbdc60be69fc02c">armnn::ClResizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClResizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_resize_workload_8cpp_source.xhtml#l00022">ClResizeWorkload.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0e14dafa85cfcd4a6b6b752284b51e63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e14dafa85cfcd4a6b6b752284b51e63">&#9670;&nbsp;</a></span>IsSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01284">1284</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_slice_workload_8cpp_source.xhtml#l00018">armnn::ClSliceWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;{</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a6d85d2806d0a90140832ad8113c1d350">ClSliceWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a6d85d2806d0a90140832ad8113c1d350"><div class="ttname"><a href="namespacearmnn.xhtml#a6d85d2806d0a90140832ad8113c1d350">armnn::ClSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_slice_workload_8cpp_source.xhtml#l00018">ClSliceWorkload.cpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8385cf8227907904a6a86fac318fc099"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8385cf8227907904a6a86fac318fc099">&#9670;&nbsp;</a></span>IsSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01292">1292</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_softmax_workload_8cpp_source.xhtml#l00017">armnn::ClSoftmaxWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;{</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#abc6f7e5fe77e5aed3f7842755dd34073">ClSoftmaxWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abc6f7e5fe77e5aed3f7842755dd34073"><div class="ttname"><a href="namespacearmnn.xhtml#abc6f7e5fe77e5aed3f7842755dd34073">armnn::ClSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_softmax_workload_8cpp_source.xhtml#l00017">ClSoftmaxWorkload.cpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3adfc31e079a970e028e537ec05fabf5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3adfc31e079a970e028e537ec05fabf5">&#9670;&nbsp;</a></span>IsSpaceToBatchNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpaceToBatchNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01300">1300</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_space_to_batch_nd_workload_8cpp_source.xhtml#l00023">armnn::ClSpaceToBatchNdWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;{</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a534b28fd4b345bbc938d055ff5b8970f">ClSpaceToBatchNdWorkloadValidate</a>,</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;                                   input,</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a534b28fd4b345bbc938d055ff5b8970f"><div class="ttname"><a href="namespacearmnn.xhtml#a534b28fd4b345bbc938d055ff5b8970f">armnn::ClSpaceToBatchNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSpaceToBatchNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_space_to_batch_nd_workload_8cpp_source.xhtml#l00023">ClSpaceToBatchNdWorkload.cpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab2af1e7da9490d29e569d271e16b0d5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2af1e7da9490d29e569d271e16b0d5c">&#9670;&nbsp;</a></span>IsSpaceToDepthSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpaceToDepthSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01312">1312</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_space_to_depth_workload_8cpp_source.xhtml#l00054">armnn::ClSpaceToDepthWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;{</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4fa3292a277dde3b46be6a44b2de9713">ClSpaceToDepthWorkloadValidate</a>,</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;                                   input,</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4fa3292a277dde3b46be6a44b2de9713"><div class="ttname"><a href="namespacearmnn.xhtml#a4fa3292a277dde3b46be6a44b2de9713">armnn::ClSpaceToDepthWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSpaceToDepthWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_space_to_depth_workload_8cpp_source.xhtml#l00054">ClSpaceToDepthWorkload.cpp:54</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa746e752ce8874669ea549f8e50896da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa746e752ce8874669ea549f8e50896da">&#9670;&nbsp;</a></span>IsSplitterSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSplitterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01324">1324</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_splitter_workload_8cpp_source.xhtml#l00031">armnn::ClSplitterWorkloadValidate()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00220">armnn::ComputeSplitAxis()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00300">ViewsDescriptor::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00434">TensorInfo::IsTypeSpaceMatch()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00500">ILayerSupport::outputs</a>, and <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00017">armnn::SetValueChecked()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;{</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTECL_ENABLED)</span></div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <span class="comment">// Split along the last dimension, cannot use sub-tensors</span></div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    <span class="comment">// as width and height of the sub-tensors do not match</span></div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    <span class="comment">// the width and height of the parent tensor</span></div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <span class="comment">// in case of input with more than 2D.</span></div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    std::set&lt;unsigned int&gt; splitAxis = <a class="code" href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">ComputeSplitAxis</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, input.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 2 &amp;&amp; splitAxis.size() == 1 &amp;&amp;</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;        *splitAxis.begin() == <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() - 1 )</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    {</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;        <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a3ac8a60f837b19b20987e4fd238ce0cd">ClSplitterWorkloadValidate</a>,</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;                                       input,</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>,</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;                                       *splitAxis.begin());</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    }</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a> : <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>)</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    {</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;        <span class="keywordflow">if</span> (!input.IsTypeSpaceMatch(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;        {</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Cl Splitter: Types and quantization parameters must match.&quot;</span>);</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;        }</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;    }</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3ac8a60f837b19b20987e4fd238ce0cd"><div class="ttname"><a href="namespacearmnn.xhtml#a3ac8a60f837b19b20987e4fd238ce0cd">armnn::ClSplitterWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSplitterWorkloadValidate(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, unsigned int splitAxis)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_splitter_workload_8cpp_source.xhtml#l00031">ClSplitterWorkload.cpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a311602de6b1e53b4feb3b8a37a433f44"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">armnn::ILayerSupport::outputs</a></div><div class="ttdeci">const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt; &gt; &amp; outputs</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00500">ILayerSupport.hpp:500</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8cbabc875597b3bed0ccdc0adb289fde"><div class="ttname"><a href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">armnn::ComputeSplitAxis</a></div><div class="ttdeci">std::set&lt; unsigned int &gt; ComputeSplitAxis(const armnn::SplitterDescriptor &amp;desc, const TensorShape &amp;input)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_utils_8hpp_source.xhtml#l00220">ArmComputeUtils.hpp:220</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a13c7d751e4d37f65a6d40c3c6e50d2b8"><div class="ttname"><a href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">armnn::SetValueChecked</a></div><div class="ttdeci">void SetValueChecked(Optional&lt; T &amp;&gt; optionalRef, V &amp;&amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00017">LayerSupportCommon.hpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab4609f1baf5fcd295951f3c8abdffd90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4609f1baf5fcd295951f3c8abdffd90">&#9670;&nbsp;</a></span>IsStackSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsStackSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01357">1357</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_stack_workload_8cpp_source.xhtml#l00029">armnn::ClStackWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;{</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8c9fec997dbb5db4cdb433c36d075782">ClStackWorkloadValidate</a>,</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;                                   inputs,</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8c9fec997dbb5db4cdb433c36d075782"><div class="ttname"><a href="namespacearmnn.xhtml#a8c9fec997dbb5db4cdb433c36d075782">armnn::ClStackWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClStackWorkloadValidate(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_stack_workload_8cpp_source.xhtml#l00029">ClStackWorkload.cpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac054cb25099005eac854afb1511340f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac054cb25099005eac854afb1511340f0">&#9670;&nbsp;</a></span>IsStridedSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsStridedSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01369">1369</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_strided_slice_workload_8cpp_source.xhtml#l00027">armnn::ClStridedSliceWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;{</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a157e0508f6d6d08e3ca4cf6c661242e6">ClStridedSliceWorkloadValidate</a>,</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;                                   input,</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a157e0508f6d6d08e3ca4cf6c661242e6"><div class="ttname"><a href="namespacearmnn.xhtml#a157e0508f6d6d08e3ca4cf6c661242e6">armnn::ClStridedSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClStridedSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_strided_slice_workload_8cpp_source.xhtml#l00027">ClStridedSliceWorkload.cpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af6c947e4d4b25bc49d92d18d4ff26736"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6c947e4d4b25bc49d92d18d4ff26736">&#9670;&nbsp;</a></span>IsSubtractionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSubtractionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01381">1381</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_subtraction_workload_8cpp_source.xhtml#l00046">armnn::ClSubtractionValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;{</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#afa9933f1d9de469ffba5ba0fcee769f8">ClSubtractionValidate</a>,</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;                                   input0,</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_afa9933f1d9de469ffba5ba0fcee769f8"><div class="ttname"><a href="namespacearmnn.xhtml#afa9933f1d9de469ffba5ba0fcee769f8">armnn::ClSubtractionValidate</a></div><div class="ttdeci">arm_compute::Status ClSubtractionValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_subtraction_workload_8cpp_source.xhtml#l00046">ClSubtractionWorkload.cpp:46</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0c69484f19ed650ad48b716719114e51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c69484f19ed650ad48b716719114e51">&#9670;&nbsp;</a></span>IsTransposeConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTransposeConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01394">1394</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_transpose_convolution2d_workload_8cpp_source.xhtml#l00026">armnn::ClTransposeConvolution2dWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;{</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a719ea81939d6a25f8636b52c59165d66">ClTransposeConvolution2dWorkloadValidate</a>,</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;                                   input,</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>,</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>);</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a71cf13fc7f7aeac054919e0c6dcab52e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">armnn::ILayerSupport::biases</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo const Optional&lt; TensorInfo &gt; &amp; biases</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a719ea81939d6a25f8636b52c59165d66"><div class="ttname"><a href="namespacearmnn.xhtml#a719ea81939d6a25f8636b52c59165d66">armnn::ClTransposeConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClTransposeConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_transpose_convolution2d_workload_8cpp_source.xhtml#l00026">ClTransposeConvolution2dWorkload.cpp:26</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a631f893f44415523924016ed3f54a661"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">armnn::ILayerSupport::weights</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo &amp; weights</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0189645f33641b280877a1b2f6ba9fee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0189645f33641b280877a1b2f6ba9fee">&#9670;&nbsp;</a></span>IsTransposeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTransposeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01410">1410</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_transpose_workload_8cpp_source.xhtml#l00017">armnn::ClTransposeWorkloadValidate()</a>, and <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00143">FORWARD_WORKLOAD_VALIDATE_FUNC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">ClLayerSupport::IsLayerSupported()</a>, and <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">ClLayerSupport::~ClLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;{</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1c3a39fbecb45be0bb15dd665c9be61d">ClTransposeWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1c3a39fbecb45be0bb15dd665c9be61d"><div class="ttname"><a href="namespacearmnn.xhtml#a1c3a39fbecb45be0bb15dd665c9be61d">armnn::ClTransposeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClTransposeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_transpose_workload_8cpp_source.xhtml#l00017">ClTransposeWorkload.cpp:17</a></div></div>
<div class="ttc" id="_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00143">ClLayerSupport.cpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a270213ba0d973536f85375d4f839b697"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a270213ba0d973536f85375d4f839b697">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/cl/<a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a></li>
<li>src/backends/cl/<a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:45 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
