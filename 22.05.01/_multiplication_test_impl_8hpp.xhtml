<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/MultiplicationTestImpl.hpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_multiplication_test_impl_8hpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MultiplicationTestImpl.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="include_2armnn_test_utils_2_layer_test_result_8hpp_source.xhtml">armnnTestUtils/LayerTestResult.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_i_backend_internal_8hpp_source.xhtml">armnn/backends/IBackendInternal.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml">armnn/backends/WorkloadFactory.hpp</a>&gt;</code><br />
</div>
<p><a href="_multiplication_test_impl_8hpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab7950f4e2ffcdf27eb2b81408c47c720"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#ab7950f4e2ffcdf27eb2b81408c47c720">MultiplicationTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:ab7950f4e2ffcdf27eb2b81408c47c720"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab16021183e750594aa3308f6b15f43c5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 5 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#ab16021183e750594aa3308f6b15f43c5">Multiplication5dTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:ab16021183e750594aa3308f6b15f43c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3c440cc96ac0f4edbe6e3c7cd243441"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#ab3c440cc96ac0f4edbe6e3c7cd243441">MultiplicationBroadcast1ElementTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:ab3c440cc96ac0f4edbe6e3c7cd243441"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb2587380a0f243fee920d181f35fd97"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#afb2587380a0f243fee920d181f35fd97">MultiplicationBroadcast1DVectorTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:afb2587380a0f243fee920d181f35fd97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9d59c03ac9109db34b4f4befb76d5f7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#ad9d59c03ac9109db34b4f4befb76d5f7">MultiplicationUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:ad9d59c03ac9109db34b4f4befb76d5f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20ecf3acbd6431b09baa62012ddf4818"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#a20ecf3acbd6431b09baa62012ddf4818">MultiplicationBroadcast1ElementUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a20ecf3acbd6431b09baa62012ddf4818"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc0d633a4318e7ee7e47413ef60a474c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#acc0d633a4318e7ee7e47413ef60a474c">MultiplicationBroadcast1DVectorUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:acc0d633a4318e7ee7e47413ef60a474c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f055a5f6a995101a6787c2a3b278095"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#a1f055a5f6a995101a6787c2a3b278095">MultiplicationInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a1f055a5f6a995101a6787c2a3b278095"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e440a7f3839ddc8d244694661e60809"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#a2e440a7f3839ddc8d244694661e60809">MultiplicationBroadcast1ElementInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a2e440a7f3839ddc8d244694661e60809"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4ae12522532880994ac5039e09ec1ea"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#ae4ae12522532880994ac5039e09ec1ea">MultiplicationBroadcast1DVectorInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:ae4ae12522532880994ac5039e09ec1ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe5456aa5e9e736021e3934deec04fdb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int32_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#afe5456aa5e9e736021e3934deec04fdb">MultiplicationInt32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:afe5456aa5e9e736021e3934deec04fdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f0d503f25d69a7b5690d382a1b3be58"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int32_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#a7f0d503f25d69a7b5690d382a1b3be58">MultiplicationBroadcast1ElementInt32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a7f0d503f25d69a7b5690d382a1b3be58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4002da98714bb13e765f42b82d00a628"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int32_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#a4002da98714bb13e765f42b82d00a628">MultiplicationBroadcast1DVectorInt32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a4002da98714bb13e765f42b82d00a628"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac73d55da3081f8bf640dfb7f354ff1c1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_multiplication_test_impl_8hpp.xhtml#ac73d55da3081f8bf640dfb7f354ff1c1">CompareMultiplicationTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;refWorkloadFactory, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;refTensorHandleFactory)</td></tr>
<tr class="separator:ac73d55da3081f8bf640dfb7f354ff1c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ac73d55da3081f8bf640dfb7f354ff1c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac73d55da3081f8bf640dfb7f354ff1c1">&#9670;&nbsp;</a></span>CompareMultiplicationTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; CompareMultiplicationTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>refWorkloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>refTensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00525">525</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00014">CopyDataFromITensorHandle()</a>, <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00009">CopyDataToITensorHandle()</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">ITensorHandleFactory::CreateTensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01559">IWorkloadFactory::CreateWorkload()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00196">TensorInfo::GetNumElements()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::Multiplication</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;{</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width = 16;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = 32;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channelCount = 2;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 5;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo0;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo1;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = { batchSize, channelCount, height, width };</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    inputTensorInfo0 = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    inputTensorInfo1 = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, shape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="keyword">auto</span> input0 = MakeRandomTensor&lt;float&gt;(inputTensorInfo0, 803506992);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keyword">auto</span> input1 = MakeRandomTensor&lt;float&gt;(inputTensorInfo1, 54902257);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    std::vector&lt;float&gt; actualOutput(outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>());</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    std::vector&lt;float&gt; expectedOutput(outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>());</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle0 = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo0);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle1 = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo1);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle0Ref = refTensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo0);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle1Ref = refTensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo1);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandleRef = refTensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <a class="code" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">armnn::MultiplicationQueueDescriptor</a> data;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo0, inputHandle0.get());</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo1, inputHandle1.get());</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <a class="code" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">armnn::MultiplicationQueueDescriptor</a> refData = data;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> refInfo = info;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    SetWorkloadInput(refData, refInfo, 0, inputTensorInfo0, inputHandle0Ref.get());</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    SetWorkloadInput(refData, refInfo, 1, inputTensorInfo1, inputHandle1Ref.get());</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    SetWorkloadOutput(refData, refInfo, 0, outputTensorInfo, outputHandleRef.get());</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a>, data, info);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workloadRef</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a>, refData, refInfo);</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    inputHandle0-&gt;Allocate();</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    inputHandle1-&gt;Allocate();</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    inputHandle0Ref-&gt;Allocate();</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    inputHandle1Ref-&gt;Allocate();</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    outputHandleRef-&gt;Allocate();</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle0.get(), input0.data());</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle1.get(), input1.data());</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle0Ref.get(), input0.data());</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle1Ref.get(), input1.data());</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    workload-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    workloadRef-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    workloadRef-&gt;Execute();</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(expectedOutput.data(), outputHandleRef.get());</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 4&gt;</a>(actualOutput,</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                     expectedOutput,</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                                     outputHandle-&gt;GetShape(),</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                                     outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_multiplication_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">armnn::MultiplicationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00286">WorkloadData.hpp:286</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml_ab5dfed8358e500ed523d78090ec78e88"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *mem, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about TensorInfos of a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_test_utils_2_layer_test_result_8hpp_source.xhtml#l00015">LayerTestResult.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a13060ebb89d2c21a7a5d897e99cccf72"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">armnn::IWorkloadFactory::CreateWorkload</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateWorkload(LayerType type, const QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01559">WorkloadFactory.cpp:1559</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml_a375f11dd42ff042435e8771cf287b20c"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">armnn::ITensorHandleFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00196">Tensor.hpp:196</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab16021183e750594aa3308f6b15f43c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab16021183e750594aa3308f6b15f43c5">&#9670;&nbsp;</a></span>Multiplication5dTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 5&gt; Multiplication5dTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00061">61</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width        = 3u;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height       = 2u;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channelCount = 2u;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize    = 2u;;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth        = 2u;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = { depth, batchSize, channelCount, height, width };</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    std::vector&lt;float&gt; input0 =</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        1.80f, 0.20f, 2.30f,  1.30f, 2.10f, 1.00f,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        2.60f, 0.60f, 2.10f,  2.30f, 2.30f, 2.00f,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        2.50f, 1.00f, 2.90f,  3.10f, 1.50f, 2.40f,</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        2.80f, 1.10f, 1.00f,  3.20f, 1.00f, 2.30f,</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        0.30f, 2.20f, 1.00f,  0.20f, 1.60f, 1.40f,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        0.80f, 3.20f, 0.10f,  0.10f, 3.10f, 2.10f,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        1.50f, 2.40f, 1.40f,  0.70f, 2.40f, 1.40f,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        1.60f, 1.20f, 1.90f,  0.80f, 0.00f, 0.10f,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    };</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    std::vector&lt;float&gt; input1 =</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        0.70f, 1.00f, 2.90f,  2.20f, 3.10f, 2.80f,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        1.80f, 2.00f, 0.50f,  2.30f, 1.20f, 2.70f,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        2.40f, 0.20f, 3.20f,  1.60f, 0.20f, 2.50f,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        2.30f, 0.70f, 2.70f,  1.80f, 2.90f, 2.70f,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        3.20f, 3.20f, 0.70f,  1.90f, 2.70f, 2.50f,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        2.40f, 0.90f, 2.30f,  1.80f, 2.50f, 2.00f,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        1.60f, 2.20f, 1.60f,  2.00f, 0.30f, 3.20f,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        0.40f, 3.00f, 2.60f,  0.30f, 0.00f, 2.50f,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    };</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    std::vector&lt;float&gt; output =</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        1.26f, 0.20f, 6.67f,  2.86f, 6.51f, 2.80f,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        4.68f, 1.20f, 1.05f,  5.29f, 2.76f, 5.40f,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        6.00f, 0.20f, 9.28f,  4.96f, 0.30f, 6.00f,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        6.44f, 0.77f, 2.70f,  5.76f, 2.90f, 6.21f,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        0.96f, 7.04f, 0.70f,  0.38f, 4.32f, 3.50f,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        1.92f, 2.88f, 0.23f,  0.18f, 7.75f, 4.20f,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        2.40f, 5.28f, 2.24f,  1.40f, 0.72f, 4.48f,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        0.64f, 3.60f, 4.94f,  0.24f, 0.00f, 0.25f,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    };</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;5, armnn::MultiplicationQueueDescriptor, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        workloadFactory,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        memoryManager,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        shape,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        input0,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        shape,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        input1,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        shape,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        output,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae4ae12522532880994ac5039e09ec1ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4ae12522532880994ac5039e09ec1ea">&#9670;&nbsp;</a></span>MultiplicationBroadcast1DVectorInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; MultiplicationBroadcast1DVectorInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00386">386</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;{</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 3 };</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    std::vector&lt;int16_t&gt; input0 =</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    {</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        1, 2, 3,  4,  5,  6,</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        7, 8, 9, 10, 11, 12</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    };</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    std::vector&lt;int16_t&gt; input1 = { 1, 2, 3 };</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    std::vector&lt;int16_t&gt; output =</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        1,  4,  9,  4, 10, 18,</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        7, 16, 27, 10, 22, 36</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    };</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        workloadFactory,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        memoryManager,</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        shape0,</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        input0,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        shape1,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        input1,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        shape0,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        output,</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4002da98714bb13e765f42b82d00a628"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4002da98714bb13e765f42b82d00a628">&#9670;&nbsp;</a></span>MultiplicationBroadcast1DVectorInt32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int32_t, 4&gt; MultiplicationBroadcast1DVectorInt32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00491">491</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;{</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 3 };</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    std::vector&lt;int32_t&gt; input0 =</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    {</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        1, 2, 3,  4,  5,  6,</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        7, 8, 9, 10, 11, 12</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    };</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    std::vector&lt;int32_t&gt; input1 = { 1, 2, 3 };</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    std::vector&lt;int32_t&gt; output =</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    {</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        1,  4,  9,  4, 10, 18,</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        7, 16, 27, 10, 22, 36</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    };</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        workloadFactory,</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        memoryManager,</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        shape0,</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        input0,</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        shape1,</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        input1,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        shape0,</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        output,</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afb2587380a0f243fee920d181f35fd97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb2587380a0f243fee920d181f35fd97">&#9670;&nbsp;</a></span>MultiplicationBroadcast1DVectorTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; MultiplicationBroadcast1DVectorTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00159">159</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 3, 3, 2 };</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 2 };</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    std::vector&lt;float&gt; input0 =</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        1,   2,    3,  4,    5,  6,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        7,   8,    9, 10,   11, 12,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        13, 14,   15, 16,   17, 18</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    };</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    std::vector&lt;float&gt; input1 = { 1, 2 };</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    std::vector&lt;float&gt; output =</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;         1,  4,    3,  8,    5, 12,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;         7, 16,    9, 20,   11, 24,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        13, 28,   15, 32,   17, 36</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    };</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        workloadFactory,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        memoryManager,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        shape0,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        input0,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        shape1,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        input1,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        shape0,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        output,</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="acc0d633a4318e7ee7e47413ef60a474c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc0d633a4318e7ee7e47413ef60a474c">&#9670;&nbsp;</a></span>MultiplicationBroadcast1DVectorUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; MultiplicationBroadcast1DVectorUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00281">281</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 3 };</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    std::vector&lt;uint8_t&gt; input0 =</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        1, 2, 3,    4,  5,  6,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        7, 8, 9,   10, 11, 12</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    };</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    std::vector&lt;uint8_t&gt; input1 = { 1, 2, 3 };</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    std::vector&lt;uint8_t&gt; output =</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        1,  4,   9,     4, 10, 18,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        7, 16,  27,    10, 22, 36</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    };</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        workloadFactory,</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        memoryManager,</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        shape0,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        input0,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        shape1,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        input1,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        shape0,</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        output,</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2e440a7f3839ddc8d244694661e60809"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e440a7f3839ddc8d244694661e60809">&#9670;&nbsp;</a></span>MultiplicationBroadcast1ElementInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; MultiplicationBroadcast1ElementInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00352">352</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;{</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 1 };</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    std::vector&lt;int16_t&gt; input0 =</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    {</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        1, 2, 3,  4,  5,  6,</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        7, 8, 9, 10, 11, 12</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    };</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    std::vector&lt;int16_t&gt; input1 = { 2 };</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    std::vector&lt;int16_t&gt; output =</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    {</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        2,   4,  6,  8, 10, 12,</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        14, 16, 18, 20, 22, 24</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    };</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        workloadFactory,</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        memoryManager,</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        shape0,</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        input0,</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        shape1,</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        input1,</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        shape0,</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        output,</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7f0d503f25d69a7b5690d382a1b3be58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f0d503f25d69a7b5690d382a1b3be58">&#9670;&nbsp;</a></span>MultiplicationBroadcast1ElementInt32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int32_t, 4&gt; MultiplicationBroadcast1ElementInt32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00457">457</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;{</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 1 };</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    std::vector&lt;int32_t&gt; input0 =</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    {</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        1, 2, 3,  4,  5,  6,</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        7, 8, 9, 10, 11, 12</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    };</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    std::vector&lt;int32_t&gt; input1 = { 2 };</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    std::vector&lt;int32_t&gt; output =</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    {</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        2,   4,  6,  8, 10, 12,</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        14, 16, 18, 20, 22, 24</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    };</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        workloadFactory,</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        memoryManager,</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        shape0,</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        input0,</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        shape1,</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        input1,</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        shape0,</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        output,</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab3c440cc96ac0f4edbe6e3c7cd243441"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3c440cc96ac0f4edbe6e3c7cd243441">&#9670;&nbsp;</a></span>MultiplicationBroadcast1ElementTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; MultiplicationBroadcast1ElementTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 2 };</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 1 };</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    std::vector&lt;float&gt; input0 = { 1, 2, 3, 4, 5, 6, 7, 8};</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    std::vector&lt;float&gt; input1 = { 2 };</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    std::vector&lt;float&gt; output = { 2, 4, 6, 8, 10, 12, 14, 16};</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        workloadFactory,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        memoryManager,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        shape0,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        input0,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        shape1,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        input1,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        shape0,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        output,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a20ecf3acbd6431b09baa62012ddf4818"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20ecf3acbd6431b09baa62012ddf4818">&#9670;&nbsp;</a></span>MultiplicationBroadcast1ElementUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; MultiplicationBroadcast1ElementUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00247">247</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 1 };</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    std::vector&lt;uint8_t&gt; input0 =</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        1, 2, 3,    4,  5,  6,</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        7, 8, 9,   10, 11, 12</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    };</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    std::vector&lt;uint8_t&gt; input1 = { 2 };</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    std::vector&lt;uint8_t&gt; output =</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        2,  4,   6,    8, 10, 12,</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        14, 16, 18,   20, 22, 24</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    };</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        workloadFactory,</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        memoryManager,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        shape0,</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        input0,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        shape1,</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        input1,</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        shape0,</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        output,</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1f055a5f6a995101a6787c2a3b278095"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f055a5f6a995101a6787c2a3b278095">&#9670;&nbsp;</a></span>MultiplicationInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; MultiplicationInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00315">315</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;{</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    std::vector&lt;int16_t&gt; input0 =</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        6,   7,  8,  9, 10, 11,</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        12, 13, 14, 15, 16, 17</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    };</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    std::vector&lt;int16_t&gt; input1 =</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        1, 2, 3,  4,  5,  6,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        7, 8, 9, 10, 11, 12</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    };</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    std::vector&lt;int16_t&gt; output =</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        6,   14,  24,  36,  50,  66,</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        84, 104, 126, 150, 176, 204</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    };</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        workloadFactory,</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        memoryManager,</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        shape,</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        input0,</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        shape,</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        input1,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        shape,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        output,</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afe5456aa5e9e736021e3934deec04fdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe5456aa5e9e736021e3934deec04fdb">&#9670;&nbsp;</a></span>MultiplicationInt32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int32_t, 4&gt; MultiplicationInt32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00420">420</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;{</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    std::vector&lt;int32_t&gt; input0 =</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    {</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        6,   7,  8,  9, 10, 11,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        12, 13, 14, 15, 16, 17</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    };</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    std::vector&lt;int32_t&gt; input1 =</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        1, 2, 3,  4,  5,  6,</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        7, 8, 9, 10, 11, 12</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    };</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    std::vector&lt;int32_t&gt; output =</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        6,   14,  24,  36,  50,  66,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        84, 104, 126, 150, 176, 204</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    };</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        workloadFactory,</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        memoryManager,</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        shape,</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        input0,</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        shape,</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        input1,</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        shape,</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        output,</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab7950f4e2ffcdf27eb2b81408c47c720"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7950f4e2ffcdf27eb2b81408c47c720">&#9670;&nbsp;</a></span>MultiplicationTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; MultiplicationTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width        = 2u;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height       = 2u;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channelCount = 2u;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize    = 2u;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = { batchSize, channelCount, height, width };</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    std::vector&lt;float&gt; input0 =</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        1, 1, 1, 1,  2, 2, 2, 2,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        3, 3, 3, 3,  4, 4, 4, 4</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    };</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    std::vector&lt;float&gt; input1 =</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        2, 2, 2, 2,  3, 3, 3, 3,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        4, 4, 4, 4,  5, 5, 5, 5</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    };</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    std::vector&lt;float&gt; output =</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;         2,  2,  2,  2,   6,  6,  6,  6,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        12, 12, 12, 12,  20, 20, 20, 20</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    };</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        workloadFactory,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        memoryManager,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        shape,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        input0,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        shape,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        input1,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        shape,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        output,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad9d59c03ac9109db34b4f4befb76d5f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9d59c03ac9109db34b4f4befb76d5f7">&#9670;&nbsp;</a></span>MultiplicationUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; MultiplicationUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00195">195</a> of file <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml">MultiplicationTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;{</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 1u;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channels  = 2u;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height    = 2u;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width     = 3u;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = { batchSize, channels, height, width };</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="comment">// See dequantized values to the right</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    std::vector&lt;uint8_t&gt; input0 =</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;         62,  37,   3, 172,  13, 111, <span class="comment">// 244, 144,   8, 684,  48, 440,</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        188,  20,  73,  31,  23,  31  <span class="comment">// 748,  76, 288, 120,  88, 120</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    };</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// See dequantized values to the right</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    std::vector&lt;uint8_t&gt; input1 =</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        126, 240, 252, 183, 121, 247, <span class="comment">// 384, 726, 762, 555, 369, 747,</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;         48, 115, 151,  79,  78,  97  <span class="comment">// 150, 351, 459, 243, 240, 297</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    };</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="comment">// See dequantized values to the right</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    std::vector&lt;uint8_t&gt; output =</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;         64,  72,   0, 255,   8, 236, <span class="comment">//  93696, 104544, 6096(clamped), 379620(clamped), 17712, 328680,</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;         77,  15,  92,  16,  10,  21, <span class="comment">// 112200,  26676,        132192,           29160, 21120,  35640</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    };</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="comment">// Scale/offset chosen to have output values out of range</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MultiplicationQueueDescriptor, armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        workloadFactory,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        memoryManager,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        shape,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        input0,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        4.0f,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        1,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        shape,</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        input1,</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        3.0f,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        -2,</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        shape,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        output,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        tensorHandleFactory,</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        1366.255f,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        -5);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_multiplication_test_impl_8hpp.xhtml">MultiplicationTestImpl.hpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:26 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
