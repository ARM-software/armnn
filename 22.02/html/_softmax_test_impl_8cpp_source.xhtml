<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/SoftmaxTestImpl.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_softmax_test_impl_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SoftmaxTestImpl.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_softmax_test_impl_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_softmax_test_impl_8hpp.xhtml">SoftmaxTestImpl.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_quantize_helper_8hpp.xhtml">armnnUtils/QuantizeHelper.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml">armnnTestUtils/TensorCopyUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_test_utils_2_workload_test_utils_8hpp.xhtml">armnnTestUtils/WorkloadTestUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml">armnnTestUtils/TensorHelpers.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">struct </span>Simple3dSoftmaxOutputData</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; outputData =</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        0.0964599f, 0.26220518f, 0.0964599f, 0.0964599f,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        0.15903549f, 0.0964599f, 0.0964599f, 0.0964599f</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    };</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputShape{ 1, 8, 1 };</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; inputData =</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        0.5f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    };</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;};</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">struct </span>Simple4dSoftmaxData</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputShape{ 1, 8, 1, 1 };</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; outputData =</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        0.0964599f, 0.26220518f, 0.0964599f, 0.0964599f,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        0.15903549f, 0.0964599f, 0.0964599f, 0.0964599f</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    };</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; inputData =</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;         0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;         0.5f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    };</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;};</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, std::<span class="keywordtype">size_t</span> n, <span class="keyword">typename</span> T = armnn::ResolveType&lt;ArmnnType&gt;&gt;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, n&gt;</a> SimpleSoftmaxBaseTestImpl(</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">float</span> beta,</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; inputShape,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt;&amp; outputData,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt;&amp; inputData,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordtype">int</span> axis = -1)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">using</span> std::exp;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> qScale = 1.f / 256.f;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> qOffset = 0;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    inputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(inputShape, ArmnnType);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(inputShape, ArmnnType);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// Each row is independently softmax&#39;d.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    std::vector&lt;T&gt; input = armnnUtils::QuantizedVector&lt;T&gt;(inputData, qScale, qOffset);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    std::vector&lt;T&gt; expectedOutput = armnnUtils::QuantizedVector&lt;T&gt;(outputData, qScale, qOffset);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    std::vector&lt;T&gt; actualOutput(outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>());</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle  = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">armnn::SoftmaxQueueDescriptor</a> data;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a> = beta;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">m_Axis</a> = axis;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a>, data, info);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), input.data());</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(workload);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    ExecuteWorkload(*workload, memoryManager);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, n&gt;</a>(actualOutput,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                 expectedOutput,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                 outputHandle-&gt;GetShape(),</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                 outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, <span class="keyword">typename</span> T = armnn::ResolveType&lt;ArmnnType&gt;&gt;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a> SimpleSoftmaxTestImpl(</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">using</span> std::exp;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputShape{ 2, 4 };</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">float</span> x0[4] = { exp((0.f - 1.0f) * beta), exp((1.0f - 1.0f) * beta),</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    exp((0.0f - 1.0f) * beta), exp((0.0f - 1.0f) * beta) };</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">float</span> sum0 = x0[0] + x0[1] + x0[2] + x0[3];</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordtype">float</span> x1[4] = { exp((0.5f - 0.5f) * beta), exp((0.0f - 0.5f) * beta),</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    exp((0.0f - 0.5f) * beta), exp((0.0f - 0.5f) * beta) };</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">float</span> sum1 = x1[0] + x1[1] + x1[2] + x1[3];</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; outputData = { x0[0] / sum0, x0[1] / sum0, x0[2] / sum0, x0[3] / sum0,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                            x1[0] / sum1, x1[1] / sum1, x1[2] / sum1, x1[3] / sum1 };</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; inputData =</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                0.f, 1.f, 0.f, 0.f,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                .5f, 0.f, 0.f, 0.f,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            };</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> SimpleSoftmaxBaseTestImpl&lt;ArmnnType, 2&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                                   inputShape, outputData, inputData);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, <span class="keyword">typename</span> T = armnn::ResolveType&lt;ArmnnType&gt;&gt;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a> SimpleSoftmaxTestImpl(</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordtype">float</span> beta,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordtype">int</span> axis)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputShape;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    std::vector&lt;float&gt; inputData;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    std::vector&lt;float&gt; outputData;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">switch</span> (axis)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">case</span> -2:</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">case</span> 0:</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        inputShape = {5, 2};</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        inputData =</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        17.0f, -1.0f, 16.0f, -2.0f, 15.0f, -3.0f, 14.0f, -4.0f, 1.0f, -17.0f</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                };</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        outputData =</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                        0.643914213228014f, 0.643914213228014f, 0.236882800924671f, 0.236882800924671f,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        0.087144312427294f,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        0.087144312427294f, 0.032058600957022f, 0.032058600957022f, 7.246299848982885e-08f,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        7.246299848982885e-08f</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                };</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">case</span> -1:</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        inputShape = {2, 5};</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        inputData =</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        17.0f, 16.0f, 15.0f, 14.0f, 1.0f, -1.0f, -2.0f, -3.0f, -4.0f, -17.0f</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                };</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        outputData =</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                        7.246299848982885e-08f,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        7.246299848982885e-08f</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                };</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">return</span> SimpleSoftmaxBaseTestImpl&lt;ArmnnType, 2&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                                   inputShape, outputData, inputData, axis);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, <span class="keyword">typename</span> T = armnn::ResolveType&lt;ArmnnType&gt;&gt;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 3&gt;</a> Simple3dSoftmaxTestImpl(</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordtype">float</span> beta,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; inputShape,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt;&amp; outputData,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt;&amp; inputData,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordtype">int</span> axis = 1)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">return</span> SimpleSoftmaxBaseTestImpl&lt;ArmnnType, 3&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                                   inputShape, outputData, inputData, axis);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;}</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, <span class="keyword">typename</span> T = armnn::ResolveType&lt;ArmnnType&gt;&gt;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 4&gt;</a> Simple4dSoftmaxTestImpl(</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordtype">float</span> beta,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; inputShape,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt;&amp; outputData,</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt;&amp; inputData,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordtype">int</span> axis = 1)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;{</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> SimpleSoftmaxBaseTestImpl&lt;ArmnnType, 4&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                                   inputShape, outputData, inputData, axis);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, <span class="keyword">typename</span> T = armnn::ResolveType&lt;ArmnnType&gt;&gt;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a> CompareSoftmaxTestImpl(</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; refWorkloadFactory,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; refTensorHandleFactory,</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batchSize = 20;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> channels = 30;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { batchSize, channels };</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    inputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(2, inputShape, ArmnnType);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(2, inputShape, ArmnnType);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordtype">float</span> qScale = 1.f / 256.f;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordtype">int</span> qOffset = 0;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(qScale);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(qOffset);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">auto</span> input = MakeRandomTensor&lt;T&gt;(inputTensorInfo, 0xF00D, 0.0f, 1.0f);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    std::vector&lt;T&gt; actualOutput(outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>());</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    std::vector&lt;T&gt; expectedOutput(outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>());</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle  = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">armnn::SoftmaxQueueDescriptor</a> data;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a> = beta;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandleRef =</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        refTensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandleRef  =</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        refTensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">armnn::SoftmaxQueueDescriptor</a> refData = data;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> refInfo = info;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    SetWorkloadInput(refData, refInfo, 0, inputTensorInfo, inputHandleRef.get());</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    SetWorkloadOutput(refData, refInfo, 0, outputTensorInfo, outputHandleRef.get());</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a>, data, info);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workloadRef = refWorkloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a>,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                                                                      refData,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                                                                      refInfo);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    outputHandleRef-&gt;Allocate();</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    inputHandleRef-&gt;Allocate();</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), input.data());</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandleRef.get(), input.data());</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    ExecuteWorkload(*workload, memoryManager);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    workloadRef-&gt;Execute();</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(expectedOutput.data(), outputHandleRef.get());</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a>(actualOutput,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                 expectedOutput,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                 outputHandle-&gt;GetShape(),</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                 outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;} <span class="comment">// anonymous namespace</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#ad12a99e56904f102b2c35ffc1b3763b7">  315</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float,2&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#a561da5cae6f7d7f9648c94e9807bee19">SimpleSoftmaxTest</a>(</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;{</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordflow">return</span> SimpleSoftmaxTestImpl&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;}</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#affa90ca9b41133a8490ce6b11e23a4b4">  324</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float,2&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#ada59563419a522ed58525846a3d45f78">SimpleAxisSoftmaxTest</a>(</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordtype">float</span> beta,</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordtype">int</span> axis)</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;{</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">return</span> SimpleSoftmaxTestImpl&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager,</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                                           tensorHandleFactory, beta, axis);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;}</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#a8c2b9d48b1d6a1aeec50187d55b74332">  335</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float,3&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#a3bf0788640509f4f33b302578ac80b7f">Simple3dSoftmaxTest</a>(</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;{</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    Simple3dSoftmaxOutputData data;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">return</span> Simple3dSoftmaxTestImpl&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta,</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                                             data.inputShape, data.outputData, data.inputData);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;}</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#a6e8a487834d46990b765ca7df57af9f7">  346</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float,3&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#a2f98e881f910c374dae115a18eebc077">Simple3dAxisSoftmaxTest</a>(</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordtype">float</span> beta,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordtype">int</span> axis)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputShape;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    std::vector&lt;float&gt; inputData;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    std::vector&lt;float&gt; outputData;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordflow">switch</span> (axis)</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    {</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">case</span> -3:</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">case</span> 0:</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            inputShape = {5, 2, 2};</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            inputData =</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                    {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                            17.0f, -1.0f, 17.0f, -1.0f, 16.0f, -2.0f, 16.0f, -2.0f, 15.0f, -3.0f,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                            15.0f, -3.0f, 14.0f, -4.0f, 14.0f, -4.0f, 1.0f, -17.0f, 1.0f, -17.0f</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                    };</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            outputData =</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                    {</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                            0.643914213228014f, 0.643914213228014f, 0.643914213228014f, 0.643914213228014f,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                            0.236882800924671f,</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                            0.236882800924671f, 0.236882800924671f, 0.236882800924671f, 0.087144312427294f,</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                            0.087144312427294f,</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                            0.087144312427294f, 0.087144312427294f, 0.032058600957022f, 0.032058600957022f,</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                            0.032058600957022f,</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                            0.032058600957022f, 7.246299848982885e-08f, 7.246299848982885e-08f, 7.246299848982885e-08f,</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                            7.246299848982885e-08f</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    };</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        }</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordflow">case</span> -2:</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            inputShape = {2, 5, 2};</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            inputData =</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                    {</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                            17.0f, -1.0f, 16.0f, -2.0f, 15.0f, -3.0f, 14.0f, -4.0f, 1.0f, -17.0f,</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                            17.0f, -1.0f, 16.0f, -2.0f, 15.0f, -3.0f, 14.0f, -4.0f, 1.0f, -17.0f</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    };</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            outputData =</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    {</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                            0.643914213228014f, 0.643914213228014f, 0.236882800924671f, 0.236882800924671f,</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                            0.087144312427294f,</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                            0.087144312427294f, 0.032058600957022f, 0.032058600957022f, 7.246299848982885e-08f,</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                            0.643914213228014f, 0.643914213228014f, 0.236882800924671f, 0.236882800924671f,</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                            0.087144312427294f,</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                            0.087144312427294f, 0.032058600957022f, 0.032058600957022f, 7.246299848982885e-08f,</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                            7.246299848982885e-08f</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                    };</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keywordflow">case</span> -1:</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            inputShape = {2, 2, 5};</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            inputData =</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                    {</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                            17.0f, 16.0f, 15.0f, 14.0f, 1.0f, -1.0f, -2.0f, -3.0f, -4.0f, -17.0f,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                            17.0f, 16.0f, 15.0f, 14.0f, 1.0f, -1.0f, -2.0f, -3.0f, -4.0f, -17.0f</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                    };</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            outputData =</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                    {</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                            7.246299848982885e-08f</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                    };</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        }</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    }</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">return</span> Simple3dSoftmaxTestImpl&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta,</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                                                             inputShape, outputData, inputData, axis);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;}</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#a412ce1b38b05ddc762a5f104a63299bd">  441</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float,4&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#a4a9b296c727beeeb5764a7a1f91307ae">Simple4dSoftmaxTest</a>(</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;{</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    Simple4dSoftmaxData data;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">return</span> Simple4dSoftmaxTestImpl&lt;armnn::DataType::Float32&gt;(workloadFactory, memoryManager, tensorHandleFactory,</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                                             beta, data.inputShape, data.outputData, data.inputData);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;}</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#a683e68d6893c261c69ac25523a348750">  452</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float,4&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#ae16e9e44f9cf9bdb5460875b1ec3b551">Simple4dAxisSoftmaxTest</a>(</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordtype">float</span> beta,</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordtype">int</span> axis)</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;{</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputShape;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    std::vector&lt;float&gt; inputData;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    std::vector&lt;float&gt; outputData;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keywordflow">switch</span> (axis)</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    {</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keywordflow">case</span> -4:</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="keywordflow">case</span> 0:</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        {</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            inputShape = {5, 2, 2, 2};</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            inputData =</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                    {</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                            17.0f, -1.0f, 17.0f, -1.0f, 17.0f, -1.0f, 17.0f, -1.0f, 16.0f, -2.0f,</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                            16.0f, -2.0f, 16.0f, -2.0f, 16.0f, -2.0f, 15.0f, -3.0f, 15.0f, -3.0f,</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                            15.0f, -3.0f, 15.0f, -3.0f, 14.0f, -4.0f, 14.0f, -4.0f, 14.0f, -4.0f,</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                            14.0f, -4.0f, 1.0f, -17.0f, 1.0f, -17.0f, 1.0f, -17.0f, 1.0f, -17.0f</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    };</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            outputData =</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    {</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                            0.643914213228014f, 0.643914213228014f, 0.643914213228014f, 0.643914213228014f,</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                            0.643914213228014f,</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                            0.643914213228014f, 0.643914213228014f, 0.643914213228014f, 0.236882800924671f,</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                            0.236882800924671f,</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                            0.236882800924671f, 0.236882800924671f, 0.236882800924671f, 0.236882800924671f,</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                            0.236882800924671f,</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                            0.236882800924671f, 0.087144312427294f, 0.087144312427294f, 0.087144312427294f,</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                            0.087144312427294f,</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                            0.087144312427294f, 0.087144312427294f, 0.087144312427294f, 0.087144312427294f,</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                            0.032058600957022f,</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                            0.032058600957022f, 0.032058600957022f, 0.032058600957022f, 0.032058600957022f,</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                            0.032058600957022f,</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                            0.032058600957022f, 0.032058600957022f, 7.246299848982885e-08f, 7.246299848982885e-08f,</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                            7.246299848982885e-08f, 7.246299848982885e-08f, 7.246299848982885e-08f,</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                            7.246299848982885e-08f, 7.246299848982885e-08f</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                    };</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        }</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">case</span> -3:</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            inputShape = {2, 5, 2, 2};</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            inputData =</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                    {</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                            17.0f, -1.0f, 17.0f, -1.0f, 16.0f, -2.0f, 16.0f, -2.0f, 15.0f, -3.0f,</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                            15.0f, -3.0f, 14.0f, -4.0f, 14.0f, -4.0f, 1.0f, -17.0f, 1.0f, -17.0f,</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                            17.0f, -1.0f, 17.0f, -1.0f, 16.0f, -2.0f, 16.0f, -2.0f, 15.0f, -3.0f,</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                            15.0f, -3.0f, 14.0f, -4.0f, 14.0f, -4.0f, 1.0f, -17.0f, 1.0f, -17.0f</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                    };</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            outputData =</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                    {</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                            0.643914213228014f, 0.643914213228014f, 0.643914213228014f, 0.643914213228014f,</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                            0.236882800924671f,</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                            0.236882800924671f, 0.236882800924671f, 0.236882800924671f, 0.087144312427294f,</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                            0.087144312427294f,</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                            0.087144312427294f, 0.087144312427294f, 0.032058600957022f, 0.032058600957022f,</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                            0.032058600957022f,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                            0.032058600957022f, 7.246299848982885e-08f, 7.246299848982885e-08f, 7.246299848982885e-08f,</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                            0.643914213228014f, 0.643914213228014f, 0.643914213228014f, 0.643914213228014f,</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                            0.236882800924671f,</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                            0.236882800924671f, 0.236882800924671f, 0.236882800924671f, 0.087144312427294f,</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                            0.087144312427294f,</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                            0.087144312427294f, 0.087144312427294f, 0.032058600957022f, 0.032058600957022f,</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                            0.032058600957022f,</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                            0.032058600957022f, 7.246299848982885e-08f, 7.246299848982885e-08f, 7.246299848982885e-08f,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                            7.246299848982885e-08f</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                    };</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        }</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keywordflow">case</span> -2:</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        {</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        inputShape = {2, 2, 5, 2};</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        inputData =</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                {</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                        17.0f, -1.0f, 16.0f, -2.0f, 15.0f, -3.0f, 14.0f, -4.0f, 1.0f, -17.0f,</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                        17.0f, -1.0f, 16.0f, -2.0f, 15.0f, -3.0f, 14.0f, -4.0f, 1.0f, -17.0f,</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                        17.0f, -1.0f, 16.0f, -2.0f, 15.0f, -3.0f, 14.0f, -4.0f, 1.0f, -17.0f,</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                        17.0f, -1.0f, 16.0f, -2.0f, 15.0f, -3.0f, 14.0f, -4.0f, 1.0f, -17.0f</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                };</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        outputData =</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                {</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                        0.643914213228014f, 0.643914213228014f, 0.236882800924671f, 0.236882800924671f,</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                        0.087144312427294f,</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                        0.087144312427294f, 0.032058600957022f, 0.032058600957022f, 7.246299848982885e-08f,</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                        7.246299848982885e-08f,</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                        0.643914213228014f, 0.643914213228014f, 0.236882800924671f, 0.236882800924671f,</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                        0.087144312427294f,</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                        0.087144312427294f, 0.032058600957022f, 0.032058600957022f, 7.246299848982885e-08f,</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                        7.246299848982885e-08f,</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                        0.643914213228014f, 0.643914213228014f, 0.236882800924671f, 0.236882800924671f,</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                        0.087144312427294f,</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                        0.087144312427294f, 0.032058600957022f, 0.032058600957022f, 7.246299848982885e-08f,</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                        7.246299848982885e-08f,</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                        0.643914213228014f, 0.643914213228014f, 0.236882800924671f, 0.236882800924671f,</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                        0.087144312427294f,</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                        0.087144312427294f, 0.032058600957022f, 0.032058600957022f, 7.246299848982885e-08f,</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                        7.246299848982885e-08f</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                };</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        }</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordflow">case</span> -1:</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        {</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            inputShape = {2, 2, 2, 5};</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            inputData =</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                    {</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                            17.0f, 16.0f, 15.0f, 14.0f, 1.0f, -1.0f, -2.0f, -3.0f, -4.0f, -17.0f,</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                            17.0f, 16.0f, 15.0f, 14.0f, 1.0f, -1.0f, -2.0f, -3.0f, -4.0f, -17.0f,</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                            17.0f, 16.0f, 15.0f, 14.0f, 1.0f, -1.0f, -2.0f, -3.0f, -4.0f, -17.0f,</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                            17.0f, 16.0f, 15.0f, 14.0f, 1.0f, -1.0f, -2.0f, -3.0f, -4.0f, -17.0f</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                    };</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            outputData =</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                    {</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                            7.246299848982885e-08f,</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                            0.643914213228014f, 0.236882800924671f, 0.087144312427294f, 0.032058600957022f,</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                            7.246299848982885e-08f</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    };</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        }</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    }</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="keywordflow">return</span> Simple4dSoftmaxTestImpl&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        workloadFactory,</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        memoryManager,</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        tensorHandleFactory,</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        beta,</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        inputShape,</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        outputData,</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        inputData,</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        axis);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;}</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#ab2fec938d04d1ae085a4487a961aff34">  618</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;uint8_t,2&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#aa439f3d72fad64e1c0a55874a47a1b89">SimpleSoftmaxUint8Test</a>(</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;{</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keywordflow">return</span> SimpleSoftmaxTestImpl&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;}</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#ac8bdec035fd0687ff56316bd5436e17f">  627</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;uint8_t,3&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#ac8bdec035fd0687ff56316bd5436e17f">Simple3dSoftmaxUint8Test</a>(</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;{</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    Simple3dSoftmaxOutputData data;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keywordflow">return</span> Simple3dSoftmaxTestImpl&lt;armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        workloadFactory,</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        memoryManager,</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        tensorHandleFactory,</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        beta,</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        data.inputShape,</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        data.outputData,</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        data.inputData);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;}</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#ab018dc7df739cf10efe0ecb80a68426d">  644</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;uint8_t,4&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#ab018dc7df739cf10efe0ecb80a68426d">Simple4dSoftmaxUint8Test</a>(</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;{</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    Simple4dSoftmaxData data;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keywordflow">return</span> Simple4dSoftmaxTestImpl&lt;armnn::DataType::QAsymmU8&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta,</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                                                                     data.inputShape, data.outputData, data.inputData);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;}</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#a434b38c0f3a12e1bbd7012d16e7bbc94">  656</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;armnn::Half,2&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#a434b38c0f3a12e1bbd7012d16e7bbc94">SimpleSoftmaxFloat16Test</a>(</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;{</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keywordflow">return</span> SimpleSoftmaxTestImpl&lt;armnn::DataType::Float16&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta);</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;}</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#a85b85f17da5920b81cd0cb2d3477c234">  665</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;armnn::Half,3&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#a85b85f17da5920b81cd0cb2d3477c234">Simple3dSoftmaxFloat16Test</a>(</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;{</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    Simple3dSoftmaxOutputData data;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keywordflow">return</span> Simple3dSoftmaxTestImpl&lt;armnn::DataType::Float16&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta,</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                                                             data.inputShape, data.outputData, data.inputData);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;}</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#a5edfd63a67aa3ee02b9e52baed58ef7e">  676</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;armnn::Half,4&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#a5edfd63a67aa3ee02b9e52baed58ef7e">Simple4dSoftmaxFloat16Test</a>(</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;{</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    Simple4dSoftmaxData data;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <span class="keywordflow">return</span> Simple4dSoftmaxTestImpl&lt;armnn::DataType::Float16&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta,</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                                                             data.inputShape, data.outputData, data.inputData);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;}</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#aa7d6977cae60f24e609e5d346b0d87c0">  687</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;int16_t,2&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#aa7d6977cae60f24e609e5d346b0d87c0">SimpleSoftmaxUint16Test</a>(</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;{</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keywordflow">return</span> SimpleSoftmaxTestImpl&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta);</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;}</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div><div class="line"><a name="l00696"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#afbb6f20378aa4b413ce218692a14faaa">  696</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;int16_t,3&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#afbb6f20378aa4b413ce218692a14faaa">Simple3dSoftmaxUint16Test</a>(</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;{</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    Simple3dSoftmaxOutputData data;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="keywordflow">return</span> Simple3dSoftmaxTestImpl&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta,</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                                                                     data.inputShape, data.outputData, data.inputData);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;}</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#a5a4c7e3680cee3bb9b8a00aed371ce74">  707</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;int16_t,4&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#a5a4c7e3680cee3bb9b8a00aed371ce74">Simple4dSoftmaxUint16Test</a>(</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;{</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    Simple4dSoftmaxData data;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keywordflow">return</span> Simple4dSoftmaxTestImpl&lt;armnn::DataType::QSymmS16&gt;(workloadFactory, memoryManager, tensorHandleFactory, beta,</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                                                                     data.inputShape, data.outputData, data.inputData);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;}</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00719"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#a68419c202a13d276d49c4f2fb03646c1">  719</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float,2&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#a14632b64d972e828f2846b7c573deab9">CompareSoftmaxTest</a>(</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; refWorkloadFactory,</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; refTensorHandleFactory,</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;{</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="keywordflow">return</span> CompareSoftmaxTestImpl&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        workloadFactory, memoryManager, refWorkloadFactory, tensorHandleFactory, refTensorHandleFactory, beta);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;}</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno"><a class="line" href="_softmax_test_impl_8hpp.xhtml#a41973d9e7e7582b7a3ce78847923d4ef">  731</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;uint8_t,2&gt;</a> <a class="code" href="_softmax_test_impl_8cpp.xhtml#aec92c92c6f7285c4c59a6bbc7d7640d5">CompareSoftmaxUint8Test</a>(</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; refWorkloadFactory,</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; refTensorHandleFactory,</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;{</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keywordflow">return</span> CompareSoftmaxTestImpl&lt;armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        workloadFactory, memoryManager, refWorkloadFactory, tensorHandleFactory, refTensorHandleFactory, beta);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;}</div><div class="ttc" id="_softmax_test_impl_8cpp_xhtml_ae16e9e44f9cf9bdb5460875b1ec3b551"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#ae16e9e44f9cf9bdb5460875b1ec3b551">Simple4dAxisSoftmaxTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 4 &gt; Simple4dAxisSoftmaxTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta, int axis)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00452">SoftmaxTestImpl.cpp:452</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_a4a9b296c727beeeb5764a7a1f91307ae"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#a4a9b296c727beeeb5764a7a1f91307ae">Simple4dSoftmaxTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 4 &gt; Simple4dSoftmaxTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00441">SoftmaxTestImpl.cpp:441</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_afbb6f20378aa4b413ce218692a14faaa"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#afbb6f20378aa4b413ce218692a14faaa">Simple3dSoftmaxUint16Test</a></div><div class="ttdeci">LayerTestResult&lt; int16_t, 3 &gt; Simple3dSoftmaxUint16Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00696">SoftmaxTestImpl.cpp:696</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml_a214c3636fdf0ea5bac8edb42d0e6c7f0"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">armnn::SoftmaxDescriptor::m_Axis</a></div><div class="ttdeci">int m_Axis</div><div class="ttdoc">Scalar, defaulted to the last index (-1), specifying the dimension the activation will be performed o...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00165">Descriptors.hpp:165</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_a85b85f17da5920b81cd0cb2d3477c234"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#a85b85f17da5920b81cd0cb2d3477c234">Simple3dSoftmaxFloat16Test</a></div><div class="ttdeci">LayerTestResult&lt; armnn::Half, 3 &gt; Simple3dSoftmaxFloat16Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00665">SoftmaxTestImpl.cpp:665</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="_quantize_helper_8hpp_xhtml"><div class="ttname"><a href="_quantize_helper_8hpp.xhtml">QuantizeHelper.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00022">WorkloadFactory.hpp:22</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_a5a4c7e3680cee3bb9b8a00aed371ce74"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#a5a4c7e3680cee3bb9b8a00aed371ce74">Simple4dSoftmaxUint16Test</a></div><div class="ttdeci">LayerTestResult&lt; int16_t, 4 &gt; Simple4dSoftmaxUint16Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00707">SoftmaxTestImpl.cpp:707</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml_a8275d51ef9a584feb95726ea0522f6e5"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">armnn::SoftmaxDescriptor::m_Beta</a></div><div class="ttdeci">float m_Beta</div><div class="ttdoc">Exponentiation value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00163">Descriptors.hpp:163</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_aa439f3d72fad64e1c0a55874a47a1b89"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#aa439f3d72fad64e1c0a55874a47a1b89">SimpleSoftmaxUint8Test</a></div><div class="ttdeci">LayerTestResult&lt; uint8_t, 2 &gt; SimpleSoftmaxUint8Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00618">SoftmaxTestImpl.cpp:618</a></div></div>
<div class="ttc" id="_resolve_type_8hpp_xhtml"><div class="ttname"><a href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_aec92c92c6f7285c4c59a6bbc7d7640d5"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#aec92c92c6f7285c4c59a6bbc7d7640d5">CompareSoftmaxUint8Test</a></div><div class="ttdeci">LayerTestResult&lt; uint8_t, 2 &gt; CompareSoftmaxUint8Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, armnn::IWorkloadFactory &amp;refWorkloadFactory, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, const armnn::ITensorHandleFactory &amp;refTensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00731">SoftmaxTestImpl.cpp:731</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_queue_descriptor.xhtml">armnn::SoftmaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00093">WorkloadData.hpp:93</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_ab018dc7df739cf10efe0ecb80a68426d"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#ab018dc7df739cf10efe0ecb80a68426d">Simple4dSoftmaxUint8Test</a></div><div class="ttdeci">LayerTestResult&lt; uint8_t, 4 &gt; Simple4dSoftmaxUint8Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00644">SoftmaxTestImpl.cpp:644</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00054">WorkloadData.hpp:54</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_a2f98e881f910c374dae115a18eebc077"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#a2f98e881f910c374dae115a18eebc077">Simple3dAxisSoftmaxTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; Simple3dAxisSoftmaxTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta, int axis)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00346">SoftmaxTestImpl.cpp:346</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a693b40e6b94e958836aeb0410ca186bd"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; IMemoryManagerSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00096">IBackendInternal.hpp:96</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml_ab5dfed8358e500ed523d78090ec78e88"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *mem, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00475">Tensor.cpp:475</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">TensorHandle.hpp</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_a14632b64d972e828f2846b7c573deab9"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#a14632b64d972e828f2846b7c573deab9">CompareSoftmaxTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 2 &gt; CompareSoftmaxTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, armnn::IWorkloadFactory &amp;refWorkloadFactory, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, const armnn::ITensorHandleFactory &amp;refTensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00719">SoftmaxTestImpl.cpp:719</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_helpers_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml">TensorHelpers.hpp</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_ac8bdec035fd0687ff56316bd5436e17f"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#ac8bdec035fd0687ff56316bd5436e17f">Simple3dSoftmaxUint8Test</a></div><div class="ttdeci">LayerTestResult&lt; uint8_t, 3 &gt; Simple3dSoftmaxUint8Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00627">SoftmaxTestImpl.cpp:627</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00042">ITensorHandleFactory.hpp:42</a></div></div>
<div class="ttc" id="_softmax_test_impl_8hpp_xhtml"><div class="ttname"><a href="_softmax_test_impl_8hpp.xhtml">SoftmaxTestImpl.hpp</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_a5edfd63a67aa3ee02b9e52baed58ef7e"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#a5edfd63a67aa3ee02b9e52baed58ef7e">Simple4dSoftmaxFloat16Test</a></div><div class="ttdeci">LayerTestResult&lt; armnn::Half, 4 &gt; Simple4dSoftmaxFloat16Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00676">SoftmaxTestImpl.cpp:676</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_a434b38c0f3a12e1bbd7012d16e7bbc94"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#a434b38c0f3a12e1bbd7012d16e7bbc94">SimpleSoftmaxFloat16Test</a></div><div class="ttdeci">LayerTestResult&lt; armnn::Half, 2 &gt; SimpleSoftmaxFloat16Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00656">SoftmaxTestImpl.cpp:656</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about TensorInfos of a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_test_utils_2_layer_test_result_8hpp_source.xhtml#l00015">LayerTestResult.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00491">Tensor.cpp:491</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_a3bf0788640509f4f33b302578ac80b7f"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#a3bf0788640509f4f33b302578ac80b7f">Simple3dSoftmaxTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; Simple3dSoftmaxTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00335">SoftmaxTestImpl.cpp:335</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_a561da5cae6f7d7f9648c94e9807bee19"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#a561da5cae6f7d7f9648c94e9807bee19">SimpleSoftmaxTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 2 &gt; SimpleSoftmaxTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00315">SoftmaxTestImpl.cpp:315</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a13060ebb89d2c21a7a5d897e99cccf72"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">armnn::IWorkloadFactory::CreateWorkload</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateWorkload(LayerType type, const QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01541">WorkloadFactory.cpp:1541</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml_a375f11dd42ff042435e8771cf287b20c"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">armnn::ITensorHandleFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo) const =0</div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml">TensorCopyUtils.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00196">Tensor.hpp:196</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_ada59563419a522ed58525846a3d45f78"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#ada59563419a522ed58525846a3d45f78">SimpleAxisSoftmaxTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 2 &gt; SimpleAxisSoftmaxTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta, int axis)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00324">SoftmaxTestImpl.cpp:324</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_workload_test_utils_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_test_utils_2_workload_test_utils_8hpp.xhtml">WorkloadTestUtils.hpp</a></div></div>
<div class="ttc" id="_softmax_test_impl_8cpp_xhtml_aa7d6977cae60f24e609e5d346b0d87c0"><div class="ttname"><a href="_softmax_test_impl_8cpp.xhtml#aa7d6977cae60f24e609e5d346b0d87c0">SimpleSoftmaxUint16Test</a></div><div class="ttdeci">LayerTestResult&lt; int16_t, 2 &gt; SimpleSoftmaxUint16Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_softmax_test_impl_8cpp_source.xhtml#l00687">SoftmaxTestImpl.cpp:687</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_softmax_test_impl_8cpp.xhtml">SoftmaxTestImpl.cpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:33 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
