<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/neon/NeonWorkloadFactory.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_neon_workload_factory_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NeonWorkloadFactory.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_neon_workload_factory_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160; </div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_backend_id_8hpp.xhtml">NeonBackendId.hpp</a>&quot;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_backend_model_context_8hpp.xhtml">NeonBackendModelContext.hpp</a>&quot;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_tensor_handle_8hpp.xhtml">NeonTensorHandle.hpp</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_workload_factory_8hpp.xhtml">NeonWorkloadFactory.hpp</a>&quot;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_layer_8hpp.xhtml">Layer.hpp</a>&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_utils_8hpp.xhtml">armnn/Utils.hpp</a>&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_numeric_cast_8hpp.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_polymorphic_downcast_8hpp.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_make_workload_helper_8hpp.xhtml">backendsCommon/MakeWorkloadHelper.hpp</a>&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_mem_copy_workload_8hpp.xhtml">armnn/backends/MemCopyWorkload.hpp</a>&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_mem_import_workload_8hpp.xhtml">backendsCommon/MemImportWorkload.hpp</a>&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_handle_8hpp.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_neon_workload_utils_8hpp.xhtml">neon/workloads/NeonWorkloadUtils.hpp</a>&gt;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_neon_workloads_8hpp.xhtml">neon/workloads/NeonWorkloads.hpp</a>&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> BackendId s_Id{<a class="code" href="namespacearmnn.xhtml#a3a34a305e5187f3a3c67030d3bebbdb0">NeonBackendId</a>()};</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">   34</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">NeonWorkloadFactory::IsLayerSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp; layer,</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;DataType&gt;</a> dataType,</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                           std::string&amp; outReasonIfUnsupported)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IWorkloadFactory::IsLayerSupported</a>(s_Id, layer, dataType, outReasonIfUnsupported);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_workload_factory.xhtml#aeaff50773427132e1066a7de56a53db1">   41</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">NeonWorkloadFactory::IsLayerSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>&amp; layer,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;DataType&gt;</a> dataType,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                           std::string&amp; outReasonIfUnsupported,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a>&amp; modelOptions)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IWorkloadFactory::IsLayerSupported</a>(s_Id, layer, dataType, outReasonIfUnsupported, modelOptions);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">   49</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">NeonWorkloadFactory::GetBackendId</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> s_Id;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keywordtype">void</span> NeonWorkloadFactory::SetNumberOfThreads()</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> MIN_THREADS = 1;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> MAX_THREADS = 64;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="comment">// Set the number of threads to be used if the user has set NumberOfThreads param</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="comment">// Only set if within limit or valid input</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_neon_backend_model_context.xhtml">NeonBackendModelContext</a>*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">auto</span> numberOfThreads = modelOptions-&gt;<a class="code" href="classarmnn_1_1_neon_backend_model_context.xhtml#ab496797d400c4976d0d4b15b110bf7d9">GetNumberOfThreads</a>();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">if</span> (numberOfThreads != 0 &amp;&amp; numberOfThreads &gt;= MIN_THREADS &amp;&amp; numberOfThreads &lt;= MAX_THREADS)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            arm_compute::Scheduler::get().set_num_threads(numberOfThreads);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_workload_factory.xhtml#a19a681524fa55169540fcccb9dcefaa6">   73</a></span>&#160;<a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a19a681524fa55169540fcccb9dcefaa6">NeonWorkloadFactory::NeonWorkloadFactory</a>(<span class="keyword">const</span> std::shared_ptr&lt;NeonMemoryManager&gt;&amp; memoryManager)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    : m_MemoryManager(memoryManager), m_ModelContextPtr(<a class="code" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a>::IBackendSpecificModelContextPtr{})</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    SetNumberOfThreads();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_workload_factory.xhtml#a4fd94de07f659ca8fac3dcb7440c8469">   79</a></span>&#160;<a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a19a681524fa55169540fcccb9dcefaa6">NeonWorkloadFactory::NeonWorkloadFactory</a>(<span class="keyword">const</span> std::shared_ptr&lt;NeonMemoryManager&gt;&amp; memoryManager,</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a>&amp; modelContextPtr)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    : m_MemoryManager(memoryManager), m_ModelContextPtr(modelContextPtr)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    SetNumberOfThreads();</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">   86</a></span>&#160;std::unique_ptr&lt;ITensorHandle&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">NeonWorkloadFactory::CreateSubTensorHandle</a>(<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&amp; parent,</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> <span class="keyword">const</span>&amp; subTensorShape,</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span>* subTensorOrigin)<span class="keyword"> const</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> arm_compute::TensorShape shape = armcomputetensorutils::BuildArmComputeTensorShape(subTensorShape);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ac6e86c1def7f674d3c4cb7f577874aa6">arm_compute::Coordinates</a> coords;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    coords.set_num_dimensions(subTensorShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; subTensorShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="comment">// Arm compute indexes tensor coords in reverse order.</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> revertedIndex = subTensorShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() - i - 1;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        coords.set(i, armnn::numeric_cast&lt;int&gt;(subTensorOrigin[revertedIndex]));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">const</span> arm_compute::TensorShape parentShape = armcomputetensorutils::BuildArmComputeTensorShape(parent.<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">GetShape</a>());</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">if</span> (!::arm_compute::error_on_invalid_subtensor(__func__, __FILE__, __LINE__, parentShape, coords, shape))</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonSubTensorHandle&gt;(</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        PolymorphicDowncast&lt;IAclTensorHandle*&gt;(&amp;parent), shape, coords);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">  111</a></span>&#160;std::unique_ptr&lt;ITensorHandle&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">NeonWorkloadFactory::CreateTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                                                       <span class="keyword">const</span> <span class="keywordtype">bool</span> IsMemoryManaged)<span class="keyword"> const</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">auto</span> tensorHandle = std::make_unique&lt;NeonTensorHandle&gt;(tensorInfo);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">if</span> (IsMemoryManaged)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        tensorHandle-&gt;SetMemoryGroup(m_MemoryManager-&gt;GetInterLayerMemoryGroup());</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> tensorHandle;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">  122</a></span>&#160;std::unique_ptr&lt;ITensorHandle&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">NeonWorkloadFactory::CreateTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo,</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                                                       <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout,</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                                                       <span class="keyword">const</span> <span class="keywordtype">bool</span> IsMemoryManaged)<span class="keyword"> const</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">auto</span> tensorHandle = std::make_unique&lt;NeonTensorHandle&gt;(tensorInfo, dataLayout);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">if</span> (IsMemoryManaged)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        tensorHandle-&gt;SetMemoryGroup(m_MemoryManager-&gt;GetInterLayerMemoryGroup());</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span> tensorHandle;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_workload_factory.xhtml#a739bcc341b89c98a5d38717370ebcaa6">  134</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_neon_workload_factory.xhtml#a739bcc341b89c98a5d38717370ebcaa6">NeonWorkloadFactory::CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> type,</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>&amp; descriptor,</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">switch</span>(type)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">LayerType::Activation</a> :</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keyword">auto</span> activationQueueDescriptor = PolymorphicDowncast&lt;const ActivationQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonActivationWorkload&gt;(*activationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a> :</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keyword">auto</span> additionQueueDescriptor = PolymorphicDowncast&lt;const AdditionQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonAdditionWorkload&gt;(*additionQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">LayerType::ArgMinMax</a> :</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keyword">auto</span> argMinMaxQueueDescriptor = PolymorphicDowncast&lt;const ArgMinMaxQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonArgMinMaxWorkload&gt;(*argMinMaxQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9882ff3cfed27d6161c20a305e7a3484">LayerType::BatchMatMul</a> :</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keyword">auto</span> batchMatMulQueueDescriptor = PolymorphicDowncast&lt;const BatchMatMulQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonBatchMatMulWorkload&gt;(*batchMatMulQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">LayerType::BatchNormalization</a> :</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keyword">auto</span> batchNormalizationQueueDescriptor</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    = PolymorphicDowncast&lt;const BatchNormalizationQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonBatchNormalizationWorkload&gt;(*batchNormalizationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">LayerType::BatchToSpaceNd</a> :</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keyword">auto</span> batchToSpaceNdQueueDescriptor</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    = PolymorphicDowncast&lt;const BatchToSpaceNdQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonBatchToSpaceNdWorkload&gt;(*batchToSpaceNdQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">LayerType::Cast</a> :</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keyword">auto</span> castQueueDescriptor = PolymorphicDowncast&lt;const CastQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonCastWorkload&gt;(*castQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">LayerType::ChannelShuffle</a> :</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keyword">auto</span> channelShuffleQueueDescriptor = PolymorphicDowncast&lt;const ChannelShuffleQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonChannelShuffleWorkload&gt;(*channelShuffleQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">LayerType::Comparison</a> :</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keyword">auto</span> comparisonQueueDescriptor = PolymorphicDowncast&lt;const ComparisonQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonComparisonWorkload&gt;(*comparisonQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">LayerType::Concat</a> :</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keyword">auto</span> concatQueueDescriptor = PolymorphicDowncast&lt;const ConcatQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonConcatWorkload&gt;(*concatQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255">LayerType::Constant</a> :</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keyword">auto</span> constantQueueDescriptor = PolymorphicDowncast&lt;const ConstantQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonConstantWorkload&gt;(*constantQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">LayerType::ConvertFp16ToFp32</a> :</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keyword">auto</span> convertFp16ToFp32QueueDescriptor</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    = PolymorphicDowncast&lt;const ConvertFp16ToFp32QueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonConvertFp16ToFp32Workload&gt;(*convertFp16ToFp32QueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">LayerType::ConvertFp32ToFp16</a> :</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keyword">auto</span> convertFp32ToFp16QueueDescriptor</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    = PolymorphicDowncast&lt;const ConvertFp32ToFp16QueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonConvertFp32ToFp16Workload&gt;(*convertFp32ToFp16QueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">LayerType::Convolution2d</a> :</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keyword">auto</span> convolution2dQueueDescriptor = PolymorphicDowncast&lt;const Convolution2dQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">if</span> (m_ModelContextPtr)</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_neon_backend_model_context.xhtml">NeonBackendModelContext</a>*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    <span class="keywordflow">if</span> (modelOptions)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                        isFastMathEnabled = modelOptions-&gt;<a class="code" href="classarmnn_1_1_neon_backend_model_context.xhtml#abfe9aa4fa74aca0f9a925752bbbb0f79">IsFastMathEnabled</a>();</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonConvolution2dWorkload&gt;(*convolution2dQueueDescriptor,</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                                               <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>,</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                                               m_MemoryManager-&gt;GetIntraLayerManager(),</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                                               isFastMathEnabled);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">LayerType::Convolution3d</a> :</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        {</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="keyword">auto</span> convolution3dQueueDescriptor = PolymorphicDowncast&lt;const Convolution3dQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="keywordflow">if</span> (m_ModelContextPtr)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_neon_backend_model_context.xhtml">NeonBackendModelContext</a>*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    <span class="keywordflow">if</span> (modelOptions)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        isFastMathEnabled = modelOptions-&gt;<a class="code" href="classarmnn_1_1_neon_backend_model_context.xhtml#abfe9aa4fa74aca0f9a925752bbbb0f79">IsFastMathEnabled</a>();</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonConvolution3dWorkload&gt;(*convolution3dQueueDescriptor,</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                                               <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>,</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                                               m_MemoryManager-&gt;GetIntraLayerManager(),</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                                               isFastMathEnabled);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">LayerType::Debug</a> :</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keyword">auto</span> debugQueueDescriptor = PolymorphicDowncast&lt;const DebugQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NullWorkload, NullWorkload&gt;(*debugQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">LayerType::DepthToSpace</a> :</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keyword">auto</span> depthToSpaceQueueDescriptor = PolymorphicDowncast&lt;const DepthToSpaceQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonDepthToSpaceWorkload&gt;(*depthToSpaceQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">LayerType::DepthwiseConvolution2d</a> :</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keyword">auto</span> depthwiseConvolution2dQueueDescriptor</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                    = PolymorphicDowncast&lt;const DepthwiseConvolution2dQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonDepthwiseConvolutionWorkload&gt;(*depthwiseConvolution2dQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        }</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">LayerType::Dequantize</a> :</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        {</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keyword">auto</span> dequantizeQueueDescriptor = PolymorphicDowncast&lt;const DequantizeQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonDequantizeWorkload&gt;(*dequantizeQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">LayerType::DetectionPostProcess</a> :</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keyword">auto</span> detectionPostProcessQueueDescriptor</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                    = PolymorphicDowncast&lt;const DetectionPostProcessQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NullWorkload, NullWorkload&gt;(*detectionPostProcessQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">LayerType::Division</a> :</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keyword">auto</span> divisionQueueDescriptor = PolymorphicDowncast&lt;const DivisionQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonDivisionWorkload&gt;(*divisionQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        }</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">LayerType::ElementwiseUnary</a> :</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        {</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="keyword">auto</span> elementwiseUnaryQueueDescriptor</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    = PolymorphicDowncast&lt;const ElementwiseUnaryQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">switch</span>(elementwiseUnaryQueueDescriptor-&gt;m_Parameters.m_Operation)</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>:</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    <a class="code" href="structarmnn_1_1_abs_queue_descriptor.xhtml">AbsQueueDescriptor</a> absQueueDescriptor;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                    absQueueDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>  = elementwiseUnaryQueueDescriptor-&gt;m_Inputs;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    absQueueDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a> = elementwiseUnaryQueueDescriptor-&gt;m_Outputs;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                    <span class="keywordflow">return</span> std::make_unique&lt;NeonAbsWorkload&gt;(absQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                }</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">UnaryOperation::Exp</a>:</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    <span class="keywordflow">return</span> std::make_unique&lt;NeonExpWorkload&gt;(*elementwiseUnaryQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">UnaryOperation::LogicalNot</a>:</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    <span class="keywordflow">return</span> std::make_unique&lt;NeonLogicalNotWorkload&gt;(*elementwiseUnaryQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">UnaryOperation::Log</a>:</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    <span class="keywordflow">return</span> std::make_unique&lt;NeonLogWorkload&gt;(*elementwiseUnaryQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">UnaryOperation::Neg</a>:</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    <span class="keywordflow">return</span> std::make_unique&lt;NeonNegWorkload&gt;(*elementwiseUnaryQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>:</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    <a class="code" href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">RsqrtQueueDescriptor</a> rsqrtQueueDescriptor;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    rsqrtQueueDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>  = elementwiseUnaryQueueDescriptor-&gt;m_Inputs;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                    rsqrtQueueDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a> = elementwiseUnaryQueueDescriptor-&gt;m_Outputs;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    <span class="keywordflow">return</span> std::make_unique&lt;NeonRsqrtWorkload&gt;(rsqrtQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">UnaryOperation::Sin</a>:</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                    <span class="keywordflow">return</span> std::make_unique&lt;NeonSinWorkload&gt;(*elementwiseUnaryQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8aae77f3ad25595e35b327334d89410054">UnaryOperation::Sqrt</a>:</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                    <span class="keywordflow">return</span> std::make_unique&lt;NeonSqrtWorkload&gt;(*elementwiseUnaryQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">LayerType::Fill</a> :</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keyword">auto</span> fillQueueDescriptor = PolymorphicDowncast&lt;const FillQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonFillWorkload&gt;(*fillQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a> :</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keyword">auto</span> floorQueueDescriptor = PolymorphicDowncast&lt;const FloorQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NeonFloorFloatWorkload, NullWorkload&gt;(*floorQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        }</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">LayerType::FullyConnected</a> :</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keyword">auto</span> fullyConnectedQueueDescriptor = PolymorphicDowncast&lt;const FullyConnectedQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonFullyConnectedWorkload&gt;(*fullyConnectedQueueDescriptor,</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                                                <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>,</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                                                m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">LayerType::Gather</a> :</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        {</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="keyword">auto</span> gatherQueueDescriptor = PolymorphicDowncast&lt;const GatherQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonGatherWorkload&gt;(*gatherQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        }</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4">LayerType::GatherNd</a> :</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="keyword">auto</span> gatherNdQueueDescriptor = PolymorphicDowncast&lt;const GatherNdQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonGatherNdWorkload&gt;(*gatherNdQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a> :</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keyword">auto</span> inputQueueDescriptor = PolymorphicDowncast&lt;const InputQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(*inputQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">LayerType::InstanceNormalization</a> :</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keyword">auto</span> instanceNormalizationQueueDescriptor</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                    = PolymorphicDowncast&lt;const InstanceNormalizationQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonInstanceNormalizationWorkload&gt;(*instanceNormalizationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">LayerType::L2Normalization</a> :</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            <span class="keyword">auto</span> l2NormalizationQueueDescriptor</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                    = PolymorphicDowncast&lt;const L2NormalizationQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NeonL2NormalizationFloatWorkload, NullWorkload&gt;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                    (*l2NormalizationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>, m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">LayerType::LogSoftmax</a> :</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keyword">auto</span> logSoftmaxQueueDescriptor = PolymorphicDowncast&lt;const LogSoftmaxQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonLogSoftmaxWorkload&gt;(*logSoftmaxQueueDescriptor,</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                                            <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>,</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                                            m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">LayerType::LogicalBinary</a> :</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            <span class="keyword">auto</span> logicalBinaryQueueDescriptor = PolymorphicDowncast&lt;const LogicalBinaryQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160; </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="keywordflow">switch</span>(logicalBinaryQueueDescriptor-&gt;m_Parameters.m_Operation)</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            {</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">LogicalBinaryOperation::LogicalAnd</a>:</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    <span class="keywordflow">return</span> std::make_unique&lt;NeonLogicalAndWorkload&gt;(*logicalBinaryQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">LogicalBinaryOperation::LogicalOr</a>:</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    <span class="keywordflow">return</span> std::make_unique&lt;NeonLogicalOrWorkload&gt;(*logicalBinaryQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            }</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        }</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">LayerType::Lstm</a> :</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <span class="keyword">auto</span> lstmQueueDescriptor = PolymorphicDowncast&lt;const LstmQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NeonLstmFloatWorkload, NullWorkload&gt;(*lstmQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        }</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">LayerType::Maximum</a> :</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        {</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            <span class="keyword">auto</span> maximumQueueDescriptor = PolymorphicDowncast&lt;const MaximumQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonMaximumWorkload&gt;(*maximumQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3d6c9ac08ada31c184094bbc67afe00d">LayerType::Mean</a> :</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        {</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keyword">auto</span> meanQueueDescriptor = PolymorphicDowncast&lt;const MeanQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonMeanWorkload&gt;(*meanQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">LayerType::MemCopy</a> :</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keyword">auto</span> memCopyQueueDescriptor = PolymorphicDowncast&lt;const MemCopyQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <span class="keywordflow">if</span> (memCopyQueueDescriptor-&gt;m_Inputs.empty() || !memCopyQueueDescriptor-&gt;m_Inputs[0])</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;NeonWorkloadFactory: Invalid null input for MemCopy workload&quot;</span>);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            }</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            <span class="keywordflow">return</span> MakeWorkloadHelper&lt;CopyMemGenericWorkload, CopyMemGenericWorkload&gt;(*memCopyQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">LayerType::MemImport</a> :</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="keyword">auto</span> memImportQueueDescriptor = PolymorphicDowncast&lt;const MemImportQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="keywordflow">if</span> (memImportQueueDescriptor-&gt;m_Inputs.empty() || !memImportQueueDescriptor-&gt;m_Inputs[0])</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            {</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;NeonWorkloadFactory: Invalid null input for MemImport workload&quot;</span>);</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            }</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;ImportMemGenericWorkload&gt;(*memImportQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        }</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">LayerType::Minimum</a> :</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            <span class="keyword">auto</span> minimumQueueDescriptor = PolymorphicDowncast&lt;const MinimumQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonMinimumWorkload&gt;(*minimumQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        }</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">LayerType::Multiplication</a> :</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        {</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="keyword">auto</span> multiplicationQueueDescriptor = PolymorphicDowncast&lt;const MultiplicationQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonMultiplicationWorkload&gt;(*multiplicationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        }</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">LayerType::Normalization</a> :</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        {</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            <span class="keyword">auto</span> normalizationQueueDescriptor = PolymorphicDowncast&lt;const NormalizationQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NeonNormalizationFloatWorkload, NullWorkload&gt;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                    (*normalizationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>, m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        }</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a> :</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        {</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            <span class="keyword">auto</span> outputQueueDescriptor = PolymorphicDowncast&lt;const OutputQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(*outputQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        }</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">LayerType::Pad</a> :</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        {</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            <span class="keyword">auto</span> padQueueDescriptor = PolymorphicDowncast&lt;const PadQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonPadWorkload&gt;(*padQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        }</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">LayerType::Permute</a> :</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        {</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            <span class="keyword">auto</span> permuteQueueDescriptor = PolymorphicDowncast&lt;const PermuteQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonPermuteWorkload&gt;(*permuteQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        }</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">LayerType::Pooling2d</a> :</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        {</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            <span class="keyword">auto</span> pooling2dQueueDescriptor = PolymorphicDowncast&lt;const Pooling2dQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonPooling2dWorkload&gt;(*pooling2dQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        }</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">LayerType::Pooling3d</a> :</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        {</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="keyword">auto</span> pooling3dQueueDescriptor = PolymorphicDowncast&lt;const Pooling3dQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonPooling3dWorkload&gt;(*pooling3dQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        }</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1ba143ebe524d46181a4b53470693278">LayerType::PreCompiled</a> :</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="keyword">auto</span> preCompiledQueueDescriptor = PolymorphicDowncast&lt;const PreCompiledQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NullWorkload, NullWorkload&gt;(*preCompiledQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        }</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">LayerType::Prelu</a> :</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        {</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="keyword">auto</span> preluQueueDescriptor = PolymorphicDowncast&lt;const PreluQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonPreluWorkload&gt;(*preluQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        }</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">LayerType::QLstm</a> :</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keyword">auto</span> qLstmQueueDescriptor = PolymorphicDowncast&lt;const QLstmQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonQLstmWorkload&gt;(*qLstmQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        }</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">LayerType::Quantize</a> :</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        {</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            <span class="keyword">auto</span> quantizeQueueDescriptor = PolymorphicDowncast&lt;const QuantizeQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonQuantizeWorkload&gt;(*quantizeQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">LayerType::QuantizedLstm</a> :</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keyword">auto</span> quantizedLstmQueueDescriptor = PolymorphicDowncast&lt;const QuantizedLstmQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonQuantizedLstmWorkload&gt;(*quantizedLstmQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        }</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">LayerType::Rank</a> :</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        {</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            <span class="keyword">auto</span> rankQueueDescriptor = PolymorphicDowncast&lt;const RankQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonRankWorkload&gt;(*rankQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        }</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">LayerType::Reduce</a> :</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        {</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="keyword">auto</span> reduceQueueDescriptor = PolymorphicDowncast&lt;const ReduceQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonReduceWorkload&gt;(*reduceQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        }</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">LayerType::Reshape</a> :</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        {</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            <span class="keyword">auto</span> reshapeQueueDescriptor = PolymorphicDowncast&lt;const ReshapeQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonReshapeWorkload&gt;(*reshapeQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        }</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">LayerType::Resize</a> :</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        {</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <span class="keyword">auto</span> resizeQueueDescriptor = PolymorphicDowncast&lt;const ResizeQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonResizeWorkload&gt;(*resizeQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        }</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">LayerType::Slice</a> :</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        {</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            <span class="keyword">auto</span> sliceQueueDescriptor = PolymorphicDowncast&lt;const SliceQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonSliceWorkload&gt;(*sliceQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        }</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">LayerType::Softmax</a> :</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        {</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            <span class="keyword">auto</span> softmaxQueueDescriptor = PolymorphicDowncast&lt;const SoftmaxQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonSoftmaxWorkload&gt;(*softmaxQueueDescriptor,</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                                                         <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>,</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                                                         m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        }</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">LayerType::SpaceToBatchNd</a> :</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        {</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            <span class="keyword">auto</span> spaceToBatchNdQueueDescriptor</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                    = PolymorphicDowncast&lt;const SpaceToBatchNdQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonSpaceToBatchNdWorkload&gt;(*spaceToBatchNdQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        }</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">LayerType::SpaceToDepth</a> :</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            <span class="keyword">auto</span> spaceToDepthQueueDescriptor = PolymorphicDowncast&lt;const SpaceToDepthQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonSpaceToDepthWorkload&gt;(*spaceToDepthQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        }</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">LayerType::Splitter</a> :</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        {</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            <span class="keyword">auto</span> splitterQueueDescriptor = PolymorphicDowncast&lt;const SplitterQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonSplitterWorkload&gt;(*splitterQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        }</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">LayerType::Stack</a> :</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        {</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <span class="keyword">auto</span> stackQueueDescriptor = PolymorphicDowncast&lt;const StackQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonStackWorkload&gt;(*stackQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        }</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">LayerType::StridedSlice</a> :</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        {</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            <span class="keyword">auto</span> stridedSliceQueueDescriptor = PolymorphicDowncast&lt;const StridedSliceQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonStridedSliceWorkload&gt;(*stridedSliceQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        }</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">LayerType::Subtraction</a> :</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        {</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            <span class="keyword">auto</span> subtractionQueueDescriptor = PolymorphicDowncast&lt;const SubtractionQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonSubtractionWorkload&gt;(*subtractionQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        }</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">LayerType::Transpose</a> :</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        {</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            <span class="keyword">auto</span> transposeQueueDescriptor = PolymorphicDowncast&lt;const TransposeQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonTransposeWorkload&gt;(*transposeQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        }</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">LayerType::TransposeConvolution2d</a> :</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        {</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            <span class="keyword">auto</span> transposeConvolution2dQueueDescriptor</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                    = PolymorphicDowncast&lt;const TransposeConvolution2dQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonTransposeConvolution2dWorkload&gt;(*transposeConvolution2dQueueDescriptor,</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                                                                        <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>,</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                                                        m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        }</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">LayerType::UnidirectionalSequenceLstm</a> :</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        {</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keyword">auto</span> desc = PolymorphicDowncast&lt;const UnidirectionalSequenceLstmQueueDescriptor*&gt;(&amp;descriptor);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160; </div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <span class="keywordflow">if</span> ((<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_InputTensorInfos[0].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>) &amp;&amp;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_InputTensorInfos[1].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>) &amp;&amp;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_InputTensorInfos[2].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>) &amp;&amp;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_OutputTensorInfos[0].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>) &amp;&amp;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_OutputTensorInfos[1].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>) &amp;&amp;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_OutputTensorInfos[2].GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>))</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            {</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                <span class="keywordflow">return</span> std::make_unique&lt;NeonUnidirectionalSequenceLstmFloatWorkload&gt;(*desc, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            }</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            {</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                <span class="keywordflow">return</span> std::make_unique&lt;NeonUnidirectionalSequenceLstmWorkload&gt;(*desc, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            }</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        }</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    }</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;}</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160; </div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a789a347180c49b2403e435857501f623">NeonWorkloadFactory::CreateActivation</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a>&amp; descriptor,</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp;              info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonActivationWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;}</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160; </div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#ac1f4d42be05893f74b1237c3356c3c0c">NeonWorkloadFactory::CreateAddition</a>(<span class="keyword">const</span> AdditionQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                                                                      <span class="keyword">const</span> WorkloadInfo&amp;            info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonAdditionWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;}</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160; </div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a4269d65bcf8068290752d75164934a25">NeonWorkloadFactory::CreateArgMinMax</a>(<span class="keyword">const</span> ArgMinMaxQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                                                <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonArgMinMaxWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;}</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160; </div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a666c75e9db051b9b07f137a74af8d8b4">NeonWorkloadFactory::CreateBatchNormalization</a>(</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="keyword">const</span> BatchNormalizationQueueDescriptor&amp; descriptor, <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonBatchNormalizationWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;}</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160; </div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a52094433136e6cae57398d861cd483f9">NeonWorkloadFactory::CreateBatchToSpaceNd</a>(<span class="keyword">const</span> BatchToSpaceNdQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                                                                     <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonBatchToSpaceNdWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;}</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160; </div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;std::unique_ptr&lt;IWorkload&gt; NeonWorkloadFactory::CreateCast(<span class="keyword">const</span> CastQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                                           <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonCastWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;}</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160; </div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;std::unique_ptr&lt;IWorkload&gt; NeonWorkloadFactory::CreateChannelShuffle(<span class="keyword">const</span> ChannelShuffleQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                                                                     <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonChannelShuffleWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;}</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160; </div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a3d5de4e35ccddc5cfe79e530558d5184">NeonWorkloadFactory::CreateComparison</a>(<span class="keyword">const</span> ComparisonQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                                                                 <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonComparisonWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;}</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160; </div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a713c3685138355b145f4d17e473bf543">NeonWorkloadFactory::CreateConcat</a>(<span class="keyword">const</span> ConcatQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                                                                    <span class="keyword">const</span> WorkloadInfo&amp;          info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonConcatWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;}</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160; </div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a0da6f270ae7ce126b29a8918d858e814">NeonWorkloadFactory::CreateConstant</a>(<span class="keyword">const</span> ConstantQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                                               <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonConstantWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;}</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160; </div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a4e3b8d5650cb78c97a2eceb034209187">NeonWorkloadFactory::CreateConvertFp16ToFp32</a>(</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keyword">const</span> ConvertFp16ToFp32QueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonConvertFp16ToFp32Workload&gt;(descriptor, info);</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;}</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160; </div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a17042914356fe13b708c3702cb82ab7f">NeonWorkloadFactory::CreateConvertFp32ToFp16</a>(</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keyword">const</span> ConvertFp32ToFp16QueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonConvertFp32ToFp16Workload&gt;(descriptor, info);</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;}</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160; </div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a4a781a9541d2c44c5fec0ffc8434447c">NeonWorkloadFactory::CreateConvolution2d</a>(</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keyword">const</span> Convolution2dQueueDescriptor&amp; descriptor, <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    {</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        {</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;            <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span>NeonBackendModelContext*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            <span class="keywordflow">if</span> (modelOptions)</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            {</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                isFastMathEnabled = modelOptions-&gt;IsFastMathEnabled();</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;            }</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        }</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    }</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonConvolution2dWorkload&gt;(descriptor,</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                                                       info,</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                                                       m_MemoryManager-&gt;GetIntraLayerManager(),</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                                                       isFastMathEnabled);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;}</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160; </div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; NeonWorkloadFactory::CreateConvolution3d(</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        <span class="keyword">const</span> Convolution3dQueueDescriptor&amp; descriptor, <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    {</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        {</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span>NeonBackendModelContext*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            <span class="keywordflow">if</span> (modelOptions)</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            {</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                isFastMathEnabled = modelOptions-&gt;IsFastMathEnabled();</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            }</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        }</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    }</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonConvolution3dWorkload&gt;(descriptor,</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                                                       info,</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                                                       m_MemoryManager-&gt;GetIntraLayerManager(),</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                                                       isFastMathEnabled);</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;}</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160; </div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#ad99e6a9f4e78ba4690429850de69fadd">NeonWorkloadFactory::CreateDebug</a>(<span class="keyword">const</span> DebugQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                                                            <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NullWorkload, NullWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;}</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160; </div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a1b2165c83d6501e8ede91324c31a95f4">NeonWorkloadFactory::CreateDepthToSpace</a>(<span class="keyword">const</span> DepthToSpaceQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                                                   <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonDepthToSpaceWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;}</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160; </div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a2314defaf9c8b1ffcf59e7e509a959d6">NeonWorkloadFactory::CreateDepthwiseConvolution2d</a>(</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keyword">const</span> DepthwiseConvolution2dQueueDescriptor&amp; descriptor, <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonDepthwiseConvolutionWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;}</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160; </div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a1f17745331f928011cc1ea162866b8e7">NeonWorkloadFactory::CreateDequantize</a>(<span class="keyword">const</span> DequantizeQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                                                                 <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonDequantizeWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;}</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160; </div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#ac8ff2a4e63a9954fd6b3e9fc6dfa9bf0">NeonWorkloadFactory::CreateDetectionPostProcess</a>(</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">armnn::DetectionPostProcessQueueDescriptor</a>&amp; descriptor, <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a>&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NullWorkload, NullWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;}</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160; </div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a1c7e383368cb078a1faac0a4e4f763a1">NeonWorkloadFactory::CreateDivision</a>(</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keyword">const</span> DivisionQueueDescriptor&amp; descriptor, <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonDivisionWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;}</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160; </div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a09f09645c2289d5d47dbea7c011d5f0e">NeonWorkloadFactory::CreateElementwiseUnary</a>(</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keyword">const</span> ElementwiseUnaryQueueDescriptor&amp; descriptor, <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <span class="keywordflow">switch</span>(descriptor.m_Parameters.m_Operation)</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    {</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>:</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        {</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            AbsQueueDescriptor absQueueDescriptor;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;            absQueueDescriptor.m_Inputs  = descriptor.m_Inputs;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            absQueueDescriptor.m_Outputs = descriptor.m_Outputs;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160; </div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonAbsWorkload&gt;(absQueueDescriptor, info);</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        }</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">UnaryOperation::Exp</a>:</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonExpWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">UnaryOperation::LogicalNot</a>:</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonLogicalNotWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">UnaryOperation::Log</a>:</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonLogWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">UnaryOperation::Neg</a>:</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonNegWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>:</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        {</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            RsqrtQueueDescriptor rsqrtQueueDescriptor;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            rsqrtQueueDescriptor.m_Inputs  = descriptor.m_Inputs;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            rsqrtQueueDescriptor.m_Outputs = descriptor.m_Outputs;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160; </div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonRsqrtWorkload&gt;(rsqrtQueueDescriptor, info);</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        }</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">UnaryOperation::Sin</a>:</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonSinWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    }</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;}</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160; </div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;std::unique_ptr&lt;IWorkload&gt; NeonWorkloadFactory::CreateFill(<span class="keyword">const</span> FillQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                                                           <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonFillWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;}</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160; </div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a4101fcf76e3bbc979b2276631617aabe">NeonWorkloadFactory::CreateFloor</a>(<span class="keyword">const</span> FloorQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                                                            <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NeonFloorFloatWorkload, NullWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;}</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160; </div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#af5ace6034148c3fe048db884058f04cf">NeonWorkloadFactory::CreateFullyConnected</a>(</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keyword">const</span> FullyConnectedQueueDescriptor&amp; descriptor, <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonFullyConnectedWorkload&gt;(descriptor, info, m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;}</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160; </div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#ada3f450379ba7b4989344de72a16f1d2">NeonWorkloadFactory::CreateGather</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_gather_queue_descriptor.xhtml">armnn::GatherQueueDescriptor</a>&amp; descriptor,</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a>&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonGatherWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;}</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160; </div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a3dcc96078130874f1be15a7148868539">NeonWorkloadFactory::CreateInput</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a>&amp; descriptor,</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                                                            <span class="keyword">const</span> WorkloadInfo&amp;        info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;}</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160; </div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a77110c4dd8fe747ba0d441265f781076">NeonWorkloadFactory::CreateInstanceNormalization</a>(</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    <span class="keyword">const</span> InstanceNormalizationQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonInstanceNormalizationWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;}</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160; </div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#af12076c82b1b7f0c48c1ed71df206b4d">NeonWorkloadFactory::CreateL2Normalization</a>(<span class="keyword">const</span> L2NormalizationQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                                                                      <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NeonL2NormalizationFloatWorkload, NullWorkload&gt;(descriptor, info,</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                                                                              m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;}</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160; </div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a04a3ae3944eb63e7e94c6e9676815864">NeonWorkloadFactory::CreateLogSoftmax</a>(<span class="keyword">const</span> LogSoftmaxQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                                                                 <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonLogSoftmaxWorkload&gt;(descriptor, info, m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;}</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160; </div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;std::unique_ptr&lt;IWorkload&gt; NeonWorkloadFactory::CreateLogicalBinary(<span class="keyword">const</span> LogicalBinaryQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                                                                    <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <span class="keywordflow">switch</span>(descriptor.m_Parameters.m_Operation)</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    {</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">LogicalBinaryOperation::LogicalAnd</a>:</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonLogicalAndWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">LogicalBinaryOperation::LogicalOr</a>:</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;NeonLogicalOrWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    }</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;}</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160; </div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#af6cc3669898b498592dc28600aa6f0cd">NeonWorkloadFactory::CreateLstm</a>(<span class="keyword">const</span> LstmQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                                                           <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NeonLstmFloatWorkload, NullWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;}</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160; </div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a9e67be0a653c173ba94e38137dc4bbde">NeonWorkloadFactory::CreateMaximum</a>(<span class="keyword">const</span> MaximumQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                                                              <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonMaximumWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;}</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160; </div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#aabe4842ade5647ac5bbee5e446e49a5c">NeonWorkloadFactory::CreateMean</a>(<span class="keyword">const</span> MeanQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                                                           <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonMeanWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;}</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160; </div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a73e9a5c2c3eff38766f03adb98abdd26">NeonWorkloadFactory::CreateMemCopy</a>(<span class="keyword">const</span> MemCopyQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                                                                     <span class="keyword">const</span> WorkloadInfo&amp;        info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keywordflow">if</span> (descriptor.m_Inputs.empty() || !descriptor.m_Inputs[0])</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    {</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;NeonWorkloadFactory: Invalid null input for MemCopy workload&quot;</span>);</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    }</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160; </div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="keywordflow">return</span> MakeWorkloadHelper&lt;CopyMemGenericWorkload, CopyMemGenericWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;}</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160; </div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#ad16ff72d909eb48f3dc8e1015c4a5078">NeonWorkloadFactory::CreateMemImport</a>(<span class="keyword">const</span> MemImportQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;                                                                       <span class="keyword">const</span> WorkloadInfo&amp;        info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <span class="keywordflow">if</span> (descriptor.m_Inputs.empty() || !descriptor.m_Inputs[0])</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    {</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;NeonWorkloadFactory: Invalid null input for MemImport workload&quot;</span>);</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    }</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160; </div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ImportMemGenericWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;}</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160; </div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a1ba2b05e3c2028d4bc3db29fc0edf122">NeonWorkloadFactory::CreateMinimum</a>(<span class="keyword">const</span> MinimumQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                                                              <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonMinimumWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;}</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160; </div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a848fc4ff47d5e9c68d2e26f6523b4e58">NeonWorkloadFactory::CreateMultiplication</a>(</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <span class="keyword">const</span> MultiplicationQueueDescriptor&amp; descriptor, <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonMultiplicationWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;}</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160; </div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a6df587611b4c46b591527f3d594f4a11">NeonWorkloadFactory::CreateNormalization</a>(</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <span class="keyword">const</span> NormalizationQueueDescriptor&amp; descriptor, <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NeonNormalizationFloatWorkload, NullWorkload&gt;(descriptor, info,</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                                                                            m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;}</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160; </div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#afd952ccd68a1b2231b77db1f9131a61b">NeonWorkloadFactory::CreateOutput</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">OutputQueueDescriptor</a>&amp; descriptor,</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                                                             <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;}</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160; </div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a06a69eab86af31e0daa17c99b9038bf1">NeonWorkloadFactory::CreatePad</a>(<span class="keyword">const</span> PadQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                                                          <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonPadWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;}</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160; </div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a32983845590ec2dc9e644491793fd557">NeonWorkloadFactory::CreatePermute</a>(<span class="keyword">const</span> PermuteQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                                                                     <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonPermuteWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;}</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160; </div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#abf1f324933ada657d13faf8d1d32a907">NeonWorkloadFactory::CreatePooling2d</a>(<span class="keyword">const</span> Pooling2dQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                                                                       <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonPooling2dWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;}</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160; </div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a21a5aef5f1850d8b5f797d97632409b8">NeonWorkloadFactory::CreatePreCompiled</a>(<span class="keyword">const</span> PreCompiledQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;                                                                  <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <span class="keywordflow">return</span> MakeWorkloadHelper&lt;NullWorkload, NullWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;}</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160; </div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a8040319bef721ad05a9fdf75060aaafe">NeonWorkloadFactory::CreatePrelu</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">armnn::PreluQueueDescriptor</a> &amp;descriptor,</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;                                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> &amp;info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonPreluWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;}</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160; </div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;std::unique_ptr&lt;IWorkload&gt; NeonWorkloadFactory::CreateQLstm(<span class="keyword">const</span> QLstmQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                                                            <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonQLstmWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;}</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160; </div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#ae51a441630e32e5a850d3d639f0e7847">NeonWorkloadFactory::CreateQuantize</a>(<span class="keyword">const</span> QuantizeQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                                                                      <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonQuantizeWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;}</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160; </div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#abd228c95f2ec95cbb2abcaa0dbacc018">NeonWorkloadFactory::CreateQuantizedLstm</a>(<span class="keyword">const</span> QuantizedLstmQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                                                                    <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonQuantizedLstmWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;}</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160; </div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#af8ce0da98340225c76ec512e5483dd89">NeonWorkloadFactory::CreateRank</a>(<span class="keyword">const</span> RankQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                                                           <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonRankWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;}</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160; </div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;std::unique_ptr&lt;IWorkload&gt; NeonWorkloadFactory::CreateReduce(<span class="keyword">const</span> ReduceQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                                                             <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonReduceWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;}</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160; </div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a655697a3bf827352acadc5f1dd3a8a34">NeonWorkloadFactory::CreateReshape</a>(<span class="keyword">const</span> ReshapeQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                                                              <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonReshapeWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;}</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160; </div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#aa9390326e8445e71c5dee9858084a1b8">NeonWorkloadFactory::CreateResize</a>(<span class="keyword">const</span> ResizeQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                                                             <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonResizeWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;}</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160; </div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a67ee4f8373684cb67f033976fc563081">NeonWorkloadFactory::CreateSlice</a>(<span class="keyword">const</span> SliceQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;                                                            <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonSliceWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;}</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160; </div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a6d49c282026484eb1c6e56f56f35348e">NeonWorkloadFactory::CreateSoftmax</a>(<span class="keyword">const</span> SoftmaxQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                                                              <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonSoftmaxWorkload&gt;(descriptor, info, m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;}</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160; </div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a1c9cd3cd798df38358e9047ac4621fe2">NeonWorkloadFactory::CreateSpaceToBatchNd</a>(<span class="keyword">const</span> SpaceToBatchNdQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                                                                     <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonSpaceToBatchNdWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;}</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160; </div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a4069efcce4abfd80a88827ea1509b2f8">NeonWorkloadFactory::CreateSpaceToDepth</a>(<span class="keyword">const</span> SpaceToDepthQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                                                                   <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonSpaceToDepthWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;}</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160; </div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a49428ff12e031e5af8bcc66161fa09fd">NeonWorkloadFactory::CreateSplitter</a>(<span class="keyword">const</span> SplitterQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                                                               <span class="keyword">const</span> WorkloadInfo&amp;            info)<span class="keyword"> const</span></div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonSplitterWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;}</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160; </div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a90c2655fd294c445ca2727491c8a8c79">NeonWorkloadFactory::CreateStack</a>(<span class="keyword">const</span> StackQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;                                                            <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonStackWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;}</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160; </div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a757d3084d3e11a1840bd2170eb990235">NeonWorkloadFactory::CreateStridedSlice</a>(<span class="keyword">const</span> StridedSliceQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;                                                                   <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonStridedSliceWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;}</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160; </div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a088ed247c7ec3bc1603c60f1145014e8">NeonWorkloadFactory::CreateSubtraction</a>(</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    <span class="keyword">const</span> SubtractionQueueDescriptor&amp; descriptor, <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonSubtractionWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;}</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160; </div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#a07446244299bc12305593358695ea1b4">NeonWorkloadFactory::CreateTranspose</a>(<span class="keyword">const</span> TransposeQueueDescriptor&amp; descriptor,</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                                                                       <span class="keyword">const</span> WorkloadInfo&amp; info)<span class="keyword"> const</span></div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonTransposeWorkload&gt;(descriptor, info);</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;}</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160; </div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_workload_factory_base.xhtml#acb80cd4ff2c145b80554376643fc54db">NeonWorkloadFactory::CreateTransposeConvolution2d</a>(</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keyword">const</span> TransposeConvolution2dQueueDescriptor &amp;descriptor,</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    <span class="keyword">const</span> WorkloadInfo &amp;info)<span class="keyword"> const</span></div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonTransposeConvolution2dWorkload&gt;(descriptor, info,</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;                                                                m_MemoryManager-&gt;GetIntraLayerManager());</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;}</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160; </div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;} <span class="comment">// namespace armnn</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af3f6d0343d56ce88ce7958170ed05cb3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af3f6d0343d56ce88ce7958170ed05cb3">armnn::LayerType::Floor</a></div><div class="ttdeci">@ Floor</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a1ba2b05e3c2028d4bc3db29fc0edf122"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a1ba2b05e3c2028d4bc3db29fc0edf122">armnn::WorkloadFactoryBase::CreateMinimum</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMinimum(const MinimumQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00175">WorkloadFactoryBase.hpp:175</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::LayerType::MemCopy</a></div><div class="ttdeci">@ MemCopy</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a06a69eab86af31e0daa17c99b9038bf1"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a06a69eab86af31e0daa17c99b9038bf1">armnn::WorkloadFactoryBase::CreatePad</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePad(const PadQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00191">WorkloadFactoryBase.hpp:191</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a></div><div class="ttdeci">@ Softmax</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">armnn::LayerType::Pooling3d</a></div><div class="ttdeci">@ Pooling3d</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::LayerType::FullyConnected</a></div><div class="ttdeci">@ FullyConnected</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a713c3685138355b145f4d17e473bf543"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a713c3685138355b145f4d17e473bf543">armnn::WorkloadFactoryBase::CreateConcat</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConcat(const ConcatQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00066">WorkloadFactoryBase.hpp:66</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::LayerType::Transpose</a></div><div class="ttdeci">@ Transpose</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">armnn::LayerType::ChannelShuffle</a></div><div class="ttdeci">@ ChannelShuffle</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a3a34a305e5187f3a3c67030d3bebbdb0"><div class="ttname"><a href="namespacearmnn.xhtml#a3a34a305e5187f3a3c67030d3bebbdb0">armnn::NeonBackendId</a></div><div class="ttdeci">constexpr const char * NeonBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_neon_backend_id_8hpp_source.xhtml#l00010">NeonBackendId.hpp:10</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00062">Types.hpp:62</a></div></div>
<div class="ttc" id="a_utils_8hpp_xhtml"><div class="ttname"><a href="_utils_8hpp.xhtml">Utils.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a21a5aef5f1850d8b5f797d97632409b8"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a21a5aef5f1850d8b5f797d97632409b8">armnn::WorkloadFactoryBase::CreatePreCompiled</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePreCompiled(const PreCompiledQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00207">WorkloadFactoryBase.hpp:207</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::LayerType::ConvertFp32ToFp16</a></div><div class="ttdeci">@ ConvertFp32ToFp16</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::LayerType::L2Normalization</a></div><div class="ttdeci">@ L2Normalization</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalBinaryOperation::LogicalAnd</a></div><div class="ttdeci">@ LogicalAnd</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::LayerType::TransposeConvolution2d</a></div><div class="ttdeci">@ TransposeConvolution2d</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a666c75e9db051b9b07f137a74af8d8b4"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a666c75e9db051b9b07f137a74af8d8b4">armnn::WorkloadFactoryBase::CreateBatchNormalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateBatchNormalization(const BatchNormalizationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00054">WorkloadFactoryBase.hpp:54</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_neon_backend_model_context_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_backend_model_context.xhtml">armnn::NeonBackendModelContext</a></div><div class="ttdoc">The NeonBackendModelContext is used to pass in Neon specific backend ModelOptions.</div><div class="ttdef"><b>Definition:</b> <a href="_neon_backend_model_context_8hpp_source.xhtml#l00019">NeonBackendModelContext.hpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div><div class="ttdeci">@ Input</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a04a3ae3944eb63e7e94c6e9676815864"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a04a3ae3944eb63e7e94c6e9676815864">armnn::WorkloadFactoryBase::CreateLogSoftmax</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateLogSoftmax(const LogSoftmaxQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00147">WorkloadFactoryBase.hpp:147</a></div></div>
<div class="ttc" id="a_neon_backend_model_context_8hpp_xhtml"><div class="ttname"><a href="_neon_backend_model_context_8hpp.xhtml">NeonBackendModelContext.hpp</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::LayerType::Slice</a></div><div class="ttdeci">@ Slice</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots.</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00068">INetwork.hpp:68</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_aabe4842ade5647ac5bbee5e446e49a5c"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#aabe4842ade5647ac5bbee5e446e49a5c">armnn::WorkloadFactoryBase::CreateMean</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMean(const MeanQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00159">WorkloadFactoryBase.hpp:159</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">armnn::LayerType::Maximum</a></div><div class="ttdeci">@ Maximum</div></div>
<div class="ttc" id="astructarmnn_1_1_gather_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_queue_descriptor.xhtml">armnn::GatherQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00502">WorkloadData.hpp:502</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_tensor_handle_xhtml_affd5aae75cad90f472f96cfd25a13f29"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">armnn::ITensorHandle::GetShape</a></div><div class="ttdeci">virtual TensorShape GetShape() const =0</div><div class="ttdoc">Get the number of elements for each dimension ordered from slowest iterating dimension to fastest ite...</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::LayerType::Quantize</a></div><div class="ttdeci">@ Quantize</div></div>
<div class="ttc" id="astructarmnn_1_1_detection_post_process_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">armnn::DetectionPostProcessQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00234">WorkloadData.hpp:234</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_backend_internal_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml">armnn::IBackendInternal</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00077">IBackendInternal.hpp:77</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::LayerType::ArgMinMax</a></div><div class="ttdeci">@ ArgMinMax</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a></div><div class="ttdeci">@ Subtraction</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_ad16ff72d909eb48f3dc8e1015c4a5078"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#ad16ff72d909eb48f3dc8e1015c4a5078">armnn::WorkloadFactoryBase::CreateMemImport</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMemImport(const MemImportQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00167">WorkloadFactoryBase.hpp:167</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_ae51a441630e32e5a850d3d639f0e7847"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#ae51a441630e32e5a850d3d639f0e7847">armnn::WorkloadFactoryBase::CreateQuantize</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateQuantize(const QuantizeQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00215">WorkloadFactoryBase.hpp:215</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::LayerType::SpaceToBatchNd</a></div><div class="ttdeci">@ SpaceToBatchNd</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::LayerType::Convolution2d</a></div><div class="ttdeci">@ Convolution2d</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::UnaryOperation::Exp</a></div><div class="ttdeci">@ Exp</div></div>
<div class="ttc" id="astructarmnn_1_1_rsqrt_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">armnn::RsqrtQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00492">WorkloadData.hpp:492</a></div></div>
<div class="ttc" id="a_polymorphic_downcast_8hpp_xhtml"><div class="ttname"><a href="_polymorphic_downcast_8hpp.xhtml">PolymorphicDowncast.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00217">Layer.hpp:217</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_abd228c95f2ec95cbb2abcaa0dbacc018"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#abd228c95f2ec95cbb2abcaa0dbacc018">armnn::WorkloadFactoryBase::CreateQuantizedLstm</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateQuantizedLstm(const QuantizedLstmQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00219">WorkloadFactoryBase.hpp:219</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a5b6893cda5b69359a4244c06054da18f"><div class="ttname"><a href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">armnn::ModelOptions</a></div><div class="ttdeci">std::vector&lt; BackendOptions &gt; ModelOptions</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00018">BackendOptions.hpp:18</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a4069efcce4abfd80a88827ea1509b2f8"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a4069efcce4abfd80a88827ea1509b2f8">armnn::WorkloadFactoryBase::CreateSpaceToDepth</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSpaceToDepth(const SpaceToDepthQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00247">WorkloadFactoryBase.hpp:247</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8aae77f3ad25595e35b327334d89410054"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8aae77f3ad25595e35b327334d89410054">armnn::UnaryOperation::Sqrt</a></div><div class="ttdeci">@ Sqrt</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a757d3084d3e11a1840bd2170eb990235"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a757d3084d3e11a1840bd2170eb990235">armnn::WorkloadFactoryBase::CreateStridedSlice</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateStridedSlice(const StridedSliceQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00263">WorkloadFactoryBase.hpp:263</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::UnaryOperation::Neg</a></div><div class="ttdeci">@ Neg</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a52094433136e6cae57398d861cd483f9"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a52094433136e6cae57398d861cd483f9">armnn::WorkloadFactoryBase::CreateBatchToSpaceNd</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateBatchToSpaceNd(const BatchToSpaceNdQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00058">WorkloadFactoryBase.hpp:58</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_ac8ff2a4e63a9954fd6b3e9fc6dfa9bf0"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#ac8ff2a4e63a9954fd6b3e9fc6dfa9bf0">armnn::WorkloadFactoryBase::CreateDetectionPostProcess</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDetectionPostProcess(const DetectionPostProcessQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00102">WorkloadFactoryBase.hpp:102</a></div></div>
<div class="ttc" id="a_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_tensor_handle_8hpp.xhtml">TensorHandle.hpp</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::LayerType::Permute</a></div><div class="ttdeci">@ Permute</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_ac1f4d42be05893f74b1237c3356c3c0c"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#ac1f4d42be05893f74b1237c3356c3c0c">armnn::WorkloadFactoryBase::CreateAddition</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateAddition(const AdditionQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00046">WorkloadFactoryBase.hpp:46</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::LayerType::ConvertFp16ToFp32</a></div><div class="ttdeci">@ ConvertFp16ToFp32</div></div>
<div class="ttc" id="aclassarmnn_1_1_neon_backend_model_context_xhtml_ab496797d400c4976d0d4b15b110bf7d9"><div class="ttname"><a href="classarmnn_1_1_neon_backend_model_context.xhtml#ab496797d400c4976d0d4b15b110bf7d9">armnn::NeonBackendModelContext::GetNumberOfThreads</a></div><div class="ttdeci">unsigned int GetNumberOfThreads() const</div><div class="ttdef"><b>Definition:</b> <a href="_neon_backend_model_context_8cpp_source.xhtml#l00058">NeonBackendModelContext.cpp:58</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a4e3b8d5650cb78c97a2eceb034209187"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a4e3b8d5650cb78c97a2eceb034209187">armnn::WorkloadFactoryBase::CreateConvertFp16ToFp32</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvertFp16ToFp32(const ConvertFp16ToFp32QueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00074">WorkloadFactoryBase.hpp:74</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::LayerType::QLstm</a></div><div class="ttdeci">@ QLstm</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::LayerType::Pad</a></div><div class="ttdeci">@ Pad</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div><div class="ttdeci">@ Addition</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a2314defaf9c8b1ffcf59e7e509a959d6"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a2314defaf9c8b1ffcf59e7e509a959d6">armnn::WorkloadFactoryBase::CreateDepthwiseConvolution2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDepthwiseConvolution2d(const DepthwiseConvolution2dQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00094">WorkloadFactoryBase.hpp:94</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">armnn::LayerType::QuantizedLstm</a></div><div class="ttdeci">@ QuantizedLstm</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a></div><div class="ttdeci">@ BatchNormalization</div></div>
<div class="ttc" id="a_neon_workloads_8hpp_xhtml"><div class="ttname"><a href="_neon_workloads_8hpp.xhtml">NeonWorkloads.hpp</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::LayerType::Reduce</a></div><div class="ttdeci">@ Reduce</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a90c2655fd294c445ca2727491c8a8c79"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a90c2655fd294c445ca2727491c8a8c79">armnn::WorkloadFactoryBase::CreateStack</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateStack(const StackQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00259">WorkloadFactoryBase.hpp:259</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_af5ace6034148c3fe048db884058f04cf"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#af5ace6034148c3fe048db884058f04cf">armnn::WorkloadFactoryBase::CreateFullyConnected</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateFullyConnected(const FullyConnectedQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00131">WorkloadFactoryBase.hpp:131</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_ada3f450379ba7b4989344de72a16f1d2"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#ada3f450379ba7b4989344de72a16f1d2">armnn::WorkloadFactoryBase::CreateGather</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateGather(const GatherQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00135">WorkloadFactoryBase.hpp:135</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a1b2165c83d6501e8ede91324c31a95f4"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a1b2165c83d6501e8ede91324c31a95f4">armnn::WorkloadFactoryBase::CreateDepthToSpace</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDepthToSpace(const DepthToSpaceQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00090">WorkloadFactoryBase.hpp:90</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::LayerType::Division</a></div><div class="ttdeci">@ Division</div></div>
<div class="ttc" id="anamespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors.</div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::LayerType::Debug</a></div><div class="ttdeci">@ Debug</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::LayerType::InstanceNormalization</a></div><div class="ttdeci">@ InstanceNormalization</div></div>
<div class="ttc" id="a_neon_workload_factory_8hpp_xhtml"><div class="ttname"><a href="_neon_workload_factory_8hpp.xhtml">NeonWorkloadFactory.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a655697a3bf827352acadc5f1dd3a8a34"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a655697a3bf827352acadc5f1dd3a8a34">armnn::WorkloadFactoryBase::CreateReshape</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateReshape(const ReshapeQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00227">WorkloadFactoryBase.hpp:227</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00015">ITensorHandle.hpp:15</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a9e67be0a653c173ba94e38137dc4bbde"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a9e67be0a653c173ba94e38137dc4bbde">armnn::WorkloadFactoryBase::CreateMaximum</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMaximum(const MaximumQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00155">WorkloadFactoryBase.hpp:155</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div><div class="ttdeci">@ Activation</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::LayerType::Normalization</a></div><div class="ttdeci">@ Normalization</div></div>
<div class="ttc" id="aclassarmnn_1_1_neon_backend_model_context_xhtml_abfe9aa4fa74aca0f9a925752bbbb0f79"><div class="ttname"><a href="classarmnn_1_1_neon_backend_model_context.xhtml#abfe9aa4fa74aca0f9a925752bbbb0f79">armnn::NeonBackendModelContext::IsFastMathEnabled</a></div><div class="ttdeci">bool IsFastMathEnabled() const</div><div class="ttdef"><b>Definition:</b> <a href="_neon_backend_model_context_8cpp_source.xhtml#l00053">NeonBackendModelContext.cpp:53</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a07446244299bc12305593358695ea1b4"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a07446244299bc12305593358695ea1b4">armnn::WorkloadFactoryBase::CreateTranspose</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateTranspose(const TransposeQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00271">WorkloadFactoryBase.hpp:271</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::LayerType::Comparison</a></div><div class="ttdeci">@ Comparison</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::LayerType::Stack</a></div><div class="ttdeci">@ Stack</div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">armnn::LayerType</a></div><div class="ttdeci">LayerType</div><div class="ttdoc">When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below.</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00466">Types.hpp:466</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::LayerType::Reshape</a></div><div class="ttdeci">@ Reshape</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_backend_internal_xhtml_a4d0238968a7643dbb170547dd22bba54"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">armnn::IBackendInternal::IBackendSpecificModelContextPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IBackendModelContext &gt; IBackendSpecificModelContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00096">IBackendInternal.hpp:96</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::LayerType::Gather</a></div><div class="ttdeci">@ Gather</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::LayerType::DepthwiseConvolution2d</a></div><div class="ttdeci">@ DepthwiseConvolution2d</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalBinaryOperation::LogicalOr</a></div><div class="ttdeci">@ LogicalOr</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a088ed247c7ec3bc1603c60f1145014e8"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a088ed247c7ec3bc1603c60f1145014e8">armnn::WorkloadFactoryBase::CreateSubtraction</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSubtraction(const SubtractionQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00251">WorkloadFactoryBase.hpp:251</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">armnn::LayerType::Fill</a></div><div class="ttdeci">@ Fill</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::LayerType::Resize</a></div><div class="ttdeci">@ Resize</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a848fc4ff47d5e9c68d2e26f6523b4e58"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a848fc4ff47d5e9c68d2e26f6523b4e58">armnn::WorkloadFactoryBase::CreateMultiplication</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMultiplication(const MultiplicationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00179">WorkloadFactoryBase.hpp:179</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_neon_workload_factory_xhtml_a7239477811c44d4398f0c2d291d9ea76"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">armnn::NeonWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00111">NeonWorkloadFactory.cpp:111</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a3dcc96078130874f1be15a7148868539"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a3dcc96078130874f1be15a7148868539">armnn::WorkloadFactoryBase::CreateInput</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateInput(const InputQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00024">WorkloadFactoryBase.hpp:24</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">armnn::LayerType::Rank</a></div><div class="ttdeci">@ Rank</div></div>
<div class="ttc" id="astructarmnn_1_1_prelu_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_prelu_queue_descriptor.xhtml">armnn::PreluQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00534">WorkloadData.hpp:534</a></div></div>
<div class="ttc" id="a_neon_backend_id_8hpp_xhtml"><div class="ttname"><a href="_neon_backend_id_8hpp.xhtml">NeonBackendId.hpp</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">armnn::LayerType::LogicalBinary</a></div><div class="ttdeci">@ LogicalBinary</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a></div><div class="ttdeci">@ UnidirectionalSequenceLstm</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2231ac018fe2c465f2d42fef597d67e7"><div class="ttname"><a href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">armnn::InputQueueDescriptor</a></div><div class="ttdeci">MemCopyQueueDescriptor InputQueueDescriptor</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00091">WorkloadData.hpp:91</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a8040319bef721ad05a9fdf75060aaafe"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a8040319bef721ad05a9fdf75060aaafe">armnn::WorkloadFactoryBase::CreatePrelu</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePrelu(const PreluQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00211">WorkloadFactoryBase.hpp:211</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::LayerType::Pooling2d</a></div><div class="ttdeci">@ Pooling2d</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div><div class="ttdeci">@ Float32</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_workload_factory_xhtml_a74dc9ec1a223eab8b072368b2dacee87"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">armnn::IWorkloadFactory::IsLayerSupported</a></div><div class="ttdeci">static bool IsLayerSupported(const BackendId &amp;backendId, const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01518">WorkloadFactory.cpp:1518</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a789a347180c49b2403e435857501f623"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a789a347180c49b2403e435857501f623">armnn::WorkloadFactoryBase::CreateActivation</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateActivation(const ActivationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00042">WorkloadFactoryBase.hpp:42</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4">armnn::LayerType::GatherNd</a></div><div class="ttdeci">@ GatherNd</div></div>
<div class="ttc" id="astructarmnn_1_1_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml">armnn::QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00024">WorkloadData.hpp:24</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_neon_workload_factory_xhtml_a9992ea7c353e8597fbd8ae426f4612ae"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">armnn::NeonWorkloadFactory::IsLayerSupported</a></div><div class="ttdeci">static bool IsLayerSupported(const Layer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00034">NeonWorkloadFactory.cpp:34</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::LayerType::Minimum</a></div><div class="ttdeci">@ Minimum</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255">armnn::LayerType::Constant</a></div><div class="ttdeci">@ Constant</div></div>
<div class="ttc" id="a_layer_8hpp_xhtml"><div class="ttname"><a href="_layer_8hpp.xhtml">Layer.hpp</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::LayerType::Lstm</a></div><div class="ttdeci">@ Lstm</div></div>
<div class="ttc" id="a_neon_workload_utils_8hpp_xhtml"><div class="ttname"><a href="_neon_workload_utils_8hpp.xhtml">NeonWorkloadUtils.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_acb80cd4ff2c145b80554376643fc54db"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#acb80cd4ff2c145b80554376643fc54db">armnn::WorkloadFactoryBase::CreateTransposeConvolution2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateTransposeConvolution2d(const TransposeConvolution2dQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00275">WorkloadFactoryBase.hpp:275</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::LayerType::ElementwiseUnary</a></div><div class="ttdeci">@ ElementwiseUnary</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_abf1f324933ada657d13faf8d1d32a907"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#abf1f324933ada657d13faf8d1d32a907">armnn::WorkloadFactoryBase::CreatePooling2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePooling2d(const Pooling2dQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00199">WorkloadFactoryBase.hpp:199</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a4101fcf76e3bbc979b2276631617aabe"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a4101fcf76e3bbc979b2276631617aabe">armnn::WorkloadFactoryBase::CreateFloor</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateFloor(const FloorQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00127">WorkloadFactoryBase.hpp:127</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::LayerType::SpaceToDepth</a></div><div class="ttdeci">@ SpaceToDepth</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a1c7e383368cb078a1faac0a4e4f763a1"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a1c7e383368cb078a1faac0a4e4f763a1">armnn::WorkloadFactoryBase::CreateDivision</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDivision(const DivisionQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00106">WorkloadFactoryBase.hpp:106</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a1c9cd3cd798df38358e9047ac4621fe2"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a1c9cd3cd798df38358e9047ac4621fe2">armnn::WorkloadFactoryBase::CreateSpaceToBatchNd</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSpaceToBatchNd(const SpaceToBatchNdQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00243">WorkloadFactoryBase.hpp:243</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a3d5de4e35ccddc5cfe79e530558d5184"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a3d5de4e35ccddc5cfe79e530558d5184">armnn::WorkloadFactoryBase::CreateComparison</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateComparison(const ComparisonQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00062">WorkloadFactoryBase.hpp:62</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a6df587611b4c46b591527f3d594f4a11"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a6df587611b4c46b591527f3d594f4a11">armnn::WorkloadFactoryBase::CreateNormalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateNormalization(const NormalizationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00183">WorkloadFactoryBase.hpp:183</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_neon_workload_factory_xhtml_a19a681524fa55169540fcccb9dcefaa6"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a19a681524fa55169540fcccb9dcefaa6">armnn::NeonWorkloadFactory::NeonWorkloadFactory</a></div><div class="ttdeci">NeonWorkloadFactory(const std::shared_ptr&lt; NeonMemoryManager &gt; &amp;memoryManager)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00073">NeonWorkloadFactory.cpp:73</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_neon_workload_factory_xhtml_abefb9df9d7a54cf2f82047ea350d0388"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">armnn::NeonWorkloadFactory::CreateSubTensorHandle</a></div><div class="ttdeci">std::unique_ptr&lt; ITensorHandle &gt; CreateSubTensorHandle(ITensorHandle &amp;parent, TensorShape const &amp;subTensorShape, unsigned int const *subTensorOrigin) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00086">NeonWorkloadFactory.cpp:86</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a77110c4dd8fe747ba0d441265f781076"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a77110c4dd8fe747ba0d441265f781076">armnn::WorkloadFactoryBase::CreateInstanceNormalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateInstanceNormalization(const InstanceNormalizationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00139">WorkloadFactoryBase.hpp:139</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a49428ff12e031e5af8bcc66161fa09fd"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a49428ff12e031e5af8bcc66161fa09fd">armnn::WorkloadFactoryBase::CreateSplitter</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSplitter(const SplitterQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00255">WorkloadFactoryBase.hpp:255</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6">armnn::UnaryOperation::Abs</a></div><div class="ttdeci">@ Abs</div></div>
<div class="ttc" id="astructarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about TensorInfos of a layer.</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::LayerType::StridedSlice</a></div><div class="ttdeci">@ StridedSlice</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_ad99e6a9f4e78ba4690429850de69fadd"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#ad99e6a9f4e78ba4690429850de69fadd">armnn::WorkloadFactoryBase::CreateDebug</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDebug(const DebugQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00086">WorkloadFactoryBase.hpp:86</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a67ee4f8373684cb67f033976fc563081"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a67ee4f8373684cb67f033976fc563081">armnn::WorkloadFactoryBase::CreateSlice</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSlice(const SliceQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00235">WorkloadFactoryBase.hpp:235</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::LayerType::DetectionPostProcess</a></div><div class="ttdeci">@ DetectionPostProcess</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3d6c9ac08ada31c184094bbc67afe00d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3d6c9ac08ada31c184094bbc67afe00d">armnn::LayerType::Mean</a></div><div class="ttdeci">@ Mean</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_af6cc3669898b498592dc28600aa6f0cd"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#af6cc3669898b498592dc28600aa6f0cd">armnn::WorkloadFactoryBase::CreateLstm</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateLstm(const LstmQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00151">WorkloadFactoryBase.hpp:151</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a17042914356fe13b708c3702cb82ab7f"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a17042914356fe13b708c3702cb82ab7f">armnn::WorkloadFactoryBase::CreateConvertFp32ToFp16</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvertFp32ToFp16(const ConvertFp32ToFp16QueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00078">WorkloadFactoryBase.hpp:78</a></div></div>
<div class="ttc" id="a_make_workload_helper_8hpp_xhtml"><div class="ttname"><a href="_make_workload_helper_8hpp.xhtml">MakeWorkloadHelper.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::LayerType::BatchToSpaceNd</a></div><div class="ttdeci">@ BatchToSpaceNd</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_afd952ccd68a1b2231b77db1f9131a61b"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#afd952ccd68a1b2231b77db1f9131a61b">armnn::WorkloadFactoryBase::CreateOutput</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateOutput(const OutputQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00187">WorkloadFactoryBase.hpp:187</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_aa9390326e8445e71c5dee9858084a1b8"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#aa9390326e8445e71c5dee9858084a1b8">armnn::WorkloadFactoryBase::CreateResize</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateResize(const ResizeQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00231">WorkloadFactoryBase.hpp:231</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::LayerType::DepthToSpace</a></div><div class="ttdeci">@ DepthToSpace</div></div>
<div class="ttc" id="astructarmnn_1_1_abs_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_abs_queue_descriptor.xhtml">armnn::AbsQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00646">WorkloadData.hpp:646</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::UnaryOperation::LogicalNot</a></div><div class="ttdeci">@ LogicalNot</div></div>
<div class="ttc" id="a_neon_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_neon_tensor_handle_8hpp.xhtml">NeonTensorHandle.hpp</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">armnn::UnaryOperation::Sin</a></div><div class="ttdeci">@ Sin</div></div>
<div class="ttc" id="aclassarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_neon_workload_factory_xhtml_ae2cd7e29596b68884bfaade25f8f0dc0"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">armnn::NeonWorkloadFactory::GetBackendId</a></div><div class="ttdeci">const BackendId &amp; GetBackendId() const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00049">NeonWorkloadFactory.cpp:49</a></div></div>
<div class="ttc" id="astructarmnn_1_1_activation_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00158">WorkloadData.hpp:158</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::LayerType::Concat</a></div><div class="ttdeci">@ Concat</div></div>
<div class="ttc" id="astructarmnn_1_1_queue_descriptor_xhtml_a6abd491bb99ffe88bd472c1ae5a1ed1a"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">armnn::QueueDescriptor::m_Outputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Outputs</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00027">WorkloadData.hpp:27</a></div></div>
<div class="ttc" id="a_numeric_cast_8hpp_xhtml"><div class="ttname"><a href="_numeric_cast_8hpp.xhtml">NumericCast.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a32983845590ec2dc9e644491793fd557"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a32983845590ec2dc9e644491793fd557">armnn::WorkloadFactoryBase::CreatePermute</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreatePermute(const PermuteQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00195">WorkloadFactoryBase.hpp:195</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_neon_workload_factory_xhtml_a739bcc341b89c98a5d38717370ebcaa6"><div class="ttname"><a href="classarmnn_1_1_neon_workload_factory.xhtml#a739bcc341b89c98a5d38717370ebcaa6">armnn::NeonWorkloadFactory::CreateWorkload</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateWorkload(LayerType type, const QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_workload_factory_8cpp_source.xhtml#l00134">NeonWorkloadFactory.cpp:134</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div><div class="ttdeci">@ Rsqrt</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a09f09645c2289d5d47dbea7c011d5f0e"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a09f09645c2289d5d47dbea7c011d5f0e">armnn::WorkloadFactoryBase::CreateElementwiseUnary</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateElementwiseUnary(const ElementwiseUnaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00110">WorkloadFactoryBase.hpp:110</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_af12076c82b1b7f0c48c1ed71df206b4d"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#af12076c82b1b7f0c48c1ed71df206b4d">armnn::WorkloadFactoryBase::CreateL2Normalization</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateL2Normalization(const L2NormalizationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00143">WorkloadFactoryBase.hpp:143</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">armnn::LayerType::Cast</a></div><div class="ttdeci">@ Cast</div></div>
<div class="ttc" id="a_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9882ff3cfed27d6161c20a305e7a3484"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9882ff3cfed27d6161c20a305e7a3484">armnn::LayerType::BatchMatMul</a></div><div class="ttdeci">@ BatchMatMul</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">armnn::LayerType::Convolution3d</a></div><div class="ttdeci">@ Convolution3d</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::LayerType::Splitter</a></div><div class="ttdeci">@ Splitter</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LayerType::LogSoftmax</a></div><div class="ttdeci">@ LogSoftmax</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a73e9a5c2c3eff38766f03adb98abdd26"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a73e9a5c2c3eff38766f03adb98abdd26">armnn::WorkloadFactoryBase::CreateMemCopy</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateMemCopy(const MemCopyQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00163">WorkloadFactoryBase.hpp:163</a></div></div>
<div class="ttc" id="a_mem_import_workload_8hpp_xhtml"><div class="ttname"><a href="_mem_import_workload_8hpp.xhtml">MemImportWorkload.hpp</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div><div class="ttdeci">@ Output</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a1f17745331f928011cc1ea162866b8e7"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a1f17745331f928011cc1ea162866b8e7">armnn::WorkloadFactoryBase::CreateDequantize</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateDequantize(const DequantizeQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00098">WorkloadFactoryBase.hpp:98</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a4a781a9541d2c44c5fec0ffc8434447c"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a4a781a9541d2c44c5fec0ffc8434447c">armnn::WorkloadFactoryBase::CreateConvolution2d</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConvolution2d(const Convolution2dQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00082">WorkloadFactoryBase.hpp:82</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a></div><div class="ttdeci">@ Multiplication</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::LayerType::MemImport</a></div><div class="ttdeci">@ MemImport</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::LayerType::Prelu</a></div><div class="ttdeci">@ Prelu</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a6d49c282026484eb1c6e56f56f35348e"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a6d49c282026484eb1c6e56f56f35348e">armnn::WorkloadFactoryBase::CreateSoftmax</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateSoftmax(const SoftmaxQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00239">WorkloadFactoryBase.hpp:239</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_af8ce0da98340225c76ec512e5483dd89"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#af8ce0da98340225c76ec512e5483dd89">armnn::WorkloadFactoryBase::CreateRank</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateRank(const RankQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00223">WorkloadFactoryBase.hpp:223</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::LayerType::Dequantize</a></div><div class="ttdeci">@ Dequantize</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac6e86c1def7f674d3c4cb7f577874aa6"><div class="ttname"><a href="namespacearmnn.xhtml#ac6e86c1def7f674d3c4cb7f577874aa6">armnn::Coordinates</a></div><div class="ttdeci">std::array&lt; unsigned int, MaxNumOfTensorDimensions &gt; Coordinates</div><div class="ttdef"><b>Definition:</b> <a href="_internal_types_8hpp_source.xhtml#l00015">InternalTypes.hpp:15</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a37a1a6b381ccc76df203fee023234996"><div class="ttname"><a href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">armnn::OutputQueueDescriptor</a></div><div class="ttdeci">MemCopyQueueDescriptor OutputQueueDescriptor</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00092">WorkloadData.hpp:92</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::UnaryOperation::Log</a></div><div class="ttdeci">@ Log</div></div>
<div class="ttc" id="astructarmnn_1_1_queue_descriptor_xhtml_a4b50e46a6810018f3edecfb68b2a76b3"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">armnn::QueueDescriptor::m_Inputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Inputs</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00026">WorkloadData.hpp:26</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div><div class="ttdeci">@ info</div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a4269d65bcf8068290752d75164934a25"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a4269d65bcf8068290752d75164934a25">armnn::WorkloadFactoryBase::CreateArgMinMax</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateArgMinMax(const ArgMinMaxQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00050">WorkloadFactoryBase.hpp:50</a></div></div>
<div class="ttc" id="a_mem_copy_workload_8hpp_xhtml"><div class="ttname"><a href="_mem_copy_workload_8hpp.xhtml">MemCopyWorkload.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_workload_factory_base_xhtml_a0da6f270ae7ce126b29a8918d858e814"><div class="ttname"><a href="classarmnn_1_1_workload_factory_base.xhtml#a0da6f270ae7ce126b29a8918d858e814">armnn::WorkloadFactoryBase::CreateConstant</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkload &gt; CreateConstant(const ConstantQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_base_8hpp_source.xhtml#l00070">WorkloadFactoryBase.hpp:70</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1ba143ebe524d46181a4b53470693278"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1ba143ebe524d46181a4b53470693278">armnn::LayerType::PreCompiled</a></div><div class="ttdeci">@ PreCompiled</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_d86eb514662c7c08e168285f21d00ea1.xhtml">neon</a></li><li class="navelem"><a class="el" href="_neon_workload_factory_8cpp.xhtml">NeonWorkloadFactory.cpp</a></li>
    <li class="footer">Generated on Wed Mar 22 2023 15:53:01 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
