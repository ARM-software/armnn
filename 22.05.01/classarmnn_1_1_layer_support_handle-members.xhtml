<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: Member List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_layer_support_handle.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">LayerSupportHandle Member List</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is the complete list of members for <a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a>, including all inherited members.</p>
<table class="directory">
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#acc8dd3d4f7a5039a6567aaa68280cf6b">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This function has been deprecated, please use function without &quot; &quot;Optional TensorInfos&quot;, &quot;23.02&quot;) bool IsUnidirectionalSequenceLstmSupported(const TensorInfo &amp;input</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a91518a6dddd8dae5f127b5d8febb6a9d">cellStateIn</a></td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#ad6e8cb5712ff6fe9e126b1018c8cba52">cellStateOutput</a></td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#af3719af00d34b86fe5f1993b33025e87">descriptor</a></td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#aa0c5f67ad67fcfdadb1f9a082b7ff28f">hiddenStateOutput</a></td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a75f01d8e1dbb7a9386bbb6a7a3d41920">IsActivationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#abe0d9e04a1b5e6f2344adcd74d3b3dfe">IsAdditionSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a97527514268db4c4a510f49020ca648e">IsArgMinMaxSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a1ba0862636ccfea01078005c4e6ba6de">IsBackendRegistered</a>() const</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a37f9d9263c5509e75a6aebf77cfaf242">IsBatchNormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#afd6279019c78c1cebacf24c71a7a1f9b">IsBatchToSpaceNdSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a0feadd628ca39d143be392f13e0a6b1b">IsCastSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a894e9e9e3b008959080b0e0d2d54156e">IsChannelShuffleSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ChannelShuffleDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a413082dc2ac940ec31793ef15cb733bf">IsComparisonSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a02bd9a06e7d87799e42e68c67e0cb95c">IsConcatSupported</a>(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a45378a497174e038f360f380a481e475">IsConstantSupported</a>(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a6647f0061e4574c429b2492f32b8e307">IsConvertBf16ToFp32Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#ae81870a573fcb46b73cf13591307c4ec">IsConvertFp16ToFp32Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a5c54d70bd6aec5469b79a91bf64c793b">IsConvertFp32ToBf16Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a1a9ffd82ed12f3d249c48ba9ebd24558">IsConvertFp32ToFp16Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#abd99d21d1a25806cbad2ad9d88da5feb">IsConvolution2dSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a9cf88faa84096a14936640e54b090f84">IsConvolution3dSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution3dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a0b52e6ce3d1e93e05f90d960cab0078f">IsDebugSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#adc976b556bb527809f0ea9d8fec9845e">IsDepthToSpaceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a06519f6650222164f2f382c61b96fc15">IsDepthwiseConvolutionSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#acf38f18a6c7c7658b560e1ba331b4bbb">IsDequantizeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a571012cfd098c2866003b644729b3ec6">IsDetectionPostProcessSupported</a>(const TensorInfo &amp;boxEncodings, const TensorInfo &amp;scores, const TensorInfo &amp;anchors, const TensorInfo &amp;detectionBoxes, const TensorInfo &amp;detectionClasses, const TensorInfo &amp;detectionScores, const TensorInfo &amp;numDetections, const DetectionPostProcessDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a3f44c42301c6aacea1de7c1ec457394d">IsDilatedDepthwiseConvolutionSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a26846c9dc8e65a30fbdfca7e2d80fd7b">IsDivisionSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a514a023732c3440542f92bfbd4e4352a">IsElementwiseUnarySupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a178bff959f365309313508686b17a256">IsFakeQuantizationSupported</a>(const TensorInfo &amp;input, const FakeQuantizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a8328387b617cf76c71bc18661a71b037">IsFillSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const FillDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#ae5c5762e3c571a5553941509a3367efe">IsFloorSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a4e7e84ee718a87059ff71d0e803072e4">IsFullyConnectedSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const TensorInfo &amp;biases, const FullyConnectedDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a2cb10d22c4c07c1aeb97eb8a6817e456">IsGatherNdSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a8e6274b23fb9a773e42fc04ebc501edc">IsGatherSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#aae2be97dbd7ad6847949ad0e193ca17f">IsInputSupported</a>(const TensorInfo &amp;input, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a600fd20ad10051fec52f2f6d80f0e456">IsInstanceNormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#aa794c8d3acce8b0428ccca43ea010cef">IsL2NormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a0dc7c3cc5ba1b1c2e09630eea6f3e6ad">IsLogicalBinarySupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const LogicalBinaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a7626486dd961efa5d3a59aa5a57d3cda">IsLogicalUnarySupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#ae0c5654d5791afa7ae3b0e9d08b1cf11">IsLogSoftmaxSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a5777f9daef547c3390a61a90218950f0">IsLstmSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a0963ad50672ab5f883568b1cdde31de0">IsMaximumSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a3fe3fbc49b88d59f4cd57b55ada2ceb8">IsMeanSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a278c4eda4ee20810d1f38b9341b9304f">IsMemCopySupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a3cd3b7667091df2efa67c398c155a9a2">IsMemImportSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a776512d6109f9458f78844ae0bcf3e72">IsMergeSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a0ab9aec3ae42288e3020207d1e961661">IsMinimumSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a8176ea491b94f887e088d9bbf92489ae">IsMultiplicationSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a6980df6695cb00d4a2478ebde2a35345">IsNormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a6d36cfb27f84220879e78efaacec5ed3">IsOutputSupported</a>(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#abdb247c7edc76f8d61179ecf082a01de">IsPadSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a3f6316e3e083fee8e5cb356a530e775f">IsPermuteSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#aec217515cd3dfb6d75562eccead88246">IsPooling2dSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#ada2164a21874acb3647cc9224b31a80a">IsPooling3dSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling3dDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a41c5f5cc4e157499a13862125806802d">IsPreCompiledSupported</a>(const TensorInfo &amp;input, const PreCompiledDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#ac935a4773196263a3dbbcb936f06b763">IsPreluSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#adc716767c268552145348f1247b47006">IsQLstmSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a169d56334714f8838d6483ac5becfa78">IsQuantizedLstmSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QuantizedLstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#ae6eccff32da02f489e295908ebb2651a">IsQuantizeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a84e1baf46bd5fbf1c945c3eff8639f26">IsRankSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a3cfc812d1149871d268ee8f22a8d560f">IsReduceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#ab87665654c1814f2cca7b47144b7b10c">IsReshapeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReshapeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a17f237a80f496614d150b727e8d007c3">IsResizeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a3de367077cfc29d43575b5a7501b0c9c">IsShapeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a87aa9bc25667670215e5f6c5b774abee">IsSliceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a86c61459dbddc1dce1c386a4d8b04694">IsSoftmaxSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#acb38e46aaba6f0296b7915ab5019abb0">IsSpaceToBatchNdSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#ab5a9e690f184d1ab36cd20f20771e361">IsSpaceToDepthSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a11e30be6ad772860d59fbaa1d34bc415">IsSplitterSupported</a>(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, const ViewsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a4836fa8a1dcb24dc82fce4fa320287d2">IsStackSupported</a>(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a17de49aa96a88e439b29d009ca703116">IsStandInSupported</a>(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const std::vector&lt; const TensorInfo *&gt; &amp;outputs, const StandInDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#aeb96849346b28e6b91b457a54277f831">IsStridedSliceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#abb82febf90b89d04bb38d2f7bf25d438">IsSubtractionSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#aa49b47cfa52cd39dfb0559a2cace6c25">IsSwitchSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output0, const TensorInfo &amp;output1, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a92b92441a54daa3e5b139a251114547d">IsTransposeConvolution2dSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a141df11a09d4ec73c8bd6ed4cef58b96">IsTransposeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a128d740ce90fb7612a596e9c3bac4623">IsUnidirectionalSequenceLstmSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional())</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a2bc87ea547a3ef1dacbe40e09515ce22">LayerSupportHandle</a>(std::shared_ptr&lt; ILayerSupport &gt; layerSupport)</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">explicit</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a53fa2eaca1d868977aeb9d05f86977d7">LayerSupportHandle</a>(std::shared_ptr&lt; ILayerSupport &gt; layerSupport, const BackendId &amp;backendId)</td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">explicit</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#ab8126d22427f09de91bf8cf83fe1d47a">output</a></td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a9513ffa0edc73a2e96a9ccdc9bf1ee64">outputStateIn</a></td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#a26e7288e9dbda87654dadee78af080a8">paramsInfo</a></td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml#af1ce5c4d2e0e4a012f6f2268e711d315">reasonIfUnsupported</a></td><td class="entry"><a class="el" href="classarmnn_1_1_layer_support_handle.xhtml">LayerSupportHandle</a></td><td class="entry"></td></tr>
</table></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:32 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
