<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: MnistDatabase Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('class_mnist_database.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_mnist_database-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">MnistDatabase Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_mnist_database_8hpp_source.xhtml">MnistDatabase.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a9d5c241a4bb952f78d140229d17f2465"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_mnist_database.xhtml#a9d5c241a4bb952f78d140229d17f2465">DataType</a> = float</td></tr>
<tr class="separator:a9d5c241a4bb952f78d140229d17f2465"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b6d5426d97a60215cdcd609dee35cc9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_mnist_database.xhtml#a0b6d5426d97a60215cdcd609dee35cc9">TTestCaseData</a> = <a class="el" href="class_classifier_test_case_data.xhtml">ClassifierTestCaseData</a>&lt; <a class="el" href="class_mnist_database.xhtml#a9d5c241a4bb952f78d140229d17f2465">DataType</a> &gt;</td></tr>
<tr class="separator:a0b6d5426d97a60215cdcd609dee35cc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a66e5904e741dbce2d648bc9a02e7eb0e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_mnist_database.xhtml#a66e5904e741dbce2d648bc9a02e7eb0e">MnistDatabase</a> (const std::string &amp;binaryFileDirectory, bool scaleValues=false)</td></tr>
<tr class="separator:a66e5904e741dbce2d648bc9a02e7eb0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4808453ec85548b752bcc6d4c1bc90b2"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="class_mnist_database.xhtml#a0b6d5426d97a60215cdcd609dee35cc9">TTestCaseData</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_mnist_database.xhtml#a4808453ec85548b752bcc6d4c1bc90b2">GetTestCaseData</a> (unsigned int testCaseId)</td></tr>
<tr class="separator:a4808453ec85548b752bcc6d4c1bc90b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_mnist_database_8hpp_source.xhtml#l00012">12</a> of file <a class="el" href="_mnist_database_8hpp_source.xhtml">MnistDatabase.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a9d5c241a4bb952f78d140229d17f2465"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d5c241a4bb952f78d140229d17f2465">&#9670;&nbsp;</a></span>DataType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_mnist_database.xhtml#a9d5c241a4bb952f78d140229d17f2465">DataType</a> =  float</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mnist_database_8hpp_source.xhtml#l00015">15</a> of file <a class="el" href="_mnist_database_8hpp_source.xhtml">MnistDatabase.hpp</a>.</p>

</div>
</div>
<a id="a0b6d5426d97a60215cdcd609dee35cc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b6d5426d97a60215cdcd609dee35cc9">&#9670;&nbsp;</a></span>TTestCaseData</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_mnist_database.xhtml#a0b6d5426d97a60215cdcd609dee35cc9">TTestCaseData</a> =  <a class="el" href="class_classifier_test_case_data.xhtml">ClassifierTestCaseData</a>&lt;<a class="el" href="class_mnist_database.xhtml#a9d5c241a4bb952f78d140229d17f2465">DataType</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mnist_database_8hpp_source.xhtml#l00016">16</a> of file <a class="el" href="_mnist_database_8hpp_source.xhtml">MnistDatabase.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a66e5904e741dbce2d648bc9a02e7eb0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66e5904e741dbce2d648bc9a02e7eb0e">&#9670;&nbsp;</a></span>MnistDatabase()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_mnist_database.xhtml">MnistDatabase</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>binaryFileDirectory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>scaleValues</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mnist_database_8cpp_source.xhtml#l00019">19</a> of file <a class="el" href="_mnist_database_8cpp_source.xhtml">MnistDatabase.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    : m_BinaryDirectory(binaryFileDirectory)</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    , m_ScaleValues(scaleValues)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4808453ec85548b752bcc6d4c1bc90b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4808453ec85548b752bcc6d4c1bc90b2">&#9670;&nbsp;</a></span>GetTestCaseData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="class_mnist_database.xhtml#a0b6d5426d97a60215cdcd609dee35cc9">MnistDatabase::TTestCaseData</a> &gt; GetTestCaseData </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>testCaseId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mnist_database_8cpp_source.xhtml#l00025">25</a> of file <a class="el" href="_mnist_database_8cpp_source.xhtml">MnistDatabase.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_mnist_database_8cpp_source.xhtml#l00014">EndianSwap()</a>, and <a class="el" href="_mnist_database_8cpp_source.xhtml#l00012">g_kMnistImageByteSize</a>.</p>
<div class="fragment"><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    std::vector&lt;unsigned char&gt; I(<a class="code" href="_mnist_database_8cpp.xhtml#a933b2eaa5ca0420cdc78044e959dcd6e">g_kMnistImageByteSize</a>);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> label = 0;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    std::string imagePath = m_BinaryDirectory + std::string(<span class="stringliteral">&quot;t10k-images.idx3-ubyte&quot;</span>);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    std::string labelPath = m_BinaryDirectory + std::string(<span class="stringliteral">&quot;t10k-labels.idx1-ubyte&quot;</span>);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    std::ifstream imageStream(imagePath, std::ios::binary);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    std::ifstream labelStream(labelPath, std::ios::binary);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">if</span> (!imageStream.is_open())</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Failed to load &quot;</span> &lt;&lt; imagePath;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">if</span> (!labelStream.is_open())</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Failed to load &quot;</span> &lt;&lt; imagePath;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> magic, num, row, col;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Checks the files have the correct header.</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    imageStream.read(reinterpret_cast&lt;char*&gt;(&amp;magic), <span class="keyword">sizeof</span>(magic));</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">if</span> (magic != 0x03080000)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Failed to read &quot;</span> &lt;&lt; imagePath;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    labelStream.read(reinterpret_cast&lt;char*&gt;(&amp;magic), <span class="keyword">sizeof</span>(magic));</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span> (magic != 0x01080000)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Failed to read &quot;</span> &lt;&lt; labelPath;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// Endian swaps the image and label file - all the integers in the files are stored in MSB first(high endian)</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// format, hence it needs to flip the bytes of the header if using it on Intel processors or low-endian machines</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    labelStream.read(reinterpret_cast&lt;char*&gt;(&amp;num), <span class="keyword">sizeof</span>(num));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    imageStream.read(reinterpret_cast&lt;char*&gt;(&amp;num), <span class="keyword">sizeof</span>(num));</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="_mnist_database_8cpp.xhtml#a4388a1d2afb5b20ea6c7ebefcafeaf05">EndianSwap</a>(num);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    imageStream.read(reinterpret_cast&lt;char*&gt;(&amp;row), <span class="keyword">sizeof</span>(row));</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="_mnist_database_8cpp.xhtml#a4388a1d2afb5b20ea6c7ebefcafeaf05">EndianSwap</a>(row);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    imageStream.read(reinterpret_cast&lt;char*&gt;(&amp;col), <span class="keyword">sizeof</span>(col));</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="_mnist_database_8cpp.xhtml#a4388a1d2afb5b20ea6c7ebefcafeaf05">EndianSwap</a>(col);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// Reads image and label into memory.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    imageStream.seekg(testCaseId * <a class="code" href="_mnist_database_8cpp.xhtml#a933b2eaa5ca0420cdc78044e959dcd6e">g_kMnistImageByteSize</a>, std::ios_base::cur);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    imageStream.read(reinterpret_cast&lt;char*&gt;(&amp;I[0]), g_kMnistImageByteSize);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    labelStream.seekg(testCaseId, std::ios_base::cur);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    labelStream.read(reinterpret_cast&lt;char*&gt;(&amp;label), 1);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span> (!imageStream.good())</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Failed to read &quot;</span> &lt;&lt; imagePath;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">if</span> (!labelStream.good())</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Failed to read &quot;</span> &lt;&lt; labelPath;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    std::vector&lt;float&gt; inputImageData;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    inputImageData.resize(g_kMnistImageByteSize);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; col * row; ++i)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment">// Static_cast of unsigned char is safe with float</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        inputImageData[i] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(I[i]);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">if</span>(m_ScaleValues)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            inputImageData[i] /= 255.0f;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;TTestCaseData&gt;(label, std::move(inputImageData));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="ttc" id="_mnist_database_8cpp_xhtml_a4388a1d2afb5b20ea6c7ebefcafeaf05"><div class="ttname"><a href="_mnist_database_8cpp.xhtml#a4388a1d2afb5b20ea6c7ebefcafeaf05">EndianSwap</a></div><div class="ttdeci">void EndianSwap(unsigned int &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="_mnist_database_8cpp_source.xhtml#l00014">MnistDatabase.cpp:14</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="_mnist_database_8cpp_xhtml_a933b2eaa5ca0420cdc78044e959dcd6e"><div class="ttname"><a href="_mnist_database_8cpp.xhtml#a933b2eaa5ca0420cdc78044e959dcd6e">g_kMnistImageByteSize</a></div><div class="ttdeci">constexpr int g_kMnistImageByteSize</div><div class="ttdef"><b>Definition:</b> <a href="_mnist_database_8cpp_source.xhtml#l00012">MnistDatabase.cpp:12</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/<a class="el" href="_mnist_database_8hpp_source.xhtml">MnistDatabase.hpp</a></li>
<li>tests/<a class="el" href="_mnist_database_8cpp_source.xhtml">MnistDatabase.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="class_mnist_database.xhtml">MnistDatabase</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:20 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
