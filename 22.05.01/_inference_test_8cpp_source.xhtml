<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/InferenceTest.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_inference_test_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">InferenceTest.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_inference_test_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_inference_test_8hpp.xhtml">InferenceTest.hpp</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_assert_8hpp.xhtml">armnn/utility/Assert.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_filesystem_8hpp.xhtml">armnnUtils/Filesystem.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;../src/armnn/Profiling.hpp&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;cxxopts/cxxopts.hpp&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacestd.xhtml">std</a>;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacestd_1_1chrono.xhtml">std::chrono</a>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn_1_1test.xhtml">armnn::test</a>;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1test.xhtml">   24</a></span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">/// Parse the command line of an ArmNN (or referencetests) inference test program.</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">/// \return false if any error occurred during options processing, otherwise true</span></div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1test.xhtml#ae2e622d6018bd48beabd765d4f6e5714">   28</a></span>&#160;<span class="comment"></span><span class="keywordtype">bool</span> <a class="code" href="namespacearmnn_1_1test.xhtml#ae2e622d6018bd48beabd765d4f6e5714">ParseCommandLine</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv, <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a>&amp; testCaseProvider,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a>&amp; outParams)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    cxxopts::Options options(<span class="stringliteral">&quot;InferenceTest&quot;</span>, <span class="stringliteral">&quot;Inference iteration parameters&quot;</span>);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="comment">// Adds generic options needed for all inference tests.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        options</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            .allow_unrecognised_options()</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            .add_options()</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                (<span class="stringliteral">&quot;h,help&quot;</span>, <span class="stringliteral">&quot;Display help messages&quot;</span>)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                (<span class="stringliteral">&quot;i,iterations&quot;</span>, <span class="stringliteral">&quot;Sets the number of inferences to perform. If unset, will only be run once.&quot;</span>,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                 cxxopts::value&lt;unsigned int&gt;(outParams.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">m_IterationCount</a>)-&gt;default_value(<span class="stringliteral">&quot;0&quot;</span>))</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                (<span class="stringliteral">&quot;inference-times-file&quot;</span>,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                 <span class="stringliteral">&quot;If non-empty, each individual inference time will be recorded and output to this file&quot;</span>,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                 cxxopts::value&lt;std::string&gt;(outParams.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">m_InferenceTimesFile</a>)-&gt;default_value(<span class="stringliteral">&quot;&quot;</span>))</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                (<span class="stringliteral">&quot;e,event-based-profiling&quot;</span>, <span class="stringliteral">&quot;Enables built in profiler. If unset, defaults to off.&quot;</span>,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                 cxxopts::value&lt;bool&gt;(outParams.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>)-&gt;default_value(<span class="stringliteral">&quot;0&quot;</span>));</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        std::vector&lt;std::string&gt; required; <span class="comment">//to be passed as reference to derived inference tests</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="comment">// Adds options specific to the ITestCaseProvider.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        testCaseProvider.<a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a87d20f49fba1d117545ec865cc43b364">AddCommandLineOptions</a>(options, required);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keyword">auto</span> result = options.parse(argc, argv);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span> (result.count(<span class="stringliteral">&quot;help&quot;</span>))</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            std::cout &lt;&lt; options.help() &lt;&lt; std::endl;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="_cxxopts_utils_8hpp.xhtml#a54dc0f90125fe080b8d0c503e542ca77">CheckRequiredOptions</a>(result, required);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> cxxopts::OptionException&amp; e)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        std::cerr &lt;&lt; e.what() &lt;&lt; std::endl &lt;&lt; options.help() &lt;&lt; std::endl;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Caught unexpected exception&quot;</span>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Fatal internal error: &quot;</span> &lt;&lt; e.what() &lt;&lt; std::endl;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span> (!testCaseProvider.<a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a0b5cdedc222fce2b18000949f0699880">ProcessCommandLineOptions</a>(outParams))</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">   84</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">ValidateDirectory</a>(std::string&amp; dir)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">if</span> (dir.empty())</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;No directory specified&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">if</span> (dir[dir.length() - 1] != <span class="charliteral">&#39;/&#39;</span>)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        dir += <span class="stringliteral">&quot;/&quot;</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(dir))</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given directory &quot;</span> &lt;&lt; dir &lt;&lt; <span class="stringliteral">&quot; does not exist&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">if</span> (!fs::is_directory(dir))</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given directory [&quot;</span> &lt;&lt; dir &lt;&lt; <span class="stringliteral">&quot;] is not a directory&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1test.xhtml#ab5a7cac4237e83d4f0d67d01dfb8ba9f">  112</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn_1_1test.xhtml#ab5a7cac4237e83d4f0d67d01dfb8ba9f">InferenceTest</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a>&amp; params,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; defaultTestCaseIds,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a>&amp; testCaseProvider)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#if !defined (NDEBUG)</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">if</span> (params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">m_IterationCount</a> &gt; 0) <span class="comment">// If just running a few select images then don&#39;t bother to warn.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">warning</a>) &lt;&lt; <span class="stringliteral">&quot;Performance test running in DEBUG build - results may be inaccurate.&quot;</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">double</span> totalTime = 0;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbProcessed = 0;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">bool</span> success = <span class="keyword">true</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Opens the file to write inference times too, if needed.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    ofstream inferenceTimesFile;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> recordInferenceTimes = !params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">m_InferenceTimesFile</a>.empty();</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">if</span> (recordInferenceTimes)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        inferenceTimesFile.open(params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">m_InferenceTimesFile</a>.c_str(), ios_base::trunc | ios_base::out);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">if</span> (!inferenceTimesFile.good())</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to open inference times file for writing: &quot;</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                &lt;&lt; params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">m_InferenceTimesFile</a>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// Create a profiler and register it for the current thread.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::unique_ptr&lt;IProfiler&gt; profiler = std::make_unique&lt;IProfiler&gt;();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    ProfilerManager::GetInstance().RegisterProfiler(profiler.get());</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Enable profiling if requested.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    profiler-&gt;EnableProfiling(params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// Run a single test case to &#39;warm-up&#39; the model. The first one can sometimes take up to 10x longer</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    std::unique_ptr&lt;IInferenceTestCase&gt; warmupTestCase = testCaseProvider.<a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a04734602cd9aa5125174458128b3b418">GetTestCase</a>(0);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span> (warmupTestCase == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to load test case&quot;</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        warmupTestCase-&gt;Run();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1test_1_1_test_framework_exception.xhtml">TestFrameworkException</a>&amp; testError)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>) &lt;&lt; testError.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbTotalToProcess = params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">m_IterationCount</a> &gt; 0 ? params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">m_IterationCount</a></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        : <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(defaultTestCaseIds.size());</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">for</span> (; nbProcessed &lt; nbTotalToProcess; nbProcessed++)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> testCaseId = params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">m_IterationCount</a> &gt; 0 ? nbProcessed : defaultTestCaseIds[nbProcessed];</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        std::unique_ptr&lt;IInferenceTestCase&gt; testCase = testCaseProvider.<a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a04734602cd9aa5125174458128b3b418">GetTestCase</a>(testCaseId);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">if</span> (testCase == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to load test case&quot;</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        time_point&lt;high_resolution_clock&gt; predictStart;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        time_point&lt;high_resolution_clock&gt; predictEnd;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">TestCaseResult</a> result = TestCaseResult::Ok;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            predictStart = high_resolution_clock::now();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            testCase-&gt;Run();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            predictEnd = high_resolution_clock::now();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="comment">// duration&lt;double&gt; will convert the time difference into seconds as a double by default.</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordtype">double</span> timeTakenS = duration&lt;double&gt;(predictEnd - predictStart).count();</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            totalTime += timeTakenS;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="comment">// Outputss inference times, if needed.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">if</span> (recordInferenceTimes)</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                inferenceTimesFile &lt;&lt; testCaseId &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; (timeTakenS * 1000.0) &lt;&lt; std::endl;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            result = testCase-&gt;ProcessResult(params);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1test_1_1_test_framework_exception.xhtml">TestFrameworkException</a>&amp; testError)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>) &lt;&lt; testError.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            result = TestCaseResult::Abort;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">switch</span> (result)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">case</span> TestCaseResult::Ok:</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">case</span> TestCaseResult::Abort:</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">case</span> TestCaseResult::Failed:</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="comment">// This test failed so we will fail the entire program eventually, but keep going for now.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            success = <span class="keyword">false</span>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Unexpected TestCaseResult&quot;</span>);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> averageTimePerTestCaseMs = totalTime / nbProcessed * 1000.0f;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="stringliteral">&quot;Total time for &quot;</span> &lt;&lt; nbProcessed &lt;&lt; <span class="stringliteral">&quot; test cases: &quot;</span> &lt;&lt; totalTime &lt;&lt; <span class="stringliteral">&quot; seconds&quot;</span>;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="stringliteral">&quot;Average time per test case: &quot;</span> &lt;&lt; averageTimePerTestCaseMs &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">// if profiling is enabled print out the results</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">if</span> (profiler &amp;&amp; profiler-&gt;IsProfilingEnabled())</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        profiler-&gt;Print(std::cout);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">if</span> (!success)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>) &lt;&lt; <span class="stringliteral">&quot;One or more test cases failed&quot;</span>;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordflow">return</span> testCaseProvider.<a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a88bbd5a851f1148bf5a90db7779be261">OnInferenceTestFinished</a>();</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="namespacearmnn_1_1test_xhtml_ae2e622d6018bd48beabd765d4f6e5714"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#ae2e622d6018bd48beabd765d4f6e5714">armnn::test::ParseCommandLine</a></div><div class="ttdeci">bool ParseCommandLine(int argc, char **argv, IInferenceTestCaseProvider &amp;testCaseProvider, InferenceTestOptions &amp;outParams)</div><div class="ttdoc">Parse the command line of an ArmNN (or referencetests) inference test program. </div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00028">InferenceTest.cpp:28</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67b"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">armnn::test::TestCaseResult</a></div><div class="ttdeci">TestCaseResult</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00073">InferenceTest.hpp:73</a></div></div>
<div class="ttc" id="_cxxopts_utils_8hpp_xhtml_a54dc0f90125fe080b8d0c503e542ca77"><div class="ttname"><a href="_cxxopts_utils_8hpp.xhtml#a54dc0f90125fe080b8d0c503e542ca77">CheckRequiredOptions</a></div><div class="ttdeci">bool CheckRequiredOptions(const cxxopts::ParseResult &amp;result, const std::vector&lt; std::string &gt; &amp;required)</div><div class="ttdoc">Ensure all mandatory command-line parameters have been passed to cxxopts. </div><div class="ttdef"><b>Definition:</b> <a href="_cxxopts_utils_8hpp_source.xhtml#l00016">CxxoptsUtils.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_test_framework_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_test_framework_exception.xhtml">armnn::test::TestFrameworkException</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00053">InferenceTest.hpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_a5955b5dadde32f0c5687ab38f77c5be5"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">armnn::test::InferenceTestOptions::m_InferenceTimesFile</a></div><div class="ttdeci">std::string m_InferenceTimesFile</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00062">InferenceTest.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a88bbd5a851f1148bf5a90db7779be261"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a88bbd5a851f1148bf5a90db7779be261">armnn::test::IInferenceTestCaseProvider::OnInferenceTestFinished</a></div><div class="ttdeci">virtual bool OnInferenceTestFinished()</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00108">InferenceTest.hpp:108</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">armnn::test::IInferenceTestCaseProvider</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00093">InferenceTest.hpp:93</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml">armnn::test::InferenceTestOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00059">InferenceTest.hpp:59</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="_filesystem_8hpp_xhtml"><div class="ttname"><a href="_filesystem_8hpp.xhtml">Filesystem.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::BoostLogSeverityMapping::error</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00149">BackendId.hpp:149</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a87d20f49fba1d117545ec865cc43b364"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a87d20f49fba1d117545ec865cc43b364">armnn::test::IInferenceTestCaseProvider::AddCommandLineOptions</a></div><div class="ttdeci">virtual void AddCommandLineOptions(cxxopts::Options &amp;options, std::vector&lt; std::string &gt; &amp;required)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00098">InferenceTest.hpp:98</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a0b5cdedc222fce2b18000949f0699880"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a0b5cdedc222fce2b18000949f0699880">armnn::test::IInferenceTestCaseProvider::ProcessCommandLineOptions</a></div><div class="ttdeci">virtual bool ProcessCommandLineOptions(const InferenceTestOptions &amp;commonOptions)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00102">InferenceTest.hpp:102</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a04734602cd9aa5125174458128b3b418"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a04734602cd9aa5125174458128b3b418">armnn::test::IInferenceTestCaseProvider::GetTestCase</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IInferenceTestCase &gt; GetTestCase(unsigned int testCaseId)=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::BoostLogSeverityMapping::warning</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">armnn::test::InferenceTestOptions::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00063">InferenceTest.hpp:63</a></div></div>
<div class="ttc" id="_inference_test_8hpp_xhtml"><div class="ttname"><a href="_inference_test_8hpp.xhtml">InferenceTest.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_ab5a7cac4237e83d4f0d67d01dfb8ba9f"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#ab5a7cac4237e83d4f0d67d01dfb8ba9f">armnn::test::InferenceTest</a></div><div class="ttdeci">bool InferenceTest(const InferenceTestOptions &amp;params, const std::vector&lt; unsigned int &gt; &amp;defaultTestCaseIds, IInferenceTestCaseProvider &amp;testCaseProvider)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00112">InferenceTest.cpp:112</a></div></div>
<div class="ttc" id="namespacestd_1_1chrono_xhtml"><div class="ttname"><a href="namespacestd_1_1chrono.xhtml">chrono</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml"><div class="ttname"><a href="_assert_8hpp.xhtml">Assert.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml">armnn::test</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00024">InferenceTest.cpp:24</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_ac9c49972e7f8db643b3c72aa782278df"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">armnn::test::InferenceTestOptions::m_IterationCount</a></div><div class="ttdeci">unsigned int m_IterationCount</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00061">InferenceTest.hpp:61</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a8a678fb3a8864e31aeb77f857ae6fc43"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">armnn::test::ValidateDirectory</a></div><div class="ttdeci">bool ValidateDirectory(std::string &amp;dir)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00084">InferenceTest.cpp:84</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="_inference_test_8cpp.xhtml">InferenceTest.cpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:24 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
