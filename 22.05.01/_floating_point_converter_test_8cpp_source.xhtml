<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/FloatingPointConverterTest.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_floating_point_converter_test_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">FloatingPointConverterTest.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_floating_point_converter_test_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_floating_point_converter_8hpp.xhtml">armnnUtils/FloatingPointConverter.hpp</a>&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_b_float16_8hpp.xhtml">BFloat16.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_half_8hpp.xhtml">Half.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;doctest/doctest.h&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="_floating_point_converter_test_8cpp.xhtml#a399be8a07c33a3278a2e2560746bb1f9">   15</a></span>&#160;<a class="code" href="_floating_point_converter_test_8cpp.xhtml#a399be8a07c33a3278a2e2560746bb1f9">TEST_SUITE</a>(<span class="stringliteral">&quot;TestFPConversion&quot;</span>)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;TEST_CASE(<span class="stringliteral">&quot;TestConvertFp32ToFp16&quot;</span>)</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keyword">using namespace </span>half_float::literal;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordtype">float</span> floatArray[] = { 1.0f, 2.0f, 0.5f, 3.1f, 2.4f,</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;                           5.666f, 6.444f, 7.1f, 432.121f, 12.22f };</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordtype">size_t</span> numFloats = <span class="keyword">sizeof</span>(floatArray) / <span class="keyword">sizeof</span>(floatArray[0]);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    std::vector&lt;armnn::Half&gt; convertedBuffer(numFloats, 0.0_h);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="classarmnn_utils_1_1_floating_point_converter.xhtml#af0fdbfb53596052d571cb73899f9da2b">armnnUtils::FloatingPointConverter::ConvertFloat32To16</a>(floatArray, numFloats, convertedBuffer.data());</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numFloats; i++)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a> expected(floatArray[i]);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a> actual = convertedBuffer[i];</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        CHECK_EQ(expected, actual);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordtype">float</span> convertedHalf = actual;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        CHECK_EQ(floatArray[i], doctest::Approx(convertedHalf).epsilon(0.07));</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;TEST_CASE(<span class="stringliteral">&quot;TestConvertFp16ToFp32&quot;</span>)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">using namespace </span>half_float::literal;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a> halfArray[] = { 1.0_h, 2.0_h, 0.5_h, 3.1_h, 2.4_h,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                5.666_h, 6.444_h, 7.1_h, 432.121_h, 12.22_h };</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">size_t</span> numFloats = <span class="keyword">sizeof</span>(halfArray) / <span class="keyword">sizeof</span>(halfArray[0]);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    std::vector&lt;float&gt; convertedBuffer(numFloats, 0.0f);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="classarmnn_utils_1_1_floating_point_converter.xhtml#ac1f1568f02163a68906a0030e0ba9871">armnnUtils::FloatingPointConverter::ConvertFloat16To32</a>(halfArray, numFloats, convertedBuffer.data());</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numFloats; i++)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordtype">float</span> expected(halfArray[i]);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordtype">float</span> actual = convertedBuffer[i];</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        CHECK_EQ(expected, actual);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;TEST_CASE(<span class="stringliteral">&quot;TestConvertFloat32ToBFloat16&quot;</span>)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">float</span> floatArray[] = { 1.704735E38f,   <span class="comment">// 0x7F004000 round down</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                           0.0f,           <span class="comment">// 0x00000000 round down</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                           2.2959E-41f,    <span class="comment">// 0x00004000 round down</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                           1.7180272E38f,  <span class="comment">// 0x7F014000 round down</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                           9.18355E-41f,   <span class="comment">// 0x00010000 round down</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                           1.14794E-40f,   <span class="comment">// 0x00014000 round down</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                           4.5918E-41f,    <span class="comment">// 0x00008000 round down</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                           -1.708058E38f,  <span class="comment">// 0xFF008000 round down</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                           -4.3033756E37f, <span class="comment">// 0xFE018000 round up</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                           1.60712E-40f,   <span class="comment">// 0x0001C000 round up</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                           -2.0234377f,    <span class="comment">// 0xC0018001 round up</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                           -1.1800863E-38f,<span class="comment">// 0x80808001 round up</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                           4.843037E-35f,  <span class="comment">// 0x0680C000 round up</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                           3.9999998f,     <span class="comment">// 0x407FFFFF round up</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                           std::numeric_limits&lt;float&gt;::max(),    <span class="comment">// 0x7F7FFFFF max positive value</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                           std::numeric_limits&lt;float&gt;::lowest(), <span class="comment">// 0xFF7FFFFF max negative value</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                           1.1754942E-38f, <span class="comment">// 0x007FFFFF min positive value</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                           -1.1754942E-38f <span class="comment">// 0x807FFFFF min negative value</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                          };</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    uint16_t expectedResult[] = { 0x7F00,</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                                  0x0000,</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                  0x0000,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                  0x7F01,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                  0x0001,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                  0x0001,</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                                  0x0000,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                  0xFF00,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                  0xFE02,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                  0x0002,</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                  0xC002,</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                  0x8081,</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                  0x0681,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                  0x4080,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                  0x7F80,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                  0xFF80,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                  0x0080,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                  0x8080</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                 };</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">size_t</span> numFloats = <span class="keyword">sizeof</span>(floatArray) / <span class="keyword">sizeof</span>(floatArray[0]);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    std::vector&lt;armnn::BFloat16&gt; convertedBuffer(numFloats);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classarmnn_utils_1_1_floating_point_converter.xhtml#ac7add3b3d40fbaab5e514c756a953d78">armnnUtils::FloatingPointConverter::ConvertFloat32ToBFloat16</a>(floatArray, numFloats, convertedBuffer.data());</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numFloats; i++)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> actual = convertedBuffer[i];</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        CHECK_EQ(expectedResult[i], actual.<a class="code" href="classarmnn_1_1_b_float16.xhtml#afbd0d2d6540777e3898d125b79f6a5bc">Val</a>());</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;TEST_CASE(<span class="stringliteral">&quot;TestConvertBFloat16ToFloat32&quot;</span>)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;{</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    uint16_t bf16Array[] = { 16256, 16320, 38699, 16384, 49156, 32639 };</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">size_t</span> numFloats = <span class="keyword">sizeof</span>(bf16Array) / <span class="keyword">sizeof</span>(bf16Array[0]);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordtype">float</span> expectedResult[] = { 1.0f, 1.5f, -5.525308E-25f, 2.0f, -2.0625f, 3.3895314E38f };</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    std::vector&lt;float&gt; convertedBuffer(numFloats, 0.0f);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="classarmnn_utils_1_1_floating_point_converter.xhtml#af9e9df90cb6319b0406acf9a3bc27667">armnnUtils::FloatingPointConverter::ConvertBFloat16ToFloat32</a>(bf16Array, numFloats, convertedBuffer.data());</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numFloats; i++)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordtype">float</span> actual = convertedBuffer[i];</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        CHECK_EQ(expectedResult[i], actual);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="ttc" id="_floating_point_converter_8hpp_xhtml"><div class="ttname"><a href="_floating_point_converter_8hpp.xhtml">FloatingPointConverter.hpp</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_floating_point_converter_xhtml_af9e9df90cb6319b0406acf9a3bc27667"><div class="ttname"><a href="classarmnn_utils_1_1_floating_point_converter.xhtml#af9e9df90cb6319b0406acf9a3bc27667">armnnUtils::FloatingPointConverter::ConvertBFloat16ToFloat32</a></div><div class="ttdeci">static void ConvertBFloat16ToFloat32(const void *srcBFloat16Buffer, size_t numElements, float *dstFloat32Buffer)</div><div class="ttdef"><b>Definition:</b> <a href="_floating_point_converter_8cpp_source.xhtml#l00061">FloatingPointConverter.cpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_b_float16_xhtml"><div class="ttname"><a href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a></div><div class="ttdef"><b>Definition:</b> <a href="_b_float16_8hpp_source.xhtml#l00015">BFloat16.hpp:15</a></div></div>
<div class="ttc" id="_floating_point_converter_test_8cpp_xhtml_a399be8a07c33a3278a2e2560746bb1f9"><div class="ttname"><a href="_floating_point_converter_test_8cpp.xhtml#a399be8a07c33a3278a2e2560746bb1f9">TEST_SUITE</a></div><div class="ttdeci">TEST_SUITE(&quot;TestFPConversion&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="_floating_point_converter_test_8cpp_source.xhtml#l00015">FloatingPointConverterTest.cpp:15</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_floating_point_converter_xhtml_af0fdbfb53596052d571cb73899f9da2b"><div class="ttname"><a href="classarmnn_utils_1_1_floating_point_converter.xhtml#af0fdbfb53596052d571cb73899f9da2b">armnnUtils::FloatingPointConverter::ConvertFloat32To16</a></div><div class="ttdeci">static void ConvertFloat32To16(const float *srcFloat32Buffer, size_t numElements, void *dstFloat16Buffer)</div><div class="ttdoc">Converts a buffer of FP32 values to FP16, and stores in the given dstFloat16Buffer. </div><div class="ttdef"><b>Definition:</b> <a href="_floating_point_converter_8cpp_source.xhtml#l00016">FloatingPointConverter.cpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_b_float16_xhtml_afbd0d2d6540777e3898d125b79f6a5bc"><div class="ttname"><a href="classarmnn_1_1_b_float16.xhtml#afbd0d2d6540777e3898d125b79f6a5bc">armnn::BFloat16::Val</a></div><div class="ttdeci">uint16_t Val() const</div><div class="ttdef"><b>Definition:</b> <a href="_b_float16_8hpp_source.xhtml#l00095">BFloat16.hpp:95</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_floating_point_converter_xhtml_ac1f1568f02163a68906a0030e0ba9871"><div class="ttname"><a href="classarmnn_utils_1_1_floating_point_converter.xhtml#ac1f1568f02163a68906a0030e0ba9871">armnnUtils::FloatingPointConverter::ConvertFloat16To32</a></div><div class="ttdeci">static void ConvertFloat16To32(const void *srcFloat16Buffer, size_t numElements, float *dstFloat32Buffer)</div><div class="ttdef"><b>Definition:</b> <a href="_floating_point_converter_8cpp_source.xhtml#l00031">FloatingPointConverter.cpp:31</a></div></div>
<div class="ttc" id="_half_8hpp_xhtml"><div class="ttname"><a href="_half_8hpp.xhtml">Half.hpp</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_floating_point_converter_xhtml_ac7add3b3d40fbaab5e514c756a953d78"><div class="ttname"><a href="classarmnn_utils_1_1_floating_point_converter.xhtml#ac7add3b3d40fbaab5e514c756a953d78">armnnUtils::FloatingPointConverter::ConvertFloat32ToBFloat16</a></div><div class="ttdeci">static void ConvertFloat32ToBFloat16(const float *srcFloat32Buffer, size_t numElements, void *dstBFloat16Buffer)</div><div class="ttdef"><b>Definition:</b> <a href="_floating_point_converter_8cpp_source.xhtml#l00046">FloatingPointConverter.cpp:46</a></div></div>
<div class="ttc" id="_b_float16_8hpp_xhtml"><div class="ttname"><a href="_b_float16_8hpp.xhtml">BFloat16.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0f38fa92b2468d5378258a2b074c1a31"><div class="ttname"><a href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a></div><div class="ttdeci">half_float::half Half</div><div class="ttdef"><b>Definition:</b> <a href="_half_8hpp_source.xhtml#l00018">Half.hpp:18</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="_floating_point_converter_test_8cpp.xhtml">FloatingPointConverterTest.cpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:19:42 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
