<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/InferenceTest.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_inference_test_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">InferenceTest.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_inference_test_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_inference_model_8hpp.xhtml">InferenceModel.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_arm_n_n_8hpp.xhtml">armnn/ArmNN.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_logging_8hpp.xhtml">armnn/Logging.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_utils_8hpp.xhtml">armnn/TypesUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_t_container_8hpp.xhtml">armnnUtils/TContainer.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;cxxopts/cxxopts.hpp&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;fmt/format.h&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a8022a6869bffa6233fec784a471c1680">   23</a></span>&#160;<span class="keyword">inline</span> std::istream&amp; <a class="code" href="namespacearmnn.xhtml#a8022a6869bffa6233fec784a471c1680">operator&gt;&gt;</a>(std::istream&amp; in, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">armnn::Compute</a>&amp; compute)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    std::string token;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    in &gt;&gt; token;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    compute = <a class="code" href="namespacearmnn.xhtml#a65645fa03bf8cddfb9d8a9f83beeb6e8">armnn::ParseComputeDevice</a>(token.c_str());</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">if</span> (compute == <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a>)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        in.setstate(std::ios_base::failbit);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keywordflow">throw</span> cxxopts::OptionException(fmt::format(<span class="stringliteral">&quot;Unrecognised compute device: {}&quot;</span>, token));</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">return</span> in;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a3c51506c471a4513dcc3364514d75f39">   36</a></span>&#160;<span class="keyword">inline</span> std::istream&amp; <a class="code" href="namespacearmnn.xhtml#a8022a6869bffa6233fec784a471c1680">operator&gt;&gt;</a>(std::istream&amp; in, <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a>&amp; backend)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    std::string token;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    in &gt;&gt; token;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">armnn::Compute</a> compute = <a class="code" href="namespacearmnn.xhtml#a65645fa03bf8cddfb9d8a9f83beeb6e8">armnn::ParseComputeDevice</a>(token.c_str());</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">if</span> (compute == <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a>)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        in.setstate(std::ios_base::failbit);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">throw</span> cxxopts::OptionException(fmt::format(<span class="stringliteral">&quot;Unrecognised compute device: {}&quot;</span>, token));</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    backend = compute;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> in;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_test_framework_exception.xhtml">   53</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1test_1_1_test_framework_exception.xhtml">TestFrameworkException</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_exception.xhtml">Exception</a></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">using</span> <a class="code" href="classarmnn_1_1_exception.xhtml#ad56b7b14f59554e891ad88b26cbf8ac3">Exception::Exception</a>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;};</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">   59</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">   61</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">m_IterationCount</a>;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">   62</a></span>&#160;    std::string <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">m_InferenceTimesFile</a>;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">   63</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">   64</a></span>&#160;    std::string <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#aca7c067e094606cb4e9eac6919f452c6">   66</a></span>&#160;    <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#aca7c067e094606cb4e9eac6919f452c6">InferenceTestOptions</a>()</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        : m_IterationCount(0)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        , m_EnableProfiling(0)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        , m_DynamicBackendsPath()</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;};</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">   73</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">TestCaseResult</a></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">    /// The test completed without any errors.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67baa60852f204ed8028c1c58808b746d115">Ok</a>,<span class="comment"></span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">    /// The test failed (e.g. the prediction didn&#39;t match the validation file).</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">    /// This will eventually fail the whole program but the remaining test cases will still be run.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca">Failed</a>,<span class="comment"></span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">    /// The test failed with a fatal error. The remaining tests will not be run.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67ba727b63583e01fa2b3952dab580c84dc2">Abort</a></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;};</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml">   84</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml">IInferenceTestCase</a></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml#a99e369e14a0ce3322d3fd5520b819ab3">   87</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml#a99e369e14a0ce3322d3fd5520b819ab3">~IInferenceTestCase</a>() {}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> Run() = 0;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">TestCaseResult</a> ProcessResult(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a>&amp; options) = 0;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;};</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">   93</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a63e4bc6c42594357e52b06e386b48d30">   96</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a63e4bc6c42594357e52b06e386b48d30">~IInferenceTestCaseProvider</a>() {}</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a87d20f49fba1d117545ec865cc43b364">   98</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a87d20f49fba1d117545ec865cc43b364">AddCommandLineOptions</a>(cxxopts::Options&amp; options, std::vector&lt;std::string&gt;&amp; required)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(options, required);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    };</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a0b5cdedc222fce2b18000949f0699880">  102</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a0b5cdedc222fce2b18000949f0699880">ProcessCommandLineOptions</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a> &amp;commonOptions)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(commonOptions);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    };</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IInferenceTestCase&gt; GetTestCase(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> testCaseId) = 0;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a88bbd5a851f1148bf5a90db7779be261">  108</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a88bbd5a851f1148bf5a90db7779be261">OnInferenceTestFinished</a>() { <span class="keywordflow">return</span> <span class="keyword">true</span>; };</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TModel&gt;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">  112</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">InferenceModelTestCase</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml">IInferenceTestCase</a></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a998ab91a5a2470d078896ac32229eff8">  116</a></span>&#160;    <a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a998ab91a5a2470d078896ac32229eff8">InferenceModelTestCase</a>(TModel&amp; model,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                           <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> testCaseId,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                           <span class="keyword">const</span> std::vector&lt;armnnUtils::TContainer&gt;&amp; inputs,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                           <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; outputSizes)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        : m_Model(model)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        , m_TestCaseId(testCaseId)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        , m_Inputs(<a class="code" href="namespacestd.xhtml">std</a>::move(inputs))</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="comment">// Initialize output vector</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> numOutputs = outputSizes.size();</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        m_Outputs.reserve(numOutputs);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numOutputs; i++)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            m_Outputs.push_back(std::vector&lt;typename TModel::DataType&gt;(outputSizes[i]));</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#aa257380f53ef27922dda47c7e41bba88">  134</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#aa257380f53ef27922dda47c7e41bba88">Run</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        m_Model.Run(m_Inputs, m_Outputs);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a4ab19ef735b92c4d4f688f0659e5565e">  140</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a4ab19ef735b92c4d4f688f0659e5565e">GetTestCaseId</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_TestCaseId; }</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#ab0e1b0a762f51bb13f98060927214629">  141</a></span>&#160;    <span class="keyword">const</span> std::vector&lt;armnnUtils::TContainer&gt;&amp; <a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#ab0e1b0a762f51bb13f98060927214629">GetOutputs</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Outputs; }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    TModel&amp;                         m_Model;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                    m_TestCaseId;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    std::vector&lt;armnnUtils::TContainer&gt;  m_Inputs;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::vector&lt;armnnUtils::TContainer&gt;  m_Outputs;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;};</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TTestCaseDatabase, <span class="keyword">typename</span> TModel&gt;</div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_classifier_test_case.xhtml">  151</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1test_1_1_classifier_test_case.xhtml">ClassifierTestCase</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">InferenceModelTestCase</a>&lt;TModel&gt;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;{</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="classarmnn_1_1test_1_1_classifier_test_case.xhtml">ClassifierTestCase</a>(<span class="keywordtype">int</span>&amp; numInferencesRef,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordtype">int</span>&amp; numCorrectInferencesRef,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; validationPredictions,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        std::vector&lt;unsigned int&gt;* validationPredictionsOut,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        TModel&amp; model,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> testCaseId,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> label,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        std::vector&lt;typename TModel::DataType&gt; modelInput);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">TestCaseResult</a> ProcessResult(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a>&amp; params) <span class="keyword">override</span>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_Label;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="namespace_inference_model_internal.xhtml#a6e713a319588c57fc854bc478f5ee13a">InferenceModelInternal::QuantizationParams</a> m_QuantizationParams;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">    /// These fields reference the corresponding member in the ClassifierTestCaseProvider.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">    /// @{</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span>    <span class="keywordtype">int</span>&amp; m_NumInferencesRef;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordtype">int</span>&amp; m_NumCorrectInferencesRef;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; m_ValidationPredictions;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    std::vector&lt;unsigned int&gt;* m_ValidationPredictionsOut;<span class="comment"></span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">    /// @}</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TDatabase, <span class="keyword">typename</span> InferenceModel&gt;</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classarmnn_1_1test_1_1_classifier_test_case_provider.xhtml">  179</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1test_1_1_classifier_test_case_provider.xhtml">ClassifierTestCaseProvider</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;{</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TConstructDatabaseCallable, <span class="keyword">typename</span> TConstructModelCallable&gt;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="classarmnn_1_1test_1_1_classifier_test_case_provider.xhtml">ClassifierTestCaseProvider</a>(TConstructDatabaseCallable constructDatabase, TConstructModelCallable constructModel);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AddCommandLineOptions(cxxopts::Options&amp; options, std::vector&lt;std::string&gt;&amp; required) <span class="keyword">override</span>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ProcessCommandLineOptions(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a> &amp;commonOptions) <span class="keyword">override</span>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;IInferenceTestCase&gt; GetTestCase(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> testCaseId) <span class="keyword">override</span>;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnInferenceTestFinished() <span class="keyword">override</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">void</span> ReadPredictions();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">typename</span> <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml">InferenceModel::CommandLineOptions</a> m_ModelCommandLineOptions;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    std::function&lt;std::unique_ptr&lt;InferenceModel&gt;(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a>&amp; commonOptions,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                                  <span class="keyword">typename</span> <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml">InferenceModel::CommandLineOptions</a>)&gt; m_ConstructModel;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::unique_ptr&lt;InferenceModel&gt; m_Model;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    std::string m_DataDir;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    std::function&lt;TDatabase(const char*, const InferenceModel&amp;)&gt; m_ConstructDatabase;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    std::unique_ptr&lt;TDatabase&gt; m_Database;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordtype">int</span> m_NumInferences; <span class="comment">// Referenced by test cases.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordtype">int</span> m_NumCorrectInferences; <span class="comment">// Referenced by test cases.</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::string m_ValidationFileIn;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    std::vector&lt;unsigned int&gt; m_ValidationPredictions; <span class="comment">// Referenced by test cases.</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    std::string m_ValidationFileOut;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    std::vector&lt;unsigned int&gt; m_ValidationPredictionsOut; <span class="comment">// Referenced by test cases.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;};</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn_1_1test.xhtml#ae2e622d6018bd48beabd765d4f6e5714">ParseCommandLine</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv, <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a>&amp; testCaseProvider,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a>&amp; outParams);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">ValidateDirectory</a>(std::string&amp; dir);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn_1_1test.xhtml#ab5a7cac4237e83d4f0d67d01dfb8ba9f">InferenceTest</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a>&amp; params,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; defaultTestCaseIds,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a>&amp; testCaseProvider);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> TConstructTestCaseProv<span class="keywordtype">id</span>er&gt;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a7ad751ee33bdcba0656fdb6e98eb17f1">InferenceTestMain</a>(<span class="keywordtype">int</span> argc,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordtype">char</span>* argv[],</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; defaultTestCaseIds,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    TConstructTestCaseProvider constructTestCaseProvider);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> TDatabase,</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">typename</span> TParser,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">typename</span> TConstructDatabaseCallable&gt;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a47dfae02e22fcca1b6b784873b0328d9">ClassifierInferenceTestMain</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[], <span class="keyword">const</span> <span class="keywordtype">char</span>* modelFilename, <span class="keywordtype">bool</span> isModelBinary,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* inputBindingName, <span class="keyword">const</span> <span class="keywordtype">char</span>* outputBindingName,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; defaultTestCaseIds,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    TConstructDatabaseCallable constructDatabase,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>* inputTensorShape = <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_inference_test_8inl.xhtml">InferenceTest.inl</a>&quot;</span></div><div class="ttc" id="namespacearmnn_1_1test_xhtml_ae2e622d6018bd48beabd765d4f6e5714"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#ae2e622d6018bd48beabd765d4f6e5714">armnn::test::ParseCommandLine</a></div><div class="ttdeci">bool ParseCommandLine(int argc, char **argv, IInferenceTestCaseProvider &amp;testCaseProvider, InferenceTestOptions &amp;outParams)</div><div class="ttdoc">Parse the command line of an ArmNN (or referencetests) inference test program. </div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00028">InferenceTest.cpp:28</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a63e4bc6c42594357e52b06e386b48d30"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a63e4bc6c42594357e52b06e386b48d30">armnn::test::IInferenceTestCaseProvider::~IInferenceTestCaseProvider</a></div><div class="ttdeci">virtual ~IInferenceTestCaseProvider()</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00096">InferenceTest.hpp:96</a></div></div>
<div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8022a6869bffa6233fec784a471c1680"><div class="ttname"><a href="namespacearmnn.xhtml#a8022a6869bffa6233fec784a471c1680">armnn::operator&gt;&gt;</a></div><div class="ttdeci">std::istream &amp; operator&gt;&gt;(std::istream &amp;in, armnn::Compute &amp;compute)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00023">InferenceTest.hpp:23</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67b"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">armnn::test::TestCaseResult</a></div><div class="ttdeci">TestCaseResult</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00073">InferenceTest.hpp:73</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_test_framework_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_test_framework_exception.xhtml">armnn::test::TestFrameworkException</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00053">InferenceTest.hpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_a5955b5dadde32f0c5687ab38f77c5be5"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">armnn::test::InferenceTestOptions::m_InferenceTimesFile</a></div><div class="ttdeci">std::string m_InferenceTimesFile</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00062">InferenceTest.hpp:62</a></div></div>
<div class="ttc" id="_inference_test_8inl_xhtml"><div class="ttname"><a href="_inference_test_8inl.xhtml">InferenceTest.inl</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_inference_model_test_case_xhtml_aa257380f53ef27922dda47c7e41bba88"><div class="ttname"><a href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#aa257380f53ef27922dda47c7e41bba88">armnn::test::InferenceModelTestCase::Run</a></div><div class="ttdeci">virtual void Run() override</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00134">InferenceTest.hpp:134</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a88bbd5a851f1148bf5a90db7779be261"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a88bbd5a851f1148bf5a90db7779be261">armnn::test::IInferenceTestCaseProvider::OnInferenceTestFinished</a></div><div class="ttdeci">virtual bool OnInferenceTestFinished()</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00108">InferenceTest.hpp:108</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">armnn::test::IInferenceTestCaseProvider</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00093">InferenceTest.hpp:93</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_inference_model_test_case_xhtml_a998ab91a5a2470d078896ac32229eff8"><div class="ttname"><a href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a998ab91a5a2470d078896ac32229eff8">armnn::test::InferenceModelTestCase::InferenceModelTestCase</a></div><div class="ttdeci">InferenceModelTestCase(TModel &amp;model, unsigned int testCaseId, const std::vector&lt; armnnUtils::TContainer &gt; &amp;inputs, const std::vector&lt; unsigned int &gt; &amp;outputSizes)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00116">InferenceTest.hpp:116</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_classifier_test_case_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_classifier_test_case.xhtml">armnn::test::ClassifierTestCase</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00151">InferenceTest.hpp:151</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml">armnn::test::InferenceTestOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00059">InferenceTest.hpp:59</a></div></div>
<div class="ttc" id="struct_inference_model_1_1_command_line_options_xhtml"><div class="ttname"><a href="struct_inference_model_1_1_command_line_options.xhtml">InferenceModel::CommandLineOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00385">InferenceModel.hpp:385</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_ad56b7b14f59554e891ad88b26cbf8ac3"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#ad56b7b14f59554e891ad88b26cbf8ac3">armnn::Exception::Exception</a></div><div class="ttdeci">Exception(const std::string &amp;message)</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00012">Exceptions.cpp:12</a></div></div>
<div class="ttc" id="_arm_n_n_8hpp_xhtml"><div class="ttname"><a href="_arm_n_n_8hpp.xhtml">ArmNN.hpp</a></div></div>
<div class="ttc" id="_inference_model_8hpp_xhtml"><div class="ttname"><a href="_inference_model_8hpp.xhtml">InferenceModel.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_aca7c067e094606cb4e9eac6919f452c6"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#aca7c067e094606cb4e9eac6919f452c6">armnn::test::InferenceTestOptions::InferenceTestOptions</a></div><div class="ttdeci">InferenceTestOptions()</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00066">InferenceTest.hpp:66</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_inference_model_test_case_xhtml_ab0e1b0a762f51bb13f98060927214629"><div class="ttname"><a href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#ab0e1b0a762f51bb13f98060927214629">armnn::test::InferenceModelTestCase::GetOutputs</a></div><div class="ttdeci">const std::vector&lt; armnnUtils::TContainer &gt; &amp; GetOutputs() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00141">InferenceTest.hpp:141</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00149">BackendId.hpp:149</a></div></div>
<div class="ttc" id="_types_utils_8hpp_xhtml"><div class="ttname"><a href="_types_utils_8hpp.xhtml">TypesUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456ae"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">armnn::Compute</a></div><div class="ttdeci">Compute</div><div class="ttdoc">The Compute enum is now deprecated and it is now being replaced by BackendId. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00021">BackendId.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a87d20f49fba1d117545ec865cc43b364"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a87d20f49fba1d117545ec865cc43b364">armnn::test::IInferenceTestCaseProvider::AddCommandLineOptions</a></div><div class="ttdeci">virtual void AddCommandLineOptions(cxxopts::Options &amp;options, std::vector&lt; std::string &gt; &amp;required)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00098">InferenceTest.hpp:98</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a0b5cdedc222fce2b18000949f0699880"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a0b5cdedc222fce2b18000949f0699880">armnn::test::IInferenceTestCaseProvider::ProcessCommandLineOptions</a></div><div class="ttdeci">virtual bool ProcessCommandLineOptions(const InferenceTestOptions &amp;commonOptions)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00102">InferenceTest.hpp:102</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a65645fa03bf8cddfb9d8a9f83beeb6e8"><div class="ttname"><a href="namespacearmnn.xhtml#a65645fa03bf8cddfb9d8a9f83beeb6e8">armnn::ParseComputeDevice</a></div><div class="ttdeci">constexpr armnn::Compute ParseComputeDevice(const char *str)</div><div class="ttdoc">Deprecated function that will be removed together with the Compute enum. </div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00182">TypesUtils.hpp:182</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">armnn::test::InferenceTestOptions::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00063">InferenceTest.hpp:63</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_inference_model_test_case_xhtml_a4ab19ef735b92c4d4f688f0659e5565e"><div class="ttname"><a href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a4ab19ef735b92c4d4f688f0659e5565e">armnn::test::InferenceModelTestCase::GetTestCaseId</a></div><div class="ttdeci">unsigned int GetTestCaseId() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00140">InferenceTest.hpp:140</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a47dfae02e22fcca1b6b784873b0328d9"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a47dfae02e22fcca1b6b784873b0328d9">armnn::test::ClassifierInferenceTestMain</a></div><div class="ttdeci">int ClassifierInferenceTestMain(int argc, char *argv[], const char *modelFilename, bool isModelBinary, const char *inputBindingName, const char *outputBindingName, const std::vector&lt; unsigned int &gt; &amp;defaultTestCaseIds, TConstructDatabaseCallable constructDatabase, const armnn::TensorShape *inputTensorShape=nullptr)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8inl_source.xhtml#l00362">InferenceTest.inl:362</a></div></div>
<div class="ttc" id="namespace_inference_model_internal_xhtml_a6e713a319588c57fc854bc478f5ee13a"><div class="ttname"><a href="namespace_inference_model_internal.xhtml#a6e713a319588c57fc854bc478f5ee13a">InferenceModelInternal::QuantizationParams</a></div><div class="ttdeci">std::pair&lt; float, int32_t &gt; QuantizationParams</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00087">InferenceModel.hpp:87</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_xhtml_a99e369e14a0ce3322d3fd5520b819ab3"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml#a99e369e14a0ce3322d3fd5520b819ab3">armnn::test::IInferenceTestCase::~IInferenceTestCase</a></div><div class="ttdeci">virtual ~IInferenceTestCase()</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00087">InferenceTest.hpp:87</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca">armnn::test::TestCaseResult::Failed</a></div><div class="ttdoc">The test failed (e.g. </div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_ab5a7cac4237e83d4f0d67d01dfb8ba9f"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#ab5a7cac4237e83d4f0d67d01dfb8ba9f">armnn::test::InferenceTest</a></div><div class="ttdeci">bool InferenceTest(const InferenceTestOptions &amp;params, const std::vector&lt; unsigned int &gt; &amp;defaultTestCaseIds, IInferenceTestCaseProvider &amp;testCaseProvider)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00112">InferenceTest.cpp:112</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml"><div class="ttname"><a href="_logging_8hpp.xhtml">Logging.hpp</a></div></div>
<div class="ttc" id="_t_container_8hpp_xhtml"><div class="ttname"><a href="_t_container_8hpp.xhtml">TContainer.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67ba727b63583e01fa2b3952dab580c84dc2"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67ba727b63583e01fa2b3952dab580c84dc2">armnn::test::TestCaseResult::Abort</a></div><div class="ttdoc">The test failed with a fatal error. The remaining tests will not be run. </div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_inference_model_test_case_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">armnn::test::InferenceModelTestCase</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00112">InferenceTest.hpp:112</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_ac9c49972e7f8db643b3c72aa782278df"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">armnn::test::InferenceTestOptions::m_IterationCount</a></div><div class="ttdeci">unsigned int m_IterationCount</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00061">InferenceTest.hpp:61</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a8a678fb3a8864e31aeb77f857ae6fc43"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">armnn::test::ValidateDirectory</a></div><div class="ttdeci">bool ValidateDirectory(std::string &amp;dir)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00084">InferenceTest.cpp:84</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_classifier_test_case_provider_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_classifier_test_case_provider.xhtml">armnn::test::ClassifierTestCaseProvider</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00179">InferenceTest.hpp:179</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml">armnn::test::IInferenceTestCase</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00084">InferenceTest.hpp:84</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a7ad751ee33bdcba0656fdb6e98eb17f1"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a7ad751ee33bdcba0656fdb6e98eb17f1">armnn::test::InferenceTestMain</a></div><div class="ttdeci">int InferenceTestMain(int argc, char *argv[], const std::vector&lt; unsigned int &gt; &amp;defaultTestCaseIds, TConstructTestCaseProvider constructTestCaseProvider)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8inl_source.xhtml#l00311">InferenceTest.inl:311</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">armnn::test::InferenceTestOptions::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00064">InferenceTest.hpp:64</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67baa60852f204ed8028c1c58808b746d115"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67baa60852f204ed8028c1c58808b746d115">armnn::test::TestCaseResult::Ok</a></div><div class="ttdoc">The test completed without any errors. </div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="_inference_test_8hpp.xhtml">InferenceTest.hpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:24 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
