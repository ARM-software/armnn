<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/ExecuteNetwork/ExecuteNetworkProgramOptions.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_execute_network_program_options_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ExecuteNetworkProgramOptions.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_execute_network_program_options_8hpp_source.xhtml">ExecuteNetworkProgramOptions.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_network_execution_utils_8hpp_source.xhtml">NetworkExecutionUtils/NetworkExecutionUtils.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_inference_test_8hpp_source.xhtml">InferenceTest.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_backend_registry_8hpp_source.xhtml">armnn/BackendRegistry.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_exceptions_8hpp_source.xhtml">armnn/Exceptions.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_assert_8hpp_source.xhtml">armnn/utility/Assert.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_string_utils_8hpp_source.xhtml">armnn/utility/StringUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_logging_8hpp_source.xhtml">armnn/Logging.hpp</a>&gt;</code><br />
<code>#include &lt;fmt/format.h&gt;</code><br />
</div>
<p><a href="_execute_network_program_options_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a92f95e137ba2edcad2985993626afe4d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_program_options_8cpp.xhtml#a92f95e137ba2edcad2985993626afe4d">CheckOption</a> (const cxxopts::ParseResult &amp;result, const char *option)</td></tr>
<tr class="separator:a92f95e137ba2edcad2985993626afe4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae003ac0bcd37e3d9d7b4998e4faff5d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_program_options_8cpp.xhtml#aae003ac0bcd37e3d9d7b4998e4faff5d">CheckOptionDependency</a> (const cxxopts::ParseResult &amp;result, const char *option, const char *required)</td></tr>
<tr class="separator:aae003ac0bcd37e3d9d7b4998e4faff5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06da09814964b4b241ca4420e98de8f3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_program_options_8cpp.xhtml#a06da09814964b4b241ca4420e98de8f3">CheckOptionDependencies</a> (const cxxopts::ParseResult &amp;result)</td></tr>
<tr class="separator:a06da09814964b4b241ca4420e98de8f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a439bab01676c4e394cd1d6f38721a886"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_program_options_8cpp.xhtml#a439bab01676c4e394cd1d6f38721a886">RemoveDuplicateDevices</a> (std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;computeDevices)</td></tr>
<tr class="separator:a439bab01676c4e394cd1d6f38721a886"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9900f991a1eff22cb289c62b79c821c5"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_program_options_8cpp.xhtml#a9900f991a1eff22cb289c62b79c821c5">GetBackendIDs</a> (const std::vector&lt; std::string &gt; &amp;backendStringsVec)</td></tr>
<tr class="memdesc:a9900f991a1eff22cb289c62b79c821c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes a vector of backend strings and returns a vector of backendIDs.  <a href="#a9900f991a1eff22cb289c62b79c821c5">More...</a><br /></td></tr>
<tr class="separator:a9900f991a1eff22cb289c62b79c821c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4569feeee2fd322e2af478e2d77a531c"><td class="memTemplParams" colspan="2">template&lt;typename optionType &gt; </td></tr>
<tr class="memitem:a4569feeee2fd322e2af478e2d77a531c"><td class="memTemplItemLeft" align="right" valign="top">optionType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_execute_network_program_options_8cpp.xhtml#a4569feeee2fd322e2af478e2d77a531c">GetOptionValue</a> (std::string &amp;&amp;optionName, const cxxopts::ParseResult &amp;result)</td></tr>
<tr class="memdesc:a4569feeee2fd322e2af478e2d77a531c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides a segfault safe way to get cxxopts option values by checking if the option was defined.  <a href="#a4569feeee2fd322e2af478e2d77a531c">More...</a><br /></td></tr>
<tr class="separator:a4569feeee2fd322e2af478e2d77a531c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc97e814c5611819237a071ef184ac80"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_program_options_8cpp.xhtml#abc97e814c5611819237a071ef184ac80">LogAndThrowFatal</a> (std::string errorMessage)</td></tr>
<tr class="separator:abc97e814c5611819237a071ef184ac80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d5885121779cccab1967e42a461dd89"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_program_options_8cpp.xhtml#a8d5885121779cccab1967e42a461dd89">CheckRequiredOptions</a> (const cxxopts::ParseResult &amp;result)</td></tr>
<tr class="separator:a8d5885121779cccab1967e42a461dd89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d1509a8a0fac064f9eb1029d6ea9ca7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_program_options_8cpp.xhtml#a7d1509a8a0fac064f9eb1029d6ea9ca7">CheckForDeprecatedOptions</a> (const cxxopts::ParseResult &amp;result)</td></tr>
<tr class="separator:a7d1509a8a0fac064f9eb1029d6ea9ca7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a7d1509a8a0fac064f9eb1029d6ea9ca7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d1509a8a0fac064f9eb1029d6ea9ca7">&#9670;&nbsp;</a></span>CheckForDeprecatedOptions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CheckForDeprecatedOptions </td>
          <td>(</td>
          <td class="paramtype">const cxxopts::ParseResult &amp;&#160;</td>
          <td class="paramname"><em>result</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00142">142</a> of file <a class="el" href="_execute_network_program_options_8cpp_source.xhtml">ExecuteNetworkProgramOptions.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00457">ProgramOptions::ParseOptions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">if</span>(result.count(<span class="stringliteral">&quot;simultaneous-iterations&quot;</span>) &gt; 0)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;DEPRECATED: The program option &#39;simultaneous-iterations&#39; is deprecated and will be &quot;</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                              <span class="stringliteral">&quot;removed soon. Please use the option &#39;iterations&#39; combined with &#39;concurrent&#39; instead.&quot;</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span>(result.count(<span class="stringliteral">&quot;armnn-tflite-delegate&quot;</span>) &gt; 0)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;DEPRECATED: The program option &#39;armnn-tflite-delegate&#39; is deprecated and will be &quot;</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                              <span class="stringliteral">&quot;removed soon. Please use the option &#39;tflite-executor&#39; instead.&quot;</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div><div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a92f95e137ba2edcad2985993626afe4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92f95e137ba2edcad2985993626afe4d">&#9670;&nbsp;</a></span>CheckOption()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CheckOption </td>
          <td>(</td>
          <td class="paramtype">const cxxopts::ParseResult &amp;&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00018">18</a> of file <a class="el" href="_execute_network_program_options_8cpp_source.xhtml">ExecuteNetworkProgramOptions.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00031">CheckOptionDependency()</a>.</p>
<div class="fragment"><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="comment">// Check that the given option is valid.</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordflow">if</span> (option == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    }</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="comment">// Check whether &#39;option&#39; is provided.</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">return</span> ((result.count(option)) ? <span class="keyword">true</span> : <span class="keyword">false</span>);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a06da09814964b4b241ca4420e98de8f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06da09814964b4b241ca4420e98de8f3">&#9670;&nbsp;</a></span>CheckOptionDependencies()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CheckOptionDependencies </td>
          <td>(</td>
          <td class="paramtype">const cxxopts::ParseResult &amp;&#160;</td>
          <td class="paramname"><em>result</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_execute_network_program_options_8cpp_source.xhtml">ExecuteNetworkProgramOptions.cpp</a>.</p>

<p class="reference">References <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00031">CheckOptionDependency()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00457">ProgramOptions::ParseOptions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="_execute_network_program_options_8cpp.xhtml#aae003ac0bcd37e3d9d7b4998e4faff5d">CheckOptionDependency</a>(result, <span class="stringliteral">&quot;model-path&quot;</span>, <span class="stringliteral">&quot;model-format&quot;</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="_execute_network_program_options_8cpp.xhtml#aae003ac0bcd37e3d9d7b4998e4faff5d">CheckOptionDependency</a>(result, <span class="stringliteral">&quot;input-tensor-shape&quot;</span>, <span class="stringliteral">&quot;model-path&quot;</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="_execute_network_program_options_8cpp.xhtml#aae003ac0bcd37e3d9d7b4998e4faff5d">CheckOptionDependency</a>(result, <span class="stringliteral">&quot;tuning-level&quot;</span>, <span class="stringliteral">&quot;tuning-path&quot;</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div><div class="ttc" id="_execute_network_program_options_8cpp_xhtml_aae003ac0bcd37e3d9d7b4998e4faff5d"><div class="ttname"><a href="_execute_network_program_options_8cpp.xhtml#aae003ac0bcd37e3d9d7b4998e4faff5d">CheckOptionDependency</a></div><div class="ttdeci">void CheckOptionDependency(const cxxopts::ParseResult &amp;result, const char *option, const char *required)</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_program_options_8cpp_source.xhtml#l00031">ExecuteNetworkProgramOptions.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aae003ac0bcd37e3d9d7b4998e4faff5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae003ac0bcd37e3d9d7b4998e4faff5d">&#9670;&nbsp;</a></span>CheckOptionDependency()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CheckOptionDependency </td>
          <td>(</td>
          <td class="paramtype">const cxxopts::ParseResult &amp;&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>option</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>required</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="_execute_network_program_options_8cpp_source.xhtml">ExecuteNetworkProgramOptions.cpp</a>.</p>

<p class="reference">References <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00018">CheckOption()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00052">CheckOptionDependencies()</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="comment">// Check that the given options are valid.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">if</span> (option == <span class="keyword">nullptr</span> || required == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">throw</span> cxxopts::OptionParseException(<span class="stringliteral">&quot;Invalid option to check dependency for&quot;</span>);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// Check that if &#39;option&#39; is provided, &#39;required&#39; is also provided.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="_execute_network_program_options_8cpp.xhtml#a92f95e137ba2edcad2985993626afe4d">CheckOption</a>(result, option) &amp;&amp; !result[option].has_default())</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="_execute_network_program_options_8cpp.xhtml#a92f95e137ba2edcad2985993626afe4d">CheckOption</a>(result, required) == 0 || result[required].has_default())</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keywordflow">throw</span> cxxopts::OptionParseException(</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                    std::string(<span class="stringliteral">&quot;Option &#39;&quot;</span>) + option + <span class="stringliteral">&quot;&#39; requires option &#39;&quot;</span> + required + <span class="stringliteral">&quot;&#39;.&quot;</span>);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="ttc" id="_execute_network_program_options_8cpp_xhtml_a92f95e137ba2edcad2985993626afe4d"><div class="ttname"><a href="_execute_network_program_options_8cpp.xhtml#a92f95e137ba2edcad2985993626afe4d">CheckOption</a></div><div class="ttdeci">bool CheckOption(const cxxopts::ParseResult &amp;result, const char *option)</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_program_options_8cpp_source.xhtml#l00018">ExecuteNetworkProgramOptions.cpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8d5885121779cccab1967e42a461dd89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d5885121779cccab1967e42a461dd89">&#9670;&nbsp;</a></span>CheckRequiredOptions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CheckRequiredOptions </td>
          <td>(</td>
          <td class="paramtype">const cxxopts::ParseResult &amp;&#160;</td>
          <td class="paramname"><em>result</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00117">117</a> of file <a class="el" href="_execute_network_program_options_8cpp_source.xhtml">ExecuteNetworkProgramOptions.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00457">ProgramOptions::ParseOptions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// For each option in option-group &quot;a) Required</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    std::vector&lt;std::string&gt; requiredOptions{<span class="stringliteral">&quot;compute&quot;</span>,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                             <span class="stringliteral">&quot;model-format&quot;</span>,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                             <span class="stringliteral">&quot;model-path&quot;</span>,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                             <span class="stringliteral">&quot;input-name&quot;</span>,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                             <span class="stringliteral">&quot;output-name&quot;</span>};</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">bool</span> requiredMissing = <span class="keyword">false</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span>&amp;  str : requiredOptions)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">if</span>(!(result.count(str) &gt; 0))</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; fmt::format(<span class="stringliteral">&quot;The program option &#39;{}&#39; is mandatory but wasn&#39;t provided.&quot;</span>, str);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            requiredMissing = <span class="keyword">true</span>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">if</span>(requiredMissing)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a> (<span class="stringliteral">&quot;Some required arguments are missing&quot;</span>);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9900f991a1eff22cb289c62b79c821c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9900f991a1eff22cb289c62b79c821c5">&#9670;&nbsp;</a></span>GetBackendIDs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a>&gt; GetBackendIDs </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>backendStringsVec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Takes a vector of backend strings and returns a vector of backendIDs. </p>
<p>Removes duplicate entries. Can handle backend strings that contain multiple backends separated by comma e.g "CpuRef,CpuAcc" </p>

<p class="definition">Definition at line <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00081">81</a> of file <a class="el" href="_execute_network_program_options_8cpp_source.xhtml">ExecuteNetworkProgramOptions.cpp</a>.</p>

<p class="reference">References <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00108">ParseStringList()</a>, and <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00059">RemoveDuplicateDevices()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00226">CheckAccuracy()</a>, and <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00457">ProgramOptions::ParseOptions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    std::vector&lt;armnn::BackendId&gt; backendIDs;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; backendStrings : backendStringsVec)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="comment">// Each backendStrings might contain multiple backends separated by comma e.g &quot;CpuRef,CpuAcc&quot;</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        std::vector&lt;std::string&gt; backendStringVec = <a class="code" href="_network_execution_utils_8cpp.xhtml#a1842dfaf4b24f36146a0cf6731ed75b7">ParseStringList</a>(backendStrings, <span class="stringliteral">&quot;,&quot;</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; b : backendStringVec)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            backendIDs.push_back(<a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a>(b));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="_execute_network_program_options_8cpp.xhtml#a439bab01676c4e394cd1d6f38721a886">RemoveDuplicateDevices</a>(backendIDs);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> backendIDs;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="ttc" id="_execute_network_program_options_8cpp_xhtml_a439bab01676c4e394cd1d6f38721a886"><div class="ttname"><a href="_execute_network_program_options_8cpp.xhtml#a439bab01676c4e394cd1d6f38721a886">RemoveDuplicateDevices</a></div><div class="ttdeci">void RemoveDuplicateDevices(std::vector&lt; armnn::BackendId &gt; &amp;computeDevices)</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_program_options_8cpp_source.xhtml#l00059">ExecuteNetworkProgramOptions.cpp:59</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_a1842dfaf4b24f36146a0cf6731ed75b7"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#a1842dfaf4b24f36146a0cf6731ed75b7">ParseStringList</a></div><div class="ttdeci">std::vector&lt; std::string &gt; ParseStringList(const std::string &amp;inputString, const char *delimiter)</div><div class="ttdoc">Splits a given string at every accurance of delimiter into a vector of string. </div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00108">NetworkExecutionUtils.cpp:108</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4569feeee2fd322e2af478e2d77a531c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4569feeee2fd322e2af478e2d77a531c">&#9670;&nbsp;</a></span>GetOptionValue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">optionType GetOptionValue </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&amp;&#160;</td>
          <td class="paramname"><em>optionName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxxopts::ParseResult &amp;&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Provides a segfault safe way to get cxxopts option values by checking if the option was defined. </p>
<p>If the option wasn't defined it returns an empty object. </p>

<p class="definition">Definition at line <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="_execute_network_program_options_8cpp_source.xhtml">ExecuteNetworkProgramOptions.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    optionType out;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">if</span>(result.count(optionName))</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        out = result[optionName].as&lt;optionType&gt;();</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abc97e814c5611819237a071ef184ac80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc97e814c5611819237a071ef184ac80">&#9670;&nbsp;</a></span>LogAndThrowFatal()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void LogAndThrowFatal </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>errorMessage</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00112">112</a> of file <a class="el" href="_execute_network_program_options_8cpp_source.xhtml">ExecuteNetworkProgramOptions.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00161">ProgramOptions::ValidateRuntimeOptions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a> (errorMessage);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a439bab01676c4e394cd1d6f38721a886"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a439bab01676c4e394cd1d6f38721a886">&#9670;&nbsp;</a></span>RemoveDuplicateDevices()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RemoveDuplicateDevices </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>computeDevices</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00059">59</a> of file <a class="el" href="_execute_network_program_options_8cpp_source.xhtml">ExecuteNetworkProgramOptions.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00081">GetBackendIDs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Mark the duplicate devices as &#39;Undefined&#39;.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = computeDevices.begin(); i != computeDevices.end(); ++i)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> j = std::next(i); j != computeDevices.end(); ++j)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">if</span> (*j == *i)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                *j = <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// Remove &#39;Undefined&#39; devices.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    computeDevices.erase(std::remove(computeDevices.begin(), computeDevices.end(), <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a>),</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                         computeDevices.end());</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_3502d64799b714c597b8fa7662494b65.xhtml">ExecuteNetwork</a></li><li class="navelem"><a class="el" href="_execute_network_program_options_8cpp.xhtml">ExecuteNetworkProgramOptions.cpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:29 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
