<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/profiling/ProfilingService.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_profiling_service_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ProfilingService.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_profiling_service_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2019 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_profiling_service_8hpp.xhtml">ProfilingService.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_id_8hpp.xhtml">armnn/BackendId.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_logging_8hpp.xhtml">armnn/Logging.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_numeric_cast_8hpp.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;common/include/ProfilingGuid.hpp&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;common/include/SocketConnectionException.hpp&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;fmt/format.h&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace </span>profiling</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;ProfilingGuidGenerator ProfilingService::m_GuidGenerator;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad6a0ab3d6679dded1eb2e1838becf79e">   26</a></span>&#160;ProfilingDynamicGuid <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad6a0ab3d6679dded1eb2e1838becf79e">ProfilingService::GetNextGuid</a>()</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">return</span> m_GuidGenerator.NextGuid();</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a881aa03d7b35e6d0acd783f2aaa22ac9">   31</a></span>&#160;ProfilingStaticGuid <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a881aa03d7b35e6d0acd783f2aaa22ac9">ProfilingService::GetStaticId</a>(<span class="keyword">const</span> std::string&amp; str)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">return</span> m_GuidGenerator.GenerateStaticId(str);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a3ae86439d5449553c50941ff3ecc3d97">   36</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a3ae86439d5449553c50941ff3ecc3d97">ProfilingService::ResetGuidGenerator</a>()</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    m_GuidGenerator.Reset();</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ae7a3588986b93e13fda47c7ce4b0627c">   41</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ae7a3588986b93e13fda47c7ce4b0627c">ProfilingService::ResetExternalProfilingOptions</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml">ExternalProfilingOptions</a>&amp; options,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                                     <span class="keywordtype">bool</span> resetProfilingService)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// Update the profiling options</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    m_Options = options;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    m_TimelineReporting = options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a5b304d775657afbf1fb724af57add374">m_TimelineEnabled</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    m_ConnectionAcknowledgedCommandHandler.<a class="code" href="classarmnn_1_1profiling_1_1_connection_acknowledged_command_handler.xhtml#a5d3ec28132ce405fd3c2db3ada43bc18">setTimelineEnabled</a>(options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a5b304d775657afbf1fb724af57add374">m_TimelineEnabled</a>);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Check if the profiling service needs to be reset</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span> (resetProfilingService)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="comment">// Reset the profiling service</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        Reset();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">   57</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">ProfilingService::IsProfilingEnabled</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> m_Options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a004992fdba75e298495d6b628234a4bd">   62</a></span>&#160;<a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">ProfilingState</a> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a004992fdba75e298495d6b628234a4bd">ProfilingService::ConfigureProfilingService</a>(</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml">ExternalProfilingOptions</a>&amp; options,</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordtype">bool</span> resetProfilingService)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ae7a3588986b93e13fda47c7ce4b0627c">ResetExternalProfilingOptions</a>(options, resetProfilingService);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">ProfilingState</a> currentState = m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">GetCurrentState</a>();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">if</span> (options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">switch</span> (currentState)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">ProfilingState::Uninitialised</a>:</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aec0783b5a136e042adcc47bae4fe5291">Update</a>(); <span class="comment">// should transition to NotConnected</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aec0783b5a136e042adcc47bae4fe5291">Update</a>(); <span class="comment">// will either stay in NotConnected because there is no server</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                          <span class="comment">// or will enter WaitingForAck.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                currentState = m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">GetCurrentState</a>();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keywordflow">if</span> (currentState == <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">ProfilingState::WaitingForAck</a>)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aec0783b5a136e042adcc47bae4fe5291">Update</a>(); <span class="comment">// poke it again to send out the metadata packet</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                currentState = m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">GetCurrentState</a>();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keywordflow">return</span> currentState;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">ProfilingState::NotConnected</a>:</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aec0783b5a136e042adcc47bae4fe5291">Update</a>(); <span class="comment">// will either stay in NotConnected because there is no server</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                          <span class="comment">// or will enter WaitingForAck</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                currentState = m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">GetCurrentState</a>();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">if</span> (currentState == <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">ProfilingState::WaitingForAck</a>)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aec0783b5a136e042adcc47bae4fe5291">Update</a>(); <span class="comment">// poke it again to send out the metadata packet</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                currentState = m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">GetCurrentState</a>();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">return</span> currentState;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keywordflow">return</span> currentState;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="comment">// Make sure profiling is shutdown</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">switch</span> (currentState)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">ProfilingState::Uninitialised</a>:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">ProfilingState::NotConnected</a>:</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keywordflow">return</span> currentState;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                Stop();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordflow">return</span> m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">GetCurrentState</a>();</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aec0783b5a136e042adcc47bae4fe5291">  112</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aec0783b5a136e042adcc47bae4fe5291">ProfilingService::Update</a>()</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">if</span> (!m_Options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="comment">// Don&#39;t run if profiling is disabled</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">ProfilingState</a> currentState = m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">GetCurrentState</a>();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">switch</span> (currentState)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">ProfilingState::Uninitialised</a>:</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="comment">// Initialize the profiling service</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        Initialize();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="comment">// Move to the next state</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#a175365c95c51fb3dad223ce3f48a3ffc">TransitionToState</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">ProfilingState::NotConnected</a>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">ProfilingState::NotConnected</a>:</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="comment">// Stop the command thread (if running)</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        m_CommandHandler.<a class="code" href="classarmnn_1_1profiling_1_1_command_handler.xhtml#a17a237457e57625296e6b24feb19c60a">Stop</a>();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="comment">// Stop the send thread (if running)</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        m_SendThread.<a class="code" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#a32e1e5f33658343e4a480d37329cff38">Stop</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">// Stop the periodic counter capture thread (if running)</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        m_PeriodicCounterCapture.<a class="code" href="classarmnn_1_1profiling_1_1_periodic_counter_capture.xhtml#a634c58de2126b4a4e6a2a093e60e1290">Stop</a>();</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="comment">// Reset any existing profiling connection</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        m_ProfilingConnection.reset();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="comment">// Setup the profiling connection</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(m_ProfilingConnectionFactory);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            m_ProfilingConnection = m_ProfilingConnectionFactory-&gt;GetProfilingConnection(m_Options);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_exception.xhtml">Exception</a>&amp; e)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">warning</a>) &lt;&lt; <span class="stringliteral">&quot;An error has occurred when creating the profiling connection: &quot;</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                       &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> arm::pipe::SocketConnectionException&amp; e)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">warning</a>) &lt;&lt; <span class="stringliteral">&quot;An error has occurred when creating the profiling connection [&quot;</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                       &lt;&lt; e.what() &lt;&lt; <span class="stringliteral">&quot;] on socket [&quot;</span> &lt;&lt; e.GetSocketFd() &lt;&lt; <span class="stringliteral">&quot;].&quot;</span>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="comment">// Move to the next state</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#a175365c95c51fb3dad223ce3f48a3ffc">TransitionToState</a>(m_ProfilingConnection</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                         ? <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">ProfilingState::WaitingForAck</a>  <span class="comment">// Profiling connection obtained, wait for ack</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                         : <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">ProfilingState::NotConnected</a>); <span class="comment">// Profiling connection failed, stay in the</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                                                          <span class="comment">// &quot;NotConnected&quot; state</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">ProfilingState::WaitingForAck</a>:</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(m_ProfilingConnection);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="comment">// Start the command thread</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        m_CommandHandler.<a class="code" href="classarmnn_1_1profiling_1_1_command_handler.xhtml#af5f886492fa5da4ff3cde1769e9da2cb">Start</a>(*m_ProfilingConnection);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// Start the send thread, while in &quot;WaitingForAck&quot; state it&#39;ll send out a &quot;Stream MetaData&quot; packet waiting for</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="comment">// a valid &quot;Connection Acknowledged&quot; packet confirming the connection</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        m_SendThread.<a class="code" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#a160847691cc1341520cf16c11c1ec724">Start</a>(*m_ProfilingConnection);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment">// The connection acknowledged command handler will automatically transition the state to &quot;Active&quot; once a</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">// valid &quot;Connection Acknowledged&quot; packet has been received</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d">ProfilingState::Active</a>:</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="comment">// The period counter capture thread is started by the Periodic Counter Selection command handler upon</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="comment">// request by an external profiling service</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(fmt::format(<span class="stringliteral">&quot;Unknown profiling service state: {}&quot;</span>,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                           static_cast&lt;int&gt;(currentState)));</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a65d18fa17ec0238d7e72f6c8f5c880b6">  193</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a65d18fa17ec0238d7e72f6c8f5c880b6">ProfilingService::Disconnect</a>()</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">ProfilingState</a> currentState = m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">GetCurrentState</a>();</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">switch</span> (currentState)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">ProfilingState::Uninitialised</a>:</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">ProfilingState::NotConnected</a>:</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">ProfilingState::WaitingForAck</a>:</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">return</span>; <span class="comment">// NOP</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d">ProfilingState::Active</a>:</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="comment">// Stop the command thread (if running)</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        Stop();</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(fmt::format(<span class="stringliteral">&quot;Unknown profiling service state: {}&quot;</span>,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                           static_cast&lt;int&gt;(currentState)));</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">// Store a profiling context returned from a backend that support profiling, and register its counters</span></div><div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ab156998ddd9e58d2f79567bfb70e122c">  214</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ab156998ddd9e58d2f79567bfb70e122c">ProfilingService::AddBackendProfilingContext</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> backendId,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    std::shared_ptr&lt;armnn::profiling::IBackendProfilingContext&gt; profilingContext)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;{</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(profilingContext != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// Register the backend counters</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    m_MaxGlobalCounterId = profilingContext-&gt;RegisterCounters(m_MaxGlobalCounterId);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    m_BackendProfilingContexts.emplace(backendId, std::move(profilingContext));</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#adfaa32654e05eab63b2adc34b2138475">  222</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml">ICounterDirectory</a>&amp; <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#adfaa32654e05eab63b2adc34b2138475">ProfilingService::GetCounterDirectory</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">return</span> m_CounterDirectory;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;}</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad5fffd20c7356754964d06ae73f72293">  227</a></span>&#160;<a class="code" href="classarmnn_1_1profiling_1_1_i_counter_registry.xhtml">ICounterRegistry</a>&amp; <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad5fffd20c7356754964d06ae73f72293">ProfilingService::GetCounterRegistry</a>()</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">return</span> m_CounterDirectory;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad8d263669817cf577760710ff6c96bb9">  232</a></span>&#160;<a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">ProfilingState</a> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad8d263669817cf577760710ff6c96bb9">ProfilingService::GetCurrentState</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">return</span> m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">GetCurrentState</a>();</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad9062caad1836f8e6b810e4e97bb19d1">  237</a></span>&#160;uint16_t <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad9062caad1836f8e6b810e4e97bb19d1">ProfilingService::GetCounterCount</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordflow">return</span> m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ad9062caad1836f8e6b810e4e97bb19d1">GetCounterCount</a>();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;}</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a0ae21870422d53982556e0e31d6b19ee">  242</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a0ae21870422d53982556e0e31d6b19ee">ProfilingService::IsCounterRegistered</a>(uint16_t counterUid)<span class="keyword"> const</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">return</span> m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#abd87d40b4a54b7e1625cb765768553b9">IsCounterRegistered</a>(counterUid);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;}</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a5a8454419fcb43e456ad6ad1b2143402">  247</a></span>&#160;uint32_t <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a5a8454419fcb43e456ad6ad1b2143402">ProfilingService::GetAbsoluteCounterValue</a>(uint16_t counterUid)<span class="keyword"> const</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    CheckCounterUid(counterUid);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    std::atomic&lt;uint32_t&gt;* counterValuePtr = m_CounterIndex.at(counterUid);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterValuePtr);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span> counterValuePtr-&gt;load(std::memory_order::memory_order_relaxed);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a8f9bcec7e9c0fb2fe463c120a0fb43fe">  255</a></span>&#160;uint32_t <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a8f9bcec7e9c0fb2fe463c120a0fb43fe">ProfilingService::GetDeltaCounterValue</a>(uint16_t counterUid)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    CheckCounterUid(counterUid);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    std::atomic&lt;uint32_t&gt;* counterValuePtr = m_CounterIndex.at(counterUid);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterValuePtr);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">const</span> uint32_t counterValue = counterValuePtr-&gt;load(std::memory_order::memory_order_relaxed);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a2e08a9bc2818fb46503c1720562de8d7">SubtractCounterValue</a>(counterUid, counterValue);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> counterValue;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aed969262d8bf6d59eb8f65fb89d47959">  265</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarmnn_1_1profiling_1_1_i_counter_mappings.xhtml">ICounterMappings</a>&amp; <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aed969262d8bf6d59eb8f65fb89d47959">ProfilingService::GetCounterMappings</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">return</span> m_CounterIdMap;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;}</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a04f78379965ef10275613dd265fd0607">  270</a></span>&#160;<a class="code" href="classarmnn_1_1profiling_1_1_i_register_counter_mapping.xhtml">IRegisterCounterMapping</a>&amp; <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a04f78379965ef10275613dd265fd0607">ProfilingService::GetCounterMappingRegistry</a>()</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">return</span> m_CounterIdMap;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;}</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aff23669159bfc39106dc16d50c0a6e5f">  275</a></span>&#160;<a class="code" href="classarmnn_1_1profiling_1_1_capture_data.xhtml">CaptureData</a> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aff23669159bfc39106dc16d50c0a6e5f">ProfilingService::GetCaptureData</a>()</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> m_Holder.<a class="code" href="classarmnn_1_1profiling_1_1_holder.xhtml#a95c8634416821480a8140c87054718f6">GetCaptureData</a>();</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a40078141c4d1216eef4215fc10d0cbbc">  280</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a40078141c4d1216eef4215fc10d0cbbc">ProfilingService::SetCaptureData</a>(uint32_t capturePeriod,</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                      <span class="keyword">const</span> std::vector&lt;uint16_t&gt;&amp; counterIds,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                      <span class="keyword">const</span> std::set&lt;BackendId&gt;&amp; activeBackends)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;{</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    m_Holder.<a class="code" href="classarmnn_1_1profiling_1_1_holder.xhtml#ae904af7c6336ceeeb95ab8435047c7cb">SetCaptureData</a>(capturePeriod, counterIds, activeBackends);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a5468b88e2e2e65892f9589d00ed06775">  287</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a5468b88e2e2e65892f9589d00ed06775">ProfilingService::SetCounterValue</a>(uint16_t counterUid, uint32_t value)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    CheckCounterUid(counterUid);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    std::atomic&lt;uint32_t&gt;* counterValuePtr = m_CounterIndex.at(counterUid);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterValuePtr);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    counterValuePtr-&gt;store(value, std::memory_order::memory_order_relaxed);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;}</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a2d1ab72611dfc67cf1b491849ea386a4">  295</a></span>&#160;uint32_t <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a2d1ab72611dfc67cf1b491849ea386a4">ProfilingService::AddCounterValue</a>(uint16_t counterUid, uint32_t value)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;{</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    CheckCounterUid(counterUid);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    std::atomic&lt;uint32_t&gt;* counterValuePtr = m_CounterIndex.at(counterUid);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterValuePtr);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">return</span> counterValuePtr-&gt;fetch_add(value, std::memory_order::memory_order_relaxed);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a2e08a9bc2818fb46503c1720562de8d7">  303</a></span>&#160;uint32_t <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a2e08a9bc2818fb46503c1720562de8d7">ProfilingService::SubtractCounterValue</a>(uint16_t counterUid, uint32_t value)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;{</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    CheckCounterUid(counterUid);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    std::atomic&lt;uint32_t&gt;* counterValuePtr = m_CounterIndex.at(counterUid);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterValuePtr);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">return</span> counterValuePtr-&gt;fetch_sub(value, std::memory_order::memory_order_relaxed);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a6c2d955d387944f5b7ad37ebb435a37f">  311</a></span>&#160;uint32_t <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a6c2d955d387944f5b7ad37ebb435a37f">ProfilingService::IncrementCounterValue</a>(uint16_t counterUid)</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;{</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    CheckCounterUid(counterUid);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    std::atomic&lt;uint32_t&gt;* counterValuePtr = m_CounterIndex.at(counterUid);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterValuePtr);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordflow">return</span> counterValuePtr-&gt;operator++(std::memory_order::memory_order_relaxed);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;}</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">  319</a></span>&#160;ProfilingDynamicGuid <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">ProfilingService::NextGuid</a>()</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;{</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad6a0ab3d6679dded1eb2e1838becf79e">ProfilingService::GetNextGuid</a>();</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;}</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#afd19633513acfc3ae294aa90b1e13a04">  324</a></span>&#160;ProfilingStaticGuid <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#afd19633513acfc3ae294aa90b1e13a04">ProfilingService::GenerateStaticId</a>(<span class="keyword">const</span> std::string&amp; str)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;{</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a881aa03d7b35e6d0acd783f2aaa22ac9">ProfilingService::GetStaticId</a>(str);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a71c4eb6e11d491f84df504cf7f5a6337">  329</a></span>&#160;std::unique_ptr&lt;ISendTimelinePacket&gt; <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a71c4eb6e11d491f84df504cf7f5a6337">ProfilingService::GetSendTimelinePacket</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">return</span> m_TimelinePacketWriterFactory.<a class="code" href="classarmnn_1_1profiling_1_1_timeline_packet_writer_factory.xhtml#a169a8836d1862bc9ed922e124e905302">GetSendTimelinePacket</a>();</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="keywordtype">void</span> ProfilingService::Initialize()</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;{</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="comment">// Register a category for the basic runtime counters</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">if</span> (!m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a63fc4d050f681a84653c1d861e989f45">IsCategoryRegistered</a>(<span class="stringliteral">&quot;ArmNN_Runtime&quot;</span>))</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a220a83a3433b6da68d41efe07c39b552">RegisterCategory</a>(<span class="stringliteral">&quot;ArmNN_Runtime&quot;</span>);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="comment">// Register a counter for the number of Network loads</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordflow">if</span> (!m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#abd87d40b4a54b7e1625cb765768553b9">IsCounterRegistered</a>(<span class="stringliteral">&quot;Network loads&quot;</span>))</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    {</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a>* loadedNetworksCounter =</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ab9756dfaf9b36cc51262369a27d1384f">RegisterCounter</a>(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                                   armnn::profiling::NETWORK_LOADS,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                                   <span class="stringliteral">&quot;ArmNN_Runtime&quot;</span>,</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                                   0,</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                                   0,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                                   1.f,</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                                                   <span class="stringliteral">&quot;Network loads&quot;</span>,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                                   <span class="stringliteral">&quot;The number of networks loaded at runtime&quot;</span>,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                                   std::string(<span class="stringliteral">&quot;networks&quot;</span>));</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(loadedNetworksCounter);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        InitializeCounterValue(loadedNetworksCounter-&gt;<a class="code" href="classarmnn_1_1profiling_1_1_counter.xhtml#a58ce26007b307f7e6200e4af7fbf601d">m_Uid</a>);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="comment">// Register a counter for the number of unloaded networks</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">if</span> (!m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#abd87d40b4a54b7e1625cb765768553b9">IsCounterRegistered</a>(<span class="stringliteral">&quot;Network unloads&quot;</span>))</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a>* unloadedNetworksCounter =</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ab9756dfaf9b36cc51262369a27d1384f">RegisterCounter</a>(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                                   armnn::profiling::NETWORK_UNLOADS,</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                                   <span class="stringliteral">&quot;ArmNN_Runtime&quot;</span>,</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                                                   0,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                                   0,</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                                   1.f,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                                   <span class="stringliteral">&quot;Network unloads&quot;</span>,</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                                   <span class="stringliteral">&quot;The number of networks unloaded at runtime&quot;</span>,</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                                   std::string(<span class="stringliteral">&quot;networks&quot;</span>));</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(unloadedNetworksCounter);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        InitializeCounterValue(unloadedNetworksCounter-&gt;<a class="code" href="classarmnn_1_1profiling_1_1_counter.xhtml#a58ce26007b307f7e6200e4af7fbf601d">m_Uid</a>);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    }</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="comment">// Register a counter for the number of registered backends</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordflow">if</span> (!m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#abd87d40b4a54b7e1625cb765768553b9">IsCounterRegistered</a>(<span class="stringliteral">&quot;Backends registered&quot;</span>))</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    {</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a>* registeredBackendsCounter =</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ab9756dfaf9b36cc51262369a27d1384f">RegisterCounter</a>(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                                   armnn::profiling::REGISTERED_BACKENDS,</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                                   <span class="stringliteral">&quot;ArmNN_Runtime&quot;</span>,</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                                   0,</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                                                   0,</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                                                   1.f,</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                                   <span class="stringliteral">&quot;Backends registered&quot;</span>,</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                                   <span class="stringliteral">&quot;The number of registered backends&quot;</span>,</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                                   std::string(<span class="stringliteral">&quot;backends&quot;</span>));</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(registeredBackendsCounter);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        InitializeCounterValue(registeredBackendsCounter-&gt;<a class="code" href="classarmnn_1_1profiling_1_1_counter.xhtml#a58ce26007b307f7e6200e4af7fbf601d">m_Uid</a>);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="comment">// Due to backends being registered before the profiling service becomes active,</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="comment">// we need to set the counter to the correct value here</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a5468b88e2e2e65892f9589d00ed06775">SetCounterValue</a>(armnn::profiling::REGISTERED_BACKENDS, static_cast&lt;uint32_t&gt;(<a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>().Size()));</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    }</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="comment">// Register a counter for the number of registered backends</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordflow">if</span> (!m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#abd87d40b4a54b7e1625cb765768553b9">IsCounterRegistered</a>(<span class="stringliteral">&quot;Backends unregistered&quot;</span>))</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a>* unregisteredBackendsCounter =</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ab9756dfaf9b36cc51262369a27d1384f">RegisterCounter</a>(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                                   armnn::profiling::UNREGISTERED_BACKENDS,</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                                   <span class="stringliteral">&quot;ArmNN_Runtime&quot;</span>,</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                                   0,</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                                                   0,</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                                   1.f,</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                                   <span class="stringliteral">&quot;Backends unregistered&quot;</span>,</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                                   <span class="stringliteral">&quot;The number of unregistered backends&quot;</span>,</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                                   std::string(<span class="stringliteral">&quot;backends&quot;</span>));</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(unregisteredBackendsCounter);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        InitializeCounterValue(unregisteredBackendsCounter-&gt;<a class="code" href="classarmnn_1_1profiling_1_1_counter.xhtml#a58ce26007b307f7e6200e4af7fbf601d">m_Uid</a>);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="comment">// Register a counter for the number of inferences run</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordflow">if</span> (!m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#abd87d40b4a54b7e1625cb765768553b9">IsCounterRegistered</a>(<span class="stringliteral">&quot;Inferences run&quot;</span>))</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a>* inferencesRunCounter =</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ab9756dfaf9b36cc51262369a27d1384f">RegisterCounter</a>(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                                   armnn::profiling::INFERENCES_RUN,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                                   <span class="stringliteral">&quot;ArmNN_Runtime&quot;</span>,</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                                   0,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                                   0,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                                   1.f,</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                                   <span class="stringliteral">&quot;Inferences run&quot;</span>,</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                                   <span class="stringliteral">&quot;The number of inferences run&quot;</span>,</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                                   std::string(<span class="stringliteral">&quot;inferences&quot;</span>));</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(inferencesRunCounter);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        InitializeCounterValue(inferencesRunCounter-&gt;<a class="code" href="classarmnn_1_1profiling_1_1_counter.xhtml#a58ce26007b307f7e6200e4af7fbf601d">m_Uid</a>);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    }</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;}</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="keywordtype">void</span> ProfilingService::InitializeCounterValue(uint16_t counterUid)</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;{</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="comment">// Increase the size of the counter index if necessary</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordflow">if</span> (counterUid &gt;= m_CounterIndex.size())</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    {</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        m_CounterIndex.resize(armnn::numeric_cast&lt;size_t&gt;(counterUid) + 1);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    }</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="comment">// Create a new atomic counter and add it to the list</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    m_CounterValues.emplace_back(0);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="comment">// Register the new counter to the counter index for quick access</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    std::atomic&lt;uint32_t&gt;* counterValuePtr = &amp;(m_CounterValues.back());</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    m_CounterIndex.at(counterUid) = counterValuePtr;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;}</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="keywordtype">void</span> ProfilingService::Reset()</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="comment">// Stop the profiling service...</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    Stop();</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="comment">// ...then delete all the counter data and configuration...</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    m_CounterIndex.clear();</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    m_CounterValues.clear();</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    m_CounterDirectory.<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a>();</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    m_CounterIdMap.<a class="code" href="classarmnn_1_1profiling_1_1_counter_id_map.xhtml#af82f4acaed7bb39d568e689a9caa63d5">Reset</a>();</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    m_BufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a372de693ad40b3f42839c8ec6ac845f4">Reset</a>();</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="comment">// ...finally reset the profiling state machine</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#a372de693ad40b3f42839c8ec6ac845f4">Reset</a>();</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    m_BackendProfilingContexts.clear();</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    m_MaxGlobalCounterId = armnn::profiling::MAX_ARMNN_COUNTER;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="keywordtype">void</span> ProfilingService::Stop()</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    {   <span class="comment">// only lock when we are updating the inference completed variable</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        std::unique_lock&lt;std::mutex&gt; lck(m_ServiceActiveMutex);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        m_ServiceActive = <span class="keyword">false</span>;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    }</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="comment">// The order in which we reset/stop the components is not trivial!</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="comment">// First stop the producing threads</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="comment">// Command Handler first as it is responsible for launching then Periodic Counter capture thread</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    m_CommandHandler.<a class="code" href="classarmnn_1_1profiling_1_1_command_handler.xhtml#a17a237457e57625296e6b24feb19c60a">Stop</a>();</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    m_PeriodicCounterCapture.<a class="code" href="classarmnn_1_1profiling_1_1_periodic_counter_capture.xhtml#a634c58de2126b4a4e6a2a093e60e1290">Stop</a>();</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="comment">// The the consuming thread</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    m_SendThread.<a class="code" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#a32e1e5f33658343e4a480d37329cff38">Stop</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="comment">// ...then close and destroy the profiling connection...</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keywordflow">if</span> (m_ProfilingConnection != <span class="keyword">nullptr</span> &amp;&amp; m_ProfilingConnection-&gt;IsOpen())</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    {</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        m_ProfilingConnection-&gt;Close();</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    }</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    m_ProfilingConnection.reset();</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="comment">// ...then move to the &quot;NotConnected&quot; state</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#a175365c95c51fb3dad223ce3f48a3ffc">TransitionToState</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">ProfilingState::NotConnected</a>);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;}</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> ProfilingService::CheckCounterUid(uint16_t counterUid)<span class="keyword"> const</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a0ae21870422d53982556e0e31d6b19ee">IsCounterRegistered</a>(counterUid))</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Counter UID {} is not registered&quot;</span>, counterUid));</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    }</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;}</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a0213410b7af3116277901a1e87bb96ee">  495</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a0213410b7af3116277901a1e87bb96ee">ProfilingService::NotifyBackendsForTimelineReporting</a>()</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;{</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    BackendProfilingContext::iterator it = m_BackendProfilingContexts.begin();</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">while</span> (it != m_BackendProfilingContexts.end())</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    {</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="keyword">auto</span>&amp; backendProfilingContext = it-&gt;second;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        backendProfilingContext-&gt;EnableTimelineReporting(m_TimelineReporting);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="comment">// Increment the Iterator to point to next entry</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        it++;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    }</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;}</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aa969a672380904e127264c3a8b27504b">  507</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aa969a672380904e127264c3a8b27504b">ProfilingService::NotifyProfilingServiceActive</a>()</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;{</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    {   <span class="comment">// only lock when we are updating the inference completed variable</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        std::unique_lock&lt;std::mutex&gt; lck(m_ServiceActiveMutex);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        m_ServiceActive = <span class="keyword">true</span>;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    }</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    m_ServiceActiveConditionVariable.notify_one();</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;}</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a80a0e4644a0be7b00bc581cb786d5a4f">  516</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a80a0e4644a0be7b00bc581cb786d5a4f">ProfilingService::WaitForProfilingServiceActivation</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeout)</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;{</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    std::unique_lock&lt;std::mutex&gt; lck(m_ServiceActiveMutex);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keyword">auto</span> start = std::chrono::high_resolution_clock::now();</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="comment">// Here we we will go back to sleep after a spurious wake up if</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="comment">// m_InferenceCompleted is not yet true.</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">if</span> (!m_ServiceActiveConditionVariable.wait_for(lck,</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                                                   std::chrono::milliseconds(timeout),</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                                                   [&amp;]{return m_ServiceActive == true;}))</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    {</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="keywordflow">if</span> (m_ServiceActive == <span class="keyword">true</span>)</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        {</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <span class="keyword">auto</span> finish = std::chrono::high_resolution_clock::now();</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        std::chrono::duration&lt;double, std::milli&gt; elapsed = finish - start;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;Timed out waiting on profiling service activation for &quot;</span> &lt;&lt; elapsed.count() &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span>;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">warning</a>) &lt;&lt; ss.str();</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    }</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;}</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a65bfac075d1a9b46ce6bb2ffabfde9ac">  540</a></span>&#160;<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a65bfac075d1a9b46ce6bb2ffabfde9ac">ProfilingService::~ProfilingService</a>()</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;{</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    Stop();</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;}</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;} <span class="comment">// namespace profiling</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a0ae21870422d53982556e0e31d6b19ee"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a0ae21870422d53982556e0e31d6b19ee">armnn::profiling::ProfilingService::IsCounterRegistered</a></div><div class="ttdeci">bool IsCounterRegistered(uint16_t counterUid) const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00242">ProfilingService.cpp:242</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_directory_xhtml_aa71d36872f416feaa853788a7a7a7ef8"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#aa71d36872f416feaa853788a7a7a7ef8">armnn::profiling::CounterDirectory::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdef"><b>Definition:</b> <a href="_counter_directory_8cpp_source.xhtml#l00438">CounterDirectory.cpp:438</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_directory_xhtml_a63fc4d050f681a84653c1d861e989f45"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a63fc4d050f681a84653c1d861e989f45">armnn::profiling::CounterDirectory::IsCategoryRegistered</a></div><div class="ttdeci">bool IsCategoryRegistered(const std::string &amp;categoryName) const</div><div class="ttdef"><b>Definition:</b> <a href="_counter_directory_8cpp_source.xhtml#l00389">CounterDirectory.cpp:389</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a80a0e4644a0be7b00bc581cb786d5a4f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a80a0e4644a0be7b00bc581cb786d5a4f">armnn::profiling::ProfilingService::WaitForProfilingServiceActivation</a></div><div class="ttdeci">void WaitForProfilingServiceActivation(unsigned int timeout) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00516">ProfilingService.cpp:516</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_state_machine_xhtml_ad8d263669817cf577760710ff6c96bb9"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">armnn::profiling::ProfilingStateMachine::GetCurrentState</a></div><div class="ttdeci">ProfilingState GetCurrentState() const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_state_machine_8cpp_source.xhtml#l00031">ProfilingStateMachine.cpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_directory_xhtml_a220a83a3433b6da68d41efe07c39b552"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a220a83a3433b6da68d41efe07c39b552">armnn::profiling::CounterDirectory::RegisterCategory</a></div><div class="ttdeci">const Category * RegisterCategory(const std::string &amp;categoryName) override</div><div class="ttdef"><b>Definition:</b> <a href="_counter_directory_8cpp_source.xhtml#l00023">CounterDirectory.cpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_directory_xhtml_ab9756dfaf9b36cc51262369a27d1384f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ab9756dfaf9b36cc51262369a27d1384f">armnn::profiling::CounterDirectory::RegisterCounter</a></div><div class="ttdeci">const Counter * RegisterCounter(const BackendId &amp;backendId, const uint16_t uid, const std::string &amp;parentCategoryName, uint16_t counterClass, uint16_t interpolation, double multiplier, const std::string &amp;name, const std::string &amp;description, const Optional&lt; std::string &gt; &amp;units=EmptyOptional(), const Optional&lt; uint16_t &gt; &amp;numberOfCores=EmptyOptional(), const Optional&lt; uint16_t &gt; &amp;deviceUid=EmptyOptional(), const Optional&lt; uint16_t &gt; &amp;counterSetUid=EmptyOptional()) override</div><div class="ttdef"><b>Definition:</b> <a href="_counter_directory_8cpp_source.xhtml#l00181">CounterDirectory.cpp:181</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a5a8454419fcb43e456ad6ad1b2143402"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a5a8454419fcb43e456ad6ad1b2143402">armnn::profiling::ProfilingService::GetAbsoluteCounterValue</a></div><div class="ttdeci">uint32_t GetAbsoluteCounterValue(uint16_t counterUid) const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00247">ProfilingService.cpp:247</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_register_counter_mapping_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_register_counter_mapping.xhtml">armnn::profiling::IRegisterCounterMapping</a></div><div class="ttdef"><b>Definition:</b> <a href="_counter_id_map_8hpp_source.xhtml#l00023">CounterIdMap.hpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_ad8d263669817cf577760710ff6c96bb9"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad8d263669817cf577760710ff6c96bb9">armnn::profiling::ProfilingService::GetCurrentState</a></div><div class="ttdeci">ProfilingState GetCurrentState() const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00232">ProfilingService.cpp:232</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_command_handler_xhtml_af5f886492fa5da4ff3cde1769e9da2cb"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_command_handler.xhtml#af5f886492fa5da4ff3cde1769e9da2cb">armnn::profiling::CommandHandler::Start</a></div><div class="ttdeci">void Start(IProfilingConnection &amp;profilingConnection)</div><div class="ttdef"><b>Definition:</b> <a href="_command_handler_8cpp_source.xhtml#l00017">CommandHandler.cpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_ad5fffd20c7356754964d06ae73f72293"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad5fffd20c7356754964d06ae73f72293">armnn::profiling::ProfilingService::GetCounterRegistry</a></div><div class="ttdeci">ICounterRegistry &amp; GetCounterRegistry()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00227">ProfilingService.cpp:227</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_capture_data_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_capture_data.xhtml">armnn::profiling::CaptureData</a></div><div class="ttdef"><b>Definition:</b> <a href="_holder_8hpp_source.xhtml#l00019">Holder.hpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a0213410b7af3116277901a1e87bb96ee"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a0213410b7af3116277901a1e87bb96ee">armnn::profiling::ProfilingService::NotifyBackendsForTimelineReporting</a></div><div class="ttdeci">void NotifyBackendsForTimelineReporting() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00495">ProfilingService.cpp:495</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_aa969a672380904e127264c3a8b27504b"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aa969a672380904e127264c3a8b27504b">armnn::profiling::ProfilingService::NotifyProfilingServiceActive</a></div><div class="ttdeci">void NotifyProfilingServiceActive() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00507">ProfilingService.cpp:507</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter.xhtml">armnn::profiling::Counter</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_counter_directory_8hpp_source.xhtml#l00093">ICounterDirectory.hpp:93</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a65d18fa17ec0238d7e72f6c8f5c880b6"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a65d18fa17ec0238d7e72f6c8f5c880b6">armnn::profiling::ProfilingService::Disconnect</a></div><div class="ttdeci">void Disconnect()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00193">ProfilingService.cpp:193</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">armnn::IRuntime::CreationOptions::ExternalProfilingOptions::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdoc">Indicates whether external profiling is enabled or not. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00136">IRuntime.hpp:136</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_aec0783b5a136e042adcc47bae4fe5291"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aec0783b5a136e042adcc47bae4fe5291">armnn::profiling::ProfilingService::Update</a></div><div class="ttdeci">void Update()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00112">ProfilingService.cpp:112</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_aeea32305626f921e1e9f99434dbf9049"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">armnn::profiling::ProfilingService::NextGuid</a></div><div class="ttdeci">ProfilingDynamicGuid NextGuid() override</div><div class="ttdoc">Return the next random Guid in the sequence. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00319">ProfilingService.cpp:319</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a6c2d955d387944f5b7ad37ebb435a37f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a6c2d955d387944f5b7ad37ebb435a37f">armnn::profiling::ProfilingService::IncrementCounterValue</a></div><div class="ttdeci">uint32_t IncrementCounterValue(uint16_t counterUid) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00311">ProfilingService.cpp:311</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_periodic_counter_capture_xhtml_a634c58de2126b4a4e6a2a093e60e1290"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_periodic_counter_capture.xhtml#a634c58de2126b4a4e6a2a093e60e1290">armnn::profiling::PeriodicCounterCapture::Stop</a></div><div class="ttdeci">void Stop() override</div><div class="ttdef"><b>Definition:</b> <a href="_periodic_counter_capture_8cpp_source.xhtml#l00037">PeriodicCounterCapture.cpp:37</a></div></div>
<div class="ttc" id="_numeric_cast_8hpp_xhtml"><div class="ttname"><a href="_numeric_cast_8hpp.xhtml">NumericCast.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a3ae86439d5449553c50941ff3ecc3d97"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a3ae86439d5449553c50941ff3ecc3d97">armnn::profiling::ProfilingService::ResetGuidGenerator</a></div><div class="ttdeci">void ResetGuidGenerator()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00036">ProfilingService.cpp:36</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml">armnn::IRuntime::CreationOptions::ExternalProfilingOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00122">IRuntime.hpp:122</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">armnn::profiling::ProfilingState::NotConnected</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a8f9bcec7e9c0fb2fe463c120a0fb43fe"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a8f9bcec7e9c0fb2fe463c120a0fb43fe">armnn::profiling::ProfilingService::GetDeltaCounterValue</a></div><div class="ttdeci">uint32_t GetDeltaCounterValue(uint16_t counterUid) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00255">ProfilingService.cpp:255</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a2e08a9bc2818fb46503c1720562de8d7"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a2e08a9bc2818fb46503c1720562de8d7">armnn::profiling::ProfilingService::SubtractCounterValue</a></div><div class="ttdeci">uint32_t SubtractCounterValue(uint16_t counterUid, uint32_t value) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00303">ProfilingService.cpp:303</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a881aa03d7b35e6d0acd783f2aaa22ac9"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a881aa03d7b35e6d0acd783f2aaa22ac9">armnn::profiling::ProfilingService::GetStaticId</a></div><div class="ttdeci">static ProfilingStaticGuid GetStaticId(const std::string &amp;str)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00031">ProfilingService.cpp:31</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d">armnn::profiling::ProfilingState::Active</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_holder_xhtml_a95c8634416821480a8140c87054718f6"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_holder.xhtml#a95c8634416821480a8140c87054718f6">armnn::profiling::Holder::GetCaptureData</a></div><div class="ttdeci">CaptureData GetCaptureData() const</div><div class="ttdef"><b>Definition:</b> <a href="_holder_8cpp_source.xhtml#l00054">Holder.cpp:54</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a40078141c4d1216eef4215fc10d0cbbc"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a40078141c4d1216eef4215fc10d0cbbc">armnn::profiling::ProfilingService::SetCaptureData</a></div><div class="ttdeci">void SetCaptureData(uint32_t capturePeriod, const std::vector&lt; uint16_t &gt; &amp;counterIds, const std::set&lt; BackendId &gt; &amp;activeBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00280">ProfilingService.cpp:280</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_holder_xhtml_ae904af7c6336ceeeb95ab8435047c7cb"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_holder.xhtml#ae904af7c6336ceeeb95ab8435047c7cb">armnn::profiling::Holder::SetCaptureData</a></div><div class="ttdeci">void SetCaptureData(uint32_t capturePeriod, const std::vector&lt; uint16_t &gt; &amp;counterIds, const std::set&lt; armnn::BackendId &gt; &amp;activeBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_holder_8cpp_source.xhtml#l00074">Holder.cpp:74</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::BoostLogSeverityMapping::warning</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a71c4eb6e11d491f84df504cf7f5a6337"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a71c4eb6e11d491f84df504cf7f5a6337">armnn::profiling::ProfilingService::GetSendTimelinePacket</a></div><div class="ttdeci">std::unique_ptr&lt; ISendTimelinePacket &gt; GetSendTimelinePacket() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00329">ProfilingService.cpp:329</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_aed969262d8bf6d59eb8f65fb89d47959"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aed969262d8bf6d59eb8f65fb89d47959">armnn::profiling::ProfilingService::GetCounterMappings</a></div><div class="ttdeci">const ICounterMappings &amp; GetCounterMappings() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00265">ProfilingService.cpp:265</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_ae7a3588986b93e13fda47c7ce4b0627c"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ae7a3588986b93e13fda47c7ce4b0627c">armnn::profiling::ProfilingService::ResetExternalProfilingOptions</a></div><div class="ttdeci">void ResetExternalProfilingOptions(const ExternalProfilingOptions &amp;options, bool resetProfilingService=false)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00041">ProfilingService.cpp:41</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a2d1ab72611dfc67cf1b491849ea386a4"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a2d1ab72611dfc67cf1b491849ea386a4">armnn::profiling::ProfilingService::AddCounterValue</a></div><div class="ttdeci">uint32_t AddCounterValue(uint16_t counterUid, uint32_t value) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00295">ProfilingService.cpp:295</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_command_handler_xhtml_a17a237457e57625296e6b24feb19c60a"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_command_handler.xhtml#a17a237457e57625296e6b24feb19c60a">armnn::profiling::CommandHandler::Stop</a></div><div class="ttdeci">void Stop()</div><div class="ttdef"><b>Definition:</b> <a href="_command_handler_8cpp_source.xhtml#l00034">CommandHandler.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">armnn::profiling::ProfilingState::WaitingForAck</a></div></div>
<div class="ttc" id="_backend_id_8hpp_xhtml"><div class="ttname"><a href="_backend_id_8hpp.xhtml">BackendId.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a04f78379965ef10275613dd265fd0607"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a04f78379965ef10275613dd265fd0607">armnn::profiling::ProfilingService::GetCounterMappingRegistry</a></div><div class="ttdeci">IRegisterCounterMapping &amp; GetCounterMappingRegistry()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00270">ProfilingService.cpp:270</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_state_machine_xhtml_a372de693ad40b3f42839c8ec6ac845f4"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#a372de693ad40b3f42839c8ec6ac845f4">armnn::profiling::ProfilingStateMachine::Reset</a></div><div class="ttdeci">void Reset()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_state_machine_8cpp_source.xhtml#l00088">ProfilingStateMachine.cpp:88</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml"><div class="ttname"><a href="_logging_8hpp.xhtml">Logging.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_id_map_xhtml_af82f4acaed7bb39d568e689a9caa63d5"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_id_map.xhtml#af82f4acaed7bb39d568e689a9caa63d5">armnn::profiling::CounterIdMap::Reset</a></div><div class="ttdeci">void Reset() override</div><div class="ttdef"><b>Definition:</b> <a href="_counter_id_map_8cpp_source.xhtml#l00024">CounterIdMap.cpp:24</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">armnn::profiling::ProfilingState::Uninitialised</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a5468b88e2e2e65892f9589d00ed06775"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a5468b88e2e2e65892f9589d00ed06775">armnn::profiling::ProfilingService::SetCounterValue</a></div><div class="ttdeci">void SetCounterValue(uint16_t counterUid, uint32_t value) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00287">ProfilingService.cpp:287</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_aff23669159bfc39106dc16d50c0a6e5f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aff23669159bfc39106dc16d50c0a6e5f">armnn::profiling::ProfilingService::GetCaptureData</a></div><div class="ttdeci">CaptureData GetCaptureData() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00275">ProfilingService.cpp:275</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a70db5b1cdd0d22c1fa912c6e8b9089ce"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">armnn::profiling::ProfilingService::IsProfilingEnabled</a></div><div class="ttdeci">bool IsProfilingEnabled() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00057">ProfilingService.cpp:57</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_directory_xhtml_abd87d40b4a54b7e1625cb765768553b9"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#abd87d40b4a54b7e1625cb765768553b9">armnn::profiling::CounterDirectory::IsCounterRegistered</a></div><div class="ttdeci">bool IsCounterRegistered(uint16_t counterUid) const</div><div class="ttdef"><b>Definition:</b> <a href="_counter_directory_8cpp_source.xhtml#l00424">CounterDirectory.cpp:424</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_counter_registry_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_counter_registry.xhtml">armnn::profiling::ICounterRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_counter_registry_8hpp_source.xhtml#l00017">ICounterRegistry.hpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">armnn::profiling::ProfilingState</a></div><div class="ttdeci">ProfilingState</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_state_machine_8hpp_source.xhtml#l00018">ProfilingStateMachine.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_ad6a0ab3d6679dded1eb2e1838becf79e"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad6a0ab3d6679dded1eb2e1838becf79e">armnn::profiling::ProfilingService::GetNextGuid</a></div><div class="ttdeci">static ProfilingDynamicGuid GetNextGuid()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00026">ProfilingService.cpp:26</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml_a5b304d775657afbf1fb724af57add374"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a5b304d775657afbf1fb724af57add374">armnn::IRuntime::CreationOptions::ExternalProfilingOptions::m_TimelineEnabled</a></div><div class="ttdeci">bool m_TimelineEnabled</div><div class="ttdoc">Indicates whether external timeline profiling is enabled or not. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00138">IRuntime.hpp:138</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_connection_acknowledged_command_handler_xhtml_a5d3ec28132ce405fd3c2db3ada43bc18"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_connection_acknowledged_command_handler.xhtml#a5d3ec28132ce405fd3c2db3ada43bc18">armnn::profiling::ConnectionAcknowledgedCommandHandler::setTimelineEnabled</a></div><div class="ttdeci">void setTimelineEnabled(bool timelineEnabled)</div><div class="ttdef"><b>Definition:</b> <a href="_connection_acknowledged_command_handler_8hpp_source.xhtml#l00051">ConnectionAcknowledgedCommandHandler.hpp:51</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_directory_xhtml_ad9062caad1836f8e6b810e4e97bb19d1"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ad9062caad1836f8e6b810e4e97bb19d1">armnn::profiling::CounterDirectory::GetCounterCount</a></div><div class="ttdeci">uint16_t GetCounterCount() const override</div><div class="ttdef"><b>Definition:</b> <a href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00054">CounterDirectory.hpp:54</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_state_machine_xhtml_a175365c95c51fb3dad223ce3f48a3ffc"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#a175365c95c51fb3dad223ce3f48a3ffc">armnn::profiling::ProfilingStateMachine::TransitionToState</a></div><div class="ttdeci">void TransitionToState(ProfilingState newState)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_state_machine_8cpp_source.xhtml#l00036">ProfilingStateMachine.cpp:36</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a65bfac075d1a9b46ce6bb2ffabfde9ac"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a65bfac075d1a9b46ce6bb2ffabfde9ac">armnn::profiling::ProfilingService::~ProfilingService</a></div><div class="ttdeci">~ProfilingService()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00540">ProfilingService.cpp:540</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_ab156998ddd9e58d2f79567bfb70e122c"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ab156998ddd9e58d2f79567bfb70e122c">armnn::profiling::ProfilingService::AddBackendProfilingContext</a></div><div class="ttdeci">void AddBackendProfilingContext(const BackendId backendId, std::shared_ptr&lt; armnn::profiling::IBackendProfilingContext &gt; profilingContext)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00214">ProfilingService.cpp:214</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_timeline_packet_writer_factory_xhtml_a169a8836d1862bc9ed922e124e905302"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_timeline_packet_writer_factory.xhtml#a169a8836d1862bc9ed922e124e905302">armnn::profiling::TimelinePacketWriterFactory::GetSendTimelinePacket</a></div><div class="ttdeci">std::unique_ptr&lt; ISendTimelinePacket &gt; GetSendTimelinePacket() const</div><div class="ttdef"><b>Definition:</b> <a href="_timeline_packet_writer_factory_8cpp_source.xhtml#l00016">TimelinePacketWriterFactory.cpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_adfaa32654e05eab63b2adc34b2138475"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#adfaa32654e05eab63b2adc34b2138475">armnn::profiling::ProfilingService::GetCounterDirectory</a></div><div class="ttdeci">const ICounterDirectory &amp; GetCounterDirectory() const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00222">ProfilingService.cpp:222</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_counter_directory_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml">armnn::profiling::ICounterDirectory</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_counter_directory_8hpp_source.xhtml#l00137">ICounterDirectory.hpp:137</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml_a372de693ad40b3f42839c8ec6ac845f4"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a372de693ad40b3f42839c8ec6ac845f4">armnn::profiling::BufferManager::Reset</a></div><div class="ttdeci">void Reset()</div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8cpp_source.xhtml#l00104">BufferManager.cpp:104</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a004992fdba75e298495d6b628234a4bd"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a004992fdba75e298495d6b628234a4bd">armnn::profiling::ProfilingService::ConfigureProfilingService</a></div><div class="ttdeci">ProfilingState ConfigureProfilingService(const ExternalProfilingOptions &amp;options, bool resetProfilingService=false)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00062">ProfilingService.cpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_xhtml_a58ce26007b307f7e6200e4af7fbf601d"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter.xhtml#a58ce26007b307f7e6200e4af7fbf601d">armnn::profiling::Counter::m_Uid</a></div><div class="ttdeci">uint16_t m_Uid</div><div class="ttdef"><b>Definition:</b> <a href="_i_counter_directory_8hpp_source.xhtml#l00123">ICounterDirectory.hpp:123</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_send_thread_xhtml_a32e1e5f33658343e4a480d37329cff38"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_send_thread.xhtml#a32e1e5f33658343e4a480d37329cff38">armnn::profiling::SendThread::Stop</a></div><div class="ttdeci">void Stop(bool rethrowSendThreadExceptions=true) override</div><div class="ttdoc">Stop the thread. </div><div class="ttdef"><b>Definition:</b> <a href="_send_thread_8cpp_source.xhtml#l00079">SendThread.cpp:79</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_ad9062caad1836f8e6b810e4e97bb19d1"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad9062caad1836f8e6b810e4e97bb19d1">armnn::profiling::ProfilingService::GetCounterCount</a></div><div class="ttdeci">uint16_t GetCounterCount() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00237">ProfilingService.cpp:237</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_send_thread_xhtml_a160847691cc1341520cf16c11c1ec724"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_send_thread.xhtml#a160847691cc1341520cf16c11c1ec724">armnn::profiling::SendThread::Start</a></div><div class="ttdeci">void Start(IProfilingConnection &amp;profilingConnection) override</div><div class="ttdoc">Start the thread. </div><div class="ttdef"><b>Definition:</b> <a href="_send_thread_8cpp_source.xhtml#l00049">SendThread.cpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_afd19633513acfc3ae294aa90b1e13a04"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#afd19633513acfc3ae294aa90b1e13a04">armnn::profiling::ProfilingService::GenerateStaticId</a></div><div class="ttdeci">ProfilingStaticGuid GenerateStaticId(const std::string &amp;str) override</div><div class="ttdoc">Create a ProfilingStaticGuid based on a hash of the string. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00324">ProfilingService.cpp:324</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_counter_mappings_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_counter_mappings.xhtml">armnn::profiling::ICounterMappings</a></div><div class="ttdef"><b>Definition:</b> <a href="_counter_id_map_8hpp_source.xhtml#l00015">CounterIdMap.hpp:15</a></div></div>
<div class="ttc" id="_profiling_service_8hpp_xhtml"><div class="ttname"><a href="_profiling_service_8hpp.xhtml">ProfilingService.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_637c692f14729569dd2eac0c18e2a54a.xhtml">profiling</a></li><li class="navelem"><a class="el" href="_profiling_service_8cpp.xhtml">ProfilingService.cpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:00 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
