<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/profiling/test/SendCounterPacketTests.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_send_counter_packet_tests_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SendCounterPacketTests.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_send_counter_packet_tests_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2019 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_profiling_mocks_8hpp.xhtml">ProfilingMocks.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_profiling_test_utils_8hpp.xhtml">ProfilingTestUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_send_counter_packet_tests_8hpp.xhtml">SendCounterPacketTests.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;client/src/BufferManager.hpp&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;client/src/ProfilingUtils.hpp&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;client/src/SendCounterPacket.hpp&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_utils_8hpp.xhtml">armnn/Utils.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;common/include/Assert.hpp&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;common/include/Conversion.hpp&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;common/include/Constants.hpp&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;common/include/CounterDirectory.hpp&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;common/include/EncodeVersion.hpp&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;common/include/NumericCast.hpp&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;common/include/Processes.hpp&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;common/include/ProfilingException.hpp&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;doctest/doctest.h&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;chrono&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm_1_1pipe.xhtml">arm::pipe</a>;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">// A short delay to wait for the thread to process a packet.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;uint16_t constexpr WAIT_UNTIL_READABLE_MS = 20;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keywordtype">void</span> SetNotConnectedProfilingState(ProfilingStateMachine&amp; profilingStateMachine)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    ProfilingState currentState = profilingStateMachine.GetCurrentState();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">switch</span> (currentState)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">case</span> ProfilingState::WaitingForAck:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        profilingStateMachine.TransitionToState(ProfilingState::Active);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <a class="code" href="_utils_8hpp.xhtml#abbf421eb1186af0d505648ed2ea54a00">ARMNN_FALLTHROUGH</a>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">case</span> ProfilingState::Uninitialised:</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="_utils_8hpp.xhtml#abbf421eb1186af0d505648ed2ea54a00">ARMNN_FALLTHROUGH</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">case</span> ProfilingState::Active:</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        profilingStateMachine.TransitionToState(ProfilingState::NotConnected);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <a class="code" href="_utils_8hpp.xhtml#abbf421eb1186af0d505648ed2ea54a00">ARMNN_FALLTHROUGH</a>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">case</span> ProfilingState::NotConnected:</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        CHECK_MESSAGE(<span class="keyword">false</span>, <span class="stringliteral">&quot;Invalid profiling state&quot;</span>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keywordtype">void</span> SetWaitingForAckProfilingState(ProfilingStateMachine&amp; profilingStateMachine)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    ProfilingState currentState = profilingStateMachine.GetCurrentState();</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">switch</span> (currentState)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">case</span> ProfilingState::Uninitialised:</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <a class="code" href="_utils_8hpp.xhtml#abbf421eb1186af0d505648ed2ea54a00">ARMNN_FALLTHROUGH</a>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">case</span> ProfilingState::Active:</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        profilingStateMachine.TransitionToState(ProfilingState::NotConnected);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <a class="code" href="_utils_8hpp.xhtml#abbf421eb1186af0d505648ed2ea54a00">ARMNN_FALLTHROUGH</a>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">case</span> ProfilingState::NotConnected:</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        profilingStateMachine.TransitionToState(ProfilingState::WaitingForAck);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="_utils_8hpp.xhtml#abbf421eb1186af0d505648ed2ea54a00">ARMNN_FALLTHROUGH</a>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">case</span> ProfilingState::WaitingForAck:</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        CHECK_MESSAGE(<span class="keyword">false</span>, <span class="stringliteral">&quot;Invalid profiling state&quot;</span>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keywordtype">void</span> SetActiveProfilingState(ProfilingStateMachine&amp; profilingStateMachine)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    ProfilingState currentState = profilingStateMachine.GetCurrentState();</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">switch</span> (currentState)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">case</span> ProfilingState::Uninitialised:</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        profilingStateMachine.TransitionToState(ProfilingState::NotConnected);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="_utils_8hpp.xhtml#abbf421eb1186af0d505648ed2ea54a00">ARMNN_FALLTHROUGH</a>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">case</span> ProfilingState::NotConnected:</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        profilingStateMachine.TransitionToState(ProfilingState::WaitingForAck);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <a class="code" href="_utils_8hpp.xhtml#abbf421eb1186af0d505648ed2ea54a00">ARMNN_FALLTHROUGH</a>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">case</span> ProfilingState::WaitingForAck:</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        profilingStateMachine.TransitionToState(ProfilingState::Active);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="_utils_8hpp.xhtml#abbf421eb1186af0d505648ed2ea54a00">ARMNN_FALLTHROUGH</a>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">case</span> ProfilingState::Active:</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        CHECK_MESSAGE(<span class="keyword">false</span>, <span class="stringliteral">&quot;Invalid profiling state&quot;</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;} <span class="comment">// Anonymous namespace</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="_send_counter_packet_tests_8cpp.xhtml#af395cfb6d47bafef14938eb3c080eabe">  100</a></span>&#160;<a class="code" href="_send_counter_packet_tests_8cpp.xhtml#af395cfb6d47bafef14938eb3c080eabe">TEST_SUITE</a>(<span class="stringliteral">&quot;SendCounterPacketTests&quot;</span>)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">using</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">PacketType</a> = <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">MockProfilingConnection::PacketType</a>;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;TEST_CASE(<span class="stringliteral">&quot;MockSendCounterPacketTest&quot;</span>)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(512);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml">MockSendCounterPacket</a> mockSendCounterPacket(mockBuffer);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    mockSendCounterPacket.<a class="code" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a2a2e451c4e4963909b8a6dc7e7653cd1">SendStreamMetaDataPacket</a>();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">auto</span> packetBuffer = mockBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(packetBuffer-&gt;GetReadableData());</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    CHECK(strcmp(buffer, <span class="stringliteral">&quot;SendStreamMetaDataPacket&quot;</span>) == 0);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    mockBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a>(packetBuffer);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    CounterDirectory counterDirectory;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    mockSendCounterPacket.<a class="code" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a3b526a823530443efec886c4305e52de">SendCounterDirectoryPacket</a>(counterDirectory);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    packetBuffer = mockBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(packetBuffer-&gt;GetReadableData());</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    CHECK(strcmp(buffer, <span class="stringliteral">&quot;SendCounterDirectoryPacket&quot;</span>) == 0);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    mockBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a>(packetBuffer);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    uint64_t timestamp = 0;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    std::vector&lt;CounterValue&gt; indexValuePairs;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    mockSendCounterPacket.<a class="code" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#ac9261c6ee7d313090d15cfa22173d80c">SendPeriodicCounterCapturePacket</a>(timestamp, indexValuePairs);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    packetBuffer = mockBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(packetBuffer-&gt;GetReadableData());</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    CHECK(strcmp(buffer, <span class="stringliteral">&quot;SendPeriodicCounterCapturePacket&quot;</span>) == 0);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    mockBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a>(packetBuffer);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    uint32_t capturePeriod = 0;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    std::vector&lt;uint16_t&gt; selectedCounterIds;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    mockSendCounterPacket.<a class="code" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a47406a4d108beb4f20031d370a155a9d">SendPeriodicCounterSelectionPacket</a>(capturePeriod, selectedCounterIds);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    packetBuffer = mockBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(packetBuffer-&gt;GetReadableData());</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    CHECK(strcmp(buffer, <span class="stringliteral">&quot;SendPeriodicCounterSelectionPacket&quot;</span>) == 0);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    mockBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a>(packetBuffer);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendPeriodicCounterSelectionPacketTest&quot;</span>)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// Error no space left in buffer</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer1(10);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    SendCounterPacket sendPacket1(mockBuffer1,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                  arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    uint32_t capturePeriod = 1000;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    std::vector&lt;uint16_t&gt; selectedCounterIds;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    CHECK_THROWS_AS(sendPacket1.SendPeriodicCounterSelectionPacket(</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        capturePeriod, selectedCounterIds),</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        BufferExhaustion);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// Packet without any counters</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer2(512);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    SendCounterPacket sendPacket2(mockBuffer2,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                  arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    sendPacket2.SendPeriodicCounterSelectionPacket(capturePeriod, selectedCounterIds);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">auto</span> readBuffer2 = mockBuffer2.GetReadableBuffer();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    uint32_t headerWord0 = ReadUint32(readBuffer2, 0);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    uint32_t headerWord1 = ReadUint32(readBuffer2, 4);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    uint32_t period = ReadUint32(readBuffer2, 8);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    CHECK(((headerWord0 &gt;&gt; 26) &amp; 0x3F) == 0);  <span class="comment">// packet family</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    CHECK(((headerWord0 &gt;&gt; 16) &amp; 0x3FF) == 4); <span class="comment">// packet id</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    CHECK(headerWord1 == 4);                   <span class="comment">// data lenght</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    CHECK(period == 1000);                     <span class="comment">// capture period</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">// Full packet message</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer3(512);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    SendCounterPacket sendPacket3(mockBuffer3,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                  arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    selectedCounterIds.reserve(5);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    selectedCounterIds.emplace_back(100);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    selectedCounterIds.emplace_back(200);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    selectedCounterIds.emplace_back(300);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    selectedCounterIds.emplace_back(400);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    selectedCounterIds.emplace_back(500);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    sendPacket3.SendPeriodicCounterSelectionPacket(capturePeriod, selectedCounterIds);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">auto</span> readBuffer3 = mockBuffer3.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    headerWord0 = ReadUint32(readBuffer3, 0);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    headerWord1 = ReadUint32(readBuffer3, 4);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    period = ReadUint32(readBuffer3, 8);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    CHECK(((headerWord0 &gt;&gt; 26) &amp; 0x3F) == 0);  <span class="comment">// packet family</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    CHECK(((headerWord0 &gt;&gt; 16) &amp; 0x3FF) == 4); <span class="comment">// packet id</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    CHECK(headerWord1 == 14);                  <span class="comment">// data lenght</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    CHECK(period == 1000);                     <span class="comment">// capture period</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    uint16_t counterId = 0;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    uint32_t offset = 12;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// Counter Ids</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> uint16_t&amp; <span class="keywordtype">id</span> : selectedCounterIds)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        counterId = ReadUint16(readBuffer3, offset);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        CHECK(counterId == <span class="keywordtype">id</span>);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        offset += 2;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendPeriodicCounterCapturePacketTest&quot;</span>)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    ProfilingStateMachine profilingStateMachine;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="comment">// Error no space left in buffer</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer1(10);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    SendCounterPacket sendPacket1(mockBuffer1,</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                  arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">auto</span> captureTimestamp = std::chrono::steady_clock::now();</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    uint64_t time =  <span class="keyword">static_cast&lt;</span>uint64_t <span class="keyword">&gt;</span>(captureTimestamp.time_since_epoch().count());</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    std::vector&lt;CounterValue&gt; indexValuePairs;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    CHECK_THROWS_AS(sendPacket1.SendPeriodicCounterCapturePacket(time, indexValuePairs),</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                      BufferExhaustion);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="comment">// Packet without any counters</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer2(512);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    SendCounterPacket sendPacket2(mockBuffer2,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                  arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    sendPacket2.SendPeriodicCounterCapturePacket(time, indexValuePairs);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">auto</span> readBuffer2 = mockBuffer2.GetReadableBuffer();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    uint32_t headerWord0 = ReadUint32(readBuffer2, 0);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    uint32_t headerWord1 = ReadUint32(readBuffer2, 4);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    uint64_t readTimestamp = ReadUint64(readBuffer2, 8);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    CHECK(((headerWord0 &gt;&gt; 26) &amp; 0x0000003F) == 3); <span class="comment">// packet family</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    CHECK(((headerWord0 &gt;&gt; 19) &amp; 0x0000007F) == 0); <span class="comment">// packet class</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    CHECK(((headerWord0 &gt;&gt; 16) &amp; 0x00000007) == 0); <span class="comment">// packet type</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    CHECK(headerWord1 == 8);                        <span class="comment">// data length</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    CHECK(time == readTimestamp);                   <span class="comment">// capture period</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="comment">// Full packet message</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer3(512);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    SendCounterPacket sendPacket3(mockBuffer3,</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                  arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    indexValuePairs.reserve(5);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    indexValuePairs.emplace_back(CounterValue{0, 100});</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    indexValuePairs.emplace_back(CounterValue{1, 200});</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    indexValuePairs.emplace_back(CounterValue{2, 300});</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    indexValuePairs.emplace_back(CounterValue{3, 400});</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    indexValuePairs.emplace_back(CounterValue{4, 500});</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    sendPacket3.SendPeriodicCounterCapturePacket(time, indexValuePairs);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">auto</span> readBuffer3 = mockBuffer3.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    headerWord0 = ReadUint32(readBuffer3, 0);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    headerWord1 = ReadUint32(readBuffer3, 4);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    uint64_t readTimestamp2 = ReadUint64(readBuffer3, 8);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    CHECK(((headerWord0 &gt;&gt; 26) &amp; 0x0000003F) == 3); <span class="comment">// packet family</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    CHECK(((headerWord0 &gt;&gt; 19) &amp; 0x0000007F) == 0); <span class="comment">// packet class</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    CHECK(((headerWord0 &gt;&gt; 16) &amp; 0x00000007) == 0); <span class="comment">// packet type</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    CHECK(headerWord1 == 38);                       <span class="comment">// data length</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    CHECK(time == readTimestamp2);                  <span class="comment">// capture period</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    uint16_t counterIndex = 0;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    uint32_t counterValue = 100;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    uint32_t offset = 16;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">// Counter Ids</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = indexValuePairs.begin(), end = indexValuePairs.end(); it != end; ++it)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="comment">// Check Counter Index</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        uint16_t readIndex = ReadUint16(readBuffer3, offset);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        CHECK(counterIndex == readIndex);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        counterIndex++;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        offset += 2;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="comment">// Check Counter Value</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        uint32_t readValue = ReadUint32(readBuffer3, offset);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        CHECK(counterValue == readValue);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        counterValue += 100;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        offset += 4;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendStreamMetaDataPacketTest&quot;</span>)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;{</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    uint32_t sizeUint32 = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">arm::pipe::numeric_cast</a>&lt;uint32_t&gt;(<span class="keyword">sizeof</span>(uint32_t));</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="comment">// Error no space left in buffer</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer1(10);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    SendCounterPacket sendPacket1(mockBuffer1,</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                  arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    CHECK_THROWS_AS(sendPacket1.SendStreamMetaDataPacket(), BufferExhaustion);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// Full metadata packet</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    std::string processName = GetProcessName().substr(0, 60);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    uint32_t infoSize =            <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">arm::pipe::numeric_cast</a>&lt;uint32_t&gt;(arm::pipe::ARMNN_SOFTWARE_INFO.size()) + 1;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    uint32_t hardwareVersionSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">arm::pipe::numeric_cast</a>&lt;uint32_t&gt;(arm::pipe::ARMNN_HARDWARE_VERSION.size()) + 1;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    uint32_t softwareVersionSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">arm::pipe::numeric_cast</a>&lt;uint32_t&gt;(arm::pipe::ARMNN_SOFTWARE_VERSION.size()) + 1;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    uint32_t processNameSize =     <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">arm::pipe::numeric_cast</a>&lt;uint32_t&gt;(processName.size()) + 1;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="comment">// Supported Packets</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="comment">// Packet Encoding version 1.0.0</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="comment">// Control packet family</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="comment">//   Stream metadata packet (packet family=0; packet id=0)</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="comment">//   Connection Acknowledged packet ( packet family=0, packet id=1) Version 1.0.0</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="comment">//   Counter Directory packet (packet family=0; packet id=2) Version 1.0.0</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="comment">//   Request Counter Directory packet ( packet family=0, packet id=3) Version 1.0.0</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="comment">//   Periodic Counter Selection packet ( packet family=0, packet id=4) Version 1.0.0</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="comment">//   Per Job Counter Selection packet ( packet family=0, packet id=5) Version 1.0.0</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="comment">//   Activate Timeline Reporting (packet family = 0, packet id = 6) Version 1.0.0</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="comment">//   Deactivate Timeline Reporting (packet family = 0, packet id = 7) Version 1.0.0</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="comment">// Counter Packet Family</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="comment">//   Periodic Counter Capture (packet_family = 3, packet_class = 0, packet_type = 0) Version 1.0.0</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="comment">//   Per-Job Counter Capture (packet_family = 3, packet_class = 1, packet_type = 0,1) Version  1.0.0</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="comment">// Timeline Packet Family</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="comment">//   Timeline Message Directory (packet_family = 1, packet_class = 0, packet_type = 0) Version 1.0.0</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">//   Timeline Message (packet_family = 1, packet_class = 0, packet_type = 1) Version 1.0.0</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    std::vector&lt;std::pair&lt;uint32_t, uint32_t&gt;&gt; packetVersions;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(0, 0), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(0, 1), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(0, 2), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(0, 3), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(0, 4), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(0, 5), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(0, 6), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(0, 7), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(3, 0, 0), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(3, 1, 0), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(3, 1, 1), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(1, 0, 0), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    packetVersions.push_back(std::make_pair(ConstructHeader(1, 0, 1), arm::pipe::EncodeVersion(1, 0, 0)));</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    uint32_t packetEntries = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(packetVersions.size());</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer2(512);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    SendCounterPacket sendPacket2(mockBuffer2,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                  arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                  arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    sendPacket2.SendStreamMetaDataPacket();</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keyword">auto</span> readBuffer2 = mockBuffer2.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    uint32_t headerWord0 = ReadUint32(readBuffer2, 0);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    uint32_t headerWord1 = ReadUint32(readBuffer2, sizeUint32);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    CHECK(((headerWord0 &gt;&gt; 26) &amp; 0x3F) == 0); <span class="comment">// packet family</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    CHECK(((headerWord0 &gt;&gt; 16) &amp; 0x3FF) == 0); <span class="comment">// packet id</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    uint32_t totalLength = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">arm::pipe::numeric_cast</a>&lt;uint32_t&gt;(2 * sizeUint32 +</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                                         10 * sizeUint32 + infoSize +</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                                         hardwareVersionSize + softwareVersionSize +</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                                         processNameSize + sizeUint32 +</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                                                         2 * packetEntries * sizeUint32);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    CHECK(headerWord1 == totalLength - (2 * sizeUint32)); <span class="comment">// data length</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    uint32_t offset = sizeUint32 * 2;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    CHECK(ReadUint32(readBuffer2, offset) == arm::pipe::PIPE_MAGIC); <span class="comment">// pipe_magic</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    offset += sizeUint32;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    CHECK(ReadUint32(readBuffer2, offset) == arm::pipe::EncodeVersion(1, 0, 0)); <span class="comment">// stream_metadata_version</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    offset += sizeUint32;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    CHECK(ReadUint32(readBuffer2, offset) == MAX_METADATA_PACKET_LENGTH); <span class="comment">// max_data_len</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    offset += sizeUint32;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordtype">int</span> pid = arm::pipe::GetCurrentProcessId();</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    CHECK(ReadUint32(readBuffer2, offset) == arm::pipe::numeric_cast&lt;uint32_t&gt;(pid));</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    offset += sizeUint32;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    uint32_t poolOffset = 10 * sizeUint32;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    CHECK(ReadUint32(readBuffer2, offset) == poolOffset); <span class="comment">// offset_info</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    offset += sizeUint32;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    poolOffset += infoSize;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    CHECK(ReadUint32(readBuffer2, offset) == poolOffset); <span class="comment">// offset_hw_version</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    offset += sizeUint32;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    poolOffset += hardwareVersionSize;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    CHECK(ReadUint32(readBuffer2, offset) == poolOffset); <span class="comment">// offset_sw_version</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    offset += sizeUint32;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    poolOffset += softwareVersionSize;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    CHECK(ReadUint32(readBuffer2, offset) == poolOffset); <span class="comment">// offset_process_name</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    offset += sizeUint32;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    poolOffset += processNameSize;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    CHECK(ReadUint32(readBuffer2, offset) == poolOffset); <span class="comment">// offset_packet_version_table</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    offset += sizeUint32;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    CHECK(ReadUint32(readBuffer2, offset) == 0); <span class="comment">// reserved</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* readData2 = readBuffer2-&gt;GetReadableData();</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    offset += sizeUint32;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordflow">if</span> (infoSize)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    {</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        CHECK(strcmp(reinterpret_cast&lt;const char *&gt;(&amp;readData2[offset]),</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                                    arm::pipe::ARMNN_SOFTWARE_INFO.c_str()) == 0);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        offset += infoSize;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    }</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">if</span> (hardwareVersionSize)</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    {</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        CHECK(strcmp(reinterpret_cast&lt;const char *&gt;(&amp;readData2[offset]),</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                                    arm::pipe::ARMNN_HARDWARE_VERSION.c_str()) == 0);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        offset += hardwareVersionSize;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    }</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">if</span> (softwareVersionSize)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    {</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        CHECK(strcmp(reinterpret_cast&lt;const char *&gt;(&amp;readData2[offset]),</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                                    arm::pipe::ARMNN_SOFTWARE_VERSION.c_str()) == 0);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        offset += softwareVersionSize;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    }</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">if</span> (processNameSize)</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    {</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        CHECK(strcmp(reinterpret_cast&lt;const char *&gt;(&amp;readData2[offset]), GetProcessName().c_str()) == 0);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        offset += processNameSize;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    }</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">if</span> (packetEntries)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        uint32_t numberOfEntries = ReadUint32(readBuffer2, offset);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        CHECK((numberOfEntries &gt;&gt; 16) == packetEntries);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        offset += sizeUint32;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">for</span> (std::pair&lt;uint32_t, uint32_t&gt;&amp; packetVersion : packetVersions)</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        {</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            uint32_t readPacketId = ReadUint32(readBuffer2, offset);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            CHECK(packetVersion.first == readPacketId);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            offset += sizeUint32;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            uint32_t readVersion = ReadUint32(readBuffer2, offset);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            CHECK(packetVersion.second == readVersion);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            offset += sizeUint32;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        }</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    }</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    CHECK(offset == totalLength);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateDeviceRecordTest&quot;</span>)</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="comment">// Create a device for testing</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    uint16_t deviceUid = 27;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keyword">const</span> std::string deviceName = <span class="stringliteral">&quot;some_device&quot;</span>;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    uint16_t deviceCores = 3;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keyword">const</span> DevicePtr device = std::make_unique&lt;Device&gt;(deviceUid, deviceName, deviceCores);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="comment">// Create a device record</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    SendCounterPacket::DeviceRecord deviceRecord;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#a210600b9a259b46ae502cd48ffc56c8c">CreateDeviceRecordTest</a>(device, deviceRecord, errorMessage);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    CHECK(result);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    CHECK(errorMessage.empty());</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    CHECK(deviceRecord.size() == 6); <span class="comment">// Size in words: header [2] + device name [4]</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    uint16_t deviceRecordWord0[]</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    {</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(deviceRecord[0] &gt;&gt; 16),</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        static_cast&lt;uint16_t&gt;(deviceRecord[0])</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    };</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    CHECK(deviceRecordWord0[0] == deviceUid); <span class="comment">// uid</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    CHECK(deviceRecordWord0[1] == deviceCores); <span class="comment">// cores</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    CHECK(deviceRecord[1] == 8); <span class="comment">// name_offset</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    CHECK(deviceRecord[2] == deviceName.size() + 1); <span class="comment">// The length of the SWTrace string (name)</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    CHECK(std::memcmp(deviceRecord.data() + 3, deviceName.data(), deviceName.size()) == 0); <span class="comment">// name</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;}</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateInvalidDeviceRecordTest&quot;</span>)</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;{</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="comment">// Create a device for testing</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    uint16_t deviceUid = 27;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keyword">const</span> std::string deviceName = <span class="stringliteral">&quot;someâ¬Â£invalidâ¡device&quot;</span>;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    uint16_t deviceCores = 3;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keyword">const</span> DevicePtr device = std::make_unique&lt;Device&gt;(deviceUid, deviceName, deviceCores);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="comment">// Create a device record</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    SendCounterPacket::DeviceRecord deviceRecord;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#a210600b9a259b46ae502cd48ffc56c8c">CreateDeviceRecordTest</a>(device, deviceRecord, errorMessage);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    CHECK(!result);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    CHECK(!errorMessage.empty());</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    CHECK(deviceRecord.empty());</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;}</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateCounterSetRecordTest&quot;</span>)</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;{</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="comment">// Create a counter set for testing</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    uint16_t counterSetUid = 27;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">const</span> std::string counterSetName = <span class="stringliteral">&quot;some_counter_set&quot;</span>;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    uint16_t counterSetCount = 3421;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keyword">const</span> CounterSetPtr counterSet = std::make_unique&lt;CounterSet&gt;(counterSetUid, counterSetName, counterSetCount);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// Create a counter set record</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    SendCounterPacket::CounterSetRecord counterSetRecord;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#ae3d24bdc7d5c52a9ffad4089d05124a7">CreateCounterSetRecordTest</a>(counterSet, counterSetRecord, errorMessage);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    CHECK(result);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    CHECK(errorMessage.empty());</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    CHECK(counterSetRecord.size() == 8); <span class="comment">// Size in words: header [2] + counter set name [6]</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    uint16_t counterSetRecordWord0[]</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    {</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(counterSetRecord[0] &gt;&gt; 16),</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        static_cast&lt;uint16_t&gt;(counterSetRecord[0])</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    };</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    CHECK(counterSetRecordWord0[0] == counterSetUid); <span class="comment">// uid</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    CHECK(counterSetRecordWord0[1] == counterSetCount); <span class="comment">// cores</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    CHECK(counterSetRecord[1] == 8); <span class="comment">// name_offset</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    CHECK(counterSetRecord[2] == counterSetName.size() + 1); <span class="comment">// The length of the SWTrace string (name)</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    CHECK(std::memcmp(counterSetRecord.data() + 3, counterSetName.data(), counterSetName.size()) == 0); <span class="comment">// name</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;}</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateInvalidCounterSetRecordTest&quot;</span>)</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;{</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="comment">// Create a counter set for testing</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    uint16_t counterSetUid = 27;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keyword">const</span> std::string counterSetName = <span class="stringliteral">&quot;some invalid_counterâ¬Â£set&quot;</span>;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    uint16_t counterSetCount = 3421;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keyword">const</span> CounterSetPtr counterSet = std::make_unique&lt;CounterSet&gt;(counterSetUid, counterSetName, counterSetCount);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="comment">// Create a counter set record</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    SendCounterPacket::CounterSetRecord counterSetRecord;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#ae3d24bdc7d5c52a9ffad4089d05124a7">CreateCounterSetRecordTest</a>(counterSet, counterSetRecord, errorMessage);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    CHECK(!result);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    CHECK(!errorMessage.empty());</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    CHECK(counterSetRecord.empty());</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;}</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateEventRecordTest&quot;</span>)</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;{</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="comment">// Create a counter for testing</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    uint16_t counterUid = 7256;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    uint16_t maxCounterUid = 132;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    uint16_t deviceUid = 132;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    uint16_t counterSetUid = 4497;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    uint16_t counterClass = 1;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    uint16_t counterInterpolation = 1;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordtype">double</span> counterMultiplier = 1234.567f;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keyword">const</span> std::string counterName = <span class="stringliteral">&quot;some_valid_counter&quot;</span>;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keyword">const</span> std::string counterDescription = <span class="stringliteral">&quot;a_counter_for_testing&quot;</span>;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keyword">const</span> std::string counterUnits = <span class="stringliteral">&quot;Mrads2&quot;</span>;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="keyword">const</span> CounterPtr counter = std::make_unique&lt;Counter&gt;(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                                                         counterUid,</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                                                         maxCounterUid,</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                                                         counterClass,</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                                                         counterInterpolation,</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                                                         counterMultiplier,</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                                                         counterName,</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                                                         counterDescription,</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                                                         counterUnits,</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                                                         deviceUid,</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                                                         counterSetUid);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    ARM_PIPE_ASSERT(counter);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="comment">// Create an event record</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    SendCounterPacket::EventRecord eventRecord;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#ab87fa1168a364aa3a1629fa8986a6369">CreateEventRecordTest</a>(counter, eventRecord, errorMessage);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    CHECK(result);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    CHECK(errorMessage.empty());</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    CHECK(eventRecord.size() == 24); <span class="comment">// Size in words: header [8] + counter name [6] + description [7] + units [3]</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    uint16_t eventRecordWord0[]</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    {</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecord[0] &gt;&gt; 16),</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        static_cast&lt;uint16_t&gt;(eventRecord[0])</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    };</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    uint16_t eventRecordWord1[]</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    {</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecord[1] &gt;&gt; 16),</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        static_cast&lt;uint16_t&gt;(eventRecord[1])</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    };</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    uint16_t eventRecordWord2[]</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    {</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecord[2] &gt;&gt; 16),</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        static_cast&lt;uint16_t&gt;(eventRecord[2])</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    };</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    uint32_t eventRecordWord34[]</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    {</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        eventRecord[3],</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        eventRecord[4]</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    };</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    CHECK(eventRecordWord0[0] == maxCounterUid); <span class="comment">// max_counter_uid</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    CHECK(eventRecordWord0[1] == counterUid); <span class="comment">// counter_uid</span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    CHECK(eventRecordWord1[0] == deviceUid); <span class="comment">// device</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    CHECK(eventRecordWord1[1] == counterSetUid); <span class="comment">// counter_set</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    CHECK(eventRecordWord2[0] == counterClass); <span class="comment">// class</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    CHECK(eventRecordWord2[1] == counterInterpolation); <span class="comment">// interpolation</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    CHECK(std::memcmp(eventRecordWord34, &amp;counterMultiplier, <span class="keyword">sizeof</span>(counterMultiplier)) == 0); <span class="comment">// multiplier</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    ARM_PIPE_NO_CONVERSION_WARN_BEGIN</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    uint32_t eventRecordBlockSize = 8u * <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    uint32_t counterNameOffset = eventRecordBlockSize; <span class="comment">// The name is the first item in pool</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    uint32_t counterDescriptionOffset = counterNameOffset + <span class="comment">// Counter name offset</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                                        4u + <span class="comment">// Counter name length (uint32_t)</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                        counterName.size() + <span class="comment">// 18u</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                                        1u + <span class="comment">// Null-terminator</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                        1u; <span class="comment">// Rounding to the next word</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordtype">size_t</span> counterUnitsOffset = counterDescriptionOffset + <span class="comment">// Counter description offset</span></div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                                4u + <span class="comment">// Counter description length (uint32_t)</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                                counterDescription.size() + <span class="comment">// 21u</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                                1u + <span class="comment">// Null-terminator</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                                2u;  <span class="comment">// Rounding to the next word</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    ARM_PIPE_NO_CONVERSION_WARN_END</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    CHECK(eventRecord[5] == counterNameOffset); <span class="comment">// name_offset</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    CHECK(eventRecord[6] == counterDescriptionOffset); <span class="comment">// description_offset</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    CHECK(eventRecord[7] == counterUnitsOffset); <span class="comment">// units_offset</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="comment">// Offsets are relative to the start of the eventRecord</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keyword">auto</span> eventRecordPool = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(eventRecord.data());</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keywordtype">size_t</span> uint32_t_size = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="comment">// The length of the SWTrace string (name)</span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    CHECK(eventRecordPool[counterNameOffset] == counterName.size() + 1);</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="comment">// The counter name</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    CHECK(std::memcmp(eventRecordPool +</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                            counterNameOffset + <span class="comment">// Offset</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                            uint32_t_size <span class="comment">/* The length of the name */</span>,</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                            counterName.data(),</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                            counterName.size()) == 0); <span class="comment">// name</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="comment">// The null-terminator at the end of the name</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    CHECK(eventRecordPool[counterNameOffset + uint32_t_size + counterName.size()] == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="comment">// The length of the SWTrace string (description)</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    CHECK(eventRecordPool[counterDescriptionOffset] == counterDescription.size() + 1);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="comment">// The counter description</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    CHECK(std::memcmp(eventRecordPool +</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                            counterDescriptionOffset + <span class="comment">// Offset</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                            uint32_t_size <span class="comment">/* The length of the description */</span>,</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                            counterDescription.data(),</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                            counterDescription.size()) == 0); <span class="comment">// description</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="comment">// The null-terminator at the end of the description</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    CHECK(eventRecordPool[counterDescriptionOffset + uint32_t_size + counterDescription.size()] == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <span class="comment">// The length of the SWTrace namestring (units)</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    CHECK(eventRecordPool[counterUnitsOffset] == counterUnits.size() + 1);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="comment">// The counter units</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    CHECK(std::memcmp(eventRecordPool +</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                            counterUnitsOffset + <span class="comment">// Offset</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                            uint32_t_size <span class="comment">/* The length of the units */</span>,</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                            counterUnits.data(),</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                            counterUnits.size()) == 0); <span class="comment">// units</span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="comment">// The null-terminator at the end of the units</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    CHECK(eventRecordPool[counterUnitsOffset + uint32_t_size + counterUnits.size()] == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;}</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateEventRecordNoUnitsTest&quot;</span>)</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;{</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="comment">// Create a counter for testing</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    uint16_t counterUid = 44312;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    uint16_t maxCounterUid = 345;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    uint16_t deviceUid = 101;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    uint16_t counterSetUid = 34035;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    uint16_t counterClass = 0;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    uint16_t counterInterpolation = 1;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordtype">double</span> counterMultiplier = 4435.0023f;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keyword">const</span> std::string counterName = <span class="stringliteral">&quot;some_valid_counter&quot;</span>;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="keyword">const</span> std::string counterDescription = <span class="stringliteral">&quot;a_counter_for_testing&quot;</span>;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keyword">const</span> CounterPtr counter = std::make_unique&lt;Counter&gt;(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                                                         counterUid,</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                                                         maxCounterUid,</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                                                         counterClass,</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                                                         counterInterpolation,</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                                                         counterMultiplier,</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                                                         counterName,</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                                                         counterDescription,</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                                                         <span class="stringliteral">&quot;&quot;</span>,</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                                                         deviceUid,</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                                                         counterSetUid);</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    ARM_PIPE_ASSERT(counter);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="comment">// Create an event record</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    SendCounterPacket::EventRecord eventRecord;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#ab87fa1168a364aa3a1629fa8986a6369">CreateEventRecordTest</a>(counter, eventRecord, errorMessage);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    CHECK(result);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    CHECK(errorMessage.empty());</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    CHECK(eventRecord.size() == 21); <span class="comment">// Size in words: header [8] + counter name [6] + description [7]</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    uint16_t eventRecordWord0[]</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    {</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecord[0] &gt;&gt; 16),</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        static_cast&lt;uint16_t&gt;(eventRecord[0])</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    };</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    uint16_t eventRecordWord1[]</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    {</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecord[1] &gt;&gt; 16),</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        static_cast&lt;uint16_t&gt;(eventRecord[1])</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    };</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    uint16_t eventRecordWord2[]</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    {</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecord[2] &gt;&gt; 16),</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        static_cast&lt;uint16_t&gt;(eventRecord[2])</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    };</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    uint32_t eventRecordWord34[]</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    {</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        eventRecord[3],</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        eventRecord[4]</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    };</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    CHECK(eventRecordWord0[0] == maxCounterUid); <span class="comment">// max_counter_uid</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    CHECK(eventRecordWord0[1] == counterUid); <span class="comment">// counter_uid</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    CHECK(eventRecordWord1[0] == deviceUid); <span class="comment">// device</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    CHECK(eventRecordWord1[1] == counterSetUid); <span class="comment">// counter_set</span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    CHECK(eventRecordWord2[0] == counterClass); <span class="comment">// class</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    CHECK(eventRecordWord2[1] == counterInterpolation); <span class="comment">// interpolation</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    CHECK(std::memcmp(eventRecordWord34, &amp;counterMultiplier, <span class="keyword">sizeof</span>(counterMultiplier)) == 0); <span class="comment">// multiplier</span></div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    ARM_PIPE_NO_CONVERSION_WARN_BEGIN</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    uint32_t eventRecordBlockSize = 8u * <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    uint32_t counterNameOffset = eventRecordBlockSize; <span class="comment">// The name is the first item in pool</span></div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    uint32_t counterDescriptionOffset = counterNameOffset + <span class="comment">// Counter name offset</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                                        4u + <span class="comment">// Counter name length (uint32_t)</span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                                        counterName.size() + <span class="comment">// 18u</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                                        1u + <span class="comment">// Null-terminator</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                                        1u; <span class="comment">// Rounding to the next word</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    ARM_PIPE_NO_CONVERSION_WARN_END</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    CHECK(eventRecord[5] == counterNameOffset); <span class="comment">// name_offset</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    CHECK(eventRecord[6] == counterDescriptionOffset); <span class="comment">// description_offset</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    CHECK(eventRecord[7] == 0); <span class="comment">// units_offset</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <span class="comment">// Offsets are relative to the start of the eventRecord</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keyword">auto</span> eventRecordPool = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(eventRecord.data());</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <span class="keywordtype">size_t</span> uint32_t_size = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <span class="comment">// The length of the SWTrace string (name)</span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    CHECK(eventRecordPool[counterNameOffset] == counterName.size() + 1);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <span class="comment">// The counter name</span></div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    CHECK(std::memcmp(eventRecordPool +</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                            counterNameOffset + <span class="comment">// Offset</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                            uint32_t_size, <span class="comment">// The length of the name</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                            counterName.data(),</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                            counterName.size()) == 0); <span class="comment">// name</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="comment">// The null-terminator at the end of the name</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    CHECK(eventRecordPool[counterNameOffset + uint32_t_size + counterName.size()] == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <span class="comment">// The length of the SWTrace string (description)</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    CHECK(eventRecordPool[counterDescriptionOffset] == counterDescription.size() + 1);</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="comment">// The counter description</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    CHECK(std::memcmp(eventRecordPool +</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                            counterDescriptionOffset + <span class="comment">// Offset</span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                            uint32_t_size, <span class="comment">// The length of the description</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                            counterDescription.data(),</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                            counterDescription.size()) == 0); <span class="comment">// description</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <span class="comment">// The null-terminator at the end of the description</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    CHECK(eventRecordPool[counterDescriptionOffset + uint32_t_size + counterDescription.size()] == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;}</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateInvalidEventRecordTest1&quot;</span>)</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;{</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="comment">// Create a counter for testing</span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    uint16_t counterUid = 7256;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    uint16_t maxCounterUid = 132;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    uint16_t deviceUid = 132;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    uint16_t counterSetUid = 4497;</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    uint16_t counterClass = 1;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    uint16_t counterInterpolation = 1;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keywordtype">double</span> counterMultiplier = 1234.567f;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="keyword">const</span> std::string counterName = <span class="stringliteral">&quot;some_invalid_counter Â£Â£Â£&quot;</span>; <span class="comment">// Invalid name</span></div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    <span class="keyword">const</span> std::string counterDescription = <span class="stringliteral">&quot;a_counter_for_testing&quot;</span>;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    <span class="keyword">const</span> std::string counterUnits = <span class="stringliteral">&quot;Mrads2&quot;</span>;</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="keyword">const</span> CounterPtr counter = std::make_unique&lt;Counter&gt;(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                                                         counterUid,</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                                                         maxCounterUid,</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                                                         counterClass,</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                                                         counterInterpolation,</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                                                         counterMultiplier,</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                                                         counterName,</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                                                         counterDescription,</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                                                         counterUnits,</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                                                         deviceUid,</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                                                         counterSetUid);</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    ARM_PIPE_ASSERT(counter);</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="comment">// Create an event record</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    SendCounterPacket::EventRecord eventRecord;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#ab87fa1168a364aa3a1629fa8986a6369">CreateEventRecordTest</a>(counter, eventRecord, errorMessage);</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    CHECK(!result);</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    CHECK(!errorMessage.empty());</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    CHECK(eventRecord.empty());</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;}</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateInvalidEventRecordTest2&quot;</span>)</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;{</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <span class="comment">// Create a counter for testing</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    uint16_t counterUid = 7256;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    uint16_t maxCounterUid = 132;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    uint16_t deviceUid = 132;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    uint16_t counterSetUid = 4497;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    uint16_t counterClass = 1;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    uint16_t counterInterpolation = 1;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="keywordtype">double</span> counterMultiplier = 1234.567f;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <span class="keyword">const</span> std::string counterName = <span class="stringliteral">&quot;some_invalid_counter&quot;</span>;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <span class="keyword">const</span> std::string counterDescription = <span class="stringliteral">&quot;an invalid dâ¬scription&quot;</span>; <span class="comment">// Invalid description</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <span class="keyword">const</span> std::string counterUnits = <span class="stringliteral">&quot;Mrads2&quot;</span>;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keyword">const</span> CounterPtr counter = std::make_unique&lt;Counter&gt;(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                                                         counterUid,</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                                                         maxCounterUid,</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                                                         counterClass,</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                                                         counterInterpolation,</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                                                         counterMultiplier,</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                                                         counterName,</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;                                                         counterDescription,</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;                                                         counterUnits,</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;                                                         deviceUid,</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;                                                         counterSetUid);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    ARM_PIPE_ASSERT(counter);</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <span class="comment">// Create an event record</span></div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    SendCounterPacket::EventRecord eventRecord;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#ab87fa1168a364aa3a1629fa8986a6369">CreateEventRecordTest</a>(counter, eventRecord, errorMessage);</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    CHECK(!result);</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    CHECK(!errorMessage.empty());</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    CHECK(eventRecord.empty());</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;}</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateInvalidEventRecordTest3&quot;</span>)</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;{</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <span class="comment">// Create a counter for testing</span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    uint16_t counterUid = 7256;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    uint16_t maxCounterUid = 132;</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    uint16_t deviceUid = 132;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    uint16_t counterSetUid = 4497;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    uint16_t counterClass = 1;</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    uint16_t counterInterpolation = 1;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <span class="keywordtype">double</span> counterMultiplier = 1234.567f;</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <span class="keyword">const</span> std::string counterName = <span class="stringliteral">&quot;some_invalid_counter&quot;</span>;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <span class="keyword">const</span> std::string counterDescription = <span class="stringliteral">&quot;a valid description&quot;</span>;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="keyword">const</span> std::string counterUnits = <span class="stringliteral">&quot;Mrad s2&quot;</span>; <span class="comment">// Invalid units</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <span class="keyword">const</span> CounterPtr counter = std::make_unique&lt;Counter&gt;(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;                                                         counterUid,</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                                                         maxCounterUid,</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                                                         counterClass,</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                                                         counterInterpolation,</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                                                         counterMultiplier,</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                                                         counterName,</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;                                                         counterDescription,</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                                                         counterUnits,</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                                                         deviceUid,</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                                                         counterSetUid);</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    ARM_PIPE_ASSERT(counter);</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <span class="comment">// Create an event record</span></div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    SendCounterPacket::EventRecord eventRecord;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#ab87fa1168a364aa3a1629fa8986a6369">CreateEventRecordTest</a>(counter, eventRecord, errorMessage);</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    CHECK(!result);</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    CHECK(!errorMessage.empty());</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    CHECK(eventRecord.empty());</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;}</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateCategoryRecordTest&quot;</span>)</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;{</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <span class="comment">// Create a category for testing</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <span class="keyword">const</span> std::string categoryName = <span class="stringliteral">&quot;some_category&quot;</span>;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <span class="keyword">const</span> CategoryPtr category = std::make_unique&lt;Category&gt;(categoryName);</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    ARM_PIPE_ASSERT(category);</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    category-&gt;m_Counters = { 11u, 23u, 5670u };</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <span class="comment">// Create a collection of counters</span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    Counters counters;</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    counters.insert(std::make_pair&lt;uint16_t, CounterPtr&gt;(11,</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;                                                         CounterPtr(<span class="keyword">new</span> Counter(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                                                                                0,</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                                                                                11,</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                                                                                0,</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                                                                                0,</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                                                                                534.0003f,</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                                                                                <span class="stringliteral">&quot;counter1&quot;</span>,</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                                                                                <span class="stringliteral">&quot;the first counter&quot;</span>,</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                                                                                <span class="stringliteral">&quot;millipi2&quot;</span>,</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                                                                                0,</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                                                                                0))));</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    counters.insert(std::make_pair&lt;uint16_t, CounterPtr&gt;(23,</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                                                         CounterPtr(<span class="keyword">new</span> Counter(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                                                                                1,</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                                                                                23,</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                                                                                0,</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                                                                                1,</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                                                                                534.0003f,</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                                                                                <span class="stringliteral">&quot;this is counter 2&quot;</span>,</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                                                                                <span class="stringliteral">&quot;the second counter&quot;</span>,</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                                                                                <span class="stringliteral">&quot;&quot;</span>,</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                                                                                0,</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                                                                                0))));</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    counters.insert(std::make_pair&lt;uint16_t, CounterPtr&gt;(5670,</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                                                         CounterPtr(<span class="keyword">new</span> Counter(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                                                                                2,</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                                                                                5670,</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                                                                                0,</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                                                                                0,</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                                                                                534.0003f,</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                                                                                <span class="stringliteral">&quot;and this is number 3&quot;</span>,</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                                                                                <span class="stringliteral">&quot;the third counter&quot;</span>,</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                                                                                <span class="stringliteral">&quot;blah_per_second&quot;</span>,</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                                                                                0,</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                                                                                0))));</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    Counter* counter1 = counters.find(11)-&gt;second.get();</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    Counter* counter2 = counters.find(23)-&gt;second.get();</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    Counter* counter3 = counters.find(5670)-&gt;second.get();</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    ARM_PIPE_ASSERT(counter1);</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    ARM_PIPE_ASSERT(counter2);</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    ARM_PIPE_ASSERT(counter3);</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    uint16_t categoryEventCount = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;uint16_t&gt;(counters.size());</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    <span class="comment">// Create a category record</span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    SendCounterPacket::CategoryRecord categoryRecord;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#acb17c17dafb058a74ebb61bf680aea36">CreateCategoryRecordTest</a>(category, counters, categoryRecord, errorMessage);</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    CHECK(result);</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    CHECK(errorMessage.empty());</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    CHECK(categoryRecord.size() == 79); <span class="comment">// Size in words: header [3] + event pointer table [3] +</span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                                              <span class="comment">//                category name [5] + event records [68 = 22 + 20 + 26]</span></div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    uint16_t categoryRecordWord1[]</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    {</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;        <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(categoryRecord[0] &gt;&gt; 16),</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;        static_cast&lt;uint16_t&gt;(categoryRecord[0])</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    };</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    CHECK(categoryRecordWord1[0] == categoryEventCount); <span class="comment">// event_count</span></div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    CHECK(categoryRecordWord1[1] == 0); <span class="comment">// reserved</span></div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    <span class="keywordtype">size_t</span> uint32_t_size = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    ARM_PIPE_NO_CONVERSION_WARN_BEGIN</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    uint32_t categoryRecordBlockSize = 3u * uint32_t_size;</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    uint32_t eventPointerTableOffset = categoryRecordBlockSize; <span class="comment">// The event pointer table is the first item in pool</span></div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    uint32_t categoryNameOffset = eventPointerTableOffset + <span class="comment">// Event pointer table offset</span></div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                                  categoryEventCount * uint32_t_size; <span class="comment">// The size of the event pointer table</span></div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    ARM_PIPE_NO_CONVERSION_WARN_END</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    CHECK(categoryRecord[1] == eventPointerTableOffset); <span class="comment">// event_pointer_table_offset</span></div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    CHECK(categoryRecord[2] == categoryNameOffset); <span class="comment">// name_offset</span></div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    <span class="comment">// Offsets are relative to the start of the category record</span></div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    <span class="keyword">auto</span> categoryRecordPool = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(categoryRecord.data());</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    <span class="comment">// The event pointer table</span></div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    uint32_t eventRecord0Offset = categoryRecordPool[eventPointerTableOffset + 0 * uint32_t_size];</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    uint32_t eventRecord1Offset = categoryRecordPool[eventPointerTableOffset + 1 * uint32_t_size];</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    uint32_t eventRecord2Offset = categoryRecordPool[eventPointerTableOffset + 2 * uint32_t_size];</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    CHECK(eventRecord0Offset == 32);</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    CHECK(eventRecord1Offset == 120);</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    CHECK(eventRecord2Offset == 200);</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    <span class="comment">// The length of the SWTrace namestring (name)</span></div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    CHECK(categoryRecordPool[categoryNameOffset] == categoryName.size() + 1);</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    <span class="comment">// The category name</span></div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    CHECK(std::memcmp(categoryRecordPool +</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;                            categoryNameOffset + <span class="comment">// Offset</span></div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;                            uint32_t_size, <span class="comment">// The length of the name</span></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;                            categoryName.data(),</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;                            categoryName.size()) == 0); <span class="comment">// name</span></div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="comment">// The null-terminator at the end of the name</span></div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    CHECK(categoryRecordPool[categoryNameOffset + uint32_t_size + categoryName.size()] == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <span class="comment">// For brevity, checking only the UIDs, max counter UIDs and names of the counters in the event records,</span></div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="comment">// as the event records already have a number of unit tests dedicated to them</span></div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    <span class="comment">// Counter1 UID and max counter UID</span></div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    uint16_t eventRecord0Word0[2] = { 0u, 0u };</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    std::memcpy(eventRecord0Word0, categoryRecordPool + categoryRecordBlockSize + eventRecord0Offset,</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;                <span class="keyword">sizeof</span>(eventRecord0Word0));</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    CHECK(eventRecord0Word0[0] == counter1-&gt;m_Uid);</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    CHECK(eventRecord0Word0[1] == counter1-&gt;m_MaxCounterUid);</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    <span class="comment">// Counter1 name</span></div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    uint32_t counter1NameOffset = 0;</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    std::memcpy(&amp;counter1NameOffset, categoryRecordPool  + eventRecord0Offset + 5u * uint32_t_size, uint32_t_size);</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    CHECK(counter1NameOffset == 0);</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    <span class="comment">// The length of the SWTrace string (name)</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    CHECK(categoryRecordPool[eventRecord0Offset +       <span class="comment">// Offset to the event record</span></div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                                   categoryRecordBlockSize  + <span class="comment">// Offset to the end of the category record block</span></div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;                                   8u * uint32_t_size +       <span class="comment">// Offset to the event record pool</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;                                   counter1NameOffset         <span class="comment">// Offset to the name of the counter</span></div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;                                  ] == counter1-&gt;m_Name.size() + 1); <span class="comment">// The length of the name including the</span></div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;                                                                     <span class="comment">// null-terminator</span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    <span class="comment">// The counter1 name</span></div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    CHECK(std::memcmp(categoryRecordPool +      <span class="comment">// The beginning of the category pool</span></div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;                            categoryRecordBlockSize + <span class="comment">// Offset to the end of the category record block</span></div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;                            eventRecord0Offset +      <span class="comment">// Offset to the event record</span></div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                            8u * uint32_t_size +      <span class="comment">// Offset to the event record pool</span></div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                            counter1NameOffset +      <span class="comment">// Offset to the name of the counter</span></div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                            uint32_t_size,            <span class="comment">// The length of the name</span></div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                            counter1-&gt;m_Name.data(),</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                            counter1-&gt;m_Name.size()) == 0); <span class="comment">// name</span></div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    <span class="comment">// The null-terminator at the end of the counter1 name</span></div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    CHECK(categoryRecordPool[eventRecord0Offset +      <span class="comment">// Offset to the event record</span></div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                                   categoryRecordBlockSize + <span class="comment">// Offset to the end of the category record block</span></div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                                   8u * uint32_t_size +      <span class="comment">// Offset to the event record pool</span></div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                                   counter1NameOffset +      <span class="comment">// Offset to the name of the counter</span></div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                                   uint32_t_size +           <span class="comment">// The length of the name</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;                                   counter1-&gt;m_Name.size()   <span class="comment">// The name of the counter</span></div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                                   ] == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    <span class="comment">// Counter2 name</span></div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    uint32_t counter2NameOffset = 0;</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    std::memcpy(&amp;counter2NameOffset, categoryRecordPool +</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;                                     categoryRecordBlockSize +</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                                     eventRecord1Offset +</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                                     5u * uint32_t_size,</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                                     uint32_t_size);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    CHECK(counter2NameOffset == 8u * uint32_t_size );</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    <span class="comment">// The length of the SWTrace string (name)</span></div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    CHECK(categoryRecordPool[eventRecord1Offset + <span class="comment">// Offset to the event record</span></div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                                   categoryRecordBlockSize +</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                                   counter2NameOffset   <span class="comment">// Offset to the name of the counter</span></div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;                                  ] == counter2-&gt;m_Name.size() + 1); <span class="comment">// The length of the name including the</span></div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;                                                                     <span class="comment">// null-terminator</span></div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;    <span class="comment">// The counter2 name</span></div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    CHECK(std::memcmp(categoryRecordPool +      <span class="comment">// The beginning of the category pool</span></div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;                            categoryRecordBlockSize + <span class="comment">// Offset to the end of the category record block</span></div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                            eventRecord1Offset +      <span class="comment">// Offset to the event record</span></div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                            counter2NameOffset +      <span class="comment">// Offset to the name of the counter</span></div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;                            uint32_t_size,            <span class="comment">// The length of the name</span></div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                            counter2-&gt;m_Name.data(),</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                            counter2-&gt;m_Name.size()) == 0); <span class="comment">// name</span></div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    <span class="comment">// The null-terminator at the end of the counter2 name</span></div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    CHECK(categoryRecordPool[eventRecord1Offset +      <span class="comment">// Offset to the event record</span></div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;                                   categoryRecordBlockSize + <span class="comment">// Offset to the end of the category record block</span></div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                                   counter2NameOffset +      <span class="comment">// Offset to the name of the counter</span></div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                                   uint32_t_size +           <span class="comment">// The length of the name</span></div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                                   counter2-&gt;m_Name.size()   <span class="comment">// The name of the counter</span></div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                                   ] == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    <span class="comment">// Counter3 name</span></div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    uint32_t counter3NameOffset = 0;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    std::memcpy(&amp;counter3NameOffset, categoryRecordPool + eventRecord2Offset + 5u * uint32_t_size, uint32_t_size);</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    CHECK(counter3NameOffset == 0);</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    <span class="comment">// The length of the SWTrace string (name)</span></div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    CHECK(categoryRecordPool[eventRecord2Offset + <span class="comment">// Offset to the event record</span></div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;                                   categoryRecordBlockSize +</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                                   8u * uint32_t_size + <span class="comment">// Offset to the event record pool</span></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                                   counter3NameOffset   <span class="comment">// Offset to the name of the counter</span></div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                                  ] == counter3-&gt;m_Name.size() + 1); <span class="comment">// The length of the name including the</span></div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                                                                     <span class="comment">// null-terminator</span></div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    <span class="comment">// The counter3 name</span></div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    CHECK(std::memcmp(categoryRecordPool + <span class="comment">// The beginning of the category pool</span></div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;                            categoryRecordBlockSize +</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;                            eventRecord2Offset + <span class="comment">// Offset to the event record</span></div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                            8u * uint32_t_size + <span class="comment">// Offset to the event record pool</span></div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                            counter3NameOffset + <span class="comment">// Offset to the name of the counter</span></div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                            uint32_t_size,       <span class="comment">// The length of the name</span></div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;                            counter3-&gt;m_Name.data(),</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;                            counter3-&gt;m_Name.size()) == 0); <span class="comment">// name</span></div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;    <span class="comment">// The null-terminator at the end of the counter3 name</span></div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    CHECK(categoryRecordPool[eventRecord2Offset +    <span class="comment">// Offset to the event record</span></div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                                   categoryRecordBlockSize +</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                                   8u * uint32_t_size +    <span class="comment">// Offset to the event record pool</span></div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;                                   counter3NameOffset +    <span class="comment">// Offset to the name of the counter</span></div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;                                   uint32_t_size +         <span class="comment">// The length of the name</span></div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;                                   counter3-&gt;m_Name.size() <span class="comment">// The name of the counter</span></div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;                                   ] == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;}</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateInvalidCategoryRecordTest1&quot;</span>)</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;{</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    <span class="comment">// Create a category for testing</span></div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    <span class="keyword">const</span> std::string categoryName = <span class="stringliteral">&quot;some invalid category&quot;</span>;</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="keyword">const</span> CategoryPtr category = std::make_unique&lt;Category&gt;(categoryName);</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    CHECK(category);</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <span class="comment">// Create a category record</span></div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    Counters counters;</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    SendCounterPacket::CategoryRecord categoryRecord;</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#acb17c17dafb058a74ebb61bf680aea36">CreateCategoryRecordTest</a>(category, counters, categoryRecord, errorMessage);</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    CHECK(!result);</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    CHECK(!errorMessage.empty());</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    CHECK(categoryRecord.empty());</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;}</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateInvalidCategoryRecordTest2&quot;</span>)</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;{</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(0);</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">SendCounterPacketTest</a> sendCounterPacketTest(mockBuffer);</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <span class="comment">// Create a category for testing</span></div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    <span class="keyword">const</span> std::string categoryName = <span class="stringliteral">&quot;some_category&quot;</span>;</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    <span class="keyword">const</span> CategoryPtr category = std::make_unique&lt;Category&gt;(categoryName);</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    CHECK(category);</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;    category-&gt;m_Counters = { 11u, 23u, 5670u };</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    <span class="comment">// Create a collection of counters</span></div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    Counters counters;</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    counters.insert(std::make_pair&lt;uint16_t, CounterPtr&gt;(11,</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;                                                         CounterPtr(<span class="keyword">new</span> Counter(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                                                                                11,</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                                                                                1234,</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                                                                                0,</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;                                                                                1,</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;                                                                                534.0003f,</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                                                                                <span class="stringliteral">&quot;countâ¬r1&quot;</span>, <span class="comment">// Invalid name</span></div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;                                                                                <span class="stringliteral">&quot;the first counter&quot;</span>,</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;                                                                                <span class="stringliteral">&quot;millipi2&quot;</span>,</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;                                                                                0,</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;                                                                                0))));</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    Counter* counter1 = counters.find(11)-&gt;second.get();</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    CHECK(counter1);</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    <span class="comment">// Create a category record</span></div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    SendCounterPacket::CategoryRecord categoryRecord;</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <span class="keywordtype">bool</span> result = sendCounterPacketTest.<a class="code" href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#acb17c17dafb058a74ebb61bf680aea36">CreateCategoryRecordTest</a>(category, counters, categoryRecord, errorMessage);</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    CHECK(!result);</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;    CHECK(!errorMessage.empty());</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    CHECK(categoryRecord.empty());</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;}</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendCounterDirectoryPacketTest1&quot;</span>)</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;{</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    <span class="comment">// The counter directory used for testing</span></div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    CounterDirectory counterDirectory;</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <span class="comment">// Register a device</span></div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    <span class="keyword">const</span> std::string device1Name = <span class="stringliteral">&quot;device1&quot;</span>;</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    <span class="keyword">const</span> Device* device1 = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    CHECK_NOTHROW(device1 = counterDirectory.RegisterDevice(device1Name, 3));</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    CHECK(counterDirectory.GetDeviceCount() == 1);</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    CHECK(device1);</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <span class="comment">// Register a device</span></div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    <span class="keyword">const</span> std::string device2Name = <span class="stringliteral">&quot;device2&quot;</span>;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    <span class="keyword">const</span> Device* device2 = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    CHECK_NOTHROW(device2 = counterDirectory.RegisterDevice(device2Name));</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    CHECK(counterDirectory.GetDeviceCount() == 2);</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    CHECK(device2);</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    <span class="comment">// Buffer with not enough space</span></div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(10);</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    SendCounterPacket sendCounterPacket(mockBuffer,</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    CHECK_THROWS_AS(sendCounterPacket.SendCounterDirectoryPacket(counterDirectory),</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;                      BufferExhaustion);</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;}</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendCounterDirectoryPacketTest2&quot;</span>)</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;{</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    <span class="comment">// The counter directory used for testing</span></div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    CounterDirectory counterDirectory;</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    <span class="comment">// Register a device</span></div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    <span class="keyword">const</span> std::string device1Name = <span class="stringliteral">&quot;device1&quot;</span>;</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    <span class="keyword">const</span> Device* device1 = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;    CHECK_NOTHROW(device1 = counterDirectory.RegisterDevice(device1Name, 3));</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    CHECK(counterDirectory.GetDeviceCount() == 1);</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    CHECK(device1);</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    <span class="comment">// Register a device</span></div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    <span class="keyword">const</span> std::string device2Name = <span class="stringliteral">&quot;device2&quot;</span>;</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    <span class="keyword">const</span> Device* device2 = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    CHECK_NOTHROW(device2 = counterDirectory.RegisterDevice(device2Name));</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    CHECK(counterDirectory.GetDeviceCount() == 2);</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    CHECK(device2);</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    <span class="comment">// Register a counter set</span></div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    <span class="keyword">const</span> std::string counterSet1Name = <span class="stringliteral">&quot;counterset1&quot;</span>;</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <span class="keyword">const</span> CounterSet* counterSet1 = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    CHECK_NOTHROW(counterSet1 = counterDirectory.RegisterCounterSet(counterSet1Name));</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    CHECK(counterDirectory.GetCounterSetCount() == 1);</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    CHECK(counterSet1);</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <span class="comment">// Register a category associated to &quot;device1&quot; and &quot;counterset1&quot;</span></div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    <span class="keyword">const</span> std::string category1Name = <span class="stringliteral">&quot;category1&quot;</span>;</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    <span class="keyword">const</span> Category* category1 = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    CHECK_NOTHROW(category1 = counterDirectory.RegisterCategory(category1Name));</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    CHECK(counterDirectory.GetCategoryCount() == 1);</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    CHECK(category1);</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    <span class="comment">// Register a category not associated to &quot;device2&quot; but no counter set</span></div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    <span class="keyword">const</span> std::string category2Name = <span class="stringliteral">&quot;category2&quot;</span>;</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    <span class="keyword">const</span> Category* category2 = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    CHECK_NOTHROW(category2 = counterDirectory.RegisterCategory(category2Name));</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    CHECK(counterDirectory.GetCategoryCount() == 2);</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    CHECK(category2);</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    uint16_t numberOfCores = 4;</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    <span class="comment">// Register a counter associated to &quot;category1&quot;</span></div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    <span class="keyword">const</span> Counter* counter1 = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    CHECK_NOTHROW(counter1 = counterDirectory.RegisterCounter(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;                                                              0,</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;                                                              category1Name,</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;                                                              0,</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;                                                              1,</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;                                                              123.45f,</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;                                                              <span class="stringliteral">&quot;counter1&quot;</span>,</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;                                                              <span class="stringliteral">&quot;counter1description&quot;</span>,</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;                                                              std::string(<span class="stringliteral">&quot;counter1units&quot;</span>),</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;                                                              numberOfCores));</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;    CHECK(counterDirectory.GetCounterCount() == 4);</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    CHECK(counter1);</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    <span class="comment">// Register a counter associated to &quot;category1&quot;</span></div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    <span class="keyword">const</span> Counter* counter2 = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    CHECK_NOTHROW(counter2 = counterDirectory.RegisterCounter(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;                                                              4,</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;                                                              category1Name,</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;                                                              1,</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;                                                              0,</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;                                                              330.1245656765f,</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;                                                              <span class="stringliteral">&quot;counter2&quot;</span>,</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;                                                              <span class="stringliteral">&quot;counter2description&quot;</span>,</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;                                                              std::string(<span class="stringliteral">&quot;counter2units&quot;</span>),</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;                                                              arm::pipe::EmptyOptional(),</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;                                                              device2-&gt;m_Uid,</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;                                                              0));</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;    CHECK(counterDirectory.GetCounterCount() == 5);</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    CHECK(counter2);</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;    <span class="comment">// Register a counter associated to &quot;category2&quot;</span></div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;    <span class="keyword">const</span> Counter* counter3 = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;    CHECK_NOTHROW(counter3 = counterDirectory.RegisterCounter(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;                                                              5,</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                                                              category2Name,</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;                                                              1,</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;                                                              1,</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;                                                              0.0000045399f,</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;                                                              <span class="stringliteral">&quot;counter3&quot;</span>,</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;                                                              <span class="stringliteral">&quot;counter3description&quot;</span>,</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;                                                              arm::pipe::EmptyOptional(),</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;                                                              numberOfCores,</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;                                                              device2-&gt;m_Uid,</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;                                                              counterSet1-&gt;m_Uid));</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    CHECK(counterDirectory.GetCounterCount() == 9);</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    CHECK(counter3);</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;    <span class="comment">// Buffer with enough space</span></div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(1024);</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    SendCounterPacket sendCounterPacket(mockBuffer,</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;    CHECK_NOTHROW(sendCounterPacket.SendCounterDirectoryPacket(counterDirectory));</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    <span class="keyword">auto</span> readBuffer = mockBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    <span class="comment">// Check the packet header</span></div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    <span class="keyword">const</span> uint32_t packetHeaderWord0 = ReadUint32(readBuffer, 0);</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    <span class="keyword">const</span> uint32_t packetHeaderWord1 = ReadUint32(readBuffer, 4);</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    CHECK(((packetHeaderWord0 &gt;&gt; 26) &amp; 0x3F) == 0);  <span class="comment">// packet_family</span></div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    CHECK(((packetHeaderWord0 &gt;&gt; 16) &amp; 0x3FF) == 2); <span class="comment">// packet_id</span></div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;    CHECK(packetHeaderWord1 == 432);                 <span class="comment">// data_length</span></div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    <span class="comment">// Check the body header</span></div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;    <span class="keyword">const</span> uint32_t bodyHeaderWord0 = ReadUint32(readBuffer,  8);</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;    <span class="keyword">const</span> uint32_t bodyHeaderWord1 = ReadUint32(readBuffer, 12);</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    <span class="keyword">const</span> uint32_t bodyHeaderWord2 = ReadUint32(readBuffer, 16);</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <span class="keyword">const</span> uint32_t bodyHeaderWord3 = ReadUint32(readBuffer, 20);</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    <span class="keyword">const</span> uint32_t bodyHeaderWord4 = ReadUint32(readBuffer, 24);</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    <span class="keyword">const</span> uint32_t bodyHeaderWord5 = ReadUint32(readBuffer, 28);</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <span class="keyword">const</span> uint16_t deviceRecordCount     = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(bodyHeaderWord0 &gt;&gt; 16);</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    <span class="keyword">const</span> uint16_t counterSetRecordCount = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(bodyHeaderWord2 &gt;&gt; 16);</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    <span class="keyword">const</span> uint16_t categoryRecordCount   = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(bodyHeaderWord4 &gt;&gt; 16);</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;    CHECK(deviceRecordCount == 2);                      <span class="comment">// device_records_count</span></div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    CHECK(bodyHeaderWord1 == bodyHeaderSize * 4);           <span class="comment">// device_records_pointer_table_offset</span></div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    CHECK(counterSetRecordCount == 1);                  <span class="comment">// counter_set_count</span></div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    CHECK(bodyHeaderWord3 == 8 + bodyHeaderSize * 4);       <span class="comment">// counter_set_pointer_table_offset</span></div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    CHECK(categoryRecordCount == 2);                    <span class="comment">// categories_count</span></div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    CHECK(bodyHeaderWord5 == 12 + bodyHeaderSize * 4);      <span class="comment">// categories_pointer_table_offset</span></div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    <span class="comment">// Check the device records pointer table</span></div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    <span class="keyword">const</span> uint32_t deviceRecordOffset0 = ReadUint32(readBuffer, 32);</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;    <span class="keyword">const</span> uint32_t deviceRecordOffset1 = ReadUint32(readBuffer, 36);</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    CHECK(deviceRecordOffset0 == 20); <span class="comment">// Device record offset for &quot;device1&quot;</span></div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    CHECK(deviceRecordOffset1 == 40); <span class="comment">// Device record offset for &quot;device2&quot;</span></div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    <span class="comment">// Check the counter set pointer table</span></div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    <span class="keyword">const</span> uint32_t counterSetRecordOffset0 = ReadUint32(readBuffer, 40);</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    CHECK(counterSetRecordOffset0 == 52); <span class="comment">// Counter set record offset for &quot;counterset1&quot;</span></div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;    <span class="comment">// Check the category pointer table</span></div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    <span class="keyword">const</span> uint32_t categoryRecordOffset0 = ReadUint32(readBuffer, 44);</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    <span class="keyword">const</span> uint32_t categoryRecordOffset1 = ReadUint32(readBuffer, 48);</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    CHECK(categoryRecordOffset0 ==  72); <span class="comment">// Category record offset for &quot;category1&quot;</span></div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;    CHECK(categoryRecordOffset1 == 176); <span class="comment">// Category record offset for &quot;category2&quot;</span></div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    <span class="comment">// Get the device record pool offset</span></div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    <span class="keyword">const</span> uint32_t uint32_t_size = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;    <span class="keyword">const</span> uint32_t packetHeaderSize = 2u * uint32_t_size;</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    <span class="comment">// Device record structure/collection used for testing</span></div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    <span class="keyword">struct </span>DeviceRecord</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    {</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;        uint16_t    uid;</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;        uint16_t    cores;</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;        uint32_t    name_offset;</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;        uint32_t    name_length;</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;        std::string name;</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    };</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    std::vector&lt;DeviceRecord&gt; deviceRecords;</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    <span class="keyword">const</span> uint32_t deviceRecordsPointerTableOffset = packetHeaderSize +</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;                                                     bodyHeaderWord1;     <span class="comment">// device_records_pointer_table_offset</span></div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* readData = readBuffer-&gt;GetReadableData();</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    uint32_t offset = 0;</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    std::vector&lt;uint32_t&gt; data(800);</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; 800; i+=uint32_t_size)</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    {</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;        data[i] = ReadUint32(readBuffer, offset);</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;        offset += uint32_t_size;</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    }</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    std::vector&lt;uint32_t&gt; deviceRecordOffsets(deviceRecordCount);</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;     offset = deviceRecordsPointerTableOffset;</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; deviceRecordCount; ++i)</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;    {</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;        <span class="comment">// deviceRecordOffset is relative to the start of the deviceRecordsPointerTable</span></div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;        deviceRecordOffsets[i] = ReadUint32(readBuffer, offset) + deviceRecordsPointerTableOffset;</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;        offset += uint32_t_size;</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    }</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; deviceRecordCount; i++)</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    {</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;        <span class="comment">// Collect the data for the device record</span></div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;        <span class="keyword">const</span> uint32_t deviceRecordWord0 = ReadUint32(readBuffer, deviceRecordOffsets[i] + 0 * uint32_t_size);</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;        <span class="keyword">const</span> uint32_t deviceRecordWord1 = ReadUint32(readBuffer, deviceRecordOffsets[i] + 1 * uint32_t_size);</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;        DeviceRecord deviceRecord;</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;        deviceRecord.uid = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(deviceRecordWord0 &gt;&gt; 16); <span class="comment">// uid</span></div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;        deviceRecord.cores = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(deviceRecordWord0);     <span class="comment">// cores</span></div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;        deviceRecord.name_offset = deviceRecordWord1;                      <span class="comment">// name_offset</span></div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        uint32_t deviceRecordPoolOffset = deviceRecordOffsets[i] +                  <span class="comment">// Packet body offset</span></div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;                                          deviceRecord.name_offset; <span class="comment">// Device name offset</span></div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;        uint32_t deviceRecordNameLength = ReadUint32(readBuffer, deviceRecordPoolOffset);</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;        deviceRecord.name_length = deviceRecordNameLength; <span class="comment">// name_length</span></div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> deviceRecordNameNullTerminator = <span class="comment">// name null-terminator</span></div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;                ReadUint8(readBuffer, deviceRecordPoolOffset + uint32_t_size + deviceRecordNameLength - 1);</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;        CHECK(deviceRecordNameNullTerminator == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;        std::vector&lt;unsigned char&gt; deviceRecordNameBuffer(deviceRecord.name_length - 1);</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;        std::memcpy(deviceRecordNameBuffer.data(),</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;                    readData + deviceRecordPoolOffset + uint32_t_size, deviceRecordNameBuffer.size());</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;        deviceRecord.name.assign(deviceRecordNameBuffer.begin(), deviceRecordNameBuffer.end()); <span class="comment">// name</span></div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;        deviceRecords.push_back(deviceRecord);</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;    }</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    <span class="comment">// Check that the device records are correct</span></div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;    CHECK(deviceRecords.size() == 2);</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> DeviceRecord&amp; deviceRecord : deviceRecords)</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    {</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;        <span class="keyword">const</span> Device* device = counterDirectory.GetDevice(deviceRecord.uid);</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;        CHECK(device);</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;        CHECK(device-&gt;m_Uid   == deviceRecord.uid);</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;        CHECK(device-&gt;m_Cores == deviceRecord.cores);</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;        CHECK(device-&gt;m_Name  == deviceRecord.name);</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    }</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    <span class="comment">// Counter set record structure/collection used for testing</span></div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    <span class="keyword">struct </span>CounterSetRecord</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;    {</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;        uint16_t    uid;</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;        uint16_t    count;</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;        uint32_t    name_offset;</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;        uint32_t    name_length;</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;        std::string name;</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;    };</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;    std::vector&lt;CounterSetRecord&gt; counterSetRecords;</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    <span class="keyword">const</span> uint32_t counterSetRecordsPointerTableOffset = 2u * uint32_t_size + <span class="comment">// packet_header</span></div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;                                                         bodyHeaderWord3;     <span class="comment">// counter_set_pointer_table_offset</span></div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    offset = counterSetRecordsPointerTableOffset;</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    std::vector&lt;uint32_t&gt; counterSetRecordOffsets(counterSetRecordCount);</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; counterSetRecordCount; ++i)</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    {</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;        <span class="comment">// counterSetRecordOffset is relative to the start of the dcounterSetRecordsPointerTable</span></div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;        counterSetRecordOffsets[i] = ReadUint32(readBuffer, offset) + counterSetRecordsPointerTableOffset;</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;        offset += uint32_t_size;</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;    }</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; counterSetRecordCount; i++)</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    {</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;        <span class="comment">// Collect the data for the counter set record</span></div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;        <span class="keyword">const</span> uint32_t counterSetRecordWord0 = ReadUint32(readBuffer, counterSetRecordOffsets[i] + 0 * uint32_t_size);</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;        <span class="keyword">const</span> uint32_t counterSetRecordWord1 = ReadUint32(readBuffer, counterSetRecordOffsets[i] + 1 * uint32_t_size);</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;        CounterSetRecord counterSetRecord;</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;        counterSetRecord.uid = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(counterSetRecordWord0 &gt;&gt; 16); <span class="comment">// uid</span></div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;        counterSetRecord.count = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(counterSetRecordWord0);     <span class="comment">// count</span></div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;        counterSetRecord.name_offset = counterSetRecordWord1;                      <span class="comment">// name_offset</span></div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;        uint32_t counterSetRecordPoolOffset = counterSetRecordOffsets[i]  +                 <span class="comment">// Packet body offset</span></div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;                                              counterSetRecord.name_offset; <span class="comment">// Counter set name offset</span></div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;        uint32_t counterSetRecordNameLength = ReadUint32(readBuffer, counterSetRecordPoolOffset);</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;        counterSetRecord.name_length = counterSetRecordNameLength; <span class="comment">// name_length</span></div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> counterSetRecordNameNullTerminator = <span class="comment">// name null-terminator</span></div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;                ReadUint8(readBuffer, counterSetRecordPoolOffset + uint32_t_size + counterSetRecordNameLength - 1);</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;        CHECK(counterSetRecordNameNullTerminator == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;        std::vector&lt;unsigned char&gt; counterSetRecordNameBuffer(counterSetRecord.name_length - 1);</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;        std::memcpy(counterSetRecordNameBuffer.data(),</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;                    readData + counterSetRecordPoolOffset + uint32_t_size, counterSetRecordNameBuffer.size());</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;        counterSetRecord.name.assign(counterSetRecordNameBuffer.begin(), counterSetRecordNameBuffer.end()); <span class="comment">// name</span></div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;        counterSetRecords.push_back(counterSetRecord);</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    }</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    <span class="comment">// Check that the counter set records are correct</span></div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;    CHECK(counterSetRecords.size() == 1);</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> CounterSetRecord&amp; counterSetRecord : counterSetRecords)</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    {</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;        <span class="keyword">const</span> CounterSet* counterSet = counterDirectory.GetCounterSet(counterSetRecord.uid);</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;        CHECK(counterSet);</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;        CHECK(counterSet-&gt;m_Uid   == counterSetRecord.uid);</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;        CHECK(counterSet-&gt;m_Count == counterSetRecord.count);</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;        CHECK(counterSet-&gt;m_Name  == counterSetRecord.name);</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    }</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;    <span class="comment">// Event record structure/collection used for testing</span></div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;    <span class="keyword">struct </span>EventRecord</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;    {</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;        uint16_t    counter_uid;</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;        uint16_t    max_counter_uid;</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;        uint16_t    device;</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;        uint16_t    counter_set;</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;        uint16_t    counter_class;</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;        uint16_t    interpolation;</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;        <span class="keywordtype">double</span>      multiplier;</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;        uint32_t    name_offset;</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;        uint32_t    name_length;</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;        std::string name;</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;        uint32_t    description_offset;</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;        uint32_t    description_length;</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;        std::string description;</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;        uint32_t    units_offset;</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;        uint32_t    units_length;</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;        std::string units;</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    };</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <span class="comment">// Category record structure/collection used for testing</span></div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    <span class="keyword">struct </span>CategoryRecord</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;    {</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;        uint16_t                 event_count;</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;        uint32_t                 event_pointer_table_offset;</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;        uint32_t                 name_offset;</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;        uint32_t                 name_length;</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;        std::string              name;</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;        std::vector&lt;uint32_t&gt;    event_pointer_table;</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;        std::vector&lt;EventRecord&gt; event_records;</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    };</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    std::vector&lt;CategoryRecord&gt; categoryRecords;</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    <span class="keyword">const</span> uint32_t categoryRecordsPointerTableOffset = 2u * uint32_t_size + <span class="comment">// packet_header</span></div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;                                                       bodyHeaderWord5;    <span class="comment">// categories_pointer_table_offset</span></div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    offset = categoryRecordsPointerTableOffset;</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    std::vector&lt;uint32_t&gt; categoryRecordOffsets(categoryRecordCount);</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; categoryRecordCount; ++i)</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;    {</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;        <span class="comment">// categoryRecordOffset is relative to the start of the categoryRecordsPointerTable</span></div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;        categoryRecordOffsets[i] = ReadUint32(readBuffer, offset) + categoryRecordsPointerTableOffset;</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;        offset += uint32_t_size;</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    }</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; categoryRecordCount; i++)</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    {</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;        <span class="comment">// Collect the data for the category record</span></div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;        <span class="keyword">const</span> uint32_t categoryRecordWord1 = ReadUint32(readBuffer, categoryRecordOffsets[i] + 0 * uint32_t_size);</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;        <span class="keyword">const</span> uint32_t categoryRecordWord2 = ReadUint32(readBuffer, categoryRecordOffsets[i] + 1 * uint32_t_size);</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;        <span class="keyword">const</span> uint32_t categoryRecordWord3 = ReadUint32(readBuffer, categoryRecordOffsets[i] + 2 * uint32_t_size);</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;        CategoryRecord categoryRecord;</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;        categoryRecord.event_count = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(categoryRecordWord1 &gt;&gt; 16); <span class="comment">// event_count</span></div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;        categoryRecord.event_pointer_table_offset = categoryRecordWord2;               <span class="comment">// event_pointer_table_offset</span></div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;        categoryRecord.name_offset = categoryRecordWord3;                              <span class="comment">// name_offset</span></div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;        uint32_t categoryRecordNameLength = ReadUint32(readBuffer,</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;                                                       categoryRecordOffsets[i] + categoryRecord.name_offset);</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;        categoryRecord.name_length = categoryRecordNameLength; <span class="comment">// name_length</span></div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> categoryRecordNameNullTerminator =</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;                ReadUint8(readBuffer,</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;                          categoryRecordOffsets[i] +</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;                          categoryRecord.name_offset +</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;                          uint32_t_size +</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;                          categoryRecordNameLength - 1); <span class="comment">// name null-terminator</span></div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;        CHECK(categoryRecordNameNullTerminator == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;        std::vector&lt;unsigned char&gt; categoryRecordNameBuffer(categoryRecord.name_length - 1);</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;        std::memcpy(categoryRecordNameBuffer.data(),</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;                    readData +</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;                    categoryRecordOffsets[i] +</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;                    categoryRecord.name_offset +</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;                    uint32_t_size,</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;                    categoryRecordNameBuffer.size());</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;        categoryRecord.name.assign(categoryRecordNameBuffer.begin(), categoryRecordNameBuffer.end()); <span class="comment">// name</span></div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;        categoryRecord.event_pointer_table.resize(categoryRecord.event_count);</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;        offset = categoryRecordOffsets[i] + categoryRecord.event_pointer_table_offset;</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;        <span class="keywordflow">for</span> (uint32_t eventOffsetIndex = 0; eventOffsetIndex &lt; categoryRecord.event_count; ++eventOffsetIndex)</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;        {</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;            <span class="comment">// eventRecordOffset is relative to the start of the event pointer table</span></div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;            categoryRecord.event_pointer_table[eventOffsetIndex] = ReadUint32(readBuffer, offset) +</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;                                                                   categoryRecordOffsets[i] +</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;                                                                   categoryRecord.event_pointer_table_offset;</div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;            offset += uint32_t_size;</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;        }</div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;        <span class="keywordflow">for</span> (uint32_t eventIndex = 0; eventIndex &lt; categoryRecord.event_count; eventIndex++)</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;        {</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;            <span class="keyword">const</span> uint32_t eventOffset = categoryRecord.event_pointer_table[eventIndex];</div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;            <span class="comment">// Collect the data for the event record</span></div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;            <span class="keyword">const</span> uint32_t eventRecordWord0  = ReadUint32(readBuffer, eventOffset + 0 * uint32_t_size);</div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;            <span class="keyword">const</span> uint32_t eventRecordWord1  = ReadUint32(readBuffer, eventOffset + 1 * uint32_t_size);</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;            <span class="keyword">const</span> uint32_t eventRecordWord2  = ReadUint32(readBuffer, eventOffset + 2 * uint32_t_size);</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;            <span class="keyword">const</span> uint64_t eventRecordWord34 = ReadUint64(readBuffer, eventOffset + 3 * uint32_t_size);</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;            <span class="keyword">const</span> uint32_t eventRecordWord5  = ReadUint32(readBuffer, eventOffset + 5 * uint32_t_size);</div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;            <span class="keyword">const</span> uint32_t eventRecordWord6  = ReadUint32(readBuffer, eventOffset + 6 * uint32_t_size);</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;            <span class="keyword">const</span> uint32_t eventRecordWord7  = ReadUint32(readBuffer, eventOffset + 7 * uint32_t_size);</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;            EventRecord eventRecord;</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;            eventRecord.counter_uid = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecordWord0);                     <span class="comment">// counter_uid</span></div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;            eventRecord.max_counter_uid = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecordWord0 &gt;&gt; 16);           <span class="comment">// max_counter_uid</span></div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;            eventRecord.device = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecordWord1 &gt;&gt; 16);                    <span class="comment">// device</span></div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;            eventRecord.counter_set = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecordWord1);                     <span class="comment">// counter_set</span></div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;            eventRecord.counter_class = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecordWord2 &gt;&gt; 16);             <span class="comment">// class</span></div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;            eventRecord.interpolation = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(eventRecordWord2);                   <span class="comment">// interpolation</span></div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;            std::memcpy(&amp;eventRecord.multiplier, &amp;eventRecordWord34, <span class="keyword">sizeof</span>(eventRecord.multiplier)); <span class="comment">// multiplier</span></div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;            eventRecord.name_offset = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(eventRecordWord5);                     <span class="comment">// name_offset</span></div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;            eventRecord.description_offset = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(eventRecordWord6);              <span class="comment">// description_offset</span></div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;            eventRecord.units_offset = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(eventRecordWord7);                    <span class="comment">// units_offset</span></div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;</div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;            uint32_t eventRecordNameLength = ReadUint32(readBuffer, eventOffset + eventRecord.name_offset);</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;            eventRecord.name_length = eventRecordNameLength; <span class="comment">// name_length</span></div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> eventRecordNameNullTerminator =</div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;                    ReadUint8(readBuffer,</div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;                              eventOffset +</div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;                              eventRecord.name_offset +</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;                              uint32_t_size +</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;                              eventRecordNameLength - 1); <span class="comment">// name null-terminator</span></div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;            CHECK(eventRecordNameNullTerminator == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;            std::vector&lt;unsigned char&gt; eventRecordNameBuffer(eventRecord.name_length - 1);</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;            std::memcpy(eventRecordNameBuffer.data(),</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;                        readData +</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;                        eventOffset +</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;                        eventRecord.name_offset +</div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;                        uint32_t_size,</div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;                        eventRecordNameBuffer.size());</div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;            eventRecord.name.assign(eventRecordNameBuffer.begin(), eventRecordNameBuffer.end()); <span class="comment">// name</span></div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;</div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;            uint32_t eventRecordDescriptionLength = ReadUint32(readBuffer,</div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;                                                               eventOffset + eventRecord.description_offset);</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;            eventRecord.description_length = eventRecordDescriptionLength; <span class="comment">// description_length</span></div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> eventRecordDescriptionNullTerminator =</div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;                    ReadUint8(readBuffer,</div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;                              eventOffset +</div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;                              eventRecord.description_offset +</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;                              uint32_t_size +</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;                              eventRecordDescriptionLength - 1); <span class="comment">// description null-terminator</span></div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;            CHECK(eventRecordDescriptionNullTerminator == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;            std::vector&lt;unsigned char&gt; eventRecordDescriptionBuffer(eventRecord.description_length - 1);</div><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;            std::memcpy(eventRecordDescriptionBuffer.data(),</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;                        readData +</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;                        eventOffset +</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;                        eventRecord.description_offset +</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;                        uint32_t_size,</div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;                        eventRecordDescriptionBuffer.size());</div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;            eventRecord.description.assign(eventRecordDescriptionBuffer.begin(),</div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;                                           eventRecordDescriptionBuffer.end()); <span class="comment">// description</span></div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;            <span class="keywordflow">if</span> (eventRecord.units_offset &gt; 0)</div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;            {</div><div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;                uint32_t eventRecordUnitsLength = ReadUint32(readBuffer,</div><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;                                                             eventOffset + eventRecord.units_offset);</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;                eventRecord.units_length = eventRecordUnitsLength; <span class="comment">// units_length</span></div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> eventRecordUnitsNullTerminator =</div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;                        ReadUint8(readBuffer,</div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;                                  eventOffset +</div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;                                  eventRecord.units_offset +</div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;                                  uint32_t_size +</div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;                                  eventRecordUnitsLength - 1); <span class="comment">// units null-terminator</span></div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;                CHECK(eventRecordUnitsNullTerminator == <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;                std::vector&lt;unsigned char&gt; eventRecordUnitsBuffer(eventRecord.units_length - 1);</div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;                std::memcpy(eventRecordUnitsBuffer.data(),</div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;                            readData +</div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;                            eventOffset +</div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;                            eventRecord.units_offset +</div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;                            uint32_t_size,</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;                            eventRecordUnitsBuffer.size());</div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;                eventRecord.units.assign(eventRecordUnitsBuffer.begin(), eventRecordUnitsBuffer.end()); <span class="comment">// units</span></div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;            }</div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;</div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;            categoryRecord.event_records.push_back(eventRecord);</div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;        }</div><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;</div><div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;        categoryRecords.push_back(categoryRecord);</div><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;    }</div><div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;</div><div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;    <span class="comment">// Check that the category records are correct</span></div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;    CHECK(categoryRecords.size() == 2);</div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> CategoryRecord&amp; categoryRecord : categoryRecords)</div><div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;    {</div><div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;        <span class="keyword">const</span> Category* category = counterDirectory.GetCategory(categoryRecord.name);</div><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;        CHECK(category);</div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;        CHECK(category-&gt;m_Name == categoryRecord.name);</div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;        CHECK(category-&gt;m_Counters.size() == categoryRecord.event_count + <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(numberOfCores) -1);</div><div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;        CHECK(category-&gt;m_Counters.size() == categoryRecord.event_count + <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(numberOfCores) -1);</div><div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;</div><div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;        <span class="comment">// Check that the event records are correct</span></div><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> EventRecord&amp; eventRecord : categoryRecord.event_records)</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;        {</div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;            <span class="keyword">const</span> Counter* counter = counterDirectory.GetCounter(eventRecord.counter_uid);</div><div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;            CHECK(counter);</div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;            CHECK(counter-&gt;m_MaxCounterUid == eventRecord.max_counter_uid);</div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;            CHECK(counter-&gt;m_DeviceUid == eventRecord.device);</div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;            CHECK(counter-&gt;m_CounterSetUid == eventRecord.counter_set);</div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;            CHECK(counter-&gt;m_Class == eventRecord.counter_class);</div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;            CHECK(counter-&gt;m_Interpolation == eventRecord.interpolation);</div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;            CHECK(counter-&gt;m_Multiplier == eventRecord.multiplier);</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;            CHECK(counter-&gt;m_Name == eventRecord.name);</div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;            CHECK(counter-&gt;m_Description == eventRecord.description);</div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;            CHECK(counter-&gt;m_Units == eventRecord.units);</div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;        }</div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;    }</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;}</div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;</div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendCounterDirectoryPacketTest3&quot;</span>)</div><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;{</div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;    <span class="comment">// Using a mock counter directory that allows to register invalid objects</span></div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml">MockCounterDirectory</a> counterDirectory;</div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;</div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;    <span class="comment">// Register an invalid device</span></div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;    <span class="keyword">const</span> std::string deviceName = <span class="stringliteral">&quot;inv@lid dev!câ¬&quot;</span>;</div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;    <span class="keyword">const</span> Device* device = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    CHECK_NOTHROW(device = counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a1819a5a244fd4317b6dcd49cdbf67a2d">RegisterDevice</a>(deviceName, 3));</div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;    CHECK(counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad742b37bc2beb568e083225f3fd8160b">GetDeviceCount</a>() == 1);</div><div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;    CHECK(device);</div><div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;</div><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;    <span class="comment">// Buffer with enough space</span></div><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(1024);</div><div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;    SendCounterPacket sendCounterPacket(mockBuffer,</div><div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;    CHECK_THROWS_AS(sendCounterPacket.SendCounterDirectoryPacket(counterDirectory), arm::pipe::ProfilingException);</div><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;}</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;</div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendCounterDirectoryPacketTest4&quot;</span>)</div><div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;{</div><div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;    <span class="comment">// Using a mock counter directory that allows to register invalid objects</span></div><div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml">MockCounterDirectory</a> counterDirectory;</div><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;</div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;    <span class="comment">// Register an invalid counter set</span></div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;    <span class="keyword">const</span> std::string counterSetName = <span class="stringliteral">&quot;inv@lid countâ¬rsâ¬t&quot;</span>;</div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;    <span class="keyword">const</span> CounterSet* counterSet = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;    CHECK_NOTHROW(counterSet = counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae0d8bd45562c0887985b1be728640bbc">RegisterCounterSet</a>(counterSetName));</div><div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;    CHECK(counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae3b7dbaa7317dacbcec25f30f6a16075">GetCounterSetCount</a>() == 1);</div><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;    CHECK(counterSet);</div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;</div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;    <span class="comment">// Buffer with enough space</span></div><div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(1024);</div><div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;    SendCounterPacket sendCounterPacket(mockBuffer,</div><div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;    CHECK_THROWS_AS(sendCounterPacket.SendCounterDirectoryPacket(counterDirectory), arm::pipe::ProfilingException);</div><div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;}</div><div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;</div><div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendCounterDirectoryPacketTest5&quot;</span>)</div><div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;{</div><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;    <span class="comment">// Using a mock counter directory that allows to register invalid objects</span></div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml">MockCounterDirectory</a> counterDirectory;</div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;</div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;    <span class="comment">// Register an invalid category</span></div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;    <span class="keyword">const</span> std::string categoryName = <span class="stringliteral">&quot;c@tâ¬gory&quot;</span>;</div><div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;    <span class="keyword">const</span> Category* category = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;    CHECK_NOTHROW(category = counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ac44342ac08725d8f5dd52e2ee93ca20d">RegisterCategory</a>(categoryName));</div><div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;    CHECK(counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a4626db62503c13042a745a40399f8317">GetCategoryCount</a>() == 1);</div><div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;    CHECK(category);</div><div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;</div><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;    <span class="comment">// Buffer with enough space</span></div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(1024);</div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;    SendCounterPacket sendCounterPacket(mockBuffer,</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;    CHECK_THROWS_AS(sendCounterPacket.SendCounterDirectoryPacket(counterDirectory), arm::pipe::ProfilingException);</div><div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;}</div><div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;</div><div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendCounterDirectoryPacketTest6&quot;</span>)</div><div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;{</div><div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;    <span class="comment">// Using a mock counter directory that allows to register invalid objects</span></div><div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml">MockCounterDirectory</a> counterDirectory;</div><div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;</div><div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;    <span class="comment">// Register an invalid device</span></div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;    <span class="keyword">const</span> std::string deviceName = <span class="stringliteral">&quot;inv@lid dev!câ¬&quot;</span>;</div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;    <span class="keyword">const</span> Device* device = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;    CHECK_NOTHROW(device = counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a1819a5a244fd4317b6dcd49cdbf67a2d">RegisterDevice</a>(deviceName, 3));</div><div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;    CHECK(counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad742b37bc2beb568e083225f3fd8160b">GetDeviceCount</a>() == 1);</div><div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;    CHECK(device);</div><div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;</div><div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;    <span class="comment">// Register an invalid counter set</span></div><div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;    <span class="keyword">const</span> std::string counterSetName = <span class="stringliteral">&quot;inv@lid countâ¬rsâ¬t&quot;</span>;</div><div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;    <span class="keyword">const</span> CounterSet* counterSet = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;    CHECK_NOTHROW(counterSet = counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae0d8bd45562c0887985b1be728640bbc">RegisterCounterSet</a>(counterSetName));</div><div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;    CHECK(counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae3b7dbaa7317dacbcec25f30f6a16075">GetCounterSetCount</a>() == 1);</div><div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;    CHECK(counterSet);</div><div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;</div><div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;    <span class="comment">// Register an invalid category associated to an invalid device and an invalid counter set</span></div><div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;    <span class="keyword">const</span> std::string categoryName = <span class="stringliteral">&quot;c@tâ¬gory&quot;</span>;</div><div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;    <span class="keyword">const</span> Category* category = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;    CHECK_NOTHROW(category = counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ac44342ac08725d8f5dd52e2ee93ca20d">RegisterCategory</a>(categoryName));</div><div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;    CHECK(counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a4626db62503c13042a745a40399f8317">GetCategoryCount</a>() == 1);</div><div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;    CHECK(category);</div><div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;</div><div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;    <span class="comment">// Buffer with enough space</span></div><div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(1024);</div><div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;    SendCounterPacket sendCounterPacket(mockBuffer,</div><div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;    CHECK_THROWS_AS(sendCounterPacket.SendCounterDirectoryPacket(counterDirectory), arm::pipe::ProfilingException);</div><div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;}</div><div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;</div><div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendCounterDirectoryPacketTest7&quot;</span>)</div><div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;{</div><div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;    <span class="comment">// Using a mock counter directory that allows to register invalid objects</span></div><div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml">MockCounterDirectory</a> counterDirectory;</div><div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;</div><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;    <span class="comment">// Register an valid device</span></div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;    <span class="keyword">const</span> std::string deviceName = <span class="stringliteral">&quot;valid device&quot;</span>;</div><div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;    <span class="keyword">const</span> Device* device = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;    CHECK_NOTHROW(device = counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a1819a5a244fd4317b6dcd49cdbf67a2d">RegisterDevice</a>(deviceName, 3));</div><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;    CHECK(counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad742b37bc2beb568e083225f3fd8160b">GetDeviceCount</a>() == 1);</div><div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;    CHECK(device);</div><div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;</div><div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;    <span class="comment">// Register an valid counter set</span></div><div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;    <span class="keyword">const</span> std::string counterSetName = <span class="stringliteral">&quot;valid counterset&quot;</span>;</div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;    <span class="keyword">const</span> CounterSet* counterSet = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;    CHECK_NOTHROW(counterSet = counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae0d8bd45562c0887985b1be728640bbc">RegisterCounterSet</a>(counterSetName));</div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;    CHECK(counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae3b7dbaa7317dacbcec25f30f6a16075">GetCounterSetCount</a>() == 1);</div><div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;    CHECK(counterSet);</div><div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;</div><div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;    <span class="comment">// Register an valid category associated to a valid device and a valid counter set</span></div><div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;    <span class="keyword">const</span> std::string categoryName = <span class="stringliteral">&quot;category&quot;</span>;</div><div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;    <span class="keyword">const</span> Category* category = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;    CHECK_NOTHROW(category = counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ac44342ac08725d8f5dd52e2ee93ca20d">RegisterCategory</a>(categoryName));</div><div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;    CHECK(counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a4626db62503c13042a745a40399f8317">GetCategoryCount</a>() == 1);</div><div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;    CHECK(category);</div><div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;</div><div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;    <span class="comment">// Register an invalid counter associated to a valid category</span></div><div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;    <span class="keyword">const</span> Counter* counter = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;    CHECK_NOTHROW(counter = counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#afc8de778ee03bedee2df4f9387060465">RegisterCounter</a>(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;                                                             0,</div><div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;                                                             categoryName,</div><div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;                                                             0,</div><div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;                                                             1,</div><div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;                                                             123.45f,</div><div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;                                                             <span class="stringliteral">&quot;counter&quot;</span>,</div><div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;                                                             <span class="stringliteral">&quot;counter description&quot;</span>,</div><div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;                                                             std::string(<span class="stringliteral">&quot;invalid counter units&quot;</span>),</div><div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;                                                             5,</div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;                                                             device-&gt;m_Uid,</div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;                                                             counterSet-&gt;m_Uid));</div><div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;    CHECK(counterDirectory.<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad9062caad1836f8e6b810e4e97bb19d1">GetCounterCount</a>() == 5);</div><div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;    CHECK(counter);</div><div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;</div><div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;    <span class="comment">// Buffer with enough space</span></div><div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(1024);</div><div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;    SendCounterPacket sendCounterPacket(mockBuffer,</div><div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;    CHECK_THROWS_AS(sendCounterPacket.SendCounterDirectoryPacket(counterDirectory), arm::pipe::ProfilingException);</div><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;}</div><div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;</div><div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendThreadTest0&quot;</span>)</div><div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;{</div><div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;    ProfilingStateMachine profilingStateMachine;</div><div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;    SetActiveProfilingState(profilingStateMachine);</div><div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;</div><div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> mockProfilingConnection;</div><div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml">MockStreamCounterBuffer</a> mockStreamCounterBuffer(0);</div><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;    SendCounterPacket sendCounterPacket(mockStreamCounterBuffer,</div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;    SendThread sendThread(profilingStateMachine, mockStreamCounterBuffer, sendCounterPacket);</div><div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;</div><div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;    <span class="comment">// Try to start the send thread many times, it must only start once</span></div><div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;</div><div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;    CHECK(sendThread.IsRunning());</div><div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;    CHECK(sendThread.IsRunning());</div><div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;</div><div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;    sendThread.Stop();</div><div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;    CHECK(!sendThread.IsRunning());</div><div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;}</div><div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;</div><div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendThreadTest1&quot;</span>)</div><div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;{</div><div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;    ProfilingStateMachine profilingStateMachine;</div><div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;    SetActiveProfilingState(profilingStateMachine);</div><div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;</div><div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> totalWrittenSize = 0;</div><div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;</div><div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> mockProfilingConnection;</div><div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml">MockStreamCounterBuffer</a> mockStreamCounterBuffer(1024);</div><div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;    SendCounterPacket sendCounterPacket(mockStreamCounterBuffer,</div><div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;    SendThread sendThread(profilingStateMachine, mockStreamCounterBuffer, sendCounterPacket);</div><div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;</div><div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;    <span class="comment">// Interleaving writes and reads to/from the buffer with pauses to test that the send thread actually waits for</span></div><div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;    <span class="comment">// something to become available for reading</span></div><div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;</div><div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;</div><div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;    CounterDirectory counterDirectory;</div><div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;    sendCounterPacket.SendStreamMetaDataPacket();</div><div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;</div><div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;    totalWrittenSize += <a class="code" href="_profiling_test_utils_8cpp.xhtml#aa449021ed1a9de7abcdbd0ca903577db">GetStreamMetaDataPacketSize</a>();</div><div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;</div><div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;</div><div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;</div><div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;    sendCounterPacket.SendCounterDirectoryPacket(counterDirectory);</div><div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;</div><div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;    <span class="comment">// Get the size of the Counter Directory Packet</span></div><div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counterDirectoryPacketSize = 32;</div><div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;    totalWrittenSize += counterDirectoryPacketSize;</div><div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;</div><div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;</div><div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;</div><div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(123u,</div><div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;                                                       {</div><div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;                                                           {   1u,      23u },</div><div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;                                                           {  33u, 1207623u }</div><div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;                                                       });</div><div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;</div><div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> periodicCounterCapturePacketSize = 28;</div><div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;</div><div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;</div><div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;</div><div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(44u,</div><div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;                                                       {</div><div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;                                                           { 211u,     923u }</div><div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;                                                       });</div><div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;</div><div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;    periodicCounterCapturePacketSize = 22;</div><div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;</div><div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(1234u,</div><div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;                                                       {</div><div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;                                                           { 555u,      23u },</div><div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;                                                           { 556u,       6u },</div><div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;                                                           { 557u,  893454u },</div><div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;                                                           { 558u, 1456623u },</div><div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;                                                           { 559u,  571090u }</div><div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;                                                       });</div><div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;</div><div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;    periodicCounterCapturePacketSize = 46;</div><div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;</div><div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(997u,</div><div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;                                                       {</div><div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;                                                           {  88u,      11u },</div><div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;                                                           {  96u,      22u },</div><div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;                                                           {  97u,      33u },</div><div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;                                                           { 999u,     444u }</div><div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;                                                       });</div><div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;</div><div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;    periodicCounterCapturePacketSize = 40;</div><div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;</div><div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;</div><div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;</div><div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;    sendCounterPacket.SendPeriodicCounterSelectionPacket(1000u, { 1345u, 254u, 4536u, 408u, 54u, 6323u, 428u, 1u, 6u });</div><div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;</div><div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;    periodicCounterCapturePacketSize = 30;</div><div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;</div><div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;</div><div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;    <span class="comment">// To test an exact value of the &quot;read size&quot; in the mock buffer, wait to allow the send thread to</span></div><div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;    <span class="comment">// read all what&#39;s remaining in the buffer</span></div><div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;</div><div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;    sendThread.Stop();</div><div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;</div><div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;    CHECK(mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a0a0b47bcd9b2b00de2c82761705cfd58">GetCommittedSize</a>() == totalWrittenSize);</div><div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;    CHECK(mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ab158e7cd554e5f65e77bad0c4d448474">GetReadableSize</a>()  == totalWrittenSize);</div><div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;    CHECK(mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7233f6a0ab843a226dc07c72edd76168">GetReadSize</a>()      == totalWrittenSize);</div><div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;}</div><div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;</div><div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendThreadTest2&quot;</span>)</div><div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;{</div><div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;    ProfilingStateMachine profilingStateMachine;</div><div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;    SetActiveProfilingState(profilingStateMachine);</div><div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;</div><div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> totalWrittenSize = 0;</div><div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;</div><div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> mockProfilingConnection;</div><div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml">MockStreamCounterBuffer</a> mockStreamCounterBuffer(1024);</div><div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;    SendCounterPacket sendCounterPacket(mockStreamCounterBuffer,</div><div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;    SendThread sendThread(profilingStateMachine, mockStreamCounterBuffer, sendCounterPacket);</div><div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;</div><div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;    <span class="comment">// Adding many spurious &quot;ready to read&quot; signals throughout the test to check that the send thread is</span></div><div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;    <span class="comment">// capable of handling unnecessary read requests</span></div><div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;</div><div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;</div><div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;</div><div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;    CounterDirectory counterDirectory;</div><div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;    sendCounterPacket.SendStreamMetaDataPacket();</div><div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;</div><div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;    totalWrittenSize += <a class="code" href="_profiling_test_utils_8cpp.xhtml#aa449021ed1a9de7abcdbd0ca903577db">GetStreamMetaDataPacketSize</a>();</div><div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;</div><div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;</div><div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;</div><div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;    sendCounterPacket.SendCounterDirectoryPacket(counterDirectory);</div><div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;</div><div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;    <span class="comment">// Get the size of the Counter Directory Packet</span></div><div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counterDirectoryPacketSize = 32;</div><div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;    totalWrittenSize += counterDirectoryPacketSize;</div><div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;</div><div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;</div><div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;</div><div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(123u,</div><div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;                                                       {</div><div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;                                                           {   1u,      23u },</div><div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;                                                           {  33u, 1207623u }</div><div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;                                                       });</div><div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;</div><div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> periodicCounterCapturePacketSize = 28;</div><div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;</div><div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;</div><div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;</div><div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;</div><div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;</div><div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(44u,</div><div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;                                                       {</div><div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;                                                           { 211u,     923u }</div><div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;                                                       });</div><div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;</div><div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;    periodicCounterCapturePacketSize = 22;</div><div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;</div><div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(1234u,</div><div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;                                                       {</div><div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;                                                           { 555u,      23u },</div><div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;                                                           { 556u,       6u },</div><div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160;                                                           { 557u,  893454u },</div><div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;                                                           { 558u, 1456623u },</div><div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;                                                           { 559u,  571090u }</div><div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;                                                       });</div><div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;</div><div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;    periodicCounterCapturePacketSize = 46;</div><div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;</div><div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(997u,</div><div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;                                                       {</div><div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;                                                           {  88u,      11u },</div><div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;                                                           {  96u,      22u },</div><div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;                                                           {  97u,      33u },</div><div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;                                                           { 999u,     444u }</div><div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;                                                       });</div><div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;</div><div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l02079"></a><span class="lineno"> 2079</span>&#160;    periodicCounterCapturePacketSize = 40;</div><div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;</div><div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;</div><div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;    std::this_thread::sleep_for(std::chrono::milliseconds(WAIT_UNTIL_READABLE_MS));</div><div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;</div><div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;    sendCounterPacket.SendPeriodicCounterSelectionPacket(1000u, { 1345u, 254u, 4536u, 408u, 54u, 6323u, 428u, 1u, 6u });</div><div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;</div><div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;    periodicCounterCapturePacketSize = 30;</div><div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;</div><div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;</div><div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;    <span class="comment">// To test an exact value of the &quot;read size&quot; in the mock buffer, wait to allow the send thread to</span></div><div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;    <span class="comment">// read all what&#39;s remaining in the buffer</span></div><div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;    sendThread.Stop();</div><div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;</div><div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;    CHECK(mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a0a0b47bcd9b2b00de2c82761705cfd58">GetCommittedSize</a>() == totalWrittenSize);</div><div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;    CHECK(mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ab158e7cd554e5f65e77bad0c4d448474">GetReadableSize</a>()  == totalWrittenSize);</div><div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;    CHECK(mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7233f6a0ab843a226dc07c72edd76168">GetReadSize</a>()      == totalWrittenSize);</div><div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;}</div><div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;</div><div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendThreadTest3&quot;</span>)</div><div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;{</div><div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;    ProfilingStateMachine profilingStateMachine;</div><div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;    SetActiveProfilingState(profilingStateMachine);</div><div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;</div><div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> totalWrittenSize = 0;</div><div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;</div><div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> mockProfilingConnection;</div><div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml">MockStreamCounterBuffer</a> mockStreamCounterBuffer(1024);</div><div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;    SendCounterPacket sendCounterPacket(mockStreamCounterBuffer,</div><div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;    SendThread sendThread(profilingStateMachine, mockStreamCounterBuffer, sendCounterPacket);</div><div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;</div><div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;    <span class="comment">// Not using pauses or &quot;grace periods&quot; to stress test the send thread</span></div><div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;</div><div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;</div><div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;    CounterDirectory counterDirectory;</div><div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;    sendCounterPacket.SendStreamMetaDataPacket();</div><div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;</div><div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;    totalWrittenSize += <a class="code" href="_profiling_test_utils_8cpp.xhtml#aa449021ed1a9de7abcdbd0ca903577db">GetStreamMetaDataPacketSize</a>();</div><div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;</div><div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;    sendCounterPacket.SendCounterDirectoryPacket(counterDirectory);</div><div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;</div><div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;    <span class="comment">// Get the size of the Counter Directory Packet</span></div><div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counterDirectoryPacketSize =32;</div><div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;    totalWrittenSize += counterDirectoryPacketSize;</div><div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;</div><div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(123u,</div><div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;                                                       {</div><div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;                                                           {   1u,      23u },</div><div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;                                                           {  33u, 1207623u }</div><div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;                                                       });</div><div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;</div><div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> periodicCounterCapturePacketSize = 28;</div><div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;</div><div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(44u,</div><div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;                                                       {</div><div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;                                                           { 211u,     923u }</div><div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;                                                       });</div><div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;</div><div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;    periodicCounterCapturePacketSize = 22;</div><div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;</div><div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(1234u,</div><div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;                                                       {</div><div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;                                                           { 555u,      23u },</div><div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;                                                           { 556u,       6u },</div><div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;                                                           { 557u,  893454u },</div><div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;                                                           { 558u, 1456623u },</div><div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;                                                           { 559u,  571090u }</div><div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;                                                       });</div><div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;</div><div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;    periodicCounterCapturePacketSize = 46;</div><div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;</div><div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(997u,</div><div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;                                                       {</div><div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;                                                           {  88u,      11u },</div><div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;                                                           {  96u,      22u },</div><div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;                                                           {  97u,      33u },</div><div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;                                                           { 999u,     444u }</div><div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;                                                       });</div><div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;</div><div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;    periodicCounterCapturePacketSize = 40;</div><div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;</div><div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;    sendCounterPacket.SendPeriodicCounterSelectionPacket(1000u, { 1345u, 254u, 4536u, 408u, 54u, 6323u, 428u, 1u, 6u });</div><div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;</div><div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;    <span class="comment">// Get the size of the Periodic Counter Capture Packet</span></div><div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;    periodicCounterCapturePacketSize = 30;</div><div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;    totalWrittenSize += periodicCounterCapturePacketSize;</div><div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;</div><div class="line"><a name="l02197"></a><span class="lineno"> 2197</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;</div><div class="line"><a name="l02199"></a><span class="lineno"> 2199</span>&#160;    <span class="comment">// Abruptly terminating the send thread, the amount of data sent may be less that the amount written (the send</span></div><div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;    <span class="comment">// thread is not guaranteed to flush the buffer)</span></div><div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;    sendThread.Stop();</div><div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;</div><div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;    CHECK(mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a0a0b47bcd9b2b00de2c82761705cfd58">GetCommittedSize</a>() == totalWrittenSize);</div><div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;    CHECK(mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ab158e7cd554e5f65e77bad0c4d448474">GetReadableSize</a>()  &lt;= totalWrittenSize);</div><div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;    CHECK(mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7233f6a0ab843a226dc07c72edd76168">GetReadSize</a>()      &lt;= totalWrittenSize);</div><div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;    CHECK(mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7233f6a0ab843a226dc07c72edd76168">GetReadSize</a>()      &lt;= mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ab158e7cd554e5f65e77bad0c4d448474">GetReadableSize</a>());</div><div class="line"><a name="l02207"></a><span class="lineno"> 2207</span>&#160;    CHECK(mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7233f6a0ab843a226dc07c72edd76168">GetReadSize</a>()      &lt;= mockStreamCounterBuffer.<a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a0a0b47bcd9b2b00de2c82761705cfd58">GetCommittedSize</a>());</div><div class="line"><a name="l02208"></a><span class="lineno"> 2208</span>&#160;}</div><div class="line"><a name="l02209"></a><span class="lineno"> 2209</span>&#160;</div><div class="line"><a name="l02210"></a><span class="lineno"> 2210</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendCounterPacketTestWithSendThread&quot;</span>)</div><div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;{</div><div class="line"><a name="l02212"></a><span class="lineno"> 2212</span>&#160;    ProfilingStateMachine profilingStateMachine;</div><div class="line"><a name="l02213"></a><span class="lineno"> 2213</span>&#160;    SetWaitingForAckProfilingState(profilingStateMachine);</div><div class="line"><a name="l02214"></a><span class="lineno"> 2214</span>&#160;</div><div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> mockProfilingConnection;</div><div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;    BufferManager bufferManager(1, 1024);</div><div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;    SendCounterPacket sendCounterPacket(bufferManager,</div><div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160;    SendThread sendThread(profilingStateMachine, bufferManager, sendCounterPacket, -1);</div><div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;</div><div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> streamMetadataPacketsize = <a class="code" href="_profiling_test_utils_8cpp.xhtml#aa449021ed1a9de7abcdbd0ca903577db">GetStreamMetaDataPacketSize</a>();</div><div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;</div><div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;    sendThread.Stop();</div><div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;</div><div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;    <span class="comment">// check for packet in ProfilingConnection</span></div><div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;    CHECK(mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">CheckForPacket</a>({PacketType::StreamMetaData, streamMetadataPacketsize}) == 1);</div><div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;</div><div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;    SetActiveProfilingState(profilingStateMachine);</div><div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l02233"></a><span class="lineno"> 2233</span>&#160;</div><div class="line"><a name="l02234"></a><span class="lineno"> 2234</span>&#160;    <span class="comment">// SendCounterDirectoryPacket</span></div><div class="line"><a name="l02235"></a><span class="lineno"> 2235</span>&#160;    CounterDirectory counterDirectory;</div><div class="line"><a name="l02236"></a><span class="lineno"> 2236</span>&#160;    sendCounterPacket.SendCounterDirectoryPacket(counterDirectory);</div><div class="line"><a name="l02237"></a><span class="lineno"> 2237</span>&#160;</div><div class="line"><a name="l02238"></a><span class="lineno"> 2238</span>&#160;    sendThread.Stop();</div><div class="line"><a name="l02239"></a><span class="lineno"> 2239</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counterDirectoryPacketSize = 32;</div><div class="line"><a name="l02240"></a><span class="lineno"> 2240</span>&#160;    <span class="comment">// check for packet in ProfilingConnection</span></div><div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;    CHECK(mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">CheckForPacket</a>(</div><div class="line"><a name="l02242"></a><span class="lineno"> 2242</span>&#160;        {PacketType::CounterDirectory, counterDirectoryPacketSize}) == 1);</div><div class="line"><a name="l02243"></a><span class="lineno"> 2243</span>&#160;</div><div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;</div><div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;    <span class="comment">// SendPeriodicCounterCapturePacket</span></div><div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(123u,</div><div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;                                                       {</div><div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;                                                           {   1u,      23u },</div><div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;                                                           {  33u, 1207623u }</div><div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;                                                       });</div><div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;</div><div class="line"><a name="l02253"></a><span class="lineno"> 2253</span>&#160;    sendThread.Stop();</div><div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;</div><div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> periodicCounterCapturePacketSize = 28;</div><div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;    CHECK(mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">CheckForPacket</a>(</div><div class="line"><a name="l02257"></a><span class="lineno"> 2257</span>&#160;        {PacketType::PeriodicCounterCapture, periodicCounterCapturePacketSize}) == 1);</div><div class="line"><a name="l02258"></a><span class="lineno"> 2258</span>&#160;}</div><div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;</div><div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendThreadBufferTest&quot;</span>)</div><div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;{</div><div class="line"><a name="l02262"></a><span class="lineno"> 2262</span>&#160;    ProfilingStateMachine profilingStateMachine;</div><div class="line"><a name="l02263"></a><span class="lineno"> 2263</span>&#160;    SetActiveProfilingState(profilingStateMachine);</div><div class="line"><a name="l02264"></a><span class="lineno"> 2264</span>&#160;</div><div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> mockProfilingConnection;</div><div class="line"><a name="l02266"></a><span class="lineno"> 2266</span>&#160;    BufferManager bufferManager(3, 1024);</div><div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;    SendCounterPacket sendCounterPacket(bufferManager,</div><div class="line"><a name="l02268"></a><span class="lineno"> 2268</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l02269"></a><span class="lineno"> 2269</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l02270"></a><span class="lineno"> 2270</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;    SendThread sendThread(profilingStateMachine, bufferManager, sendCounterPacket, -1);</div><div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;</div><div class="line"><a name="l02274"></a><span class="lineno"> 2274</span>&#160;    <span class="comment">// SendStreamMetaDataPacket</span></div><div class="line"><a name="l02275"></a><span class="lineno"> 2275</span>&#160;    sendCounterPacket.SendStreamMetaDataPacket();</div><div class="line"><a name="l02276"></a><span class="lineno"> 2276</span>&#160;</div><div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;    <span class="comment">// Read data from the buffer</span></div><div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;    <span class="comment">// Buffer should become readable after commit by SendStreamMetaDataPacket</span></div><div class="line"><a name="l02279"></a><span class="lineno"> 2279</span>&#160;    <span class="keyword">auto</span> packetBuffer = bufferManager.GetReadableBuffer();</div><div class="line"><a name="l02280"></a><span class="lineno"> 2280</span>&#160;    CHECK(packetBuffer.get());</div><div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;</div><div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> streamMetadataPacketsize = <a class="code" href="_profiling_test_utils_8cpp.xhtml#aa449021ed1a9de7abcdbd0ca903577db">GetStreamMetaDataPacketSize</a>();</div><div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;    CHECK(packetBuffer-&gt;GetSize() == streamMetadataPacketsize);</div><div class="line"><a name="l02284"></a><span class="lineno"> 2284</span>&#160;</div><div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;    <span class="comment">// Recommit to be read by sendCounterPacket</span></div><div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;    bufferManager.Commit(packetBuffer, streamMetadataPacketsize);</div><div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;</div><div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;    <span class="comment">// SendCounterDirectoryPacket</span></div><div class="line"><a name="l02289"></a><span class="lineno"> 2289</span>&#160;    CounterDirectory counterDirectory;</div><div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160;    sendCounterPacket.SendCounterDirectoryPacket(counterDirectory);</div><div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;</div><div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;    <span class="comment">// SendPeriodicCounterCapturePacket</span></div><div class="line"><a name="l02293"></a><span class="lineno"> 2293</span>&#160;    sendCounterPacket.SendPeriodicCounterCapturePacket(123u,</div><div class="line"><a name="l02294"></a><span class="lineno"> 2294</span>&#160;                                                       {</div><div class="line"><a name="l02295"></a><span class="lineno"> 2295</span>&#160;                                                           {   1u,      23u },</div><div class="line"><a name="l02296"></a><span class="lineno"> 2296</span>&#160;                                                           {  33u, 1207623u }</div><div class="line"><a name="l02297"></a><span class="lineno"> 2297</span>&#160;                                                       });</div><div class="line"><a name="l02298"></a><span class="lineno"> 2298</span>&#160;</div><div class="line"><a name="l02299"></a><span class="lineno"> 2299</span>&#160;    sendThread.Stop();</div><div class="line"><a name="l02300"></a><span class="lineno"> 2300</span>&#160;</div><div class="line"><a name="l02301"></a><span class="lineno"> 2301</span>&#160;    <span class="comment">// The buffer is read by the send thread so it should not be in the readable buffer.</span></div><div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;    <span class="keyword">auto</span> readBuffer = bufferManager.GetReadableBuffer();</div><div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160;    CHECK(!readBuffer);</div><div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;</div><div class="line"><a name="l02305"></a><span class="lineno"> 2305</span>&#160;    <span class="comment">// Successfully reserved the buffer with requested size</span></div><div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reservedSize = 0;</div><div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160;    <span class="keyword">auto</span> reservedBuffer = bufferManager.Reserve(512, reservedSize);</div><div class="line"><a name="l02308"></a><span class="lineno"> 2308</span>&#160;    CHECK(reservedSize == 512);</div><div class="line"><a name="l02309"></a><span class="lineno"> 2309</span>&#160;    CHECK(reservedBuffer.get());</div><div class="line"><a name="l02310"></a><span class="lineno"> 2310</span>&#160;</div><div class="line"><a name="l02311"></a><span class="lineno"> 2311</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> writtenDataSize = mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#adc32d741a992ea6f9af3f9e65aebf34d">GetWrittenDataSize</a>();</div><div class="line"><a name="l02312"></a><span class="lineno"> 2312</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> metaDataPacketCount =</div><div class="line"><a name="l02313"></a><span class="lineno"> 2313</span>&#160;            mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">CheckForPacket</a>({PacketType::StreamMetaData, streamMetadataPacketsize});</div><div class="line"><a name="l02314"></a><span class="lineno"> 2314</span>&#160;</div><div class="line"><a name="l02315"></a><span class="lineno"> 2315</span>&#160;    CHECK(metaDataPacketCount &gt;= 1);</div><div class="line"><a name="l02316"></a><span class="lineno"> 2316</span>&#160;    CHECK(mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">CheckForPacket</a>({PacketType::CounterDirectory, 32}) == 1);</div><div class="line"><a name="l02317"></a><span class="lineno"> 2317</span>&#160;    CHECK(mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">CheckForPacket</a>({PacketType::PeriodicCounterCapture, 28}) == 1);</div><div class="line"><a name="l02318"></a><span class="lineno"> 2318</span>&#160;    <span class="comment">// Check that we only received the packets we expected</span></div><div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;    CHECK(metaDataPacketCount + 2 == writtenDataSize);</div><div class="line"><a name="l02320"></a><span class="lineno"> 2320</span>&#160;}</div><div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;</div><div class="line"><a name="l02322"></a><span class="lineno"> 2322</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendThreadSendStreamMetadataPacket1&quot;</span>)</div><div class="line"><a name="l02323"></a><span class="lineno"> 2323</span>&#160;{</div><div class="line"><a name="l02324"></a><span class="lineno"> 2324</span>&#160;    ProfilingStateMachine profilingStateMachine;</div><div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;</div><div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> mockProfilingConnection;</div><div class="line"><a name="l02327"></a><span class="lineno"> 2327</span>&#160;    BufferManager bufferManager(3, 1024);</div><div class="line"><a name="l02328"></a><span class="lineno"> 2328</span>&#160;    SendCounterPacket sendCounterPacket(bufferManager,</div><div class="line"><a name="l02329"></a><span class="lineno"> 2329</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l02330"></a><span class="lineno"> 2330</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l02331"></a><span class="lineno"> 2331</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l02332"></a><span class="lineno"> 2332</span>&#160;    SendThread sendThread(profilingStateMachine, bufferManager, sendCounterPacket);</div><div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;</div><div class="line"><a name="l02335"></a><span class="lineno"> 2335</span>&#160;    <span class="comment">// The profiling state is set to &quot;Uninitialized&quot;, so the send thread should throw an exception</span></div><div class="line"><a name="l02336"></a><span class="lineno"> 2336</span>&#160;    CHECK_THROWS_AS(sendThread.Stop(), arm::pipe::ProfilingException);</div><div class="line"><a name="l02337"></a><span class="lineno"> 2337</span>&#160;}</div><div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160;</div><div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendThreadSendStreamMetadataPacket2&quot;</span>)</div><div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;{</div><div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160;    ProfilingStateMachine profilingStateMachine;</div><div class="line"><a name="l02342"></a><span class="lineno"> 2342</span>&#160;    SetNotConnectedProfilingState(profilingStateMachine);</div><div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;</div><div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> mockProfilingConnection;</div><div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;    BufferManager bufferManager(3, 1024);</div><div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160;    SendCounterPacket sendCounterPacket(bufferManager,</div><div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;    SendThread sendThread(profilingStateMachine, bufferManager, sendCounterPacket);</div><div class="line"><a name="l02351"></a><span class="lineno"> 2351</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l02352"></a><span class="lineno"> 2352</span>&#160;</div><div class="line"><a name="l02353"></a><span class="lineno"> 2353</span>&#160;    <span class="comment">// The profiling state is set to &quot;NotConnected&quot;, so the send thread should throw an exception</span></div><div class="line"><a name="l02354"></a><span class="lineno"> 2354</span>&#160;    CHECK_THROWS_AS(sendThread.Stop(), arm::pipe::ProfilingException);</div><div class="line"><a name="l02355"></a><span class="lineno"> 2355</span>&#160;}</div><div class="line"><a name="l02356"></a><span class="lineno"> 2356</span>&#160;</div><div class="line"><a name="l02357"></a><span class="lineno"> 2357</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendThreadSendStreamMetadataPacket3&quot;</span>)</div><div class="line"><a name="l02358"></a><span class="lineno"> 2358</span>&#160;{</div><div class="line"><a name="l02359"></a><span class="lineno"> 2359</span>&#160;    ProfilingStateMachine profilingStateMachine;</div><div class="line"><a name="l02360"></a><span class="lineno"> 2360</span>&#160;    SetWaitingForAckProfilingState(profilingStateMachine);</div><div class="line"><a name="l02361"></a><span class="lineno"> 2361</span>&#160;</div><div class="line"><a name="l02362"></a><span class="lineno"> 2362</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> streamMetadataPacketsize = <a class="code" href="_profiling_test_utils_8cpp.xhtml#aa449021ed1a9de7abcdbd0ca903577db">GetStreamMetaDataPacketSize</a>();</div><div class="line"><a name="l02363"></a><span class="lineno"> 2363</span>&#160;</div><div class="line"><a name="l02364"></a><span class="lineno"> 2364</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> mockProfilingConnection;</div><div class="line"><a name="l02365"></a><span class="lineno"> 2365</span>&#160;    BufferManager bufferManager(3, 1024);</div><div class="line"><a name="l02366"></a><span class="lineno"> 2366</span>&#160;    SendCounterPacket sendCounterPacket(bufferManager,</div><div class="line"><a name="l02367"></a><span class="lineno"> 2367</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l02368"></a><span class="lineno"> 2368</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l02369"></a><span class="lineno"> 2369</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l02370"></a><span class="lineno"> 2370</span>&#160;    SendThread sendThread(profilingStateMachine, bufferManager, sendCounterPacket);</div><div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;</div><div class="line"><a name="l02373"></a><span class="lineno"> 2373</span>&#160;    <span class="comment">// The profiling state is set to &quot;WaitingForAck&quot;, so the send thread should send a Stream Metadata packet</span></div><div class="line"><a name="l02374"></a><span class="lineno"> 2374</span>&#160;    <span class="comment">// Wait for sendThread to join</span></div><div class="line"><a name="l02375"></a><span class="lineno"> 2375</span>&#160;    CHECK_NOTHROW(sendThread.Stop());</div><div class="line"><a name="l02376"></a><span class="lineno"> 2376</span>&#160;</div><div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;    <span class="comment">// Check that the buffer contains at least one Stream Metadata packet and no other packets</span></div><div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> writtenDataSize = mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#adc32d741a992ea6f9af3f9e65aebf34d">GetWrittenDataSize</a>();</div><div class="line"><a name="l02379"></a><span class="lineno"> 2379</span>&#160;</div><div class="line"><a name="l02380"></a><span class="lineno"> 2380</span>&#160;    CHECK(writtenDataSize &gt;= 1u);</div><div class="line"><a name="l02381"></a><span class="lineno"> 2381</span>&#160;    CHECK(mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">CheckForPacket</a>(</div><div class="line"><a name="l02382"></a><span class="lineno"> 2382</span>&#160;                  {PacketType::StreamMetaData, streamMetadataPacketsize}) == writtenDataSize);</div><div class="line"><a name="l02383"></a><span class="lineno"> 2383</span>&#160;}</div><div class="line"><a name="l02384"></a><span class="lineno"> 2384</span>&#160;</div><div class="line"><a name="l02385"></a><span class="lineno"> 2385</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendThreadSendStreamMetadataPacket4&quot;</span>)</div><div class="line"><a name="l02386"></a><span class="lineno"> 2386</span>&#160;{</div><div class="line"><a name="l02387"></a><span class="lineno"> 2387</span>&#160;    ProfilingStateMachine profilingStateMachine;</div><div class="line"><a name="l02388"></a><span class="lineno"> 2388</span>&#160;    SetWaitingForAckProfilingState(profilingStateMachine);</div><div class="line"><a name="l02389"></a><span class="lineno"> 2389</span>&#160;</div><div class="line"><a name="l02390"></a><span class="lineno"> 2390</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> streamMetadataPacketsize = <a class="code" href="_profiling_test_utils_8cpp.xhtml#aa449021ed1a9de7abcdbd0ca903577db">GetStreamMetaDataPacketSize</a>();</div><div class="line"><a name="l02391"></a><span class="lineno"> 2391</span>&#160;</div><div class="line"><a name="l02392"></a><span class="lineno"> 2392</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> mockProfilingConnection;</div><div class="line"><a name="l02393"></a><span class="lineno"> 2393</span>&#160;    BufferManager bufferManager(3, 1024);</div><div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;    SendCounterPacket sendCounterPacket(bufferManager,</div><div class="line"><a name="l02395"></a><span class="lineno"> 2395</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l02396"></a><span class="lineno"> 2396</span>&#160;                                        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l02397"></a><span class="lineno"> 2397</span>&#160;                                        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l02398"></a><span class="lineno"> 2398</span>&#160;    SendThread sendThread(profilingStateMachine, bufferManager, sendCounterPacket);</div><div class="line"><a name="l02399"></a><span class="lineno"> 2399</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;</div><div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;    <span class="comment">// The profiling state is set to &quot;WaitingForAck&quot;, so the send thread should send a Stream Metadata packet</span></div><div class="line"><a name="l02402"></a><span class="lineno"> 2402</span>&#160;    <span class="comment">// Wait for sendThread to join</span></div><div class="line"><a name="l02403"></a><span class="lineno"> 2403</span>&#160;    sendThread.Stop();</div><div class="line"><a name="l02404"></a><span class="lineno"> 2404</span>&#160;</div><div class="line"><a name="l02405"></a><span class="lineno"> 2405</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l02406"></a><span class="lineno"> 2406</span>&#160;    <span class="comment">// Check that the profiling state is still &quot;WaitingForAck&quot;</span></div><div class="line"><a name="l02407"></a><span class="lineno"> 2407</span>&#160;    CHECK((profilingStateMachine.GetCurrentState() == ProfilingState::WaitingForAck));</div><div class="line"><a name="l02408"></a><span class="lineno"> 2408</span>&#160;</div><div class="line"><a name="l02409"></a><span class="lineno"> 2409</span>&#160;    <span class="comment">// Check that the buffer contains at least one Stream Metadata packet</span></div><div class="line"><a name="l02410"></a><span class="lineno"> 2410</span>&#160;    CHECK(mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">CheckForPacket</a>({PacketType::StreamMetaData, streamMetadataPacketsize}) &gt;= 1);</div><div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;</div><div class="line"><a name="l02412"></a><span class="lineno"> 2412</span>&#160;    mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a>();</div><div class="line"><a name="l02413"></a><span class="lineno"> 2413</span>&#160;</div><div class="line"><a name="l02414"></a><span class="lineno"> 2414</span>&#160;    sendThread.Stop();</div><div class="line"><a name="l02415"></a><span class="lineno"> 2415</span>&#160;    sendThread.Start(mockProfilingConnection);</div><div class="line"><a name="l02416"></a><span class="lineno"> 2416</span>&#160;</div><div class="line"><a name="l02417"></a><span class="lineno"> 2417</span>&#160;    <span class="comment">// Try triggering a new buffer read</span></div><div class="line"><a name="l02418"></a><span class="lineno"> 2418</span>&#160;    sendThread.SetReadyToRead();</div><div class="line"><a name="l02419"></a><span class="lineno"> 2419</span>&#160;</div><div class="line"><a name="l02420"></a><span class="lineno"> 2420</span>&#160;    <span class="comment">// Wait for sendThread to join</span></div><div class="line"><a name="l02421"></a><span class="lineno"> 2421</span>&#160;    CHECK_NOTHROW(sendThread.Stop());</div><div class="line"><a name="l02422"></a><span class="lineno"> 2422</span>&#160;</div><div class="line"><a name="l02423"></a><span class="lineno"> 2423</span>&#160;    <span class="comment">// Check that the profiling state is still &quot;WaitingForAck&quot;</span></div><div class="line"><a name="l02424"></a><span class="lineno"> 2424</span>&#160;    CHECK((profilingStateMachine.GetCurrentState() == ProfilingState::WaitingForAck));</div><div class="line"><a name="l02425"></a><span class="lineno"> 2425</span>&#160;</div><div class="line"><a name="l02426"></a><span class="lineno"> 2426</span>&#160;    <span class="comment">// Check that the buffer contains at least one Stream Metadata packet and no other packets</span></div><div class="line"><a name="l02427"></a><span class="lineno"> 2427</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> writtenDataSize = mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#adc32d741a992ea6f9af3f9e65aebf34d">GetWrittenDataSize</a>();</div><div class="line"><a name="l02428"></a><span class="lineno"> 2428</span>&#160;</div><div class="line"><a name="l02429"></a><span class="lineno"> 2429</span>&#160;    CHECK(writtenDataSize &gt;= 1u);</div><div class="line"><a name="l02430"></a><span class="lineno"> 2430</span>&#160;    CHECK(mockProfilingConnection.<a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">CheckForPacket</a>(</div><div class="line"><a name="l02431"></a><span class="lineno"> 2431</span>&#160;                  {PacketType::StreamMetaData, streamMetadataPacketsize}) == writtenDataSize);</div><div class="line"><a name="l02432"></a><span class="lineno"> 2432</span>&#160;}</div><div class="line"><a name="l02433"></a><span class="lineno"> 2433</span>&#160;</div><div class="line"><a name="l02434"></a><span class="lineno"> 2434</span>&#160;}</div><div class="ttc" id="classarm_1_1pipe_1_1_mock_send_counter_packet_xhtml_a3b526a823530443efec886c4305e52de"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a3b526a823530443efec886c4305e52de">arm::pipe::MockSendCounterPacket::SendCounterDirectoryPacket</a></div><div class="ttdeci">void SendCounterDirectoryPacket(const ICounterDirectory &amp;counterDirectory) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00408">ProfilingMocks.hpp:408</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ac44342ac08725d8f5dd52e2ee93ca20d"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ac44342ac08725d8f5dd52e2ee93ca20d">arm::pipe::MockCounterDirectory::RegisterCategory</a></div><div class="ttdeci">const Category * RegisterCategory(const std::string &amp;categoryName)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00454">ProfilingMocks.hpp:454</a></div></div>
<div class="ttc" id="_send_counter_packet_tests_8hpp_xhtml"><div class="ttname"><a href="_send_counter_packet_tests_8hpp.xhtml">SendCounterPacketTests.hpp</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_a1819a5a244fd4317b6dcd49cdbf67a2d"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a1819a5a244fd4317b6dcd49cdbf67a2d">arm::pipe::MockCounterDirectory::RegisterDevice</a></div><div class="ttdeci">const Device * RegisterDevice(const std::string &amp;deviceName, uint16_t cores=0)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00470">ProfilingMocks.hpp:470</a></div></div>
<div class="ttc" id="_utils_8hpp_xhtml"><div class="ttname"><a href="_utils_8hpp.xhtml">Utils.hpp</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ad9062caad1836f8e6b810e4e97bb19d1"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad9062caad1836f8e6b810e4e97bb19d1">arm::pipe::MockCounterDirectory::GetCounterCount</a></div><div class="ttdeci">uint16_t GetCounterCount() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00580">ProfilingMocks.hpp:580</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_send_counter_packet_test_xhtml_acb17c17dafb058a74ebb61bf680aea36"><div class="ttname"><a href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#acb17c17dafb058a74ebb61bf680aea36">arm::pipe::SendCounterPacketTest::CreateCategoryRecordTest</a></div><div class="ttdeci">bool CreateCategoryRecordTest(const CategoryPtr &amp;category, const Counters &amp;counters, CategoryRecord &amp;categoryRecord, std::string &amp;errorMessage)</div><div class="ttdef"><b>Definition:</b> <a href="_send_counter_packet_tests_8hpp_source.xhtml#l00060">SendCounterPacketTests.hpp:60</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">arm::pipe::MockBufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00207">ProfilingMocks.hpp:207</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml">arm::pipe::MockStreamCounterBuffer</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00281">ProfilingMocks.hpp:281</a></div></div>
<div class="ttc" id="_profiling_test_utils_8cpp_xhtml_aa449021ed1a9de7abcdbd0ca903577db"><div class="ttname"><a href="_profiling_test_utils_8cpp.xhtml#aa449021ed1a9de7abcdbd0ca903577db">GetStreamMetaDataPacketSize</a></div><div class="ttdeci">uint32_t GetStreamMetaDataPacketSize()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_test_utils_8cpp_source.xhtml#l00026">ProfilingTestUtils.cpp:26</a></div></div>
<div class="ttc" id="namespacearm_1_1pipe_xhtml"><div class="ttname"><a href="namespacearm_1_1pipe.xhtml">arm::pipe</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00020">BackendRegistry.hpp:20</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a1de32cbfa025fc6e4eb2ff7a4fd16d6b"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">arm::pipe::MockProfilingConnection::CheckForPacket</a></div><div class="ttdeci">long CheckForPacket(const std::pair&lt; PacketType, uint32_t &gt; packetInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00112">ProfilingMocks.hpp:112</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ad742b37bc2beb568e083225f3fd8160b"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad742b37bc2beb568e083225f3fd8160b">arm::pipe::MockCounterDirectory::GetDeviceCount</a></div><div class="ttdeci">uint16_t GetDeviceCount() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00578">ProfilingMocks.hpp:578</a></div></div>
<div class="ttc" id="_send_counter_packet_tests_8cpp_xhtml_af395cfb6d47bafef14938eb3c080eabe"><div class="ttname"><a href="_send_counter_packet_tests_8cpp.xhtml#af395cfb6d47bafef14938eb3c080eabe">TEST_SUITE</a></div><div class="ttdeci">TEST_SUITE(&quot;SendCounterPacketTests&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="_send_counter_packet_tests_8cpp_source.xhtml#l00100">SendCounterPacketTests.cpp:100</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml_ae717263b3243e9f88f4caea6d31b0652"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">arm::pipe::MockBufferManager::MarkRead</a></div><div class="ttdeci">void MarkRead(IPacketBufferPtr &amp;packetBuffer) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00252">ProfilingMocks.hpp:252</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">arm::pipe::MockProfilingConnection::PacketType</a></div><div class="ttdeci">PacketType</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00048">ProfilingMocks.hpp:48</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_ab158e7cd554e5f65e77bad0c4d448474"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ab158e7cd554e5f65e77bad0c4d448474">arm::pipe::MockStreamCounterBuffer::GetReadableSize</a></div><div class="ttdeci">unsigned int GetReadableSize() const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00368">ProfilingMocks.hpp:368</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ae3b7dbaa7317dacbcec25f30f6a16075"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae3b7dbaa7317dacbcec25f30f6a16075">arm::pipe::MockCounterDirectory::GetCounterSetCount</a></div><div class="ttdeci">uint16_t GetCounterSetCount() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00579">ProfilingMocks.hpp:579</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">arm::pipe::MockProfilingConnection</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00039">ProfilingMocks.hpp:39</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_send_counter_packet_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml">arm::pipe::MockSendCounterPacket</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00394">ProfilingMocks.hpp:394</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_a7233f6a0ab843a226dc07c72edd76168"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7233f6a0ab843a226dc07c72edd76168">arm::pipe::MockStreamCounterBuffer::GetReadSize</a></div><div class="ttdeci">unsigned int GetReadSize() const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00369">ProfilingMocks.hpp:369</a></div></div>
<div class="ttc" id="_utils_8hpp_xhtml_abbf421eb1186af0d505648ed2ea54a00"><div class="ttname"><a href="_utils_8hpp.xhtml#abbf421eb1186af0d505648ed2ea54a00">ARMNN_FALLTHROUGH</a></div><div class="ttdeci">#define ARMNN_FALLTHROUGH</div><div class="ttdef"><b>Definition:</b> <a href="_utils_8hpp_source.xhtml#l00037">Utils.hpp:37</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_a4626db62503c13042a745a40399f8317"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a4626db62503c13042a745a40399f8317">arm::pipe::MockCounterDirectory::GetCategoryCount</a></div><div class="ttdeci">uint16_t GetCategoryCount() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00577">ProfilingMocks.hpp:577</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_send_counter_packet_xhtml_a47406a4d108beb4f20031d370a155a9d"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a47406a4d108beb4f20031d370a155a9d">arm::pipe::MockSendCounterPacket::SendPeriodicCounterSelectionPacket</a></div><div class="ttdeci">void SendPeriodicCounterSelectionPacket(uint32_t capturePeriod, const std::vector&lt; uint16_t &gt; &amp;selectedCounterIds) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00431">ProfilingMocks.hpp:431</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_send_counter_packet_test_xhtml_a210600b9a259b46ae502cd48ffc56c8c"><div class="ttname"><a href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#a210600b9a259b46ae502cd48ffc56c8c">arm::pipe::SendCounterPacketTest::CreateDeviceRecordTest</a></div><div class="ttdeci">bool CreateDeviceRecordTest(const DevicePtr &amp;device, DeviceRecord &amp;deviceRecord, std::string &amp;errorMessage)</div><div class="ttdef"><b>Definition:</b> <a href="_send_counter_packet_tests_8hpp_source.xhtml#l00039">SendCounterPacketTests.hpp:39</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_send_counter_packet_test_xhtml_ae3d24bdc7d5c52a9ffad4089d05124a7"><div class="ttname"><a href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#ae3d24bdc7d5c52a9ffad4089d05124a7">arm::pipe::SendCounterPacketTest::CreateCounterSetRecordTest</a></div><div class="ttdeci">bool CreateCounterSetRecordTest(const CounterSetPtr &amp;counterSet, CounterSetRecord &amp;counterSetRecord, std::string &amp;errorMessage)</div><div class="ttdef"><b>Definition:</b> <a href="_send_counter_packet_tests_8hpp_source.xhtml#l00046">SendCounterPacketTests.hpp:46</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_send_counter_packet_xhtml_ac9261c6ee7d313090d15cfa22173d80c"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#ac9261c6ee7d313090d15cfa22173d80c">arm::pipe::MockSendCounterPacket::SendPeriodicCounterCapturePacket</a></div><div class="ttdeci">void SendPeriodicCounterCapturePacket(uint64_t timestamp, const std::vector&lt; CounterValue &gt; &amp;values) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00419">ProfilingMocks.hpp:419</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_send_counter_packet_test_xhtml_ab87fa1168a364aa3a1629fa8986a6369"><div class="ttname"><a href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml#ab87fa1168a364aa3a1629fa8986a6369">arm::pipe::SendCounterPacketTest::CreateEventRecordTest</a></div><div class="ttdeci">bool CreateEventRecordTest(const CounterPtr &amp;counter, EventRecord &amp;eventRecord, std::string &amp;errorMessage)</div><div class="ttdef"><b>Definition:</b> <a href="_send_counter_packet_tests_8hpp_source.xhtml#l00053">SendCounterPacketTests.hpp:53</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_adc32d741a992ea6f9af3f9e65aebf34d"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#adc32d741a992ea6f9af3f9e65aebf34d">arm::pipe::MockProfilingConnection::GetWrittenDataSize</a></div><div class="ttdeci">unsigned long GetWrittenDataSize()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00145">ProfilingMocks.hpp:145</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_a0a0b47bcd9b2b00de2c82761705cfd58"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a0a0b47bcd9b2b00de2c82761705cfd58">arm::pipe::MockStreamCounterBuffer::GetCommittedSize</a></div><div class="ttdeci">unsigned int GetCommittedSize() const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00367">ProfilingMocks.hpp:367</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_send_counter_packet_test_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_send_counter_packet_test.xhtml">arm::pipe::SendCounterPacketTest</a></div><div class="ttdef"><b>Definition:</b> <a href="_send_counter_packet_tests_8hpp_source.xhtml#l00029">SendCounterPacketTests.hpp:29</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_send_counter_packet_xhtml_a2a2e451c4e4963909b8a6dc7e7653cd1"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a2a2e451c4e4963909b8a6dc7e7653cd1">arm::pipe::MockSendCounterPacket::SendStreamMetaDataPacket</a></div><div class="ttdeci">void SendStreamMetaDataPacket() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00399">ProfilingMocks.hpp:399</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ae0d8bd45562c0887985b1be728640bbc"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae0d8bd45562c0887985b1be728640bbc">arm::pipe::MockCounterDirectory::RegisterCounterSet</a></div><div class="ttdeci">const CounterSet * RegisterCounterSet(const std::string &amp;counterSetName, uint16_t count=0)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00490">ProfilingMocks.hpp:490</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml_abce8709dc1b666a26f427ba7ff08b737"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">arm::pipe::MockBufferManager::GetReadableBuffer</a></div><div class="ttdeci">IPacketBufferPtr GetReadableBuffer() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00241">ProfilingMocks.hpp:241</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="_profiling_test_utils_8hpp_xhtml"><div class="ttname"><a href="_profiling_test_utils_8hpp.xhtml">ProfilingTestUtils.hpp</a></div></div>
<div class="ttc" id="_profiling_mocks_8hpp_xhtml"><div class="ttname"><a href="_profiling_mocks_8hpp.xhtml">ProfilingMocks.hpp</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_afc8de778ee03bedee2df4f9387060465"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#afc8de778ee03bedee2df4f9387060465">arm::pipe::MockCounterDirectory::RegisterCounter</a></div><div class="ttdeci">const Counter * RegisterCounter(const std::string &amp;backendId, const uint16_t uid, const std::string &amp;parentCategoryName, uint16_t counterClass, uint16_t interpolation, double multiplier, const std::string &amp;name, const std::string &amp;description, const arm::pipe::Optional&lt; std::string &gt; &amp;units=arm::pipe::EmptyOptional(), const arm::pipe::Optional&lt; uint16_t &gt; &amp;numberOfCores=arm::pipe::EmptyOptional(), const arm::pipe::Optional&lt; uint16_t &gt; &amp;deviceUid=arm::pipe::EmptyOptional(), const arm::pipe::Optional&lt; uint16_t &gt; &amp;counterSetUid=arm::pipe::EmptyOptional())</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00511">ProfilingMocks.hpp:511</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_aa71d36872f416feaa853788a7a7a7ef8"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#aa71d36872f416feaa853788a7a7a7ef8">arm::pipe::MockProfilingConnection::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00152">ProfilingMocks.hpp:152</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml">arm::pipe::MockCounterDirectory</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00447">ProfilingMocks.hpp:447</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_637c692f14729569dd2eac0c18e2a54a.xhtml">profiling</a></li><li class="navelem"><a class="el" href="dir_6b1198f6e738611120ec65b09506d2f8.xhtml">test</a></li><li class="navelem"><a class="el" href="_send_counter_packet_tests_8cpp.xhtml">SendCounterPacketTests.cpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:24 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
