<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: TestLayerVisitor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_test_layer_visitor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classarmnn_1_1_test_layer_visitor-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TestLayerVisitor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_test_layer_visitor_8hpp_source.xhtml">TestLayerVisitor.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for TestLayerVisitor:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_test_layer_visitor.png" usemap="#TestLayerVisitor_map" alt=""/>
  <map id="TestLayerVisitor_map" name="TestLayerVisitor_map">
<area href="classarmnn_1_1_strategy_base.xhtml" alt="StrategyBase&lt; NoThrowStrategy &gt;" shape="rect" coords="0,56,243,80"/>
<area href="classarmnn_1_1_i_strategy.xhtml" alt="IStrategy" shape="rect" coords="0,0,243,24"/>
<area href="classarmnn_1_1_lstm_visitor.xhtml" alt="LstmVisitor" shape="rect" coords="253,168,496,192"/>
<area href="classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml" alt="TestBatchNormalizationLayerVisitor" shape="rect" coords="253,224,496,248"/>
<area href="classarmnn_1_1_test_constant_layer_visitor.xhtml" alt="TestConstantLayerVisitor" shape="rect" coords="253,280,496,304"/>
<area href="classarmnn_1_1_test_convolution2d_layer_visitor.xhtml" alt="TestConvolution2dLayerVisitor" shape="rect" coords="253,336,496,360"/>
<area href="classarmnn_1_1_test_depthwise_convolution2d_layer_visitor.xhtml" alt="TestDepthwiseConvolution2dLayerVisitor" shape="rect" coords="253,392,496,416"/>
<area href="classarmnn_1_1_test_fully_connected_layer_vistor.xhtml" alt="TestFullyConnectedLayerVistor" shape="rect" coords="253,448,496,472"/>
<area href="classarmnn_1_1_test_input_layer_visitor.xhtml" alt="TestInputLayerVisitor" shape="rect" coords="253,504,496,528"/>
<area href="classarmnn_1_1_test_output_layer_visitor.xhtml" alt="TestOutputLayerVisitor" shape="rect" coords="253,560,496,584"/>
<area href="classarmnn_1_1_test_quantized_lstm_layer_visitor.xhtml" alt="TestQuantizedLstmLayerVisitor" shape="rect" coords="253,616,496,640"/>
<area href="class_test_activation_layer_visitor.xhtml" alt="TestActivationLayerVisitor" shape="rect" coords="253,672,496,696"/>
<area href="class_test_addition_layer_visitor.xhtml" alt="TestAdditionLayerVisitor" shape="rect" coords="253,728,496,752"/>
<area href="class_test_arg_min_max_layer_visitor.xhtml" alt="TestArgMinMaxLayerVisitor" shape="rect" coords="253,784,496,808"/>
<area href="class_test_batch_to_space_nd_layer_visitor.xhtml" alt="TestBatchToSpaceNdLayerVisitor" shape="rect" coords="253,840,496,864"/>
<area href="class_test_comparison_layer_visitor.xhtml" alt="TestComparisonLayerVisitor" shape="rect" coords="253,896,496,920"/>
<area href="class_test_concat_layer_visitor.xhtml" alt="TestConcatLayerVisitor" shape="rect" coords="253,952,496,976"/>
<area href="class_test_depth_to_space_layer_visitor.xhtml" alt="TestDepthToSpaceLayerVisitor" shape="rect" coords="253,1008,496,1032"/>
<area href="class_test_dequantize_layer_visitor.xhtml" alt="TestDequantizeLayerVisitor" shape="rect" coords="253,1064,496,1088"/>
<area href="class_test_division_layer_visitor.xhtml" alt="TestDivisionLayerVisitor" shape="rect" coords="253,1120,496,1144"/>
<area href="class_test_elementwise_unary_layer_visitor.xhtml" alt="TestElementwiseUnaryLayerVisitor" shape="rect" coords="253,1176,496,1200"/>
<area href="class_test_fill_layer_visitor.xhtml" alt="TestFillLayerVisitor" shape="rect" coords="253,1232,496,1256"/>
<area href="class_test_floor_layer_visitor.xhtml" alt="TestFloorLayerVisitor" shape="rect" coords="253,1288,496,1312"/>
<area href="class_test_gather_layer_visitor.xhtml" alt="TestGatherLayerVisitor" shape="rect" coords="253,1344,496,1368"/>
<area href="class_test_instance_normalization_layer_visitor.xhtml" alt="TestInstanceNormalizationLayerVisitor" shape="rect" coords="253,1400,496,1424"/>
<area href="class_test_l2_normalization_layer_visitor.xhtml" alt="TestL2NormalizationLayerVisitor" shape="rect" coords="253,1456,496,1480"/>
<area href="class_test_logical_binary_layer_visitor.xhtml" alt="TestLogicalBinaryLayerVisitor" shape="rect" coords="253,1512,496,1536"/>
<area href="class_test_log_softmax_layer_visitor.xhtml" alt="TestLogSoftmaxLayerVisitor" shape="rect" coords="253,1568,496,1592"/>
<area href="class_test_maximum_layer_visitor.xhtml" alt="TestMaximumLayerVisitor" shape="rect" coords="253,1624,496,1648"/>
<area href="class_test_mean_layer_visitor.xhtml" alt="TestMeanLayerVisitor" shape="rect" coords="253,1680,496,1704"/>
<area href="class_test_merge_layer_visitor.xhtml" alt="TestMergeLayerVisitor" shape="rect" coords="253,1736,496,1760"/>
<area href="class_test_minimum_layer_visitor.xhtml" alt="TestMinimumLayerVisitor" shape="rect" coords="253,1792,496,1816"/>
<area href="class_test_multiplication_layer_visitor.xhtml" alt="TestMultiplicationLayerVisitor" shape="rect" coords="253,1848,496,1872"/>
<area href="class_test_normalization_layer_visitor.xhtml" alt="TestNormalizationLayerVisitor" shape="rect" coords="253,1904,496,1928"/>
<area href="class_test_pad_layer_visitor.xhtml" alt="TestPadLayerVisitor" shape="rect" coords="253,1960,496,1984"/>
<area href="class_test_permute_layer_visitor.xhtml" alt="TestPermuteLayerVisitor" shape="rect" coords="253,2016,496,2040"/>
<area href="class_test_pooling2d_layer_visitor.xhtml" alt="TestPooling2dLayerVisitor" shape="rect" coords="253,2072,496,2096"/>
<area href="class_test_prelu_layer_visitor.xhtml" alt="TestPreluLayerVisitor" shape="rect" coords="253,2128,496,2152"/>
<area href="class_test_quantize_layer_visitor.xhtml" alt="TestQuantizeLayerVisitor" shape="rect" coords="253,2184,496,2208"/>
<area href="class_test_rank_layer_visitor.xhtml" alt="TestRankLayerVisitor" shape="rect" coords="253,2240,496,2264"/>
<area href="class_test_reduce_layer_visitor.xhtml" alt="TestReduceLayerVisitor" shape="rect" coords="253,2296,496,2320"/>
<area href="class_test_reshape_layer_visitor.xhtml" alt="TestReshapeLayerVisitor" shape="rect" coords="253,2352,496,2376"/>
<area href="class_test_resize_layer_visitor.xhtml" alt="TestResizeLayerVisitor" shape="rect" coords="253,2408,496,2432"/>
<area href="class_test_slice_layer_visitor.xhtml" alt="TestSliceLayerVisitor" shape="rect" coords="253,2464,496,2488"/>
<area href="class_test_softmax_layer_visitor.xhtml" alt="TestSoftmaxLayerVisitor" shape="rect" coords="253,2520,496,2544"/>
<area href="class_test_space_to_batch_nd_layer_visitor.xhtml" alt="TestSpaceToBatchNdLayerVisitor" shape="rect" coords="253,2576,496,2600"/>
<area href="class_test_space_to_depth_layer_visitor.xhtml" alt="TestSpaceToDepthLayerVisitor" shape="rect" coords="253,2632,496,2656"/>
<area href="class_test_splitter_layer_visitor.xhtml" alt="TestSplitterLayerVisitor" shape="rect" coords="253,2688,496,2712"/>
<area href="class_test_stack_layer_visitor.xhtml" alt="TestStackLayerVisitor" shape="rect" coords="253,2744,496,2768"/>
<area href="class_test_stand_in_layer_visitor.xhtml" alt="TestStandInLayerVisitor" shape="rect" coords="253,2800,496,2824"/>
<area href="class_test_strided_slice_layer_visitor.xhtml" alt="TestStridedSliceLayerVisitor" shape="rect" coords="253,2856,496,2880"/>
<area href="class_test_subtraction_layer_visitor.xhtml" alt="TestSubtractionLayerVisitor" shape="rect" coords="253,2912,496,2936"/>
<area href="class_test_switch_layer_visitor.xhtml" alt="TestSwitchLayerVisitor" shape="rect" coords="253,2968,496,2992"/>
<area href="class_test_transpose_layer_visitor.xhtml" alt="TestTransposeLayerVisitor" shape="rect" coords="253,3024,496,3048"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7bca6e8733a25190cb5b2731d31c195f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a7bca6e8733a25190cb5b2731d31c195f">TestLayerVisitor</a> (const char *name)</td></tr>
<tr class="separator:a7bca6e8733a25190cb5b2731d31c195f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_strategy_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_strategy_base')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_strategy_base.xhtml">StrategyBase&lt; NoThrowStrategy &gt;</a></td></tr>
<tr class="memitem:a889a82ed924e0a300c4d98a0333b37ff inherit pub_methods_classarmnn_1_1_strategy_base"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_strategy_base.xhtml#a889a82ed924e0a300c4d98a0333b37ff">ExecuteStrategy</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a> &amp;descriptor, const std::vector&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &gt; &amp;constants, const char *name, const <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> id=0) override</td></tr>
<tr class="separator:a889a82ed924e0a300c4d98a0333b37ff inherit pub_methods_classarmnn_1_1_strategy_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_strategy"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_strategy')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a></td></tr>
<tr class="memitem:adf2f7effbf860b32e9a4ef2a73f84190 inherit pub_methods_classarmnn_1_1_i_strategy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_strategy.xhtml#adf2f7effbf860b32e9a4ef2a73f84190">FinishStrategy</a> ()</td></tr>
<tr class="separator:adf2f7effbf860b32e9a4ef2a73f84190 inherit pub_methods_classarmnn_1_1_i_strategy"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a91d4162aba5f047ac80adaf0abf9c804"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a91d4162aba5f047ac80adaf0abf9c804">~TestLayerVisitor</a> ()</td></tr>
<tr class="separator:a91d4162aba5f047ac80adaf0abf9c804"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50d9ed2d05fac25795824c880f0eee6b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a50d9ed2d05fac25795824c880f0eee6b">CheckLayerName</a> (const char *name)</td></tr>
<tr class="separator:a50d9ed2d05fac25795824c880f0eee6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fb243351836fe2feebd36e7e3869154"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a3fb243351836fe2feebd36e7e3869154">CheckLayerPointer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer)</td></tr>
<tr class="separator:a3fb243351836fe2feebd36e7e3869154"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab49c9a185af94e39ae9cd81aa8ec926c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a> (const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;expected, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;actual)</td></tr>
<tr class="separator:ab49c9a185af94e39ae9cd81aa8ec926c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7737443404804375fd677bc4b7c599be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a7737443404804375fd677bc4b7c599be">CheckConstTensors</a> (const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;expected, const <a class="el" href="classarmnn_1_1_const_tensor_handle.xhtml">ConstTensorHandle</a> &amp;actual)</td></tr>
<tr class="separator:a7737443404804375fd677bc4b7c599be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac45b7720c3156ab1004a904da7d42b44"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#ac45b7720c3156ab1004a904da7d42b44">CheckConstTensorPtrs</a> (const std::string &amp;name, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> *expected, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> *actual)</td></tr>
<tr class="separator:ac45b7720c3156ab1004a904da7d42b44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a606572552d4609bbb3e9d46c1147f218"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a606572552d4609bbb3e9d46c1147f218">CheckConstTensorPtrs</a> (const std::string &amp;name, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> *expected, const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_const_tensor_handle.xhtml">ConstTensorHandle</a> &gt; actual)</td></tr>
<tr class="separator:a606572552d4609bbb3e9d46c1147f218"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d389b5affe2059991cfd9184b8e0b47"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a2d389b5affe2059991cfd9184b8e0b47">CheckOptionalConstTensors</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;expected, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;actual)</td></tr>
<tr class="separator:a2d389b5affe2059991cfd9184b8e0b47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_strategy_base"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_strategy_base')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_strategy_base.xhtml">StrategyBase&lt; NoThrowStrategy &gt;</a></td></tr>
<tr class="memitem:ae3168b9deef118b7f6031f6f38fdc781 inherit pro_methods_classarmnn_1_1_strategy_base"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_strategy_base.xhtml#ae3168b9deef118b7f6031f6f38fdc781">~StrategyBase</a> ()</td></tr>
<tr class="separator:ae3168b9deef118b7f6031f6f38fdc781 inherit pro_methods_classarmnn_1_1_strategy_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_strategy"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_strategy')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a></td></tr>
<tr class="memitem:a196ae18353afdcea7f8ab5c4cc7b3a6b inherit pro_methods_classarmnn_1_1_i_strategy"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_strategy.xhtml#a196ae18353afdcea7f8ab5c4cc7b3a6b">IStrategy</a> ()</td></tr>
<tr class="separator:a196ae18353afdcea7f8ab5c4cc7b3a6b inherit pro_methods_classarmnn_1_1_i_strategy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f538e1051453290c8b8bb61e417bce1 inherit pro_methods_classarmnn_1_1_i_strategy"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_strategy.xhtml#a6f538e1051453290c8b8bb61e417bce1">~IStrategy</a> ()</td></tr>
<tr class="separator:a6f538e1051453290c8b8bb61e417bce1 inherit pro_methods_classarmnn_1_1_i_strategy"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_attribs_classarmnn_1_1_strategy_base"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classarmnn_1_1_strategy_base')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classarmnn_1_1_strategy_base.xhtml">StrategyBase&lt; NoThrowStrategy &gt;</a></td></tr>
<tr class="memitem:a9a0391eb40693be520f3092c130c2a57 inherit pro_attribs_classarmnn_1_1_strategy_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1_no_throw_strategy.xhtml">NoThrowStrategy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_strategy_base.xhtml#a9a0391eb40693be520f3092c130c2a57">m_DefaultStrategy</a></td></tr>
<tr class="separator:a9a0391eb40693be520f3092c130c2a57 inherit pro_attribs_classarmnn_1_1_strategy_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00014">14</a> of file <a class="el" href="_test_layer_visitor_8hpp_source.xhtml">TestLayerVisitor.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a91d4162aba5f047ac80adaf0abf9c804"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91d4162aba5f047ac80adaf0abf9c804">&#9670;&nbsp;</a></span>~TestLayerVisitor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml">TestLayerVisitor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00017">17</a> of file <a class="el" href="_test_layer_visitor_8hpp_source.xhtml">TestLayerVisitor.hpp</a>.</p>

<p class="reference">References <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00090">TestLayerVisitor::CheckConstTensorPtrs()</a>, <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00034">TestLayerVisitor::CheckConstTensors()</a>, <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00013">TestLayerVisitor::CheckLayerName()</a>, <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00029">TestLayerVisitor::CheckLayerPointer()</a>, and <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00108">TestLayerVisitor::CheckOptionalConstTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<a id="a7bca6e8733a25190cb5b2731d31c195f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bca6e8733a25190cb5b2731d31c195f">&#9670;&nbsp;</a></span>TestLayerVisitor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml">TestLayerVisitor</a> </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00041">41</a> of file <a class="el" href="_test_layer_visitor_8hpp_source.xhtml">TestLayerVisitor.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                                : m_LayerName(name)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">if</span> (name == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            m_LayerName = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac45b7720c3156ab1004a904da7d42b44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac45b7720c3156ab1004a904da7d42b44">&#9670;&nbsp;</a></span>CheckConstTensorPtrs() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckConstTensorPtrs </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> *&#160;</td>
          <td class="paramname"><em>expected</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> *&#160;</td>
          <td class="paramname"><em>actual</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00090">90</a> of file <a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00034">TestLayerVisitor::CheckConstTensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00250">LstmVisitor::CheckInputParameters()</a>, <a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00070">TestQuantizedLstmLayerVisitor::CheckInputParameters()</a>, and <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00017">TestLayerVisitor::~TestLayerVisitor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">if</span> (expected == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        CHECK_MESSAGE(actual == <span class="keyword">nullptr</span>, (name + <span class="stringliteral">&quot; actual should have been a nullptr&quot;</span>));</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        CHECK_MESSAGE(actual != <span class="keyword">nullptr</span>, (name + <span class="stringliteral">&quot; actual should have been set&quot;</span>));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">if</span> (actual != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a>(*expected, *actual);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_ab49c9a185af94e39ae9cd81aa8ec926c"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">armnn::TestLayerVisitor::CheckConstTensors</a></div><div class="ttdeci">void CheckConstTensors(const ConstTensor &amp;expected, const ConstTensor &amp;actual)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00034">TestLayerVisitor.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a606572552d4609bbb3e9d46c1147f218"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a606572552d4609bbb3e9d46c1147f218">&#9670;&nbsp;</a></span>CheckConstTensorPtrs() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckConstTensorPtrs </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> *&#160;</td>
          <td class="paramname"><em>expected</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_const_tensor_handle.xhtml">ConstTensorHandle</a> &gt;&#160;</td>
          <td class="paramname"><em>actual</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00034">TestLayerVisitor::CheckConstTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span> (expected == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        CHECK_MESSAGE(actual == <span class="keyword">nullptr</span>, (name + <span class="stringliteral">&quot; actual should have been a nullptr&quot;</span>));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        CHECK_MESSAGE(actual != <span class="keyword">nullptr</span>, (name + <span class="stringliteral">&quot; actual should have been set&quot;</span>));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">if</span> (actual != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a>(*expected, *actual);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_ab49c9a185af94e39ae9cd81aa8ec926c"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">armnn::TestLayerVisitor::CheckConstTensors</a></div><div class="ttdeci">void CheckConstTensors(const ConstTensor &amp;expected, const ConstTensor &amp;actual)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00034">TestLayerVisitor.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab49c9a185af94e39ae9cd81aa8ec926c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab49c9a185af94e39ae9cd81aa8ec926c">&#9670;&nbsp;</a></span>CheckConstTensors() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckConstTensors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>expected</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>actual</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00295">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00305">BaseTensor&lt; MemoryType &gt;::GetMemoryArea()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00302">BaseTensor&lt; MemoryType &gt;::GetNumBytes()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00301">BaseTensor&lt; MemoryType &gt;::GetNumDimensions()</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00303">BaseTensor&lt; MemoryType &gt;::GetNumElements()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00072">TestLayerVisitor::CheckConstTensorPtrs()</a>, <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00108">TestLayerVisitor::CheckOptionalConstTensors()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00159">TestBatchNormalizationLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00206">TestConstantLayerVisitor::ExecuteStrategy()</a>, and <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00017">TestLayerVisitor::~TestLayerVisitor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    CHECK(expected.GetInfo() == actual.GetInfo());</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    CHECK(expected.GetNumDimensions() == actual.GetNumDimensions());</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    CHECK(expected.GetNumElements() == actual.GetNumElements());</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    CHECK(expected.GetNumBytes() == actual.GetNumBytes());</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">if</span> (expected.GetNumBytes() == actual.GetNumBytes())</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="comment">//check data is the same byte by byte</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* expectedPtr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(expected.GetMemoryArea());</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* actualPtr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(actual.GetMemoryArea());</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; expected.GetNumBytes(); i++)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            CHECK(*(expectedPtr + i) == *(actualPtr + i));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7737443404804375fd677bc4b7c599be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7737443404804375fd677bc4b7c599be">&#9670;&nbsp;</a></span>CheckConstTensors() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckConstTensors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>expected</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor_handle.xhtml">ConstTensorHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>actual</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00295">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00305">BaseTensor&lt; MemoryType &gt;::GetMemoryArea()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00302">BaseTensor&lt; MemoryType &gt;::GetNumBytes()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00301">BaseTensor&lt; MemoryType &gt;::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00303">BaseTensor&lt; MemoryType &gt;::GetNumElements()</a>, <a class="el" href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00040">ConstTensorHandle::GetTensorInfo()</a>, <a class="el" href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00049">ConstTensorHandle::Map()</a>, and <a class="el" href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00050">ConstTensorHandle::Unmap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">auto</span>&amp; actualInfo = actual.GetTensorInfo();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    CHECK(expected.GetInfo() == actualInfo);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    CHECK(expected.GetNumDimensions() == actualInfo.GetNumDimensions());</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    CHECK(expected.GetNumElements() == actualInfo.GetNumElements());</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    CHECK(expected.GetNumBytes() == actualInfo.GetNumBytes());</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span> (expected.GetNumBytes() == actualInfo.GetNumBytes())</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="comment">//check data is the same byte by byte</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* expectedPtr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(expected.GetMemoryArea());</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* actualPtr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(actual.Map(<span class="keyword">true</span>));</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; expected.GetNumBytes(); i++)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            CHECK(*(expectedPtr + i) == *(actualPtr + i));</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        actual.Unmap();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a50d9ed2d05fac25795824c880f0eee6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50d9ed2d05fac25795824c880f0eee6b">&#9670;&nbsp;</a></span>CheckLayerName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckLayerName </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00013">13</a> of file <a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_test_input_output_layer_visitor_8hpp_source.xhtml#l00030">TestInputLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00031">TestConvolution2dLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_test_input_output_layer_visitor_8hpp_source.xhtml#l00065">TestOutputLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00072">TestDepthwiseConvolution2dLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00113">TestFullyConnectedLayerVistor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00159">TestBatchNormalizationLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00206">TestConstantLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00331">TestLstmLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00372">TestQLstmLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00413">TestQuantizedLstmLayerVisitor::ExecuteStrategy()</a>, and <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00017">TestLayerVisitor::~TestLayerVisitor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <span class="keywordflow">if</span> (name == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        CHECK(m_LayerName == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    }</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_LayerName == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    {</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        CHECK(name == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    }</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        CHECK_EQ(std::string(m_LayerName), std::string(name));</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    }</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3fb243351836fe2feebd36e7e3869154"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fb243351836fe2feebd36e7e3869154">&#9670;&nbsp;</a></span>CheckLayerPointer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckLayerPointer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_test_input_output_layer_visitor_8hpp_source.xhtml#l00030">TestInputLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00031">TestConvolution2dLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_test_input_output_layer_visitor_8hpp_source.xhtml#l00065">TestOutputLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00072">TestDepthwiseConvolution2dLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00113">TestFullyConnectedLayerVistor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00159">TestBatchNormalizationLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00206">TestConstantLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00331">TestLstmLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00372">TestQLstmLayerVisitor::ExecuteStrategy()</a>, <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00413">TestQuantizedLstmLayerVisitor::ExecuteStrategy()</a>, and <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00017">TestLayerVisitor::~TestLayerVisitor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    CHECK(layer != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2d389b5affe2059991cfd9184b8e0b47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d389b5affe2059991cfd9184b8e0b47">&#9670;&nbsp;</a></span>CheckOptionalConstTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckOptionalConstTensors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>expected</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>actual</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00108">108</a> of file <a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00034">TestLayerVisitor::CheckConstTensors()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_test_layer_visitor_8hpp_source.xhtml#l00017">TestLayerVisitor::~TestLayerVisitor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    CHECK(expected.has_value() == actual.has_value());</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> (expected.has_value() &amp;&amp; actual.has_value())</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a>(expected.value(), actual.value());</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_ab49c9a185af94e39ae9cd81aa8ec926c"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">armnn::TestLayerVisitor::CheckConstTensors</a></div><div class="ttdeci">void CheckConstTensors(const ConstTensor &amp;expected, const ConstTensor &amp;actual)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00034">TestLayerVisitor.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/test/<a class="el" href="_test_layer_visitor_8hpp_source.xhtml">TestLayerVisitor.hpp</a></li>
<li>src/armnn/test/<a class="el" href="_test_layer_visitor_8cpp_source.xhtml">TestLayerVisitor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml">TestLayerVisitor</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:26 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
