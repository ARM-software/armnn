<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: MockProfilingConnection Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1profiling_1_1_mock_profiling_connection-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">MockProfilingConnection Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for MockProfilingConnection:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1profiling_1_1_mock_profiling_connection.png" usemap="#MockProfilingConnection_map" alt=""/>
  <map id="MockProfilingConnection_map" name="MockProfilingConnection_map">
<area href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml" alt="IProfilingConnection" shape="rect" coords="0,0,154,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a0a80a7bc045affcf10846075b88cbca0"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">PacketType</a> { <br />
&#160;&#160;<a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ae43273a3645f4894a1088081feb9827d">StreamMetaData</a>, 
<a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ab9eaea43754be09188f3b4d2e20f6c95">ConnectionAcknowledge</a>, 
<a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ad2cacb6bc37a3363ae810b656e3b6190">CounterDirectory</a>, 
<a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a79bb5b82761f89b8d72b4c79a9511c54">ReqCounterDirectory</a>, 
<br />
&#160;&#160;<a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0aebabc0e295bef3bf6d0d659a4843ebe4">PeriodicCounterSelection</a>, 
<a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ac0b9859e4ac3c476e5cf6bb0c7a70dc5">PerJobCounterSelection</a>, 
<a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a532e27bb0051b56c487ef37d522dcc2b">TimelineMessageDirectory</a>, 
<a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a4952ebb7930976133a3520fb113f77b7">PeriodicCounterCapture</a>, 
<br />
&#160;&#160;<a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a2f84b9fefbbd5a3bc6d655e9ddb70547">ActivateTimelineReporting</a>, 
<a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ae1161354f5dc60bd440e23cc4ecbfa5a">DeactivateTimelineReporting</a>, 
<a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>
<br />
 }</td></tr>
<tr class="separator:a0a80a7bc045affcf10846075b88cbca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a372bdcb3088c30e1a5bb38cf4b30d586"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a372bdcb3088c30e1a5bb38cf4b30d586">MockProfilingConnection</a> ()</td></tr>
<tr class="separator:a372bdcb3088c30e1a5bb38cf4b30d586"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91bdc9d5497d47f5d707418beb83b140"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a91bdc9d5497d47f5d707418beb83b140">IsOpen</a> () const override</td></tr>
<tr class="separator:a91bdc9d5497d47f5d707418beb83b140"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f9aecd570c4e5e6d41337f0e2f1adf5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0f9aecd570c4e5e6d41337f0e2f1adf5">Close</a> () override</td></tr>
<tr class="separator:a0f9aecd570c4e5e6d41337f0e2f1adf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42eb542b5a1d73d00c4ce474140bb78c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a42eb542b5a1d73d00c4ce474140bb78c">WritePacket</a> (const unsigned char *buffer, uint32_t length) override</td></tr>
<tr class="separator:a42eb542b5a1d73d00c4ce474140bb78c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1de32cbfa025fc6e4eb2ff7a4fd16d6b"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">CheckForPacket</a> (const std::pair&lt; <a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">PacketType</a>, uint32_t &gt; packetInfo)</td></tr>
<tr class="separator:a1de32cbfa025fc6e4eb2ff7a4fd16d6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae7fa615d4a944a10122344cf8bbd1be"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#aae7fa615d4a944a10122344cf8bbd1be">WritePacket</a> (arm::pipe::Packet &amp;&amp;packet)</td></tr>
<tr class="separator:aae7fa615d4a944a10122344cf8bbd1be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47c113357d105d4f7a549a058e5661ab"><td class="memItemLeft" align="right" valign="top">arm::pipe::Packet&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a47c113357d105d4f7a549a058e5661ab">ReadPacket</a> (uint32_t timeout) override</td></tr>
<tr class="separator:a47c113357d105d4f7a549a058e5661ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc32d741a992ea6f9af3f9e65aebf34d"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#adc32d741a992ea6f9af3f9e65aebf34d">GetWrittenDataSize</a> ()</td></tr>
<tr class="separator:adc32d741a992ea6f9af3f9e65aebf34d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa71d36872f416feaa853788a7a7a7ef8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a> ()</td></tr>
<tr class="separator:aa71d36872f416feaa853788a7a7a7ef8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1profiling_1_1_i_profiling_connection"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1profiling_1_1_i_profiling_connection')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml">IProfilingConnection</a></td></tr>
<tr class="memitem:a8c5a75b8ee005a7aa9391f3991480d74 inherit pub_methods_classarmnn_1_1profiling_1_1_i_profiling_connection"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#a8c5a75b8ee005a7aa9391f3991480d74">~IProfilingConnection</a> ()</td></tr>
<tr class="separator:a8c5a75b8ee005a7aa9391f3991480d74 inherit pub_methods_classarmnn_1_1profiling_1_1_i_profiling_connection"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00036">36</a> of file <a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>.</p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a0a80a7bc045affcf10846075b88cbca0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a80a7bc045affcf10846075b88cbca0">&#9670;&nbsp;</a></span>PacketType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">PacketType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a0a80a7bc045affcf10846075b88cbca0ae43273a3645f4894a1088081feb9827d"></a>StreamMetaData&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0a80a7bc045affcf10846075b88cbca0ab9eaea43754be09188f3b4d2e20f6c95"></a>ConnectionAcknowledge&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0a80a7bc045affcf10846075b88cbca0ad2cacb6bc37a3363ae810b656e3b6190"></a>CounterDirectory&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0a80a7bc045affcf10846075b88cbca0a79bb5b82761f89b8d72b4c79a9511c54"></a>ReqCounterDirectory&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0a80a7bc045affcf10846075b88cbca0aebabc0e295bef3bf6d0d659a4843ebe4"></a>PeriodicCounterSelection&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0a80a7bc045affcf10846075b88cbca0ac0b9859e4ac3c476e5cf6bb0c7a70dc5"></a>PerJobCounterSelection&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0a80a7bc045affcf10846075b88cbca0a532e27bb0051b56c487ef37d522dcc2b"></a>TimelineMessageDirectory&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0a80a7bc045affcf10846075b88cbca0a4952ebb7930976133a3520fb113f77b7"></a>PeriodicCounterCapture&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0a80a7bc045affcf10846075b88cbca0a2f84b9fefbbd5a3bc6d655e9ddb70547"></a>ActivateTimelineReporting&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0a80a7bc045affcf10846075b88cbca0ae1161354f5dc60bd440e23cc4ecbfa5a"></a>DeactivateTimelineReporting&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e"></a>Unknown&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00045">45</a> of file <a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        StreamMetaData,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        ConnectionAcknowledge,</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        CounterDirectory,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        ReqCounterDirectory,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        PeriodicCounterSelection,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        PerJobCounterSelection,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        TimelineMessageDirectory,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        PeriodicCounterCapture,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        ActivateTimelineReporting,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        DeactivateTimelineReporting,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        Unknown</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    };</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a372bdcb3088c30e1a5bb38cf4b30d586"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a372bdcb3088c30e1a5bb38cf4b30d586">&#9670;&nbsp;</a></span>MockProfilingConnection()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00039">39</a> of file <a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        : m_IsOpen(<span class="keyword">true</span>)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        , m_WrittenData()</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        , m_Packet()</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a1de32cbfa025fc6e4eb2ff7a4fd16d6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">&#9670;&nbsp;</a></span>CheckForPacket()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">long CheckForPacket </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">PacketType</a>, uint32_t &gt;&#160;</td>
          <td class="paramname"><em>packetInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00109">109</a> of file <a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8hpp_source.xhtml#l00242">SwapProfilingConnectionFactoryHelper::WaitForPacketsSent()</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">if</span>(packetInfo.second != 0)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">long</span><span class="keyword">&gt;</span>(std::count(m_WrittenData.begin(), m_WrittenData.end(), packetInfo));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">long</span><span class="keyword">&gt;</span>(std::count_if(m_WrittenData.begin(), m_WrittenData.end(),</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            [&amp;packetInfo](<span class="keyword">const</span> std::pair&lt;PacketType, uint32_t&gt; pair) { <span class="keywordflow">return</span> packetInfo.first == pair.first; }));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="aa71d36872f416feaa853788a7a7a7ef8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa71d36872f416feaa853788a7a7a7ef8">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00149">149</a> of file <a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        m_WrittenData.clear();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a0f9aecd570c4e5e6d41337f0e2f1adf5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f9aecd570c4e5e6d41337f0e2f1adf5">&#9670;&nbsp;</a></span>Close()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Close </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#aacb6d0e5e6d570cdc2b0da14c3921ff0">IProfilingConnection</a>.</p>

<p class="definition">Definition at line <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00067">67</a> of file <a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        m_IsOpen = <span class="keyword">false</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="adc32d741a992ea6f9af3f9e65aebf34d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc32d741a992ea6f9af3f9e65aebf34d">&#9670;&nbsp;</a></span>GetWrittenDataSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long GetWrittenDataSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00142">142</a> of file <a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">long</span><span class="keyword">&gt;</span>(m_WrittenData.size());</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a91bdc9d5497d47f5d707418beb83b140"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91bdc9d5497d47f5d707418beb83b140">&#9670;&nbsp;</a></span>IsOpen()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsOpen </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#a8a3511046982c64efa3e3833d749e5ef">IProfilingConnection</a>.</p>

<p class="definition">Definition at line <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00060">60</a> of file <a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">return</span> m_IsOpen;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a47c113357d105d4f7a549a058e5661ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47c113357d105d4f7a549a058e5661ab">&#9670;&nbsp;</a></span>ReadPacket()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">arm::pipe::Packet ReadPacket </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>timeout</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#a5247de645666d82d97c2b047835404ee">IProfilingConnection</a>.</p>

<p class="definition">Definition at line <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00132">132</a> of file <a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>
<div class="fragment"><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(timeout);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="comment">// Simulate a delay in the reading process. The default timeout is way too long.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        std::this_thread::sleep_for(std::chrono::milliseconds(5));</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">return</span> std::move(m_Packet);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a42eb542b5a1d73d00c4ce474140bb78c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42eb542b5a1d73d00c4ce474140bb78c">&#9670;&nbsp;</a></span>WritePacket() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool WritePacket </td>
          <td>(</td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#ac78c6bd1a545934a805c88194214b09d">IProfilingConnection</a>.</p>

<p class="definition">Definition at line <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00074">74</a> of file <a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a4952ebb7930976133a3520fb113f77b7">MockProfilingConnection::PeriodicCounterCapture</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00181">armnn::profiling::ReadUint32()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a532e27bb0051b56c487ef37d522dcc2b">MockProfilingConnection::TimelineMessageDirectory</a>, and <a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">MockProfilingConnection::Unknown</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">if</span> (buffer == <span class="keyword">nullptr</span> || length == 0)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        uint32_t header = <a class="code" href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">ReadUint32</a>(buffer, 0);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        uint32_t packetFamily = (header &gt;&gt; 26);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        uint32_t packetId = ((header &gt;&gt; 16) &amp; 1023);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <a class="code" href="_profiling_tests_8cpp.xhtml#a50c4e63be72ccec884654d07f81bc9e9">PacketType</a> packetType;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">switch</span> (packetFamily)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordflow">case</span> 0:</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                packetType = packetId &lt; 8 ? <a class="code" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">PacketType</a>(packetId) : PacketType::Unknown;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                packetType = packetId == 0 ? <a class="code" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a532e27bb0051b56c487ef37d522dcc2b">PacketType::TimelineMessageDirectory</a> : <a class="code" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">PacketType::Unknown</a>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                packetType = packetId == 0 ? <a class="code" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a4952ebb7930976133a3520fb113f77b7">PacketType::PeriodicCounterCapture</a> : <a class="code" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">PacketType::Unknown</a>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                packetType = <a class="code" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">PacketType::Unknown</a>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        m_WrittenData.push_back({ packetType, length });</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1profiling_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">armnn::profiling::MockProfilingConnection::PacketType::Unknown</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0a532e27bb0051b56c487ef37d522dcc2b"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a532e27bb0051b56c487ef37d522dcc2b">armnn::profiling::MockProfilingConnection::PacketType::TimelineMessageDirectory</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">armnn::profiling::MockProfilingConnection::PacketType</a></div><div class="ttdeci">PacketType</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00045">ProfilingMocks.hpp:45</a></div></div>
<div class="ttc" id="_profiling_tests_8cpp_xhtml_a50c4e63be72ccec884654d07f81bc9e9"><div class="ttname"><a href="_profiling_tests_8cpp.xhtml#a50c4e63be72ccec884654d07f81bc9e9">PacketType</a></div><div class="ttdeci">MockProfilingConnection::PacketType PacketType</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_tests_8cpp_source.xhtml#l00055">ProfilingTests.cpp:55</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0a4952ebb7930976133a3520fb113f77b7"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a4952ebb7930976133a3520fb113f77b7">armnn::profiling::MockProfilingConnection::PacketType::PeriodicCounterCapture</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ad56f4c3ea5e88279bb6ef1f31d9dc6df"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">armnn::profiling::ReadUint32</a></div><div class="ttdeci">uint32_t ReadUint32(const IPacketBufferPtr &amp;packetBuffer, unsigned int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00181">ProfilingUtils.cpp:181</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aae7fa615d4a944a10122344cf8bbd1be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae7fa615d4a944a10122344cf8bbd1be">&#9670;&nbsp;</a></span>WritePacket() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool WritePacket </td>
          <td>(</td>
          <td class="paramtype">arm::pipe::Packet &amp;&amp;&#160;</td>
          <td class="paramname"><em>packet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00124">124</a> of file <a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        m_Packet = std::move(packet);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/profiling/test/<a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1profiling.xhtml">profiling</a></li><li class="navelem"><a class="el" href="classarmnn_1_1profiling_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:25 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
