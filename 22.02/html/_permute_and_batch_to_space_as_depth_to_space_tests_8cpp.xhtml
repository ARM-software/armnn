<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/optimizations/PermuteAndBatchToSpaceAsDepthToSpaceTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_permute_and_batch_to_space_as_depth_to_space_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">PermuteAndBatchToSpaceAsDepthToSpaceTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;TestUtils.hpp&gt;</code><br />
<code>#include &lt;<a class="el" href="_network_8hpp_source.xhtml">Network.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_optimizer_8hpp_source.xhtml">Optimizer.hpp</a>&gt;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
</div>
<p><a href="_permute_and_batch_to_space_as_depth_to_space_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a77a062dba8ec73047ae4e734519f5ef8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_permute_and_batch_to_space_as_depth_to_space_tests_8cpp.xhtml#a77a062dba8ec73047ae4e734519f5ef8">TEST_SUITE</a> (&quot;Optimizer&quot;)</td></tr>
<tr class="separator:a77a062dba8ec73047ae4e734519f5ef8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a77a062dba8ec73047ae4e734519f5ef8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77a062dba8ec73047ae4e734519f5ef8">&#9670;&nbsp;</a></span>TEST_SUITE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TEST_SUITE </td>
          <td>(</td>
          <td class="paramtype">&quot;Optimizer&quot;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shared function for the below tests, so that we test the same network in both cases.</p>
<p>Shared function for the below tests, so that we test the same network in both cases.</p>
<p>Tests that the optimization performed by PermuteAndBatchToSpaceAsDepthToSpace is as expected. Note this does not ensure the correctness of the optimization - that is done in the below test.</p>
<p>Tests that the optimization performed by PermuteAndBatchToSpaceAsDepthToSpace is as expected. Note this does not ensure the correctness of the optimization - that is done in the below test. </p>

<p class="definition">Definition at line <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_tests_8cpp_source.xhtml#l00015">15</a> of file <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_tests_8cpp_source.xhtml">PermuteAndBatchToSpaceAsDepthToSpaceTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_graph_8hpp_source.xhtml#l00177">Graph::cbegin()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00179">Graph::cend()</a>, <a class="el" href="est_utils_2_test_utils_8hpp_source.xhtml#l00021">CheckSequence()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::CpuRef</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00040">IRuntime::Create()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00492">INetwork::Create()</a>, <a class="el" href="_cl_custom_allocator_tests_8cpp_source.xhtml#l00063">CreateTestNetwork()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_test_utils_8cpp_source.xhtml#l00047">armnn::GetGraphForTesting()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00858">BatchToSpaceNdDescriptor::m_BlockShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00862">BatchToSpaceNdDescriptor::m_DataLayout</a>, <a class="el" href="_optimizer_8hpp_source.xhtml#l00043">armnn::MakeOptimizations()</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="_network_8cpp_source.xhtml#l01680">armnn::Optimize()</a>, and <a class="el" href="_optimizer_8cpp_source.xhtml#l00016">Optimizer::Pass()</a>.</p>
<div class="fragment"><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn_1_1optimizations.xhtml">armnn::optimizations</a>;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">/// Shared function for the below tests, so that we test the same network in both cases.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"></span>std::unique_ptr&lt;NetworkImpl&gt; CreateTestNetworkImpl()</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    std::unique_ptr&lt;NetworkImpl&gt; network(<span class="keyword">new</span> <a class="code" href="classarmnn_1_1_network_impl.xhtml">NetworkImpl</a>());</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">auto</span> input = network-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo({ 1, 2, 3, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    input-&gt;GetOutputSlot(0).SetTensorInfo(inputInfo);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="comment">// Insert Permute which swaps batches and channels dimensions</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keyword">auto</span> permute = network-&gt;AddPermuteLayer(<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a>(<a class="code" href="classarmnn_1_1_permutation_vector.xhtml">PermutationVector</a>{ 3, 1, 2, 0 }), <span class="stringliteral">&quot;permute&quot;</span>);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> permuteInfo({ 4, 2, 3, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    permute-&gt;GetOutputSlot(0).SetTensorInfo(permuteInfo);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    input-&gt;GetOutputSlot(0).Connect(permute-&gt;GetInputSlot(0));</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// Insert BatchToSpace</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> batchToSpaceDesc;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    batchToSpaceDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">m_BlockShape</a> = { 2, 2 };</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    batchToSpaceDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">auto</span> batchToSpace             = network-&gt;AddBatchToSpaceNdLayer(batchToSpaceDesc, <span class="stringliteral">&quot;batchToSpace&quot;</span>);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> batchToSpaceInfo({ 1, 4, 6, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    batchToSpace-&gt;GetOutputSlot(0).SetTensorInfo(batchToSpaceInfo);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    permute-&gt;GetOutputSlot(0).Connect(batchToSpace-&gt;GetInputSlot(0));</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">auto</span> output = network-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    batchToSpace-&gt;GetOutputSlot(0).Connect(output-&gt;GetInputSlot(0));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> network;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">/// Shared function for the below tests, so that we test the same network in both cases.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span>std::unique_ptr&lt;NetworkImpl&gt; CreateTransposeTestNetworkImpl()</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// Create a network</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::unique_ptr&lt;NetworkImpl&gt; network(<span class="keyword">new</span> <a class="code" href="classarmnn_1_1_network_impl.xhtml">NetworkImpl</a>());</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">auto</span> input = network-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo({ 1, 2, 3, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    input-&gt;GetOutputSlot(0).SetTensorInfo(inputInfo);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// Insert Permute which swaps batches and channels dimensions</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">auto</span> permute = network-&gt;AddTransposeLayer(<a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a>(<a class="code" href="classarmnn_1_1_permutation_vector.xhtml">PermutationVector</a>{ 3, 1, 2, 0 }), <span class="stringliteral">&quot;permute&quot;</span>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> permuteInfo({ 4, 2, 3, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    permute-&gt;GetOutputSlot(0).SetTensorInfo(permuteInfo);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    input-&gt;GetOutputSlot(0).Connect(permute-&gt;GetInputSlot(0));</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// Insert BatchToSpace</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> batchToSpaceDesc;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    batchToSpaceDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">m_BlockShape</a> = { 2, 2 };</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    batchToSpaceDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">auto</span> batchToSpace             = network-&gt;AddBatchToSpaceNdLayer(batchToSpaceDesc, <span class="stringliteral">&quot;batchToSpace&quot;</span>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> batchToSpaceInfo({ 1, 4, 6, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    batchToSpace-&gt;GetOutputSlot(0).SetTensorInfo(batchToSpaceInfo);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    permute-&gt;GetOutputSlot(0).Connect(batchToSpace-&gt;GetInputSlot(0));</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">auto</span> output = network-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    batchToSpace-&gt;GetOutputSlot(0).Connect(output-&gt;GetInputSlot(0));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> network;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}    <span class="comment">// namespace</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">/// Tests that the optimization performed by PermuteAndBatchToSpaceAsDepthToSpace is as expected.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">/// Note this does not ensure the correctness of the optimization - that is done in the below test.</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"></span>TEST_CASE(<span class="stringliteral">&quot;PermuteAndBatchToSpaceAsDepthToSpaceOptimizerTest&quot;</span>)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    std::unique_ptr&lt;NetworkImpl&gt; network = CreateTestNetworkImpl();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph         = network.get()-&gt;GetGraph();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// Confirm initial graph is as we expect</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(), graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(), &amp;IsLayerOfType&lt;InputLayer&gt;, &amp;IsLayerOfType&lt;PermuteLayer&gt;,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                             &amp;IsLayerOfType&lt;BatchToSpaceNdLayer&gt;, &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="comment">// Perform the optimization which should merge the two layers into a DepthToSpace</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="classarmnn_1_1_optimizer.xhtml#a1f48ba622b76ea04d15c9b62f642bf08">armnn::Optimizer::Pass</a>(graph, <a class="code" href="namespacearmnn.xhtml#aa7427025a851113a492de0b68b23d22a">MakeOptimizations</a>(<a class="code" href="namespacearmnn_1_1optimizations.xhtml#a17d1279f5f8e3b92c328b1ed3b6fd549">PermuteAndBatchToSpaceAsDepthToSpace</a>()));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// Check that the replacement has been made as expected</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">auto</span> checkDepthToSpace = [](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* <span class="keyword">const</span> layer) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span> IsLayerOfType&lt;DepthToSpaceLayer&gt;(layer) &amp;&amp;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;               static_cast&lt;const DepthToSpaceLayer*&gt;(layer)-&gt;GetParameters().m_BlockSize == 2 &amp;&amp;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;               <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="classarmnn_1_1_depth_to_space_layer.xhtml">DepthToSpaceLayer</a>*<span class="keyword">&gt;</span>(layer)-&gt;GetParameters().m_DataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a> &amp;&amp;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;               layer-&gt;GetOutputHandler().GetTensorInfo() == <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 4, 6, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    };</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(), graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(), &amp;IsLayerOfType&lt;InputLayer&gt;, checkDepthToSpace,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                             &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// Check the new layer has the two merged layers listed as related layers</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    std::list&lt;std::string&gt; testRelatedLayers = { <span class="stringliteral">&quot;batchToSpace&quot;</span>, <span class="stringliteral">&quot;permute&quot;</span> };</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    CHECK(CheckRelatedLayers&lt;DepthToSpaceLayer&gt;(graph, testRelatedLayers));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">/// Tests that the optimization performed by PermuteAndBatchToSpaceAsDepthToSpace is as expected.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">/// Note this does not ensure the correctness of the optimization - that is done in the below test.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span>TEST_CASE(<span class="stringliteral">&quot;TransposeAndBatchToSpaceAsDepthToSpaceOptimizerTest&quot;</span>)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    std::unique_ptr&lt;NetworkImpl&gt; network = CreateTransposeTestNetworkImpl();</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph         = network.get()-&gt;GetGraph();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// Confirm initial graph is as we expect</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(), graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(), &amp;IsLayerOfType&lt;InputLayer&gt;, &amp;IsLayerOfType&lt;TransposeLayer&gt;,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                             &amp;IsLayerOfType&lt;BatchToSpaceNdLayer&gt;, &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// Perform the optimization which should merge the two layers into a DepthToSpace</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="classarmnn_1_1_optimizer.xhtml#a1f48ba622b76ea04d15c9b62f642bf08">armnn::Optimizer::Pass</a>(graph, <a class="code" href="namespacearmnn.xhtml#aa7427025a851113a492de0b68b23d22a">MakeOptimizations</a>(<a class="code" href="namespacearmnn_1_1optimizations.xhtml#a98f54d4391347d517c7a7869e7707203">TransposeAndBatchToSpaceAsDepthToSpace</a>()));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// Check that the replacement has been made as expected</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">auto</span> checkDepthToSpace = [](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* <span class="keyword">const</span> layer) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">return</span> IsLayerOfType&lt;DepthToSpaceLayer&gt;(layer) &amp;&amp;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;               static_cast&lt;const DepthToSpaceLayer*&gt;(layer)-&gt;GetParameters().m_BlockSize == 2 &amp;&amp;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;               <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="classarmnn_1_1_depth_to_space_layer.xhtml">DepthToSpaceLayer</a>*<span class="keyword">&gt;</span>(layer)-&gt;GetParameters().m_DataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a> &amp;&amp;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;               layer-&gt;GetOutputHandler().GetTensorInfo() == <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 4, 6, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    };</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(), graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(), &amp;IsLayerOfType&lt;InputLayer&gt;, checkDepthToSpace,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                             &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Check the new layer has the two merged layers listed as related layers</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    std::list&lt;std::string&gt; testRelatedLayers = { <span class="stringliteral">&quot;batchToSpace&quot;</span>, <span class="stringliteral">&quot;permute&quot;</span> };</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    CHECK(CheckRelatedLayers&lt;DepthToSpaceLayer&gt;(graph, testRelatedLayers));</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">// This unit test needs the reference backend, it&#39;s not available if the reference backend is not built</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">#if defined(ARMNNREF_ENABLED)</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">/// Shared function for the below tests, so that we test the same network in both cases.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"></span><a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> <a class="code" href="_cl_custom_allocator_tests_8cpp.xhtml#a15610ca027aa31bdc7f39133cd79359a">CreateTestNetwork</a>()</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">// Create a network</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> network = <a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>();</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">auto</span> input = network-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo({ 1, 2, 3, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    input-&gt;GetOutputSlot(0).SetTensorInfo(inputInfo);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Insert Permute which swaps batches and channels dimensions</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">auto</span> permute = network-&gt;AddPermuteLayer(<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a>(<a class="code" href="classarmnn_1_1_permutation_vector.xhtml">PermutationVector</a>{ 3, 1, 2, 0 }), <span class="stringliteral">&quot;permute&quot;</span>);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> permuteInfo({ 4, 2, 3, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    permute-&gt;GetOutputSlot(0).SetTensorInfo(permuteInfo);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    input-&gt;GetOutputSlot(0).Connect(permute-&gt;GetInputSlot(0));</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="comment">// Insert BatchToSpace</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> batchToSpaceDesc;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    batchToSpaceDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">m_BlockShape</a> = { 2, 2 };</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    batchToSpaceDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">auto</span> batchToSpace             = network-&gt;AddBatchToSpaceNdLayer(batchToSpaceDesc, <span class="stringliteral">&quot;batchToSpace&quot;</span>);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> batchToSpaceInfo({ 1, 4, 6, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    batchToSpace-&gt;GetOutputSlot(0).SetTensorInfo(batchToSpaceInfo);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    permute-&gt;GetOutputSlot(0).Connect(batchToSpace-&gt;GetInputSlot(0));</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">auto</span> output = network-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    batchToSpace-&gt;GetOutputSlot(0).Connect(output-&gt;GetInputSlot(0));</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">return</span> network;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">/// Shared function for the below tests, so that we test the same network in both cases.</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"></span><a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateTransposeTestNetwork()</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// Create a network</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> network = <a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">auto</span> input = network-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo({ 1, 2, 3, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    input-&gt;GetOutputSlot(0).SetTensorInfo(inputInfo);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// Insert Permute which swaps batches and channels dimensions</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">auto</span> permute = network-&gt;AddTransposeLayer(<a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a>(<a class="code" href="classarmnn_1_1_permutation_vector.xhtml">PermutationVector</a>{ 3, 1, 2, 0 }), <span class="stringliteral">&quot;permute&quot;</span>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> permuteInfo({ 4, 2, 3, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    permute-&gt;GetOutputSlot(0).SetTensorInfo(permuteInfo);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    input-&gt;GetOutputSlot(0).Connect(permute-&gt;GetInputSlot(0));</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">// Insert BatchToSpace</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> batchToSpaceDesc;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    batchToSpaceDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">m_BlockShape</a> = { 2, 2 };</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    batchToSpaceDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">auto</span> batchToSpace             = network-&gt;AddBatchToSpaceNdLayer(batchToSpaceDesc, <span class="stringliteral">&quot;batchToSpace&quot;</span>);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> batchToSpaceInfo({ 1, 4, 6, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    batchToSpace-&gt;GetOutputSlot(0).SetTensorInfo(batchToSpaceInfo);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    permute-&gt;GetOutputSlot(0).Connect(batchToSpace-&gt;GetInputSlot(0));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">auto</span> output = network-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    batchToSpace-&gt;GetOutputSlot(0).Connect(output-&gt;GetInputSlot(0));</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> network;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">/// Tests that a optimization performed by PermuteAndBatchToSpaceAsDepthToSpace does not change the behaviour</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">/// of the network (i.e. it still produces the correct output).</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"></span>TEST_CASE(<span class="stringliteral">&quot;PermuteAndBatchToSpaceAsDepthToSpaceCorrectnessTest&quot;</span>)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;{</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> network = <a class="code" href="_cl_custom_allocator_tests_8cpp.xhtml#a15610ca027aa31bdc7f39133cd79359a">CreateTestNetwork</a>();</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a>());</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optimizedNetwork = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, { <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">Compute::CpuRef</a> }, runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// Confirm that the optimization has actually taken place</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; optGraph = <a class="code" href="namespacearmnn.xhtml#a6a2659750d6161b693d0e51616791959">GetGraphForTesting</a>(optimizedNetwork.get());</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(optGraph.cbegin(), optGraph.cend(), &amp;IsLayerOfType&lt;InputLayer&gt;,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                             &amp;IsLayerOfType&lt;DepthToSpaceLayer&gt;, &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="comment">// Load the graph into a runtime so we can check it produces the correct output</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> netId;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    runtime-&gt;LoadNetwork(netId, std::move(optimizedNetwork));</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    std::vector&lt;float&gt; inputData{</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="comment">// Each row here is a row of pixels where each pixel has 4 channels</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="comment">// clang-format off</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        1.0f,  2.0f,  3.0f,  4.0f,      10.0f,  20.0f,  30.0f,  40.0f,      100.0f,  200.0f,  300.0f,  400.0f,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        -1.0f, -2.0f, -3.0f, -4.0f,    -10.0f, -20.0f, -30.0f, -40.0f,     -100.0f, -200.0f, -300.0f, -400.0f,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="comment">// clang-format on</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    };</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> input(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 2, 3, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>), inputData);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputs = { { 0, input } };</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    std::vector&lt;float&gt; outputData(4 * 6);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a> output(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 4, 6, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>), outputData.data());</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputs = { { 0, output } };</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputs, outputs);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// Check the output is as expected.</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">// Note this output has been generated by running the network *without* the optimization.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    std::vector&lt;float&gt; expectedOutput = {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="comment">// Rows and columns here match exactly with the tensor, as there is only 1 channel.</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="comment">// clang-format off</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        1.0f,  2.0f,     10.0f,  20.0f,     100.0f,  200.0f,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        3.0f,  4.0f,     30.0f,  40.0f,     300.0f,  400.0f,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        -1.0f, -2.0f,   -10.0f, -20.0f,    -100.0f, -200.0f,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        -3.0f, -4.0f,   -30.0f, -40.0f,    -300.0f, -400.0f,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="comment">// clang-format on</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    };</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    CHECK(outputData == expectedOutput);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">/// Tests that a optimization performed by PermuteAndBatchToSpaceAsDepthToSpace does not change the behaviour</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">/// of the network (i.e. it still produces the correct output).</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"></span>TEST_CASE(<span class="stringliteral">&quot;TransposeAndBatchToSpaceAsDepthToSpaceCorrectnessTest&quot;</span>)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;{</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> network = CreateTransposeTestNetwork();</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a>());</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optimizedNetwork = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, { <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">Compute::CpuRef</a> }, runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="comment">// Confirm that the optimization has actually taken place</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; optGraph = <a class="code" href="namespacearmnn.xhtml#a6a2659750d6161b693d0e51616791959">GetGraphForTesting</a>(optimizedNetwork.get());</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(optGraph.cbegin(), optGraph.cend(), &amp;IsLayerOfType&lt;InputLayer&gt;,</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                             &amp;IsLayerOfType&lt;DepthToSpaceLayer&gt;, &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="comment">// Load the graph into a runtime so we can check it produces the correct output</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> netId;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    runtime-&gt;LoadNetwork(netId, std::move(optimizedNetwork));</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    std::vector&lt;float&gt; inputData{</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="comment">// Each row here is a row of pixels where each pixel has 4 channels</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="comment">// clang-format off</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            1.0f,  2.0f,  3.0f,  4.0f,      10.0f,  20.0f,  30.0f,  40.0f,      100.0f,  200.0f,  300.0f,  400.0f,</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            -1.0f, -2.0f, -3.0f, -4.0f,    -10.0f, -20.0f, -30.0f, -40.0f,     -100.0f, -200.0f, -300.0f, -400.0f,</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="comment">// clang-format on</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    };</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> input(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 2, 3, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>), inputData);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputs = { { 0, input } };</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    std::vector&lt;float&gt; outputData(4 * 6);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a> output(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 4, 6, 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>), outputData.data());</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputs = { { 0, output } };</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputs, outputs);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="comment">// Check the output is as expected.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">// Note this output has been generated by running the network *without* the optimization.</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    std::vector&lt;float&gt; expectedOutput = {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="comment">// Rows and columns here match exactly with the tensor, as there is only 1 channel.</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="comment">// clang-format off</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            1.0f,  2.0f,     10.0f,  20.0f,     100.0f,  200.0f,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            3.0f,  4.0f,     30.0f,  40.0f,     300.0f,  400.0f,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            -1.0f, -2.0f,   -10.0f, -20.0f,    -100.0f, -200.0f,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            -3.0f, -4.0f,   -30.0f, -40.0f,    -300.0f, -400.0f,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="comment">// clang-format on</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    };</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    CHECK(outputData == expectedOutput);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00040">Runtime.cpp:40</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa7427025a851113a492de0b68b23d22a"><div class="ttname"><a href="namespacearmnn.xhtml#aa7427025a851113a492de0b68b23d22a">armnn::MakeOptimizations</a></div><div class="ttdeci">Optimizer::Optimizations MakeOptimizations(Args &amp;&amp;... args)</div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_8hpp_source.xhtml#l00043">Optimizer.hpp:43</a></div></div>
<div class="ttc" id="est_utils_2_test_utils_8hpp_xhtml_a0eedb278f57355b47fa983450d4e378c"><div class="ttname"><a href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a></div><div class="ttdeci">bool CheckSequence(const armnn::Graph::ConstIterator first, const armnn::Graph::ConstIterator last)</div><div class="ttdef"><b>Definition:</b> <a href="est_utils_2_test_utils_8hpp_source.xhtml#l00021">TestUtils.hpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_1_1optimizations_xhtml_a98f54d4391347d517c7a7869e7707203"><div class="ttname"><a href="namespacearmnn_1_1optimizations.xhtml#a98f54d4391347d517c7a7869e7707203">armnn::optimizations::TransposeAndBatchToSpaceAsDepthToSpace</a></div><div class="ttdeci">OptimizeForConnection&lt; TransposeLayer, BatchToSpaceNdLayer, PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; TransposeLayer &gt; &gt; TransposeAndBatchToSpaceAsDepthToSpace</div><div class="ttdef"><b>Definition:</b> <a href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00104">PermuteAndBatchToSpaceAsDepthToSpace.hpp:104</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_1_1optimizations_xhtml"><div class="ttname"><a href="namespacearmnn_1_1optimizations.xhtml">armnn::optimizations</a></div><div class="ttdef"><b>Definition:</b> <a href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00015">AddBroadcastReshapeLayer.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a98b1109a9006f8cc7d4566146a3bd737"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">armnn::Graph::cbegin</a></div><div class="ttdeci">ConstIterator cbegin() const</div><div class="ttdoc">Returns const iterator pointing to the beginning of the list. Lowercase for range-based for loops...</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00177">Graph.hpp:177</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimizer_xhtml_a1f48ba622b76ea04d15c9b62f642bf08"><div class="ttname"><a href="classarmnn_1_1_optimizer.xhtml#a1f48ba622b76ea04d15c9b62f642bf08">armnn::Optimizer::Pass</a></div><div class="ttdeci">static void Pass(Graph &amp;graph, const Optimizations &amp;optimizations)</div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_8cpp_source.xhtml#l00016">Optimizer.cpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00031">IRuntime.hpp:31</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::BatchToSpaceNdDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00862">Descriptors.hpp:862</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a></div><div class="ttdoc">A BatchToSpaceNdDescriptor for the BatchToSpaceNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00835">Descriptors.hpp:835</a></div></div>
<div class="ttc" id="classarmnn_1_1_network_impl_xhtml"><div class="ttname"><a href="classarmnn_1_1_network_impl.xhtml">armnn::NetworkImpl</a></div><div class="ttdoc">Private implementation of INetwork. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00031">Network.hpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="namespacearmnn_1_1optimizations_xhtml_a17d1279f5f8e3b92c328b1ed3b6fd549"><div class="ttname"><a href="namespacearmnn_1_1optimizations.xhtml#a17d1279f5f8e3b92c328b1ed3b6fd549">armnn::optimizations::PermuteAndBatchToSpaceAsDepthToSpace</a></div><div class="ttdeci">OptimizeForConnection&lt; PermuteLayer, BatchToSpaceNdLayer, PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteLayer &gt; &gt; PermuteAndBatchToSpaceAsDepthToSpace</div><div class="ttdef"><b>Definition:</b> <a href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00102">PermuteAndBatchToSpaceAsDepthToSpace.hpp:102</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01680">Network.cpp:1680</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml_a02e143524aefddd40b485fcf7dea6696"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">armnn::BatchToSpaceNdDescriptor::m_BlockShape</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_BlockShape</div><div class="ttdoc">Block shape values. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00858">Descriptors.hpp:858</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00242">INetwork.hpp:242</a></div></div>
<div class="ttc" id="classarmnn_1_1_permutation_vector_xhtml"><div class="ttname"><a href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a></div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00282">Types.hpp:282</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a6a2659750d6161b693d0e51616791959"><div class="ttname"><a href="namespacearmnn.xhtml#a6a2659750d6161b693d0e51616791959">armnn::GetGraphForTesting</a></div><div class="ttdeci">Graph &amp; GetGraphForTesting(IOptimizedNetwork *optNet)</div><div class="ttdef"><b>Definition:</b> <a href="_test_utils_8cpp_source.xhtml#l00047">TestUtils.cpp:47</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a></div><div class="ttdoc">A TransposeDescriptor for the TransposeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01442">Descriptors.hpp:1442</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a02fd29b6dc3e21fbe4484362d85893bc"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">armnn::Graph::cend</a></div><div class="ttdeci">ConstIterator cend() const</div><div class="ttdoc">Returns const iterator pointing to the end of the list. Lowercase for range-based for loops...</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00179">Graph.hpp:179</a></div></div>
<div class="ttc" id="_cl_custom_allocator_tests_8cpp_xhtml_a15610ca027aa31bdc7f39133cd79359a"><div class="ttname"><a href="_cl_custom_allocator_tests_8cpp.xhtml#a15610ca027aa31bdc7f39133cd79359a">CreateTestNetwork</a></div><div class="ttdeci">armnn::INetworkPtr CreateTestNetwork(armnn::TensorInfo &amp;inputTensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_custom_allocator_tests_8cpp_source.xhtml#l00063">ClCustomAllocatorTests.cpp:63</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00492">Network.cpp:492</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00215">Layer.hpp:215</a></div></div>
<div class="ttc" id="classarmnn_1_1_depth_to_space_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_depth_to_space_layer.xhtml">armnn::DepthToSpaceLayer</a></div><div class="ttdoc">This layer represents a DepthToSpace operation. </div><div class="ttdef"><b>Definition:</b> <a href="_depth_to_space_layer_8hpp_source.xhtml#l00014">DepthToSpaceLayer.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a></div><div class="ttdoc">A PermuteDescriptor for the PermuteLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00129">Descriptors.hpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_f1cd0e6da811a659c139424442adfb5f.xhtml">optimizations</a></li><li class="navelem"><a class="el" href="_permute_and_batch_to_space_as_depth_to_space_tests_8cpp.xhtml">PermuteAndBatchToSpaceAsDepthToSpaceTests.cpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:37 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
