<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/workloads/RefQLstmWorkload.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_ref_q_lstm_workload_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">RefQLstmWorkload.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_ref_q_lstm_workload_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2020 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_ref_q_lstm_workload_8hpp.xhtml">RefQLstmWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_activation_8hpp.xhtml">Activation.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_encoders_8hpp.xhtml">Encoders.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_decoders_8hpp.xhtml">Decoders.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_lstm_utils_8hpp.xhtml">LstmUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_ref_workload_utils_8hpp.xhtml">RefWorkloadUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_q_lstm_workload.xhtml#a143c3dfe9ce674a65bb5b93f91ec54e3">   16</a></span>&#160;<a class="code" href="classarmnn_1_1_ref_q_lstm_workload.xhtml#a143c3dfe9ce674a65bb5b93f91ec54e3">RefQLstmWorkload::RefQLstmWorkload</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">QLstmQueueDescriptor</a> &amp;descriptor, <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;info)</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        : <a class="code" href="classarmnn_1_1_ref_base_workload.xhtml">RefBaseWorkload</a>&lt;<a class="code" href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">QLstmQueueDescriptor</a>&gt;(descriptor, info)</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        , m_InputToInputWeightsTensor     (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_InputToInputWeights))</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        , m_InputToForgetWeightsTensor    (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_InputToForgetWeights))</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        , m_InputToCellWeightsTensor      (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_InputToCellWeights))</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        , m_InputToOutputWeightsTensor    (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_InputToOutputWeights))</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        , m_RecurrentToInputWeightsTensor (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_RecurrentToInputWeights))</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        , m_RecurrentToForgetWeightsTensor(<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_RecurrentToForgetWeights))</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        , m_RecurrentToCellWeightsTensor  (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_RecurrentToCellWeights))</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        , m_RecurrentToOutputWeightsTensor(<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_RecurrentToOutputWeights))</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        , m_CellToInputWeightsTensor      (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_CellToInputWeights))</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        , m_CellToForgetWeightsTensor     (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_CellToForgetWeights))</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        , m_CellToOutputWeightsTensor     (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_CellToOutputWeights))</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        , m_InputGateBiasTensor           (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_InputGateBias))</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        , m_ForgetGateBiasTensor          (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_ForgetGateBias))</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        , m_CellBiasTensor                (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_CellBias))</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        , m_OutputGateBiasTensor          (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_OutputGateBias))</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        , m_ProjectionWeightsTensor       (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_ProjectionWeights))</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        , m_ProjectionBiasTensor          (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_ProjectionBias))</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        , m_InputLayerNormWeightsTensor   (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_InputLayerNormWeights))</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        , m_ForgetLayerNormWeightsTensor  (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_ForgetLayerNormWeights))</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        , m_CellLayerNormWeightsTensor    (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_CellLayerNormWeights))</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        , m_OutputLayerNormWeightsTensor  (<a class="code" href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a>(descriptor.m_OutputLayerNormWeights))</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_q_lstm_workload.xhtml#ae071e8822437c78baea75c3aef3a263a">   46</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_ref_q_lstm_workload.xhtml#ae071e8822437c78baea75c3aef3a263a">RefQLstmWorkload::Execute</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="classarmnn_1_1_ref_q_lstm_workload.xhtml#ae071e8822437c78baea75c3aef3a263a">Execute</a>(<a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>, <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classarmnn_1_1_ref_q_lstm_workload.xhtml#a03726736f93bb28e11835f093f630a07">   51</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_ref_q_lstm_workload.xhtml#a03726736f93bb28e11835f093f630a07">RefQLstmWorkload::ExecuteAsync</a>(<a class="code" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &amp;workingMemDescriptor)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="classarmnn_1_1_ref_q_lstm_workload.xhtml#ae071e8822437c78baea75c3aef3a263a">Execute</a>(workingMemDescriptor.<a class="code" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>, workingMemDescriptor.<a class="code" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_ref_q_lstm_workload.xhtml#ae071e8822437c78baea75c3aef3a263a">RefQLstmWorkload::Execute</a>(std::vector&lt;ITensorHandle*&gt; inputs, std::vector&lt;ITensorHandle*&gt; outputs)<span class="keyword"> const</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// This is a porting of the QLSTM::Execute(std::vector&lt;ITensorHandle*&gt; inputs, std::vector&lt;ITensorHandle*&gt; outputs)</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// method in the Android code base</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="comment">// Note: this implementation wraps the arithmetic functions of the LSTM cell in Quantize/Dequantize ops, so all</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// computation is done in the floating point domain. Arithmetic functions are found in LstmUtils.cpp.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// Refer to: android/frameworks/ml/nn/common/operations/QLSTM.cpp</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&amp; internalType = <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo = <a class="code" href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">GetTensorInfo</a>(inputs[0]);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputStateInInfo = <a class="code" href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">GetTensorInfo</a>(inputs[1]);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateInInfo = <a class="code" href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">GetTensorInfo</a>(inputs[2]);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputStateOutInfo = <a class="code" href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">GetTensorInfo</a>(outputs[0]);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateOutInfo = <a class="code" href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">GetTensorInfo</a>(outputs[1]);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">GetTensorInfo</a>(outputs[2]);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inputShape = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; outputStateInShape = outputStateInInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; cellStateInShape = cellStateInInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// Infer numBatches, inputSize, outputSize and numUnits</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> uint32_t numBatches = inputShape[0];</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> uint32_t inputSize  = inputShape[1];</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> uint32_t outputSize = outputStateInShape[1];</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> uint32_t numUnits   = cellStateInShape[1];</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// Optional param settings</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> cifgEnabled      = <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> peepholeEnabled  = <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> projectionEnabled = <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> layerNormEnabled = <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// Input decoders</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputDecoder =</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            MakeDecoder&lt;float&gt;(inputInfo, inputs[0]-&gt;Map());</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputStateInDecoder =</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            MakeDecoder&lt;float&gt;(outputStateInInfo, inputs[1]-&gt;Map());</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellStateInDecoder =</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            MakeDecoder&lt;float&gt;(cellStateInInfo, inputs[2]-&gt;Map());</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Output decoders</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputStateOutDecoder =</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            MakeDecoder&lt;float&gt;(outputStateOutInfo, outputs[0]-&gt;Map());</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellStateOutDecoder =</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            MakeDecoder&lt;float&gt;(cellStateOutInfo, outputs[1]-&gt;Map());</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputDecoder =</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            MakeDecoder&lt;float&gt;(outputInfo, outputs[2]-&gt;Map());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">// Output encoders</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; outputStateOutEncoder =</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            MakeEncoder&lt;float&gt;(outputStateOutInfo, outputs[0]-&gt;Map());</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; cellStateOutEncoder =</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            MakeEncoder&lt;float&gt;(cellStateOutInfo, outputs[1]-&gt;Map());</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; outputEncoder =</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            MakeEncoder&lt;float&gt;(outputInfo, outputs[2]-&gt;Map());</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// Weights decoders</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputToForgetWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            m_InputToForgetWeightsTensor-&gt;GetTensorInfo(), m_InputToForgetWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputToCellWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            m_InputToCellWeightsTensor-&gt;GetTensorInfo(), m_InputToCellWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputToOutputWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            m_InputToOutputWeightsTensor-&gt;GetTensorInfo(), m_InputToOutputWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; recurrentToForgetWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            m_RecurrentToForgetWeightsTensor-&gt;GetTensorInfo(),</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            m_RecurrentToForgetWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; recurrentToCellWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            m_RecurrentToCellWeightsTensor-&gt;GetTensorInfo(), m_RecurrentToCellWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; recurrentToOutputWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            m_RecurrentToOutputWeightsTensor-&gt;GetTensorInfo(),</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            m_RecurrentToOutputWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">// Optional CIFG params</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputToInputWeightsDecoder;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; recurrentToInputWeightsDecoder;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputGateBiasDecoder;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Optional Peephole params</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellToInputWeightsDecoder;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellToForgetWeightsDecoder;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellToOutputWeightsDecoder;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Optional Projection params</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; projectionWeightsDecoder;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; projectionBiasDecoder;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Optional Layer Norm params</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputLayerNormWeightsDecoder;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; forgetLayerNormWeightsDecoder;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellLayerNormWeightsDecoder;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputLayerNormWeightsDecoder;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="comment">// Biases are only used when Layer Norm is enabled. Scale is defined as (XLayerNormWeights Scale / 1024)</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; forgetGateBiasDecoder;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellGateBiasDecoder;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputGateBiasDecoder;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// Int16 vectors for internal state data (to be decoded/encoded)</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">const</span> uint32_t stateTensorSize = numBatches * numUnits;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    std::vector&lt;int16_t&gt; inputGateData(stateTensorSize);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    std::vector&lt;int16_t&gt; cellGateData(stateTensorSize);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    std::vector&lt;int16_t&gt; forgetGateData(stateTensorSize);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    std::vector&lt;int16_t&gt; outputGateData(stateTensorSize);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    std::vector&lt;int32_t&gt; hiddenStateData(stateTensorSize);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    std::vector&lt;int16_t&gt; outputInt16Data(numBatches * outputSize);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputGateInfo(</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            {numBatches , numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a>, <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a09e1f097944f61cc901240f9300364cf">m_InputIntermediateScale</a>, 0);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellGateInfo(</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            {numBatches , numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a>, <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a0477ee1b44ace6090119178eea78cb0b">m_CellIntermediateScale</a>, 0);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> forgetGateInfo(</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            {numBatches , numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a>, <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#afec7f36158448f723b426a9527acb189">m_ForgetIntermediateScale</a>, 0);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputGateInfo(</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            {numBatches , numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a>, <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa43409f9b457352c95c89f20ce5d844d">m_OutputIntermediateScale</a>, 0);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> hiddenStateInfo({numBatches, numUnits},</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                      <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                      <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#af8f724af7210b52529216feefa993c98">m_HiddenStateScale</a>,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                      <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4556cbd764d4848d8ad0637a9eed580d">m_HiddenStateZeroPoint</a>);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInt16Info({numBatches , outputSize},</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                      <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a>,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                      outputInfo.GetQuantizationScale(),</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                      outputInfo.GetQuantizationOffset());</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// Decoders/Encoders for internal states</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; inputGateDecoder =</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            MakeDecoder&lt;float&gt;(inputGateInfo, inputGateData.data());</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; cellGateDecoder =</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            MakeDecoder&lt;float&gt;(cellGateInfo, cellGateData.data());</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; forgetGateDecoder =</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            MakeDecoder&lt;float&gt;(forgetGateInfo, forgetGateData.data());</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputGateDecoder =</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            MakeDecoder&lt;float&gt;(outputGateInfo, outputGateData.data());</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; hiddenStateDecoder =</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            MakeDecoder&lt;float&gt;(hiddenStateInfo, hiddenStateData.data());</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; inputGateEncoder =</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            MakeEncoder&lt;float&gt;(inputGateInfo, inputGateData.data());</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; cellGateEncoder =</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            MakeEncoder&lt;float&gt;(cellGateInfo, cellGateData.data());</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; forgetGateEncoder =</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            MakeEncoder&lt;float&gt;(forgetGateInfo, forgetGateData.data());</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; outputGateEncoder =</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            MakeEncoder&lt;float&gt;(outputGateInfo, outputGateData.data());</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; hiddenStateEncoder =</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            MakeEncoder&lt;float&gt;(hiddenStateInfo, hiddenStateData.data());</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// Int16 used to accumulate output to prevent overflowing (after Projection MatMul)</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::unique_ptr&lt;Decoder&lt;float&gt;&gt; outputInt16Decoder =</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            MakeDecoder&lt;float&gt;(outputInt16Info, outputInt16Data.data());</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    std::unique_ptr&lt;Encoder&lt;float&gt;&gt; outputInt16Encoder =</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            MakeEncoder&lt;float&gt;(outputInt16Info, outputInt16Data.data());</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="comment">// Create decoders for optional params if they are enabled</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">if</span> (!cifgEnabled)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        inputToInputWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                m_InputToInputWeightsTensor-&gt;GetTensorInfo(), m_InputToInputWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        recurrentToInputWeightsDecoder = MakeDecoder&lt;float&gt;(m_RecurrentToInputWeightsTensor-&gt;GetTensorInfo(),</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                            m_RecurrentToInputWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">if</span> (peepholeEnabled)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">if</span> (!cifgEnabled)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            cellToInputWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    m_CellToInputWeightsTensor-&gt;GetTensorInfo(), m_CellToInputWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        cellToForgetWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                m_CellToForgetWeightsTensor-&gt;GetTensorInfo(), m_CellToForgetWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        cellToOutputWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                m_CellToOutputWeightsTensor-&gt;GetTensorInfo(), m_CellToOutputWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">if</span> (projectionEnabled)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        projectionWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                m_ProjectionWeightsTensor-&gt;GetTensorInfo(), m_ProjectionWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordflow">if</span> (m_ProjectionBiasTensor)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            projectionBiasDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    m_ProjectionBiasTensor-&gt;GetTensorInfo(), m_ProjectionBiasTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">if</span> (layerNormEnabled)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">if</span> (!cifgEnabled)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            inputLayerNormWeightsDecoder = MakeDecoder&lt;float&gt;(m_InputLayerNormWeightsTensor-&gt;GetTensorInfo(),</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                                              m_InputLayerNormWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="comment">// Bias only used if layer norm enabled</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputGateBiasTensorInfo({outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    m_InputLayerNormWeightsTensor-&gt;GetTensorInfo().GetQuantizationScale() / 1024, 0);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            inputGateBiasDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    inputGateBiasTensorInfo, m_InputGateBiasTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        forgetLayerNormWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                m_ForgetLayerNormWeightsTensor-&gt;GetTensorInfo(),</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                m_ForgetLayerNormWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        cellLayerNormWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                m_CellLayerNormWeightsTensor-&gt;GetTensorInfo(), m_CellLayerNormWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        outputLayerNormWeightsDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                m_OutputLayerNormWeightsTensor-&gt;GetTensorInfo(),</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                m_OutputLayerNormWeightsTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="comment">// Bias only used if layer norm enabled</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> forgetGateBiasTensorInfo({outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                m_ForgetLayerNormWeightsTensor-&gt;GetTensorInfo().GetQuantizationScale() / 1024, 0);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        forgetGateBiasDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                forgetGateBiasTensorInfo, m_ForgetGateBiasTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellGateBiasTensorInfo({outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>,</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                m_CellLayerNormWeightsTensor-&gt;GetTensorInfo().GetQuantizationScale() / 1024, 0);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        cellGateBiasDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                cellGateBiasTensorInfo, m_CellBiasTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputGateBiasTensorInfo({outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>,</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                m_OutputLayerNormWeightsTensor-&gt;GetTensorInfo().GetQuantizationScale() / 1024, 0);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        outputGateBiasDecoder = MakeDecoder&lt;float&gt;(</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                outputGateBiasTensorInfo, m_OutputGateBiasTensor-&gt;GetConstTensor&lt;<span class="keywordtype">void</span>&gt;());</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// Initialize internal state tensors with zeroes.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">if</span> (!cifgEnabled)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*inputGateEncoder, stateTensorSize);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    }</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*forgetGateEncoder, stateTensorSize);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*cellGateEncoder, stateTensorSize);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*outputGateEncoder, stateTensorSize);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*hiddenStateEncoder, stateTensorSize);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="comment">// Input weights * Input</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">if</span> (!cifgEnabled)</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    {</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToInputWeightsDecoder,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                            numUnits, inputSize, *inputDecoder, numBatches, *inputGateEncoder);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToForgetWeightsDecoder,</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                        numUnits, inputSize, *inputDecoder, numBatches, *forgetGateEncoder);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToCellWeightsDecoder,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                        numUnits, inputSize, *inputDecoder, numBatches, *cellGateEncoder);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToOutputWeightsDecoder,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                        numUnits, inputSize, *inputDecoder, numBatches, *outputGateEncoder);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="comment">// Recurrent weights * OutputStateIn</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">if</span> (!cifgEnabled)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    {</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToInputWeightsDecoder,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                            numUnits, outputSize, *outputStateInDecoder, numBatches, *inputGateEncoder);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    }</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToForgetWeightsDecoder,</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                        numUnits, outputSize, *outputStateInDecoder, numBatches, *forgetGateEncoder);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToCellWeightsDecoder,</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                        numUnits, outputSize, *outputStateInDecoder, numBatches, *cellGateEncoder);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToOutputWeightsDecoder,</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                        numUnits, outputSize, *outputStateInDecoder, numBatches, *outputGateEncoder);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="comment">// Input gate.</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">if</span> (!cifgEnabled)</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    {</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">if</span> (peepholeEnabled)</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a>(*cellToInputWeightsDecoder,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                                    numUnits, *cellStateInDecoder, numBatches, *inputGateEncoder);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">if</span> (layerNormEnabled)</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            inputGateInfo.SetQuantizationScale(inputInfo.GetQuantizationScale() *</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                               m_InputLayerNormWeightsTensor-&gt;GetTensorInfo().GetQuantizationScale() *</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                               1024);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            inputGateEncoder = MakeEncoder&lt;float&gt;(inputGateInfo, inputGateData.data());</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*inputGateDecoder,</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                    *inputGateEncoder, numUnits, numBatches, m_LayerNormEpsilon);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            inputGateDecoder = MakeDecoder&lt;float&gt;(inputGateInfo, inputGateData.data());</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*inputLayerNormWeightsDecoder,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                          numUnits, *inputGateDecoder, numBatches, *inputGateEncoder);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            inputGateInfo.SetQuantizationScale(1.f / 4096);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            inputGateEncoder = MakeEncoder&lt;float&gt;(inputGateInfo, inputGateData.data());</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*inputGateBiasDecoder,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                 numUnits, *inputGateDecoder, numBatches, *inputGateEncoder);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            inputGateDecoder = MakeDecoder&lt;float&gt;(inputGateInfo, inputGateData.data());</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        }</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        inputGateInfo.SetQuantizationScale(cellStateOutInfo.GetQuantizationScale());</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        inputGateEncoder = MakeEncoder&lt;float&gt;(inputGateInfo, inputGateData.data());</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="comment">// Input gate sigmoid</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">Activation</a>(*inputGateDecoder, *inputGateEncoder,</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                   <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({numUnits, numBatches}, internalType),</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                   <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">ActivationFunction::Sigmoid</a>, 0, 0);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        inputGateDecoder = MakeDecoder&lt;float&gt;(inputGateInfo, inputGateData.data());</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="comment">// Forget gate</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">if</span> (peepholeEnabled)</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    {</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a>(*cellToForgetWeightsDecoder, numUnits,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                                *cellStateInDecoder, numBatches, *forgetGateEncoder);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">if</span> (layerNormEnabled)</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="comment">// Quantize layer norm output to Input Scale * m_ForgetLayerNormWeightsTensor * 1024</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        forgetGateInfo.SetQuantizationScale(inputInfo.GetQuantizationScale() *</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                            m_ForgetLayerNormWeightsTensor-&gt;GetTensorInfo().GetQuantizationScale() *</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                            1024);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        forgetGateEncoder = MakeEncoder&lt;float&gt;(forgetGateInfo, forgetGateData.data());</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*forgetGateDecoder,</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                *forgetGateEncoder, numUnits, numBatches, m_LayerNormEpsilon);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        forgetGateDecoder = MakeDecoder&lt;float&gt;(forgetGateInfo, forgetGateData.data());</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*forgetLayerNormWeightsDecoder,</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                      numUnits, *forgetGateDecoder, numBatches, *forgetGateEncoder);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="comment">// Dequantize layer norm output to (1 / 4096)</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        forgetGateInfo.SetQuantizationScale(1.f / 4096);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        forgetGateEncoder = MakeEncoder&lt;float&gt;(forgetGateInfo, forgetGateData.data());</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*forgetGateBiasDecoder,</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                             numUnits, *forgetGateDecoder, numBatches, *forgetGateEncoder);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        forgetGateDecoder = MakeDecoder&lt;float&gt;(forgetGateInfo, forgetGateData.data());</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    }</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    forgetGateInfo.SetQuantizationScale(cellStateOutInfo.GetQuantizationScale());</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    forgetGateEncoder = MakeEncoder&lt;float&gt;(forgetGateInfo, forgetGateData.data());</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="comment">// Forget gate sigmoid</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">Activation</a>(*forgetGateDecoder, *forgetGateEncoder,</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;               <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({numUnits, numBatches}, internalType),</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;               <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">ActivationFunction::Sigmoid</a>, 0, 0);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    forgetGateDecoder = MakeDecoder&lt;float&gt;(forgetGateInfo, forgetGateData.data());</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="comment">// Cell (Modulation) gate</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">if</span> (layerNormEnabled)</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    {</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        cellGateInfo.SetQuantizationScale(inputInfo.GetQuantizationScale() *</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                          m_CellLayerNormWeightsTensor-&gt;GetTensorInfo().GetQuantizationScale() *</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                          1024);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        cellGateEncoder = MakeEncoder&lt;float&gt;(cellGateInfo, cellGateData.data());</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*cellGateDecoder, *cellGateEncoder, numUnits, numBatches, m_LayerNormEpsilon);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        cellGateDecoder = MakeDecoder&lt;float&gt;(cellGateInfo, cellGateData.data());</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*cellLayerNormWeightsDecoder,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                      numUnits, *cellGateDecoder, numBatches, *cellGateEncoder);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        cellGateInfo.SetQuantizationScale(1.f / 4096);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        cellGateEncoder = MakeEncoder&lt;float&gt;(cellGateInfo, cellGateData.data());</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*cellGateBiasDecoder,</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                             numUnits, *cellGateDecoder, numBatches, *cellGateEncoder);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        cellGateDecoder = MakeDecoder&lt;float&gt;(cellGateInfo, cellGateData.data());</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    }</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    cellGateInfo.SetQuantizationScale(cellStateOutInfo.GetQuantizationScale());</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    cellGateEncoder = MakeEncoder&lt;float&gt;(cellGateInfo, cellGateData.data());</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="comment">// Cell (Modulation) gate tanH</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">Activation</a>(*cellGateDecoder, *cellGateEncoder,</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;               <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({numUnits, numBatches}, internalType),</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;               <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">ActivationFunction::TanH</a>, 1.0f, 1.0f);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    cellGateDecoder = MakeDecoder&lt;float&gt;(cellGateInfo, cellGateData.data());</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a5b81dc0a1a9a2bccab8bb79dfa3e77b7">VectorVectorCwiseProduct</a>(*forgetGateDecoder, *cellStateInDecoder, stateTensorSize, *cellStateOutEncoder);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordflow">if</span> (cifgEnabled)</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    {</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#aca7bd1dff180b6a5de894537f8220793">Sub1Vector</a>(*forgetGateDecoder, stateTensorSize, *forgetGateEncoder);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a2e653f948d93f4177f267a7b1b4ed47d">VectorVectorCwiseProductAccumulate</a>(</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                *cellGateDecoder, *forgetGateDecoder, stateTensorSize, *cellStateOutEncoder);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    {</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a2e653f948d93f4177f267a7b1b4ed47d">VectorVectorCwiseProductAccumulate</a>(</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                *cellGateDecoder, *inputGateDecoder, stateTensorSize, *cellStateOutEncoder);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="comment">// Final cell state out calculated here</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ac81fb0e66dc623dc37c77f219f53a6d3">m_CellClip</a> &gt; 0.0)</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a117781e8e9b7321722bbdd8ff74b484a">ClipVector</a>(*cellStateOutDecoder, stateTensorSize, <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ac81fb0e66dc623dc37c77f219f53a6d3">m_CellClip</a>, *cellStateOutEncoder);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    }</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="comment">// Output gate.</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordflow">if</span> (peepholeEnabled)</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    {</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a>(*cellToOutputWeightsDecoder,</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                                                numUnits, *cellStateOutDecoder, numBatches, *outputGateEncoder);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    }</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keywordflow">if</span> (layerNormEnabled)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    {</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        outputGateInfo.SetQuantizationScale(inputInfo.GetQuantizationScale() *</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                                            m_OutputLayerNormWeightsTensor-&gt;GetTensorInfo().GetQuantizationScale() *</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                                            1024);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        outputGateEncoder = MakeEncoder&lt;float&gt;(outputGateInfo, outputGateData.data());</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*outputGateDecoder, *outputGateEncoder, numUnits, numBatches, m_LayerNormEpsilon);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        outputGateDecoder = MakeDecoder&lt;float&gt;(outputGateInfo, outputGateData.data());</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*outputLayerNormWeightsDecoder, numUnits, *outputGateDecoder,</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                                      numBatches, *outputGateEncoder);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        outputGateInfo.SetQuantizationScale(1.f / 4096);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        outputGateEncoder = MakeEncoder&lt;float&gt;(outputGateInfo, outputGateData.data());</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*outputGateBiasDecoder, numUnits, *outputGateDecoder, numBatches, *outputGateEncoder);</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        outputGateDecoder = MakeDecoder&lt;float&gt;(outputGateInfo, outputGateData.data());</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    }</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    outputGateInfo.SetQuantizationScale(cellStateOutInfo.GetQuantizationScale());</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    outputGateEncoder = MakeEncoder&lt;float&gt;(outputGateInfo, outputGateData.data());</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="comment">// Output gate sigmoid</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">Activation</a>(*outputGateDecoder, *outputGateEncoder,</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;               <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({numUnits, numBatches}, internalType),</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;               <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">ActivationFunction::Sigmoid</a>, 0, 0);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    outputGateDecoder = MakeDecoder&lt;float&gt;(outputGateInfo, outputGateData.data());</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="comment">// Hidden state tanH</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">Activation</a>(*cellStateOutDecoder, *cellGateEncoder,</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;               <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({numUnits, numBatches}, internalType),</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;               <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">ActivationFunction::TanH</a>, 1.0f, 1.0f);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="comment">// Final hidden state output</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a5b81dc0a1a9a2bccab8bb79dfa3e77b7">VectorVectorCwiseProduct</a>(*outputGateDecoder, *cellGateDecoder, stateTensorSize, *hiddenStateEncoder);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="comment">// Projection</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>)</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    {</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <span class="keywordflow">if</span> (m_ProjectionBiasTensor)</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        {</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a>(*projectionBiasDecoder, outputSize, numBatches, *outputInt16Encoder);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        }</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*projectionWeightsDecoder, outputSize, numUnits, *hiddenStateDecoder,</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                                            numBatches, *outputInt16Encoder);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a00d8a623c04f1120f6fee3fe38d1cee9">CopyVector</a>(*outputInt16Decoder, numBatches * outputSize, *outputEncoder);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa6a518b65088f34803b3214334bdff61">m_ProjectionClip</a> &gt; 0.0)</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        {</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a117781e8e9b7321722bbdd8ff74b484a">ClipVector</a>(*outputDecoder, numBatches * outputSize, <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa6a518b65088f34803b3214334bdff61">m_ProjectionClip</a>, *outputEncoder);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        }</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    }</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    {</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        <span class="comment">// Output has same quantization scale as hidden state if projection is disabled</span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a00d8a623c04f1120f6fee3fe38d1cee9">CopyVector</a>(*hiddenStateDecoder, numBatches * outputSize, *outputEncoder);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    }</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="comment">// output == outputStateOut</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a00d8a623c04f1120f6fee3fe38d1cee9">CopyVector</a>(*outputDecoder, numBatches * outputSize, *outputStateOutEncoder);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;}</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;} <span class="comment">//namespace armnn</span></div><div class="ttc" id="_lstm_utils_8cpp_xhtml_a0ed27dd6d6125a06bf654080f4184360"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a></div><div class="ttdeci">void MeanStddevNormalization(armnn::Decoder&lt; float &gt; &amp;input_vector, armnn::Encoder&lt; float &gt; &amp;output_vector, uint32_t v_size, uint32_t n_batch, float normalization_epsilon)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00040">LstmUtils.cpp:40</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a389c4bbafd0fff7060cbb183f20a2134"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a></div><div class="ttdeci">void VectorBatchVectorAdd(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Decoder&lt; float &gt; &amp;batchVector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00016">LstmUtils.cpp:16</a></div></div>
<div class="ttc" id="_activation_8hpp_xhtml"><div class="ttname"><a href="_activation_8hpp.xhtml">Activation.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="_ref_workload_utils_8hpp_xhtml"><div class="ttname"><a href="_ref_workload_utils_8hpp.xhtml">RefWorkloadUtils.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_q_lstm_workload_xhtml_ae071e8822437c78baea75c3aef3a263a"><div class="ttname"><a href="classarmnn_1_1_ref_q_lstm_workload.xhtml#ae071e8822437c78baea75c3aef3a263a">armnn::RefQLstmWorkload::Execute</a></div><div class="ttdeci">void Execute() const override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_q_lstm_workload_8cpp_source.xhtml#l00046">RefQLstmWorkload.cpp:46</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a117781e8e9b7321722bbdd8ff74b484a"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a117781e8e9b7321722bbdd8ff74b484a">ClipVector</a></div><div class="ttdeci">void ClipVector(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, float absLimit, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00229">LstmUtils.cpp:229</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::QLstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01372">Descriptors.hpp:1372</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_aca7bd1dff180b6a5de894537f8220793"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#aca7bd1dff180b6a5de894537f8220793">Sub1Vector</a></div><div class="ttdeci">void Sub1Vector(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;result)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00173">LstmUtils.cpp:173</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_af8f724af7210b52529216feefa993c98"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#af8f724af7210b52529216feefa993c98">armnn::QLstmDescriptor::m_HiddenStateScale</a></div><div class="ttdeci">float m_HiddenStateScale</div><div class="ttdoc">Hidden State quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01388">Descriptors.hpp:1388</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_aa43409f9b457352c95c89f20ce5d844d"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa43409f9b457352c95c89f20ce5d844d">armnn::QLstmDescriptor::m_OutputIntermediateScale</a></div><div class="ttdeci">float m_OutputIntermediateScale</div><div class="ttdoc">Output intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01384">Descriptors.hpp:1384</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a00d8a623c04f1120f6fee3fe38d1cee9"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a00d8a623c04f1120f6fee3fe38d1cee9">CopyVector</a></div><div class="ttdeci">void CopyVector(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00244">LstmUtils.cpp:244</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a8618ae0c77638e01069fdb0063cabb3f"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a8618ae0c77638e01069fdb0063cabb3f">AssignScopedTensorHandle</a></div><div class="ttdeci">std::unique_ptr&lt; armnn::ScopedTensorHandle &gt; AssignScopedTensorHandle(const armnn::ConstTensorHandle *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00299">LstmUtils.cpp:299</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::ActivationFunction::Sigmoid</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a796323e16216b880043dc5ebbaa2372b"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a></div><div class="ttdeci">void VectorBatchVectorCwiseProductAccumulate(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Decoder&lt; float &gt; &amp;batchVector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00131">LstmUtils.cpp:131</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a4c20bc573b70e89327b334f924da97b5"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a></div><div class="ttdeci">void ZeroVector(armnn::Encoder&lt; float &gt; &amp;vector, uint32_t vSize)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00076">LstmUtils.cpp:76</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a5b81dc0a1a9a2bccab8bb79dfa3e77b7"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a5b81dc0a1a9a2bccab8bb79dfa3e77b7">VectorVectorCwiseProduct</a></div><div class="ttdeci">void VectorVectorCwiseProduct(armnn::Decoder&lt; float &gt; &amp;vector1, armnn::Decoder&lt; float &gt; &amp;vector2, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00187">LstmUtils.cpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00054">WorkloadData.hpp:54</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a1d7ad9698b02282a57fdb17b3af745f9"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a></div><div class="ttdeci">void VectorBatchVectorCwiseProduct(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Decoder&lt; float &gt; &amp;batchVector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00152">LstmUtils.cpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_q_lstm_workload_xhtml_a03726736f93bb28e11835f093f630a07"><div class="ttname"><a href="classarmnn_1_1_ref_q_lstm_workload.xhtml#a03726736f93bb28e11835f093f630a07">armnn::RefQLstmWorkload::ExecuteAsync</a></div><div class="ttdeci">void ExecuteAsync(WorkingMemDescriptor &amp;workingMemDescriptor) override</div><div class="ttdef"><b>Definition:</b> <a href="_ref_q_lstm_workload_8cpp_source.xhtml#l00051">RefQLstmWorkload.cpp:51</a></div></div>
<div class="ttc" id="_encoders_8hpp_xhtml"><div class="ttname"><a href="_encoders_8hpp.xhtml">Encoders.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1experimental_1_1_working_mem_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">armnn::experimental::WorkingMemDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_descriptor_8hpp_source.xhtml#l00018">WorkingMemDescriptor.hpp:18</a></div></div>
<div class="ttc" id="_ref_q_lstm_workload_8hpp_xhtml"><div class="ttname"><a href="_ref_q_lstm_workload_8hpp.xhtml">RefQLstmWorkload.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1experimental_1_1_working_mem_descriptor_xhtml_a4b50e46a6810018f3edecfb68b2a76b3"><div class="ttname"><a href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">armnn::experimental::WorkingMemDescriptor::m_Inputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Inputs</div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_descriptor_8hpp_source.xhtml#l00020">WorkingMemDescriptor.hpp:20</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_ab93a2c78551c3d3aba8ddcafb792a36d"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a></div><div class="ttdeci">void MatrixBatchVectorMultiplyAccumulate(armnn::Decoder&lt; float &gt; &amp;matrix, uint32_t mRows, uint32_t mCols, armnn::Decoder&lt; float &gt; &amp;vector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00087">LstmUtils.cpp:87</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a4a8ec49f130084445d44297549254780"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">armnn::QLstmDescriptor::m_LayerNormEnabled</a></div><div class="ttdeci">bool m_LayerNormEnabled</div><div class="ttdoc">Enable/disable layer normalization. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01376">Descriptors.hpp:1376</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00035">Types.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_q_lstm_workload_xhtml_a143c3dfe9ce674a65bb5b93f91ec54e3"><div class="ttname"><a href="classarmnn_1_1_ref_q_lstm_workload.xhtml#a143c3dfe9ce674a65bb5b93f91ec54e3">armnn::RefQLstmWorkload::RefQLstmWorkload</a></div><div class="ttdeci">RefQLstmWorkload(const QLstmQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_q_lstm_workload_8cpp_source.xhtml#l00016">RefQLstmWorkload.cpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_afb8d2c8817c75de9d01a4c0e0d5c160b"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">armnn::BaseWorkload&lt; QLstmQueueDescriptor &gt;::m_Data</a></div><div class="ttdeci">QLstmQueueDescriptor m_Data</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00077">Workload.hpp:77</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_aa6a518b65088f34803b3214334bdff61"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa6a518b65088f34803b3214334bdff61">armnn::QLstmDescriptor::m_ProjectionClip</a></div><div class="ttdeci">float m_ProjectionClip</div><div class="ttdoc">Clipping threshold value for the projection. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01368">Descriptors.hpp:1368</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a09e1f097944f61cc901240f9300364cf"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a09e1f097944f61cc901240f9300364cf">armnn::QLstmDescriptor::m_InputIntermediateScale</a></div><div class="ttdeci">float m_InputIntermediateScale</div><div class="ttdoc">Input intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01378">Descriptors.hpp:1378</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a2e653f948d93f4177f267a7b1b4ed47d"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a2e653f948d93f4177f267a7b1b4ed47d">VectorVectorCwiseProductAccumulate</a></div><div class="ttdeci">void VectorVectorCwiseProductAccumulate(armnn::Decoder&lt; float &gt; &amp;vector1, armnn::Decoder&lt; float &gt; &amp;vector2, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00204">LstmUtils.cpp:204</a></div></div>
<div class="ttc" id="classarmnn_1_1_ref_base_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_ref_base_workload.xhtml">armnn::RefBaseWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_ref_base_workload_8hpp_source.xhtml#l00013">RefBaseWorkload.hpp:13</a></div></div>
<div class="ttc" id="_decoders_8hpp_xhtml"><div class="ttname"><a href="_decoders_8hpp.xhtml">Decoders.hpp</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a8c4a96233c9b62c76d611316da11124b"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a></div><div class="ttdeci">void VectorBatchVectorAssign(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outBatchVector)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00113">LstmUtils.cpp:113</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_afec7f36158448f723b426a9527acb189"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#afec7f36158448f723b426a9527acb189">armnn::QLstmDescriptor::m_ForgetIntermediateScale</a></div><div class="ttdeci">float m_ForgetIntermediateScale</div><div class="ttdoc">Forget intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01380">Descriptors.hpp:1380</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_ac81fb0e66dc623dc37c77f219f53a6d3"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#ac81fb0e66dc623dc37c77f219f53a6d3">armnn::QLstmDescriptor::m_CellClip</a></div><div class="ttdeci">float m_CellClip</div><div class="ttdoc">Clipping threshold value for the cell state. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01366">Descriptors.hpp:1366</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_xhtml_a6abd491bb99ffe88bd472c1ae5a1ed1a"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">armnn::QueueDescriptor::m_Outputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Outputs</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00027">WorkloadData.hpp:27</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">armnn::QLstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00585">WorkloadData.hpp:585</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::QLstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01374">Descriptors.hpp:1374</a></div></div>
<div class="ttc" id="structarmnn_1_1experimental_1_1_working_mem_descriptor_xhtml_a6abd491bb99ffe88bd472c1ae5a1ed1a"><div class="ttname"><a href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">armnn::experimental::WorkingMemDescriptor::m_Outputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Outputs</div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_descriptor_8hpp_source.xhtml#l00021">WorkingMemDescriptor.hpp:21</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about TensorInfos of a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_xhtml_a4b50e46a6810018f3edecfb68b2a76b3"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">armnn::QueueDescriptor::m_Inputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Inputs</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00026">WorkloadData.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af7ec4c0fa4375a45a70e4e31f3d8af47"><div class="ttname"><a href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">armnn::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo(const ITensorHandle *tensorHandle)</div><div class="ttdoc">float32 helpers </div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_utils_8hpp_source.xhtml#l00026">RefWorkloadUtils.hpp:26</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a0477ee1b44ace6090119178eea78cb0b"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a0477ee1b44ace6090119178eea78cb0b">armnn::QLstmDescriptor::m_CellIntermediateScale</a></div><div class="ttdeci">float m_CellIntermediateScale</div><div class="ttdoc">Cell intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01382">Descriptors.hpp:1382</a></div></div>
<div class="ttc" id="_lstm_utils_8hpp_xhtml"><div class="ttname"><a href="_lstm_utils_8hpp.xhtml">LstmUtils.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::QLstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable CIFG (coupled input &amp; forget gate). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01370">Descriptors.hpp:1370</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a4556cbd764d4848d8ad0637a9eed580d"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4556cbd764d4848d8ad0637a9eed580d">armnn::QLstmDescriptor::m_HiddenStateZeroPoint</a></div><div class="ttdeci">int32_t m_HiddenStateZeroPoint</div><div class="ttdoc">Hidden State zero point. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01386">Descriptors.hpp:1386</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">armnn::ActivationFunction::TanH</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_d2f3b8e2e64df3181ebe92efcc0a3012.xhtml">workloads</a></li><li class="navelem"><a class="el" href="_ref_q_lstm_workload_8cpp.xhtml">RefQLstmWorkload.cpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:35 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
