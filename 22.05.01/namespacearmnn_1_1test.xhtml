<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: armnn::test Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearmnn_1_1test.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">armnn::test Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1test_1_1_classifier_test_case.xhtml">ClassifierTestCase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1test_1_1_classifier_test_case_provider.xhtml">ClassifierTestCaseProvider</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml">IInferenceTestCase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">InferenceModelTestCase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1test_1_1_test_framework_exception.xhtml">TestFrameworkException</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a05b3d6105613d2d14099667a6b8ca67b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">TestCaseResult</a> { <a class="el" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67baa60852f204ed8028c1c58808b746d115">Ok</a>, 
<a class="el" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca">Failed</a>, 
<a class="el" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67ba727b63583e01fa2b3952dab580c84dc2">Abort</a>
 }</td></tr>
<tr class="separator:a05b3d6105613d2d14099667a6b8ca67b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ae2e622d6018bd48beabd765d4f6e5714"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1test.xhtml#ae2e622d6018bd48beabd765d4f6e5714">ParseCommandLine</a> (int argc, char **argv, <a class="el" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a> &amp;testCaseProvider, <a class="el" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a> &amp;outParams)</td></tr>
<tr class="memdesc:ae2e622d6018bd48beabd765d4f6e5714"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the command line of an ArmNN (or referencetests) inference test program.  <a href="#ae2e622d6018bd48beabd765d4f6e5714">More...</a><br /></td></tr>
<tr class="separator:ae2e622d6018bd48beabd765d4f6e5714"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a678fb3a8864e31aeb77f857ae6fc43"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">ValidateDirectory</a> (std::string &amp;dir)</td></tr>
<tr class="separator:a8a678fb3a8864e31aeb77f857ae6fc43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5a7cac4237e83d4f0d67d01dfb8ba9f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1test.xhtml#ab5a7cac4237e83d4f0d67d01dfb8ba9f">InferenceTest</a> (const <a class="el" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a> &amp;params, const std::vector&lt; unsigned int &gt; &amp;defaultTestCaseIds, <a class="el" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a> &amp;testCaseProvider)</td></tr>
<tr class="separator:ab5a7cac4237e83d4f0d67d01dfb8ba9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ad751ee33bdcba0656fdb6e98eb17f1"><td class="memTemplParams" colspan="2">template&lt;typename TConstructTestCaseProvider &gt; </td></tr>
<tr class="memitem:a7ad751ee33bdcba0656fdb6e98eb17f1"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1test.xhtml#a7ad751ee33bdcba0656fdb6e98eb17f1">InferenceTestMain</a> (int argc, char *argv[], const std::vector&lt; unsigned int &gt; &amp;defaultTestCaseIds, TConstructTestCaseProvider constructTestCaseProvider)</td></tr>
<tr class="separator:a7ad751ee33bdcba0656fdb6e98eb17f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47dfae02e22fcca1b6b784873b0328d9"><td class="memTemplParams" colspan="2">template&lt;typename TDatabase , typename TParser , typename TConstructDatabaseCallable &gt; </td></tr>
<tr class="memitem:a47dfae02e22fcca1b6b784873b0328d9"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1test.xhtml#a47dfae02e22fcca1b6b784873b0328d9">ClassifierInferenceTestMain</a> (int argc, char *argv[], const char *modelFilename, bool isModelBinary, const char *inputBindingName, const char *outputBindingName, const std::vector&lt; unsigned int &gt; &amp;defaultTestCaseIds, TConstructDatabaseCallable constructDatabase, const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> *inputTensorShape=nullptr)</td></tr>
<tr class="separator:a47dfae02e22fcca1b6b784873b0328d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a05b3d6105613d2d14099667a6b8ca67b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05b3d6105613d2d14099667a6b8ca67b">&#9670;&nbsp;</a></span>TestCaseResult</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">TestCaseResult</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a05b3d6105613d2d14099667a6b8ca67baa60852f204ed8028c1c58808b746d115"></a>Ok&#160;</td><td class="fielddoc"><p>The test completed without any errors. </p>
</td></tr>
<tr><td class="fieldname"><a id="a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca"></a>Failed&#160;</td><td class="fielddoc"><p>The test failed (e.g. </p>
<p>the prediction didn't match the validation file). This will eventually fail the whole program but the remaining test cases will still be run. </p>
</td></tr>
<tr><td class="fieldname"><a id="a05b3d6105613d2d14099667a6b8ca67ba727b63583e01fa2b3952dab580c84dc2"></a>Abort&#160;</td><td class="fielddoc"><p>The test failed with a fatal error. The remaining tests will not be run. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_inference_test_8hpp_source.xhtml#l00073">73</a> of file <a class="el" href="_inference_test_8hpp_source.xhtml">InferenceTest.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">    /// The test completed without any errors.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67baa60852f204ed8028c1c58808b746d115">Ok</a>,<span class="comment"></span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">    /// The test failed (e.g. the prediction didn&#39;t match the validation file).</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">    /// This will eventually fail the whole program but the remaining test cases will still be run.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca">Failed</a>,<span class="comment"></span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">    /// The test failed with a fatal error. The remaining tests will not be run.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67ba727b63583e01fa2b3952dab580c84dc2">Abort</a></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;};</div><div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca">armnn::test::TestCaseResult::Failed</a></div><div class="ttdoc">The test failed (e.g. </div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67ba727b63583e01fa2b3952dab580c84dc2"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67ba727b63583e01fa2b3952dab580c84dc2">armnn::test::TestCaseResult::Abort</a></div><div class="ttdoc">The test failed with a fatal error. The remaining tests will not be run. </div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67baa60852f204ed8028c1c58808b746d115"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67baa60852f204ed8028c1c58808b746d115">armnn::test::TestCaseResult::Ok</a></div><div class="ttdoc">The test completed without any errors. </div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a47dfae02e22fcca1b6b784873b0328d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47dfae02e22fcca1b6b784873b0328d9">&#9670;&nbsp;</a></span>ClassifierInferenceTestMain()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ClassifierInferenceTestMain </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>modelFilename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isModelBinary</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>inputBindingName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>outputBindingName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>defaultTestCaseIds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TConstructDatabaseCallable&#160;</td>
          <td class="paramname"><em>constructDatabase</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> *&#160;</td>
          <td class="paramname"><em>inputTensorShape</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_8inl_source.xhtml#l00362">362</a> of file <a class="el" href="_inference_test_8inl_source.xhtml">InferenceTest.inl</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_inference_test_8inl_source.xhtml#l00311">InferenceTestMain()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00091">Params::m_ModelPath</a>, and <a class="el" href="_inference_test_8cpp_source.xhtml#l00084">ValidateDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_inception_v3_quantized-_armnn_8cpp_source.xhtml#l00011">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;{</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(modelFilename);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(inputBindingName);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(outputBindingName);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a7ad751ee33bdcba0656fdb6e98eb17f1">InferenceTestMain</a>(argc, argv, defaultTestCaseIds,</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        [=]</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        ()</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        {</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            <span class="keyword">using</span> <a class="code" href="class_inference_model.xhtml">InferenceModel</a> = <a class="code" href="class_inference_model.xhtml">InferenceModel&lt;TParser, typename TDatabase::DataType&gt;</a>;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <span class="keyword">using</span> TestCaseProvider = <a class="code" href="classarmnn_1_1test_1_1_classifier_test_case_provider.xhtml">ClassifierTestCaseProvider&lt;TDatabase, InferenceModel&gt;</a>;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="keywordflow">return</span> make_unique&lt;TestCaseProvider&gt;(constructDatabase,</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                [&amp;]</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                (<span class="keyword">const</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a> &amp;commonOptions,</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                 <span class="keyword">typename</span> <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml">InferenceModel::CommandLineOptions</a> modelOptions)</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">ValidateDirectory</a>(modelOptions.m_ModelDir))</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                    {</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                        <span class="keywordflow">return</span> std::unique_ptr&lt;InferenceModel&gt;();</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    }</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    <span class="keyword">typename</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModel::Params</a> modelParams;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    modelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a> = modelOptions.m_ModelDir + modelFilename;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                    modelParams.m_InputBindings  = { inputBindingName };</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    modelParams.m_OutputBindings = { outputBindingName };</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                    <span class="keywordflow">if</span> (inputTensorShape)</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                    {</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                        modelParams.m_InputShapes.push_back(*inputTensorShape);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                    }</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                    modelParams.m_IsModelBinary = isModelBinary;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                    modelParams.m_ComputeDevices = modelOptions.GetComputeDevicesAsBackendIds();</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                    modelParams.m_VisualizePostOptimizationModel = modelOptions.m_VisualizePostOptimizationModel;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                    modelParams.m_EnableFp16TurboMode = modelOptions.m_EnableFp16TurboMode;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                    <span class="keywordflow">return</span> std::make_unique&lt;InferenceModel&gt;(modelParams,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                                            commonOptions.m_EnableProfiling,</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                                            commonOptions.m_DynamicBackendsPath);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            });</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        });</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;}</div><div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml">armnn::test::InferenceTestOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00059">InferenceTest.hpp:59</a></div></div>
<div class="ttc" id="struct_inference_model_1_1_command_line_options_xhtml"><div class="ttname"><a href="struct_inference_model_1_1_command_line_options.xhtml">InferenceModel::CommandLineOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00385">InferenceModel.hpp:385</a></div></div>
<div class="ttc" id="class_inference_model_xhtml"><div class="ttname"><a href="class_inference_model.xhtml">InferenceModel</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00377">InferenceModel.hpp:377</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a8a678fb3a8864e31aeb77f857ae6fc43"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">armnn::test::ValidateDirectory</a></div><div class="ttdeci">bool ValidateDirectory(std::string &amp;dir)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00084">InferenceTest.cpp:84</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a4fa312cf0d60fbd3988a7c76ab8e2980"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">InferenceModelInternal::Params::m_ModelPath</a></div><div class="ttdeci">std::string m_ModelPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00091">InferenceModel.hpp:91</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_classifier_test_case_provider_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_classifier_test_case_provider.xhtml">armnn::test::ClassifierTestCaseProvider</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00179">InferenceTest.hpp:179</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00089">InferenceModel.hpp:89</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a7ad751ee33bdcba0656fdb6e98eb17f1"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a7ad751ee33bdcba0656fdb6e98eb17f1">armnn::test::InferenceTestMain</a></div><div class="ttdeci">int InferenceTestMain(int argc, char *argv[], const std::vector&lt; unsigned int &gt; &amp;defaultTestCaseIds, TConstructTestCaseProvider constructTestCaseProvider)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8inl_source.xhtml#l00311">InferenceTest.inl:311</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab5a7cac4237e83d4f0d67d01dfb8ba9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5a7cac4237e83d4f0d67d01dfb8ba9f">&#9670;&nbsp;</a></span>InferenceTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool InferenceTest </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>defaultTestCaseIds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a> &amp;&#160;</td>
          <td class="paramname"><em>testCaseProvider</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_8cpp_source.xhtml#l00112">112</a> of file <a class="el" href="_inference_test_8cpp_source.xhtml">InferenceTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a04734602cd9aa5125174458128b3b418">IInferenceTestCaseProvider::GetTestCase()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_inference_test_8hpp_source.xhtml#l00063">InferenceTestOptions::m_EnableProfiling</a>, <a class="el" href="_inference_test_8hpp_source.xhtml#l00062">InferenceTestOptions::m_InferenceTimesFile</a>, <a class="el" href="_inference_test_8hpp_source.xhtml#l00061">InferenceTestOptions::m_IterationCount</a>, <a class="el" href="_inference_test_8hpp_source.xhtml#l00108">IInferenceTestCaseProvider::OnInferenceTestFinished()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::warning</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_test_8inl_source.xhtml#l00311">InferenceTestMain()</a>.</p>
<div class="fragment"><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#if !defined (NDEBUG)</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">if</span> (params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">m_IterationCount</a> &gt; 0) <span class="comment">// If just running a few select images then don&#39;t bother to warn.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Performance test running in DEBUG build - results may be inaccurate.&quot;</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">double</span> totalTime = 0;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbProcessed = 0;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">bool</span> success = <span class="keyword">true</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Opens the file to write inference times too, if needed.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    ofstream inferenceTimesFile;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> recordInferenceTimes = !params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">m_InferenceTimesFile</a>.empty();</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">if</span> (recordInferenceTimes)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        inferenceTimesFile.open(params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">m_InferenceTimesFile</a>.c_str(), ios_base::trunc | ios_base::out);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">if</span> (!inferenceTimesFile.good())</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Failed to open inference times file for writing: &quot;</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                &lt;&lt; params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">m_InferenceTimesFile</a>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// Create a profiler and register it for the current thread.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::unique_ptr&lt;IProfiler&gt; profiler = std::make_unique&lt;IProfiler&gt;();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    ProfilerManager::GetInstance().RegisterProfiler(profiler.get());</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Enable profiling if requested.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    profiler-&gt;EnableProfiling(params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// Run a single test case to &#39;warm-up&#39; the model. The first one can sometimes take up to 10x longer</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    std::unique_ptr&lt;IInferenceTestCase&gt; warmupTestCase = testCaseProvider.<a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a04734602cd9aa5125174458128b3b418">GetTestCase</a>(0);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span> (warmupTestCase == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Failed to load test case&quot;</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        warmupTestCase-&gt;Run();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1test_1_1_test_framework_exception.xhtml">TestFrameworkException</a>&amp; testError)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; testError.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbTotalToProcess = params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">m_IterationCount</a> &gt; 0 ? params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">m_IterationCount</a></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        : <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(defaultTestCaseIds.size());</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">for</span> (; nbProcessed &lt; nbTotalToProcess; nbProcessed++)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> testCaseId = params.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">m_IterationCount</a> &gt; 0 ? nbProcessed : defaultTestCaseIds[nbProcessed];</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        std::unique_ptr&lt;IInferenceTestCase&gt; testCase = testCaseProvider.<a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a04734602cd9aa5125174458128b3b418">GetTestCase</a>(testCaseId);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">if</span> (testCase == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Failed to load test case&quot;</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        time_point&lt;high_resolution_clock&gt; predictStart;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        time_point&lt;high_resolution_clock&gt; predictEnd;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">TestCaseResult</a> result = TestCaseResult::Ok;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            predictStart = high_resolution_clock::now();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            testCase-&gt;Run();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            predictEnd = high_resolution_clock::now();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="comment">// duration&lt;double&gt; will convert the time difference into seconds as a double by default.</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordtype">double</span> timeTakenS = duration&lt;double&gt;(predictEnd - predictStart).count();</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            totalTime += timeTakenS;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="comment">// Outputss inference times, if needed.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">if</span> (recordInferenceTimes)</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                inferenceTimesFile &lt;&lt; testCaseId &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; (timeTakenS * 1000.0) &lt;&lt; std::endl;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            result = testCase-&gt;ProcessResult(params);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1test_1_1_test_framework_exception.xhtml">TestFrameworkException</a>&amp; testError)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; testError.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            result = TestCaseResult::Abort;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">switch</span> (result)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">case</span> TestCaseResult::Ok:</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">case</span> TestCaseResult::Abort:</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">case</span> TestCaseResult::Failed:</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="comment">// This test failed so we will fail the entire program eventually, but keep going for now.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            success = <span class="keyword">false</span>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Unexpected TestCaseResult&quot;</span>);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> averageTimePerTestCaseMs = totalTime / nbProcessed * 1000.0f;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="stringliteral">&quot;Total time for &quot;</span> &lt;&lt; nbProcessed &lt;&lt; <span class="stringliteral">&quot; test cases: &quot;</span> &lt;&lt; totalTime &lt;&lt; <span class="stringliteral">&quot; seconds&quot;</span>;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="stringliteral">&quot;Average time per test case: &quot;</span> &lt;&lt; averageTimePerTestCaseMs &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">// if profiling is enabled print out the results</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">if</span> (profiler &amp;&amp; profiler-&gt;IsProfilingEnabled())</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        profiler-&gt;Print(std::cout);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">if</span> (!success)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;One or more test cases failed&quot;</span>;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordflow">return</span> testCaseProvider.<a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a88bbd5a851f1148bf5a90db7779be261">OnInferenceTestFinished</a>();</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67b"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">armnn::test::TestCaseResult</a></div><div class="ttdeci">TestCaseResult</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00073">InferenceTest.hpp:73</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_test_framework_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_test_framework_exception.xhtml">armnn::test::TestFrameworkException</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00053">InferenceTest.hpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_a5955b5dadde32f0c5687ab38f77c5be5"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">armnn::test::InferenceTestOptions::m_InferenceTimesFile</a></div><div class="ttdeci">std::string m_InferenceTimesFile</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00062">InferenceTest.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a88bbd5a851f1148bf5a90db7779be261"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a88bbd5a851f1148bf5a90db7779be261">armnn::test::IInferenceTestCaseProvider::OnInferenceTestFinished</a></div><div class="ttdeci">virtual bool OnInferenceTestFinished()</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00108">InferenceTest.hpp:108</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a04734602cd9aa5125174458128b3b418"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a04734602cd9aa5125174458128b3b418">armnn::test::IInferenceTestCaseProvider::GetTestCase</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IInferenceTestCase &gt; GetTestCase(unsigned int testCaseId)=0</div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">armnn::test::InferenceTestOptions::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00063">InferenceTest.hpp:63</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_ac9c49972e7f8db643b3c72aa782278df"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">armnn::test::InferenceTestOptions::m_IterationCount</a></div><div class="ttdeci">unsigned int m_IterationCount</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00061">InferenceTest.hpp:61</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7ad751ee33bdcba0656fdb6e98eb17f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ad751ee33bdcba0656fdb6e98eb17f1">&#9670;&nbsp;</a></span>InferenceTestMain()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int InferenceTestMain </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>defaultTestCaseIds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TConstructTestCaseProvider&#160;</td>
          <td class="paramname"><em>constructTestCaseProvider</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_8inl_source.xhtml#l00311">311</a> of file <a class="el" href="_inference_test_8inl_source.xhtml">InferenceTest.inl</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_utils_8cpp_source.xhtml#l00018">armnn::ConfigureLogging()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::Debug</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407adf6402fd9ecc60f5a2159fdf45711cd4">armnn::fatal</a>, <a class="el" href="_inference_test_8cpp_source.xhtml#l00112">InferenceTest()</a>, <a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::Info</a>, <a class="el" href="_inference_test_8cpp_source.xhtml#l00028">ParseCommandLine()</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_test_8inl_source.xhtml#l00362">ClassifierInferenceTestMain()</a>, and <a class="el" href="_tf_lite_mobile_net_ssd-_armnn_8cpp_source.xhtml#l00014">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;{</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="comment">// Configures logging for both the ARMNN library and this test program.</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="preprocessor">#ifdef NDEBUG</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3d">armnn::LogSeverity</a> level = <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::LogSeverity::Info</a>;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3d">armnn::LogSeverity</a> level = <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::LogSeverity::Debug</a>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa59f7a819c3e29d10ffc41e5c0616872">armnn::ConfigureLogging</a>(<span class="keyword">true</span>, <span class="keyword">true</span>, level);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        std::unique_ptr&lt;IInferenceTestCaseProvider&gt; testCaseProvider = constructTestCaseProvider();</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordflow">if</span> (!testCaseProvider)</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a> inferenceTestOptions;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_1_1test.xhtml#ae2e622d6018bd48beabd765d4f6e5714">ParseCommandLine</a>(argc, argv, *testCaseProvider, inferenceTestOptions))</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> success = <a class="code" href="namespacearmnn_1_1test.xhtml#ab5a7cac4237e83d4f0d67d01dfb8ba9f">InferenceTest</a>(inferenceTestOptions, defaultTestCaseIds, *testCaseProvider);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">return</span> success ? 0 : 1;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">catch</span> (<a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a> <span class="keyword">const</span>&amp; e)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Armnn Error: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1test_xhtml_ae2e622d6018bd48beabd765d4f6e5714"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#ae2e622d6018bd48beabd765d4f6e5714">armnn::test::ParseCommandLine</a></div><div class="ttdeci">bool ParseCommandLine(int argc, char **argv, IInferenceTestCaseProvider &amp;testCaseProvider, InferenceTestOptions &amp;outParams)</div><div class="ttdoc">Parse the command line of an ArmNN (or referencetests) inference test program. </div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00028">InferenceTest.cpp:28</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa59f7a819c3e29d10ffc41e5c0616872"><div class="ttname"><a href="namespacearmnn.xhtml#aa59f7a819c3e29d10ffc41e5c0616872">armnn::ConfigureLogging</a></div><div class="ttdeci">void ConfigureLogging(bool printToStandardOutput, bool printToDebugOutput, LogSeverity severity)</div><div class="ttdoc">Configures the logging behaviour of the ARMNN library. </div><div class="ttdef"><b>Definition:</b> <a href="_utils_8cpp_source.xhtml#l00018">Utils.cpp:18</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml">armnn::test::InferenceTestOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00059">InferenceTest.hpp:59</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875"><div class="ttname"><a href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::LogSeverity::Info</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_ab5a7cac4237e83d4f0d67d01dfb8ba9f"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#ab5a7cac4237e83d4f0d67d01dfb8ba9f">armnn::test::InferenceTest</a></div><div class="ttdeci">bool InferenceTest(const InferenceTestOptions &amp;params, const std::vector&lt; unsigned int &gt; &amp;defaultTestCaseIds, IInferenceTestCaseProvider &amp;testCaseProvider)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00112">InferenceTest.cpp:112</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a93a3ba385cad27c4774e5fe64c025d3d"><div class="ttname"><a href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3d">armnn::LogSeverity</a></div><div class="ttdeci">LogSeverity</div><div class="ttdef"><b>Definition:</b> <a href="_utils_8hpp_source.xhtml#l00014">Utils.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::LayerType::Debug</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae2e622d6018bd48beabd765d4f6e5714"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2e622d6018bd48beabd765d4f6e5714">&#9670;&nbsp;</a></span>ParseCommandLine()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ParseCommandLine </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a> &amp;&#160;</td>
          <td class="paramname"><em>testCaseProvider</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>outParams</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parse the command line of an ArmNN (or referencetests) inference test program. </p>
<dl class="section return"><dt>Returns</dt><dd>false if any error occurred during options processing, otherwise true </dd></dl>

<p class="definition">Definition at line <a class="el" href="_inference_test_8cpp_source.xhtml#l00028">28</a> of file <a class="el" href="_inference_test_8cpp_source.xhtml">InferenceTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_test_8hpp_source.xhtml#l00098">IInferenceTestCaseProvider::AddCommandLineOptions()</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_cxxopts_utils_8hpp_source.xhtml#l00016">CheckRequiredOptions()</a>, <a class="el" href="_inference_test_8hpp_source.xhtml#l00063">InferenceTestOptions::m_EnableProfiling</a>, <a class="el" href="_inference_test_8hpp_source.xhtml#l00062">InferenceTestOptions::m_InferenceTimesFile</a>, <a class="el" href="_inference_test_8hpp_source.xhtml#l00061">InferenceTestOptions::m_IterationCount</a>, and <a class="el" href="_inference_test_8hpp_source.xhtml#l00102">IInferenceTestCaseProvider::ProcessCommandLineOptions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_test_8inl_source.xhtml#l00311">InferenceTestMain()</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    cxxopts::Options options(<span class="stringliteral">&quot;InferenceTest&quot;</span>, <span class="stringliteral">&quot;Inference iteration parameters&quot;</span>);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="comment">// Adds generic options needed for all inference tests.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        options</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            .allow_unrecognised_options()</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            .add_options()</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                (<span class="stringliteral">&quot;h,help&quot;</span>, <span class="stringliteral">&quot;Display help messages&quot;</span>)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                (<span class="stringliteral">&quot;i,iterations&quot;</span>, <span class="stringliteral">&quot;Sets the number of inferences to perform. If unset, will only be run once.&quot;</span>,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                 cxxopts::value&lt;unsigned int&gt;(outParams.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">m_IterationCount</a>)-&gt;default_value(<span class="stringliteral">&quot;0&quot;</span>))</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                (<span class="stringliteral">&quot;inference-times-file&quot;</span>,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                 <span class="stringliteral">&quot;If non-empty, each individual inference time will be recorded and output to this file&quot;</span>,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                 cxxopts::value&lt;std::string&gt;(outParams.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">m_InferenceTimesFile</a>)-&gt;default_value(<span class="stringliteral">&quot;&quot;</span>))</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                (<span class="stringliteral">&quot;e,event-based-profiling&quot;</span>, <span class="stringliteral">&quot;Enables built in profiler. If unset, defaults to off.&quot;</span>,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                 cxxopts::value&lt;bool&gt;(outParams.<a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>)-&gt;default_value(<span class="stringliteral">&quot;0&quot;</span>));</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        std::vector&lt;std::string&gt; required; <span class="comment">//to be passed as reference to derived inference tests</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="comment">// Adds options specific to the ITestCaseProvider.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        testCaseProvider.<a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a87d20f49fba1d117545ec865cc43b364">AddCommandLineOptions</a>(options, required);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keyword">auto</span> result = options.parse(argc, argv);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span> (result.count(<span class="stringliteral">&quot;help&quot;</span>))</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            std::cout &lt;&lt; options.help() &lt;&lt; std::endl;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="_cxxopts_utils_8hpp.xhtml#a54dc0f90125fe080b8d0c503e542ca77">CheckRequiredOptions</a>(result, required);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> cxxopts::OptionException&amp; e)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        std::cerr &lt;&lt; e.what() &lt;&lt; std::endl &lt;&lt; options.help() &lt;&lt; std::endl;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Caught unexpected exception&quot;</span>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Fatal internal error: &quot;</span> &lt;&lt; e.what() &lt;&lt; std::endl;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span> (!testCaseProvider.<a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a0b5cdedc222fce2b18000949f0699880">ProcessCommandLineOptions</a>(outParams))</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="ttc" id="_cxxopts_utils_8hpp_xhtml_a54dc0f90125fe080b8d0c503e542ca77"><div class="ttname"><a href="_cxxopts_utils_8hpp.xhtml#a54dc0f90125fe080b8d0c503e542ca77">CheckRequiredOptions</a></div><div class="ttdeci">bool CheckRequiredOptions(const cxxopts::ParseResult &amp;result, const std::vector&lt; std::string &gt; &amp;required)</div><div class="ttdoc">Ensure all mandatory command-line parameters have been passed to cxxopts. </div><div class="ttdef"><b>Definition:</b> <a href="_cxxopts_utils_8hpp_source.xhtml#l00016">CxxoptsUtils.hpp:16</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_a5955b5dadde32f0c5687ab38f77c5be5"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a5955b5dadde32f0c5687ab38f77c5be5">armnn::test::InferenceTestOptions::m_InferenceTimesFile</a></div><div class="ttdeci">std::string m_InferenceTimesFile</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00062">InferenceTest.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a87d20f49fba1d117545ec865cc43b364"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a87d20f49fba1d117545ec865cc43b364">armnn::test::IInferenceTestCaseProvider::AddCommandLineOptions</a></div><div class="ttdeci">virtual void AddCommandLineOptions(cxxopts::Options &amp;options, std::vector&lt; std::string &gt; &amp;required)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00098">InferenceTest.hpp:98</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml_a0b5cdedc222fce2b18000949f0699880"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml#a0b5cdedc222fce2b18000949f0699880">armnn::test::IInferenceTestCaseProvider::ProcessCommandLineOptions</a></div><div class="ttdeci">virtual bool ProcessCommandLineOptions(const InferenceTestOptions &amp;commonOptions)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00102">InferenceTest.hpp:102</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">armnn::test::InferenceTestOptions::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00063">InferenceTest.hpp:63</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml_ac9c49972e7f8db643b3c72aa782278df"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml#ac9c49972e7f8db643b3c72aa782278df">armnn::test::InferenceTestOptions::m_IterationCount</a></div><div class="ttdeci">unsigned int m_IterationCount</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00061">InferenceTest.hpp:61</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8a678fb3a8864e31aeb77f857ae6fc43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a678fb3a8864e31aeb77f857ae6fc43">&#9670;&nbsp;</a></span>ValidateDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ValidateDirectory </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>dir</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="_inference_test_8cpp_source.xhtml">InferenceTest.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_test_8inl_source.xhtml#l00362">ClassifierInferenceTestMain()</a>, <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00049">main()</a>, <a class="el" href="_inference_test_8inl_source.xhtml#l00212">ClassifierTestCaseProvider&lt; TDatabase, InferenceModel &gt;::ProcessCommandLineOptions()</a>, and <a class="el" href="_yolo_inference_test_8hpp_source.xhtml#l00196">YoloTestCaseProvider&lt; Model &gt;::ProcessCommandLineOptions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">if</span> (dir.empty())</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;No directory specified&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">if</span> (dir[dir.length() - 1] != <span class="charliteral">&#39;/&#39;</span>)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        dir += <span class="stringliteral">&quot;/&quot;</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(dir))</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given directory &quot;</span> &lt;&lt; dir &lt;&lt; <span class="stringliteral">&quot; does not exist&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">if</span> (!fs::is_directory(dir))</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given directory [&quot;</span> &lt;&lt; dir &lt;&lt; <span class="stringliteral">&quot;] is not a directory&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1test.xhtml">test</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:36 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
