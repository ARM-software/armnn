<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: OutputSlot Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_output_slot.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_output_slot-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OutputSlot Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OutputSlot:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_output_slot.png" usemap="#OutputSlot_map" alt=""/>
  <map id="OutputSlot_map" name="OutputSlot_map">
<area href="classarmnn_1_1_i_output_slot.xhtml" title="An output connection slot for a layer. " alt="IOutputSlot" shape="rect" coords="0,0,73,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a4e6d051d886332fd09b56ae125871a33"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a4e6d051d886332fd09b56ae125871a33">OutputSlot</a> (<a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> &amp;owner, <a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a> &amp;outputHandler)</td></tr>
<tr class="separator:a4e6d051d886332fd09b56ae125871a33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3c671738b90fd3c46741e54509be3d0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#ac3c671738b90fd3c46741e54509be3d0">OutputSlot</a> (const <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;)=delete</td></tr>
<tr class="separator:ac3c671738b90fd3c46741e54509be3d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b18eb52120d39a44a81e31a41560ba9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a2b18eb52120d39a44a81e31a41560ba9">operator=</a> (const <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;)=delete</td></tr>
<tr class="separator:a2b18eb52120d39a44a81e31a41560ba9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c960e9c4ac9adeccb691077066cbda3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a5c960e9c4ac9adeccb691077066cbda3">operator=</a> (<a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&amp;)=delete</td></tr>
<tr class="separator:a5c960e9c4ac9adeccb691077066cbda3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d8c6c6d4074c063c2c4b4e70f74fa96"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a0d8c6c6d4074c063c2c4b4e70f74fa96">OutputSlot</a> (<a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a0d8c6c6d4074c063c2c4b4e70f74fa96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf321850aed578695768f803d709e089"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#adf321850aed578695768f803d709e089">~OutputSlot</a> ()</td></tr>
<tr class="separator:adf321850aed578695768f803d709e089"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ddaf04177053a536f0e7be83a642bc6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">GetOwningLayer</a> () const</td></tr>
<tr class="separator:a7ddaf04177053a536f0e7be83a642bc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07dcdabbae92b5c0d51d2d236db528ed"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a07dcdabbae92b5c0d51d2d236db528ed">GetOwningIConnectableLayer</a> () const override</td></tr>
<tr class="separator:a07dcdabbae92b5c0d51d2d236db528ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bd5f82d7627668e46dee6a6c699480b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a6bd5f82d7627668e46dee6a6c699480b">GetOwningLayerGuid</a> () const override</td></tr>
<tr class="separator:a6bd5f82d7627668e46dee6a6c699480b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab00cd1d8962a1927d0302901cb8410d7"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#ab00cd1d8962a1927d0302901cb8410d7">GetOutputHandler</a> () const</td></tr>
<tr class="separator:ab00cd1d8962a1927d0302901cb8410d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a992cd5ce1cd4a8b10eebebee27ba044b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a992cd5ce1cd4a8b10eebebee27ba044b">GetOutputHandler</a> ()</td></tr>
<tr class="separator:a992cd5ce1cd4a8b10eebebee27ba044b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcfb97035799ea4c043f9ef370714815"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a> (<a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;destination)</td></tr>
<tr class="separator:adcfb97035799ea4c043f9ef370714815"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac72a192dfcfa19e6ce826f99b415a11d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#ac72a192dfcfa19e6ce826f99b415a11d">Disconnect</a> (<a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;slot)</td></tr>
<tr class="separator:ac72a192dfcfa19e6ce826f99b415a11d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50b562d4a4edc64d7d8abcca056f0b8c"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a50b562d4a4edc64d7d8abcca056f0b8c">GetConnections</a> () const</td></tr>
<tr class="separator:a50b562d4a4edc64d7d8abcca056f0b8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29ce2fa137002ecdafe9ad28e441a36d"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#aff209afc1dc598da399e3e78617ce016">EdgeStrategy</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a29ce2fa137002ecdafe9ad28e441a36d">GetEdgeStrategies</a> () const</td></tr>
<tr class="separator:a29ce2fa137002ecdafe9ad28e441a36d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5f74c7858eb0b7c1d676230016339c2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#ac5f74c7858eb0b7c1d676230016339c2">ValidateTensorShape</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape) const</td></tr>
<tr class="separator:ac5f74c7858eb0b7c1d676230016339c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a687ea562cfdf653499a0980537c04afb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a687ea562cfdf653499a0980537c04afb">DisconnectAll</a> ()</td></tr>
<tr class="separator:a687ea562cfdf653499a0980537c04afb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19d30f83e90f2612e6aec510715f790d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a19d30f83e90f2612e6aec510715f790d">MoveAllConnections</a> (<a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;destination)</td></tr>
<tr class="memdesc:a19d30f83e90f2612e6aec510715f790d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves all connections to another <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a>.  <a href="#a19d30f83e90f2612e6aec510715f790d">More...</a><br /></td></tr>
<tr class="separator:a19d30f83e90f2612e6aec510715f790d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25b0119c02aece1d341b99953d169c0f"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a25b0119c02aece1d341b99953d169c0f">GetNumConnections</a> () const override</td></tr>
<tr class="separator:a25b0119c02aece1d341b99953d169c0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a048e8c1536cf6b8871b093a73a4a3a85"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a048e8c1536cf6b8871b093a73a4a3a85">GetConnection</a> (unsigned int index) const override</td></tr>
<tr class="separator:a048e8c1536cf6b8871b093a73a4a3a85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79b28a9ef1f9cf237f6f6697589cacb4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a79b28a9ef1f9cf237f6f6697589cacb4">GetConnection</a> (unsigned int index) override</td></tr>
<tr class="separator:a79b28a9ef1f9cf237f6f6697589cacb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e5c5771d741dd5473989047a9314728"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo) override</td></tr>
<tr class="separator:a7e5c5771d741dd5473989047a9314728"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada2ad7d1caeeb4ef6195c8925fad6a65"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">GetTensorInfo</a> () const override</td></tr>
<tr class="separator:ada2ad7d1caeeb4ef6195c8925fad6a65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac51cbac15935434659c8504d6db54e28"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#ac51cbac15935434659c8504d6db54e28">IsTensorInfoSet</a> () const override</td></tr>
<tr class="separator:ac51cbac15935434659c8504d6db54e28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a173e83ec6aa1f55c7c23707a668a60"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a1a173e83ec6aa1f55c7c23707a668a60">Connect</a> (<a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a> &amp;destination) override</td></tr>
<tr class="separator:a1a173e83ec6aa1f55c7c23707a668a60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acecc5f85737e89526b0fd2bc4a9cfb9a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#acecc5f85737e89526b0fd2bc4a9cfb9a">Disconnect</a> (<a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a> &amp;slot) override</td></tr>
<tr class="separator:acecc5f85737e89526b0fd2bc4a9cfb9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27545b353e48a739981d345b64bb9dc9"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a27545b353e48a739981d345b64bb9dc9">CalculateIndexOnOwner</a> () const override</td></tr>
<tr class="separator:a27545b353e48a739981d345b64bb9dc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab074017b8b2359ed28af6f2de7c36cdc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#ab074017b8b2359ed28af6f2de7c36cdc">operator==</a> (const <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;other) const</td></tr>
<tr class="separator:ab074017b8b2359ed28af6f2de7c36cdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af29f6883785691ef946d0c32b6d2f338"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#af29f6883785691ef946d0c32b6d2f338">SetTensorHandleFactory</a> (const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> &amp;id)</td></tr>
<tr class="separator:af29f6883785691ef946d0c32b6d2f338"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af303cf872a3f95e29992e45224e4cf8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#af303cf872a3f95e29992e45224e4cf8e">GetTensorHandleFactoryId</a> () const</td></tr>
<tr class="separator:af303cf872a3f95e29992e45224e4cf8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f80ddd1f76ed4ad599e0d1a00659ee5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a3f80ddd1f76ed4ad599e0d1a00659ee5">SetEdgeStrategy</a> (unsigned int connectionIndex, <a class="el" href="namespacearmnn.xhtml#aff209afc1dc598da399e3e78617ce016">EdgeStrategy</a> strategy)</td></tr>
<tr class="separator:a3f80ddd1f76ed4ad599e0d1a00659ee5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b481a458c19fd3807b6e04b94b9b174"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#aff209afc1dc598da399e3e78617ce016">EdgeStrategy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_output_slot.xhtml#a5b481a458c19fd3807b6e04b94b9b174">GetEdgeStrategyForConnection</a> (unsigned int connectionIdx) const</td></tr>
<tr class="separator:a5b481a458c19fd3807b6e04b94b9b174"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_output_slot"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_output_slot')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_output_slot.xhtml">IOutputSlot</a></td></tr>
<tr class="memitem:aefb9214c1e4bc5f50e84d113e52e1242 inherit pro_methods_classarmnn_1_1_i_output_slot"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#aefb9214c1e4bc5f50e84d113e52e1242">~IOutputSlot</a> ()</td></tr>
<tr class="memdesc:aefb9214c1e4bc5f50e84d113e52e1242 inherit pro_methods_classarmnn_1_1_i_output_slot"><td class="mdescLeft">&#160;</td><td class="mdescRight">Not user deletable.  <a href="classarmnn_1_1_i_output_slot.xhtml#aefb9214c1e4bc5f50e84d113e52e1242">More...</a><br /></td></tr>
<tr class="separator:aefb9214c1e4bc5f50e84d113e52e1242 inherit pro_methods_classarmnn_1_1_i_output_slot"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00086">86</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a4e6d051d886332fd09b56ae125871a33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e6d051d886332fd09b56ae125871a33">&#9670;&nbsp;</a></span>OutputSlot() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> &amp;&#160;</td>
          <td class="paramname"><em>owner</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a> &amp;&#160;</td>
          <td class="paramname"><em>outputHandler</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00089">89</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    : m_OwningLayer(owner)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    , m_OutputHandler(outputHandler)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    , m_TensorHandleFactoryId(<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a9c95f90eb40e31f629e0e2947b8bc6f9">ITensorHandleFactory::LegacyFactoryId</a>)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {}</div><div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml_a9c95f90eb40e31f629e0e2947b8bc6f9"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a9c95f90eb40e31f629e0e2947b8bc6f9">armnn::ITensorHandleFactory::LegacyFactoryId</a></div><div class="ttdeci">static const FactoryId LegacyFactoryId</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00046">ITensorHandleFactory.hpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac3c671738b90fd3c46741e54509be3d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3c671738b90fd3c46741e54509be3d0">&#9670;&nbsp;</a></span>OutputSlot() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0d8c6c6d4074c063c2c4b4e70f74fa96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d8c6c6d4074c063c2c4b4e70f74fa96">&#9670;&nbsp;</a></span>OutputSlot() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="adf321850aed578695768f803d709e089"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf321850aed578695768f803d709e089">&#9670;&nbsp;</a></span>~OutputSlot()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00101">101</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="comment">// Coverity fix: DisconnectAll() may throw uncaught exceptions.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <a class="code" href="classarmnn_1_1_output_slot.xhtml#a687ea562cfdf653499a0980537c04afb">DisconnectAll</a>();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="comment">// Coverity fix: BOOST_LOG_TRIVIAL (typically used to report errors) may throw an</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="comment">// exception of type std::length_error.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="comment">// Using stderr instead in this context as there is no point in nesting try-catch blocks here.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            std::cerr &lt;&lt; <span class="stringliteral">&quot;WARNING: An error has occurred when disconnecting all output slots: &quot;</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                      &lt;&lt; e.what() &lt;&lt; std::endl;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a687ea562cfdf653499a0980537c04afb"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a687ea562cfdf653499a0980537c04afb">armnn::OutputSlot::DisconnectAll</a></div><div class="ttdeci">void DisconnectAll()</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00110">Layer.cpp:110</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a27545b353e48a739981d345b64bb9dc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27545b353e48a739981d345b64bb9dc9">&#9670;&nbsp;</a></span>CalculateIndexOnOwner()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int CalculateIndexOnOwner </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a41d30a9cd272e05986d71a69d6ad618b">IOutputSlot</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00319">Layer::GetNumOutputSlots()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00323">Layer::GetOutputSlot()</a>, and <a class="el" href="_layer_8hpp_source.xhtml#l00053">InputSlot::GetOwningLayer()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_debug_layer_8cpp_source.xhtml#l00020">DebugLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">GetOwningLayer</a>().<a class="code" href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">GetNumOutputSlots</a>(); i++)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">GetOwningLayer</a>().<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(i) == (*this))</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">return</span> i;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Did not find slot on owner.&quot;</span>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">return</span> 0; <span class="comment">// Error</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a7ddaf04177053a536f0e7be83a642bc6"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">armnn::OutputSlot::GetOwningLayer</a></div><div class="ttdeci">Layer &amp; GetOwningLayer() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00118">Layer.hpp:118</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a1594bddc87d6477df300317658f566bb"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">armnn::Layer::GetNumOutputSlots</a></div><div class="ttdeci">unsigned int GetNumOutputSlots() const override</div><div class="ttdoc">Returns the number of connectable output slots. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00319">Layer.hpp:319</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a0e36688a43c35668d8db5257274c68fe"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">armnn::Layer::GetOutputSlot</a></div><div class="ttdeci">const OutputSlot &amp; GetOutputSlot(unsigned int index=0) const override</div><div class="ttdoc">Get the const output slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00323">Layer.hpp:323</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adcfb97035799ea4c043f9ef370714815"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcfb97035799ea4c043f9ef370714815">&#9670;&nbsp;</a></span>Connect() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Connect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;&#160;</td>
          <td class="paramname"><em>destination</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="_custom_memory_allocator_sample_8cpp-example.xhtml#a20">CustomMemoryAllocatorSample.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00062">InputSlot::SetConnection()</a>, and <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l01918">NetworkImpl::AddFullyConnectedLayer()</a>, <a class="el" href="_cl_custom_allocator_tests_8cpp_source.xhtml#l00063">CreateTestNetwork()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00023">InputSlot::Insert()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00450">Graph::InsertNewLayer()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00119">OutputSlot::MoveAllConnections()</a>, and <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    destination.SetConnection(<span class="keyword">this</span>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    m_Connections.push_back(&amp;destination);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    m_EdgeStrategies.push_back(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">EdgeStrategy::Undefined</a>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">int</span>&gt;(m_Connections.size() - 1);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1a173e83ec6aa1f55c7c23707a668a60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a173e83ec6aa1f55c7c23707a668a60">&#9670;&nbsp;</a></span>Connect() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Connect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a> &amp;&#160;</td>
          <td class="paramname"><em>destination</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00151">151</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">References <a class="el" href="_test_utils_8cpp_source.xhtml#l00012">Connect()</a>.</p>
<div class="fragment"><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(*PolymorphicDowncast&lt;InputSlot*&gt;(&amp;destination));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_output_slot_xhtml_adcfb97035799ea4c043f9ef370714815"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">armnn::OutputSlot::Connect</a></div><div class="ttdeci">int Connect(InputSlot &amp;destination)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00086">Layer.cpp:86</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac72a192dfcfa19e6ce826f99b415a11d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac72a192dfcfa19e6ce826f99b415a11d">&#9670;&nbsp;</a></span>Disconnect() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Disconnect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;&#160;</td>
          <td class="paramname"><em>slot</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00094">94</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00062">InputSlot::SetConnection()</a>.</p>
<div class="fragment"><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    slot.SetConnection(<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">auto</span> it = std::find(m_Connections.begin(), m_Connections.end(), &amp;slot);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">if</span> (it == m_Connections.end())</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">auto</span> idx = std::distance(m_Connections.begin(), it);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    m_Connections.erase(std::remove(m_Connections.begin(), m_Connections.end(), &amp;slot), m_Connections.end());</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    m_EdgeStrategies.erase(m_EdgeStrategies.begin() + idx);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="acecc5f85737e89526b0fd2bc4a9cfb9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acecc5f85737e89526b0fd2bc4a9cfb9a">&#9670;&nbsp;</a></span>Disconnect() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Disconnect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a> &amp;&#160;</td>
          <td class="paramname"><em>slot</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ae16a4d0c56ca96e5d61785bd3e3e7992">IOutputSlot</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00156">156</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">References <a class="el" href="_data_layout_indexed_8cpp_source.xhtml#l00046">armnnUtils::operator==()</a>.</p>
<div class="fragment"><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_output_slot.xhtml#ac72a192dfcfa19e6ce826f99b415a11d">Disconnect</a>(*PolymorphicDowncast&lt;InputSlot*&gt;(&amp;slot));</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ac72a192dfcfa19e6ce826f99b415a11d"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ac72a192dfcfa19e6ce826f99b415a11d">armnn::OutputSlot::Disconnect</a></div><div class="ttdeci">void Disconnect(InputSlot &amp;slot)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00094">Layer.cpp:94</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a687ea562cfdf653499a0980537c04afb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a687ea562cfdf653499a0980537c04afb">&#9670;&nbsp;</a></span>DisconnectAll()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DisconnectAll </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00110">110</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00204">InputSlot::GetConnection()</a>.</p>
<div class="fragment"><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">while</span> (<a class="code" href="classarmnn_1_1_output_slot.xhtml#a25b0119c02aece1d341b99953d169c0f">GetNumConnections</a>() &gt; 0)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        InputSlot&amp; connection = *<a class="code" href="classarmnn_1_1_output_slot.xhtml#a048e8c1536cf6b8871b093a73a4a3a85">GetConnection</a>(0);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <a class="code" href="classarmnn_1_1_output_slot.xhtml#ac72a192dfcfa19e6ce826f99b415a11d">Disconnect</a>(connection);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ac72a192dfcfa19e6ce826f99b415a11d"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ac72a192dfcfa19e6ce826f99b415a11d">armnn::OutputSlot::Disconnect</a></div><div class="ttdeci">void Disconnect(InputSlot &amp;slot)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00094">Layer.cpp:94</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a25b0119c02aece1d341b99953d169c0f"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a25b0119c02aece1d341b99953d169c0f">armnn::OutputSlot::GetNumConnections</a></div><div class="ttdeci">unsigned int GetNumConnections() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00143">Layer.hpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a048e8c1536cf6b8871b093a73a4a3a85"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a048e8c1536cf6b8871b093a73a4a3a85">armnn::OutputSlot::GetConnection</a></div><div class="ttdeci">const InputSlot * GetConnection(unsigned int index) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00049">Layer.cpp:49</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a048e8c1536cf6b8871b093a73a4a3a85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a048e8c1536cf6b8871b093a73a4a3a85">&#9670;&nbsp;</a></span>GetConnection() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> * GetConnection </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9fffb92dc6d2edd5258d574a5862fc83">IOutputSlot</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00146">OutputSlot::operator==()</a>, and <a class="el" href="_subgraph_view_tests_8cpp_source.xhtml#l00318">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    ValidateConnectionIndex(index);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> m_Connections[index];</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a79b28a9ef1f9cf237f6f6697589cacb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79b28a9ef1f9cf237f6f6697589cacb4">&#9670;&nbsp;</a></span>GetConnection() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> * GetConnection </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a6a4d336648a2f68565a156201c0f71c6">IOutputSlot</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00055">55</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    ValidateConnectionIndex(index);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> m_Connections[index];</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a50b562d4a4edc64d7d8abcca056f0b8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50b562d4a4edc64d7d8abcca056f0b8c">&#9670;&nbsp;</a></span>GetConnections()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;<a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a>*&gt;&amp; GetConnections </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00130">130</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00301">Graph::AddCompatibilityLayers()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01372">armnn::CalculateSlotOption()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01277">armnn::CalculateSlotOptionForInput()</a>, <a class="el" href="_squash_equal_siblings_8hpp_source.xhtml#l00025">SquashEqualSiblingsImpl&lt; Comparable &gt;::Run()</a>, and <a class="el" href="_network_8cpp_source.xhtml#l01611">armnn::SelectTensorHandleStrategy()</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{ <span class="keywordflow">return</span> m_Connections; }</div></div><!-- fragment -->
</div>
</div>
<a id="a29ce2fa137002ecdafe9ad28e441a36d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29ce2fa137002ecdafe9ad28e441a36d">&#9670;&nbsp;</a></span>GetEdgeStrategies()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;<a class="el" href="namespacearmnn.xhtml#aff209afc1dc598da399e3e78617ce016">EdgeStrategy</a>&gt;&amp; GetEdgeStrategies </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00131">131</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00301">Graph::AddCompatibilityLayers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{ <span class="keywordflow">return</span> m_EdgeStrategies; }</div></div><!-- fragment -->
</div>
</div>
<a id="a5b481a458c19fd3807b6e04b94b9b174"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b481a458c19fd3807b6e04b94b9b174">&#9670;&nbsp;</a></span>GetEdgeStrategyForConnection()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#aff209afc1dc598da399e3e78617ce016">EdgeStrategy</a> GetEdgeStrategyForConnection </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>connectionIdx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00189">189</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_handle_strategy_test_8cpp_source.xhtml#l00274">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;{</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">return</span> m_EdgeStrategies[connectionIdx];</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a25b0119c02aece1d341b99953d169c0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25b0119c02aece1d341b99953d169c0f">&#9670;&nbsp;</a></span>GetNumConnections()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumConnections </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#aab97b09d9ee85a105883949abcae52f3">IOutputSlot</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00143">143</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00204">InputSlot::GetConnection()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00026">armnn::GetTensorInfo()</a>, and <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00146">OutputSlot::operator==()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l02062">LoadedNetwork::RegisterDebugCallback()</a>, <a class="el" href="_optimize_consecutive_reshapes_8hpp_source.xhtml#l00019">OptimizeConsecutiveReshapesImpl::Run()</a>, <a class="el" href="_move_permute_up_8hpp_source.xhtml#l00023">MovePermuteUpImpl::Run()</a>, <a class="el" href="_move_transpose_up_8hpp_source.xhtml#l00023">MoveTransposeUpImpl::Run()</a>, <a class="el" href="_squash_equal_siblings_8hpp_source.xhtml#l00025">SquashEqualSiblingsImpl&lt; Comparable &gt;::Run()</a>, and <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00027">AddBroadcastReshapeLayerImpl::Run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(m_Connections.size()); }</div><div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab00cd1d8962a1927d0302901cb8410d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab00cd1d8962a1927d0302901cb8410d7">&#9670;&nbsp;</a></span>GetOutputHandler() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a>&amp; GetOutputHandler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00124">124</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00119">OutputSlot::MoveAllConnections()</a>, and <a class="el" href="_neon_tensor_handle_tests_8cpp_source.xhtml#l00021">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{ <span class="keywordflow">return</span> m_OutputHandler; }</div></div><!-- fragment -->
</div>
</div>
<a id="a992cd5ce1cd4a8b10eebebee27ba044b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a992cd5ce1cd4a8b10eebebee27ba044b">&#9670;&nbsp;</a></span>GetOutputHandler() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a>&amp; GetOutputHandler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00125">125</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">References <a class="el" href="_test_utils_8cpp_source.xhtml#l00012">Connect()</a>.</p>
<div class="fragment"><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{ <span class="keywordflow">return</span> m_OutputHandler; }</div></div><!-- fragment -->
</div>
</div>
<a id="a07dcdabbae92b5c0d51d2d236db528ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07dcdabbae92b5c0d51d2d236db528ed">&#9670;&nbsp;</a></span>GetOwningIConnectableLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp; GetOwningIConnectableLayer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a22b3f11f56aa924c0c1b6ee4d6cc90e1">IOutputSlot</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00486">486</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;{</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keywordflow">return</span> m_OwningLayer;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7ddaf04177053a536f0e7be83a642bc6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ddaf04177053a536f0e7be83a642bc6">&#9670;&nbsp;</a></span>GetOwningLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp; GetOwningLayer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00118">118</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8cpp_source.xhtml#l00491">InputSlot::GetOwningIConnectableLayer()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l01372">armnn::CalculateSlotOption()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01277">armnn::CalculateSlotOptionForInput()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00020">DebugLayer::CreateWorkload()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00129">armnn::optimizations::pad_fold::FoldPadIntoLayer2dImpl()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00302">Layer::GetPriority()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00434">Graph::InsertNewLayer()</a>, <a class="el" href="_optimize_consecutive_reshapes_8hpp_source.xhtml#l00019">OptimizeConsecutiveReshapesImpl::Run()</a>, <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_optimize_inverse_conversions_8hpp_source.xhtml#l00021">OptimizeInverseConversionsImpl::Run()</a>, <a class="el" href="_optimize_inverse_permutes_8hpp_source.xhtml#l00023">OptimizeInversePermutesImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_move_permute_up_8hpp_source.xhtml#l00023">MovePermuteUpImpl::Run()</a>, <a class="el" href="_redirect_members_to_constant_inputs_8hpp_source.xhtml#l00023">RedirectMembersToConstantInputsImpl::Run()</a>, <a class="el" href="_move_transpose_up_8hpp_source.xhtml#l00023">MoveTransposeUpImpl::Run()</a>, <a class="el" href="_fuse_batch_norm_8hpp_source.xhtml#l00027">FuseBatchNorm&lt; ConvLayer, ArmnnType, T &gt;::Run()</a>, <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00027">AddBroadcastReshapeLayerImpl::Run()</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00118">Graph::SerializeToDot()</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{ <span class="keywordflow">return</span> m_OwningLayer; }</div></div><!-- fragment -->
</div>
</div>
<a id="a6bd5f82d7627668e46dee6a6c699480b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bd5f82d7627668e46dee6a6c699480b">&#9670;&nbsp;</a></span>GetOwningLayerGuid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a> GetOwningLayerGuid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ad0c3555b126975ad6b3e250fe2a59534">IOutputSlot</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00169">169</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00327">Layer::GetGuid()</a>, and <a class="el" href="_layer_8hpp_source.xhtml#l00053">InputSlot::GetOwningLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">GetOwningLayer</a>().<a class="code" href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">GetGuid</a>();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a7ddaf04177053a536f0e7be83a642bc6"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">armnn::OutputSlot::GetOwningLayer</a></div><div class="ttdeci">Layer &amp; GetOwningLayer() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00118">Layer.hpp:118</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a8dc12f0ee5b232d397bd18ced1a72a64"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">armnn::Layer::GetGuid</a></div><div class="ttdeci">LayerGuid GetGuid() const final</div><div class="ttdoc">Returns the unique id of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00327">Layer.hpp:327</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af303cf872a3f95e29992e45224e4cf8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af303cf872a3f95e29992e45224e4cf8e">&#9670;&nbsp;</a></span>GetTensorHandleFactoryId()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> GetTensorHandleFactoryId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00179">179</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00301">Graph::AddCompatibilityLayers()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00178">SplitterLayer::CreateTensorHandles()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00180">ConcatLayer::CreateTensorHandles()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00253">Layer::CreateTensorHandles()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01306">LoadedNetwork::ImportInputs()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01439">LoadedNetwork::ImportOutputs()</a>, and <a class="el" href="_tensor_handle_strategy_test_8cpp_source.xhtml#l00274">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;{</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">return</span> m_TensorHandleFactoryId;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ada2ad7d1caeeb4ef6195c8925fad6a65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada2ad7d1caeeb4ef6195c8925fad6a65">&#9670;&nbsp;</a></span>GetTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp; GetTensorInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00066">66</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l00611">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00129">armnn::optimizations::pad_fold::FoldPadIntoLayer2dImpl()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00287">Layer::GetDataType()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01306">LoadedNetwork::ImportInputs()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01439">LoadedNetwork::ImportOutputs()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00129">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00168">armnn::InsertConvertFp32ToBf16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00201">armnn::InsertConvertFp32ToFp16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00234">armnn::InsertDebugLayerAfter()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00142">NeonBackend::OptimizeSubgraphView()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">ClBackend::OptimizeSubgraphView()</a>, <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00027">AddBroadcastReshapeLayerImpl::Run()</a>, <a class="el" href="_fuse_batch_norm_8hpp_source.xhtml#l00027">FuseBatchNorm&lt; ConvLayer, ArmnnType, T &gt;::Run()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00118">Graph::SerializeToDot()</a>, <a class="el" href="_add_broadcast_reshape_layer_tests_8cpp_source.xhtml#l00015">TEST_SUITE()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00396">Layer::ValidateAndCopyShape()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00076">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00034">RankLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00035">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00033">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00034">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00043">ReduceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00034">FillLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00036">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00034">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00035">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00045">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00034">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00036">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00037">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00039">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00034">CastLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00034">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00105">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00109">Pooling3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00034">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00033">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00037">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00063">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00037">ShapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00037">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00034">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00034">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00063">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00045">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00044">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00034">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00035">ChannelShuffleLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00061">PadLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00045">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00041">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_constant_layer_8cpp_source.xhtml#l00045">ConstantLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00107">Convolution3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00099">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00039">DetectionPostProcessLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00074">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00074">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00064">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00125">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00090">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00058">LogicalBinaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00060">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00062">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00100">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00070">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00121">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00062">FullyConnectedLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00216">SplitterLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00168">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00294">ConcatLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00170">UnidirectionalSequenceLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00052">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00096">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00170">QLstmLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_output_slot.xhtml#ab00cd1d8962a1927d0302901cb8410d7">GetOutputHandler</a>().<a class="code" href="classarmnn_1_1_output_handler.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ab00cd1d8962a1927d0302901cb8410d7"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ab00cd1d8962a1927d0302901cb8410d7">armnn::OutputSlot::GetOutputHandler</a></div><div class="ttdeci">const OutputHandler &amp; GetOutputHandler() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00124">Layer.hpp:124</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_handler_xhtml_a66e8f43a5b42b500871ed96e15419567"><div class="ttname"><a href="classarmnn_1_1_output_handler.xhtml#a66e8f43a5b42b500871ed96e15419567">armnn::OutputHandler::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const</div><div class="ttdoc">Gets the matching TensorInfo for the output. </div><div class="ttdef"><b>Definition:</b> <a href="_output_handler_8hpp_source.xhtml#l00042">OutputHandler.hpp:42</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac51cbac15935434659c8504d6db54e28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac51cbac15935434659c8504d6db54e28">&#9670;&nbsp;</a></span>IsTensorInfoSet()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTensorInfoSet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ab4e57caf059794897b17266090ebcb39">IOutputSlot</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00071">71</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00053">InputSlot::GetOwningLayer()</a>, <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">armnn::InferAndValidate</a>, and <a class="el" href="classarmnn_1_1_layer.xhtml#a84ff600212ba26e665de9b978ec896a4">Layer::ValidateTensorShapesFromInputs()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00027">AddBroadcastReshapeLayerImpl::Run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">GetOwningLayer</a>().GetShapeInferenceMethod() == <a class="code" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">ShapeInferenceMethod::InferAndValidate</a>)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">GetOwningLayer</a>().<a class="code" href="classarmnn_1_1_layer.xhtml#a84ff600212ba26e665de9b978ec896a4">ValidateTensorShapesFromInputs</a>();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_output_slot.xhtml#ab00cd1d8962a1927d0302901cb8410d7">GetOutputHandler</a>().<a class="code" href="classarmnn_1_1_output_handler.xhtml#aca366a3098776fdd06f23e9f9329721b">IsTensorInfoSet</a>();</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a7ddaf04177053a536f0e7be83a642bc6"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a7ddaf04177053a536f0e7be83a642bc6">armnn::OutputSlot::GetOwningLayer</a></div><div class="ttdeci">Layer &amp; GetOwningLayer() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00118">Layer.hpp:118</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_handler_xhtml_aca366a3098776fdd06f23e9f9329721b"><div class="ttname"><a href="classarmnn_1_1_output_handler.xhtml#aca366a3098776fdd06f23e9f9329721b">armnn::OutputHandler::IsTensorInfoSet</a></div><div class="ttdeci">bool IsTensorInfoSet() const</div><div class="ttdoc">Returns true if SetTensorInfo() has been called at least once on this. </div><div class="ttdef"><b>Definition:</b> <a href="_output_handler_8hpp_source.xhtml#l00058">OutputHandler.hpp:58</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a84ff600212ba26e665de9b978ec896a4"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a84ff600212ba26e665de9b978ec896a4">armnn::Layer::ValidateTensorShapesFromInputs</a></div><div class="ttdeci">virtual void ValidateTensorShapesFromInputs()=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb"><div class="ttname"><a href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">armnn::ShapeInferenceMethod::InferAndValidate</a></div><div class="ttdoc">Infer missing output shapes and validate all output shapes. </div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ab00cd1d8962a1927d0302901cb8410d7"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ab00cd1d8962a1927d0302901cb8410d7">armnn::OutputSlot::GetOutputHandler</a></div><div class="ttdeci">const OutputHandler &amp; GetOutputHandler() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00124">Layer.hpp:124</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a19d30f83e90f2612e6aec510715f790d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19d30f83e90f2612e6aec510715f790d">&#9670;&nbsp;</a></span>MoveAllConnections()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void MoveAllConnections </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&#160;</td>
          <td class="paramname"><em>destination</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Moves all connections to another <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a>. </p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00119">119</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00086">OutputSlot::Connect()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00204">InputSlot::GetConnection()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00124">OutputSlot::GetOutputHandler()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00026">armnn::GetTensorInfo()</a>, <a class="el" href="_output_handler_8cpp_source.xhtml#l00015">OutputHandler::SetTensorInfo()</a>, and <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8hpp_source.xhtml#l00450">Graph::InsertNewLayer()</a>, <a class="el" href="_transpose_as_reshape_8hpp_source.xhtml#l00018">TransposeAsReshapeImpl::Run()</a>, <a class="el" href="_permute_as_reshape_8hpp_source.xhtml#l00018">PermuteAsReshapeImpl::Run()</a>, <a class="el" href="_optimize_consecutive_reshapes_8hpp_source.xhtml#l00019">OptimizeConsecutiveReshapesImpl::Run()</a>, <a class="el" href="_optimize_inverse_conversions_8hpp_source.xhtml#l00021">OptimizeInverseConversionsImpl::Run()</a>, <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_optimize_inverse_permutes_8hpp_source.xhtml#l00023">OptimizeInversePermutesImpl&lt; PermuteType &gt;::Run()</a>, and <a class="el" href="_fuse_batch_norm_8hpp_source.xhtml#l00027">FuseBatchNorm&lt; ConvLayer, ArmnnType, T &gt;::Run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">while</span> (<a class="code" href="classarmnn_1_1_output_slot.xhtml#a25b0119c02aece1d341b99953d169c0f">GetNumConnections</a>() &gt; 0)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(m_EdgeStrategies[0] == <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">EdgeStrategy::Undefined</a>,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="stringliteral">&quot;Cannot move connections once memory strategies have be established.&quot;</span>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        InputSlot&amp; connection = *<a class="code" href="classarmnn_1_1_output_slot.xhtml#a048e8c1536cf6b8871b093a73a4a3a85">GetConnection</a>(0);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <a class="code" href="classarmnn_1_1_output_slot.xhtml#ac72a192dfcfa19e6ce826f99b415a11d">Disconnect</a>(connection);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        destination.Connect(connection);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        destination.GetOutputHandler().SetTensorInfo(<a class="code" href="classarmnn_1_1_output_slot.xhtml#ab00cd1d8962a1927d0302901cb8410d7">GetOutputHandler</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">GetTensorInfo</a>());</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ac72a192dfcfa19e6ce826f99b415a11d"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ac72a192dfcfa19e6ce826f99b415a11d">armnn::OutputSlot::Disconnect</a></div><div class="ttdeci">void Disconnect(InputSlot &amp;slot)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00094">Layer.cpp:94</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a25b0119c02aece1d341b99953d169c0f"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a25b0119c02aece1d341b99953d169c0f">armnn::OutputSlot::GetNumConnections</a></div><div class="ttdeci">unsigned int GetNumConnections() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00143">Layer.hpp:143</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ab00cd1d8962a1927d0302901cb8410d7"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ab00cd1d8962a1927d0302901cb8410d7">armnn::OutputSlot::GetOutputHandler</a></div><div class="ttdeci">const OutputHandler &amp; GetOutputHandler() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00124">Layer.hpp:124</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ada2ad7d1caeeb4ef6195c8925fad6a65"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">armnn::OutputSlot::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00066">Layer.cpp:66</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a048e8c1536cf6b8871b093a73a4a3a85"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a048e8c1536cf6b8871b093a73a4a3a85">armnn::OutputSlot::GetConnection</a></div><div class="ttdeci">const InputSlot * GetConnection(unsigned int index) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00049">Layer.cpp:49</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2b18eb52120d39a44a81e31a41560ba9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b18eb52120d39a44a81e31a41560ba9">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5c960e9c4ac9adeccb691077066cbda3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c960e9c4ac9adeccb691077066cbda3">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab074017b8b2359ed28af6f2de7c36cdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab074017b8b2359ed28af6f2de7c36cdc">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00146">146</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00204">InputSlot::GetConnection()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00049">OutputSlot::GetConnection()</a>, and <a class="el" href="_layer_8hpp_source.xhtml#l00143">OutputSlot::GetNumConnections()</a>.</p>
<div class="fragment"><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;{</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordtype">bool</span> isSame = other.GetNumConnections() == <a class="code" href="classarmnn_1_1_output_slot.xhtml#a25b0119c02aece1d341b99953d169c0f">GetNumConnections</a>();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span> (!isSame)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classarmnn_1_1_output_slot.xhtml#a25b0119c02aece1d341b99953d169c0f">GetNumConnections</a>(); i++)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        isSame &amp;= other.GetConnection(i) == <a class="code" href="classarmnn_1_1_output_slot.xhtml#a048e8c1536cf6b8871b093a73a4a3a85">GetConnection</a>(i);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">return</span> isSame;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a25b0119c02aece1d341b99953d169c0f"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a25b0119c02aece1d341b99953d169c0f">armnn::OutputSlot::GetNumConnections</a></div><div class="ttdeci">unsigned int GetNumConnections() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00143">Layer.hpp:143</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a048e8c1536cf6b8871b093a73a4a3a85"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a048e8c1536cf6b8871b093a73a4a3a85">armnn::OutputSlot::GetConnection</a></div><div class="ttdeci">const InputSlot * GetConnection(unsigned int index) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00049">Layer.cpp:49</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3f80ddd1f76ed4ad599e0d1a00659ee5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f80ddd1f76ed4ad599e0d1a00659ee5">&#9670;&nbsp;</a></span>SetEdgeStrategy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetEdgeStrategy </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>connectionIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#aff209afc1dc598da399e3e78617ce016">EdgeStrategy</a>&#160;</td>
          <td class="paramname"><em>strategy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00184">184</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00301">Graph::AddCompatibilityLayers()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00023">InputSlot::Insert()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01611">armnn::SelectTensorHandleStrategy()</a>, and <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    m_EdgeStrategies[connectionIndex] = strategy;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af29f6883785691ef946d0c32b6d2f338"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af29f6883785691ef946d0c32b6d2f338">&#9670;&nbsp;</a></span>SetTensorHandleFactory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTensorHandleFactory </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> &amp;&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00174">174</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00301">Graph::AddCompatibilityLayers()</a>, and <a class="el" href="_network_8cpp_source.xhtml#l01611">armnn::SelectTensorHandleStrategy()</a>.</p>
<div class="fragment"><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    m_TensorHandleFactoryId = id;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7e5c5771d741dd5473989047a9314728"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e5c5771d741dd5473989047a9314728">&#9670;&nbsp;</a></span>SetTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetTensorInfo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00061">61</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l01918">NetworkImpl::AddFullyConnectedLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00670">armnn::AttemptBackendAssignment()</a>, <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00326">armnn::ChainReduceLayers()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00611">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00129">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00168">armnn::InsertConvertFp32ToBf16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00201">armnn::InsertConvertFp32ToFp16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00234">armnn::InsertDebugLayerAfter()</a>, <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00027">AddBroadcastReshapeLayerImpl::Run()</a>, <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>, and <a class="el" href="_layer_8cpp_source.xhtml#l00396">Layer::ValidateAndCopyShape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="classarmnn_1_1_output_slot.xhtml#ab00cd1d8962a1927d0302901cb8410d7">GetOutputHandler</a>().<a class="code" href="classarmnn_1_1_output_handler.xhtml#a97db12c41024f5545ef5cc4153e5443b">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_output_handler_xhtml_a97db12c41024f5545ef5cc4153e5443b"><div class="ttname"><a href="classarmnn_1_1_output_handler.xhtml#a97db12c41024f5545ef5cc4153e5443b">armnn::OutputHandler::SetTensorInfo</a></div><div class="ttdeci">void SetTensorInfo(const TensorInfo &amp;tensorInfo)</div><div class="ttdoc">Sets the TensorInfo used by this output handler. </div><div class="ttdef"><b>Definition:</b> <a href="_output_handler_8cpp_source.xhtml#l00015">OutputHandler.cpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ab00cd1d8962a1927d0302901cb8410d7"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ab00cd1d8962a1927d0302901cb8410d7">armnn::OutputSlot::GetOutputHandler</a></div><div class="ttdeci">const OutputHandler &amp; GetOutputHandler() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00124">Layer.hpp:124</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac5f74c7858eb0b7c1d676230016339c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5f74c7858eb0b7c1d676230016339c2">&#9670;&nbsp;</a></span>ValidateTensorShape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ValidateTensorShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00080">80</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>.</p>
<div class="fragment"><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<a class="code" href="classarmnn_1_1_output_slot.xhtml#ac51cbac15935434659c8504d6db54e28">IsTensorInfoSet</a>(), <span class="stringliteral">&quot;TensorInfo must be set in order to validate the shape.&quot;</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">return</span> shape == m_OutputHandler.<a class="code" href="classarmnn_1_1_output_handler.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ac51cbac15935434659c8504d6db54e28"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ac51cbac15935434659c8504d6db54e28">armnn::OutputSlot::IsTensorInfoSet</a></div><div class="ttdeci">bool IsTensorInfoSet() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00071">Layer.cpp:71</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_handler_xhtml_a66e8f43a5b42b500871ed96e15419567"><div class="ttname"><a href="classarmnn_1_1_output_handler.xhtml#a66e8f43a5b42b500871ed96e15419567">armnn::OutputHandler::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const</div><div class="ttdoc">Gets the matching TensorInfo for the output. </div><div class="ttdef"><b>Definition:</b> <a href="_output_handler_8hpp_source.xhtml#l00042">OutputHandler.hpp:42</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a></li>
<li>src/armnn/<a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:21 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
