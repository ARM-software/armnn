<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/MemoryManagerTests.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_memory_manager_tests_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">MemoryManagerTests.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_memory_manager_tests_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_memory_manager_8hpp.xhtml">backendsCommon/MemoryManager.hpp</a>&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;doctest/doctest.h&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;numeric&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">/// @brief Class that implements a sample custom allocator.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"></span><span class="keyword">class </span>SampleCustomAllocator : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_i_custom_allocator.xhtml">armnn::ICustomAllocator</a></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    SampleCustomAllocator() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordtype">void</span>* allocate(<span class="keywordtype">size_t</span> size, <span class="keywordtype">size_t</span> alignment)<span class="keyword"> override</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(alignment);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        CHECK(size == m_Values.size());</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        m_CounterAllocate+=1;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <span class="keywordflow">return</span> m_Values.data();</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    }</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">void</span> free(<span class="keywordtype">void</span>* ptr)<span class="keyword"> override</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        CHECK(ptr == m_Values.data());</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        m_CounterFree+=1;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">armnn::MemorySource</a> GetMemorySourceType()<span class="keyword"> override</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>* GetMemoryRegionAtOffset(<span class="keywordtype">void</span>* buffer, <span class="keywordtype">size_t</span> offset, <span class="keywordtype">size_t</span> alignment = 0 )<span class="keyword"> override</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(alignment);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">return</span> (static_cast&lt;char*&gt;(buffer) + offset);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    /// Holds the data in the tensors. Create for testing purposes.</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"></span>    std::vector&lt;uint8_t&gt; m_Values;<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /// Counts the number of times the function allocate is called.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> m_CounterAllocate= 0;<span class="comment"></span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">    /// Counts the number of times the function free is called.</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> m_CounterFree = 0;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;};</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#adcc09cc21e8c43acd9f4f74d78b67e3e">   53</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a1621fb2f10314c394c9023d3e090d394">TEST_SUITE</a>(<span class="stringliteral">&quot;MemoryManagerTests&quot;</span>)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/// Unit test Storing, Allocating and Deallocating with a custom allocator.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span>TEST_CASE(<span class="stringliteral">&quot;MemoryManagerTest&quot;</span>)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="comment">// Create mock up bufferStorageVector with 2 BufferStorage with the same TensorMemory</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">size_t</span> numTensors = 5;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    std::vector&lt;std::shared_ptr&lt;TensorMemory&gt;&gt; tensorMemoryPointerVector(numTensors);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::vector&lt;std::shared_ptr&lt;TensorMemory&gt;&gt; tensorMemoryVector;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    tensorMemoryVector.reserve(numTensors);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    std::vector&lt;size_t&gt; offsets(numTensors);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    std::iota(std::begin(offsets), std::end(offsets), 0);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">for</span> (uint32_t idx = 0; idx &lt; tensorMemoryPointerVector.size(); ++idx)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        tensorMemoryVector.emplace_back(std::make_shared&lt;TensorMemory&gt;(<a class="code" href="structarmnn_1_1_tensor_memory.xhtml">TensorMemory</a>{offsets[idx], 0, <span class="keyword">nullptr</span>}));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        tensorMemoryPointerVector[idx] = tensorMemoryVector[idx];</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    std::vector&lt;BufferStorage&gt; bufferStorageVector;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    bufferStorageVector.emplace_back(<a class="code" href="structarmnn_1_1_buffer_storage.xhtml">BufferStorage</a>{tensorMemoryPointerVector, numTensors});</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    bufferStorageVector.emplace_back(<a class="code" href="structarmnn_1_1_buffer_storage.xhtml">BufferStorage</a>{tensorMemoryPointerVector, numTensors});</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// Create an instance of the SampleCustomAllocator</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    std::shared_ptr&lt;SampleCustomAllocator&gt; customAllocator =</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            std::make_unique&lt;SampleCustomAllocator&gt;(SampleCustomAllocator());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    customAllocator-&gt;m_Values = {10, 11, 12, 13, 14};</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// Check that the test was set up correctly</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    CHECK(customAllocator-&gt;m_Values.size() == numTensors);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordtype">size_t</span> bufferVecSize =  bufferStorageVector.size();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// Utilise 3 functions in the MemoryManager. Check the counters and the pointer to the values are correct.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="classarmnn_1_1_memory_manager.xhtml">MemoryManager</a> memoryManager;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    memoryManager.<a class="code" href="classarmnn_1_1_memory_manager.xhtml#a07bc28679b487cc58281a168c3a1c18b">StoreMemToAllocate</a>(bufferStorageVector, customAllocator);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    memoryManager.<a class="code" href="classarmnn_1_1_memory_manager.xhtml#a36571ba095c5f84e8dbaee44d9068af8">Allocate</a>();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    CHECK(customAllocator-&gt;m_CounterAllocate == bufferVecSize);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    uint32_t idx = 0;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> tensorMemory : tensorMemoryVector)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keyword">auto</span> value = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(tensorMemory-&gt;m_Data);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        CHECK(customAllocator-&gt;m_Values[idx] == *value);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        idx += 1;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    memoryManager.<a class="code" href="classarmnn_1_1_memory_manager.xhtml#afaf63777ab6c7323a7b4eceecdfee3df">Deallocate</a>();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    CHECK(customAllocator-&gt;m_CounterFree == bufferStorageVector.size());</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="namespacearmnn_xhtml_a1621fb2f10314c394c9023d3e090d394"><div class="ttname"><a href="namespacearmnn.xhtml#a1621fb2f10314c394c9023d3e090d394">armnn::TEST_SUITE</a></div><div class="ttdeci">TEST_SUITE(&quot;TestConstTensorLayerVisitor&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00110">ConstTensorLayerVisitor.cpp:110</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_custom_allocator_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_custom_allocator.xhtml">armnn::ICustomAllocator</a></div><div class="ttdoc">Custom Allocator interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_custom_allocator_8hpp_source.xhtml#l00016">ICustomAllocator.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_memory_manager_xhtml_a36571ba095c5f84e8dbaee44d9068af8"><div class="ttname"><a href="classarmnn_1_1_memory_manager.xhtml#a36571ba095c5f84e8dbaee44d9068af8">armnn::MemoryManager::Allocate</a></div><div class="ttdeci">void Allocate()</div><div class="ttdoc">Allocate the amount of memory indicated by , and point each  to each correspondent Tensor so that the...</div><div class="ttdef"><b>Definition:</b> <a href="_memory_manager_8cpp_source.xhtml#l00023">MemoryManager.cpp:23</a></div></div>
<div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_memory_manager_xhtml_afaf63777ab6c7323a7b4eceecdfee3df"><div class="ttname"><a href="classarmnn_1_1_memory_manager.xhtml#afaf63777ab6c7323a7b4eceecdfee3df">armnn::MemoryManager::Deallocate</a></div><div class="ttdeci">void Deallocate()</div><div class="ttdoc">Deallocate memory. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_manager_8cpp_source.xhtml#l00041">MemoryManager.cpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_memory_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1_memory_manager.xhtml">armnn::MemoryManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_memory_manager_8hpp_source.xhtml#l00039">MemoryManager.hpp:39</a></div></div>
<div class="ttc" id="structarmnn_1_1_tensor_memory_xhtml"><div class="ttname"><a href="structarmnn_1_1_tensor_memory.xhtml">armnn::TensorMemory</a></div><div class="ttdef"><b>Definition:</b> <a href="_memory_manager_8hpp_source.xhtml#l00019">MemoryManager.hpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">armnn::MemorySource</a></div><div class="ttdeci">MemorySource</div><div class="ttdoc">Define the Memory Source to reduce copies. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00230">Types.hpp:230</a></div></div>
<div class="ttc" id="structarmnn_1_1_buffer_storage_xhtml"><div class="ttname"><a href="structarmnn_1_1_buffer_storage.xhtml">armnn::BufferStorage</a></div><div class="ttdef"><b>Definition:</b> <a href="_memory_manager_8hpp_source.xhtml#l00029">MemoryManager.hpp:29</a></div></div>
<div class="ttc" id="_memory_manager_8hpp_xhtml"><div class="ttname"><a href="_memory_manager_8hpp.xhtml">MemoryManager.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_memory_manager_xhtml_a07bc28679b487cc58281a168c3a1c18b"><div class="ttname"><a href="classarmnn_1_1_memory_manager.xhtml#a07bc28679b487cc58281a168c3a1c18b">armnn::MemoryManager::StoreMemToAllocate</a></div><div class="ttdeci">void StoreMemToAllocate(std::vector&lt; BufferStorage &gt; bufferStorageVector, std::shared_ptr&lt; ICustomAllocator &gt; customAllocator, size_t typeAlignment=0)</div><div class="ttdoc">Initialization method to store in  all information needed. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_manager_8cpp_source.xhtml#l00013">MemoryManager.cpp:13</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="_memory_manager_tests_8cpp.xhtml">MemoryManagerTests.cpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:29 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
