<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: INetwork Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarmnn_1_1_i_network.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classarmnn_1_1_i_network-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">INetwork Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Main network class which provides the interface for building up a neural network.  
 <a href="classarmnn_1_1_i_network.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_i_network_8hpp_source.xhtml">INetwork.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aff3fde909d22ed157046682e70129259"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#aff3fde909d22ed157046682e70129259">PrintGraph</a> ()</td></tr>
<tr class="separator:aff3fde909d22ed157046682e70129259"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6c1c42ea44777302e87ce0fad5ac510"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#aa6c1c42ea44777302e87ce0fad5ac510">AddInputLayer</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> id, const char *name=nullptr)</td></tr>
<tr class="memdesc:aa6c1c42ea44777302e87ce0fad5ac510"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an input layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#aa6c1c42ea44777302e87ce0fad5ac510">More...</a><br /></td></tr>
<tr class="separator:aa6c1c42ea44777302e87ce0fad5ac510"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc8c1c505bca8233fe238b3b7fb80200"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#adc8c1c505bca8233fe238b3b7fb80200">AddArgMinMaxLayer</a> (const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;desc, const char *name=nullptr)</td></tr>
<tr class="memdesc:adc8c1c505bca8233fe238b3b7fb80200"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an ArgMinMax layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#adc8c1c505bca8233fe238b3b7fb80200">More...</a><br /></td></tr>
<tr class="separator:adc8c1c505bca8233fe238b3b7fb80200"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72f7f58c37d9d856fcb648b5fa68cf59"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a72f7f58c37d9d856fcb648b5fa68cf59">AddCastLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a72f7f58c37d9d856fcb648b5fa68cf59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a cast layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a72f7f58c37d9d856fcb648b5fa68cf59">More...</a><br /></td></tr>
<tr class="separator:a72f7f58c37d9d856fcb648b5fa68cf59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7dca3e9f2ab2f2c64b42fc59a67188a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#ac7dca3e9f2ab2f2c64b42fc59a67188a">AddComparisonLayer</a> (const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;comparisonDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:ac7dca3e9f2ab2f2c64b42fc59a67188a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a Comparison layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#ac7dca3e9f2ab2f2c64b42fc59a67188a">More...</a><br /></td></tr>
<tr class="separator:ac7dca3e9f2ab2f2c64b42fc59a67188a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea1059833739d3dccebb3a03ec35a1e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#aea1059833739d3dccebb3a03ec35a1e6">AddConcatLayer</a> (const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;concatDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:aea1059833739d3dccebb3a03ec35a1e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a concatenation layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#aea1059833739d3dccebb3a03ec35a1e6">More...</a><br /></td></tr>
<tr class="separator:aea1059833739d3dccebb3a03ec35a1e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a383e74ef080d4a81b8b371be4b840248"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a383e74ef080d4a81b8b371be4b840248">AddConvolution2dLayer</a> (const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;convolution2dDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a383e74ef080d4a81b8b371be4b840248"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a 2D convolution layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a383e74ef080d4a81b8b371be4b840248">More...</a><br /></td></tr>
<tr class="separator:a383e74ef080d4a81b8b371be4b840248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43de8213707de0e76d80a32cd4b9b482"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a43de8213707de0e76d80a32cd4b9b482">AddConvolution3dLayer</a> (const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;convolution3dDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a43de8213707de0e76d80a32cd4b9b482"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a 3D convolution layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a43de8213707de0e76d80a32cd4b9b482">More...</a><br /></td></tr>
<tr class="separator:a43de8213707de0e76d80a32cd4b9b482"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1853466264ac187607c96b501a74e2b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#af1853466264ac187607c96b501a74e2b">AddDepthToSpaceLayer</a> (const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;depthToSpaceDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:af1853466264ac187607c96b501a74e2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a depth to space layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#af1853466264ac187607c96b501a74e2b">More...</a><br /></td></tr>
<tr class="separator:af1853466264ac187607c96b501a74e2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6771c8752811fcfa91b3f0dee748144"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#ac6771c8752811fcfa91b3f0dee748144">AddDepthwiseConvolution2dLayer</a> (const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;convolution2dDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:ac6771c8752811fcfa91b3f0dee748144"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a 2D depthwise convolution layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#ac6771c8752811fcfa91b3f0dee748144">More...</a><br /></td></tr>
<tr class="separator:ac6771c8752811fcfa91b3f0dee748144"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a357aca04172ed22fa32e5a69122b0fec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a357aca04172ed22fa32e5a69122b0fec">AddDequantizeLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a357aca04172ed22fa32e5a69122b0fec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a Dequantize layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a357aca04172ed22fa32e5a69122b0fec">More...</a><br /></td></tr>
<tr class="separator:a357aca04172ed22fa32e5a69122b0fec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1134a94265293ea7347180260f787d2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#ac1134a94265293ea7347180260f787d2">AddDetectionPostProcessLayer</a> (const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;anchors, const char *name=nullptr)</td></tr>
<tr class="memdesc:ac1134a94265293ea7347180260f787d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a Detection PostProcess layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#ac1134a94265293ea7347180260f787d2">More...</a><br /></td></tr>
<tr class="separator:ac1134a94265293ea7347180260f787d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af71383a4986faf7f0e339fbaf70e8957"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#af71383a4986faf7f0e339fbaf70e8957">AddElementwiseBinaryLayer</a> (const <a class="el" href="structarmnn_1_1_elementwise_binary_descriptor.xhtml">ElementwiseBinaryDescriptor</a> &amp;elementwiseUnaryDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:af71383a4986faf7f0e339fbaf70e8957"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add an ElementwiseBinary layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#af71383a4986faf7f0e339fbaf70e8957">More...</a><br /></td></tr>
<tr class="separator:af71383a4986faf7f0e339fbaf70e8957"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a095a9b700dc857edc23c5d3bf088919f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a095a9b700dc857edc23c5d3bf088919f">AddElementwiseUnaryLayer</a> (const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;elementwiseUnaryDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a095a9b700dc857edc23c5d3bf088919f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add an ElementwiseUnary layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a095a9b700dc857edc23c5d3bf088919f">More...</a><br /></td></tr>
<tr class="separator:a095a9b700dc857edc23c5d3bf088919f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc94c35c0bbe852a60046bf2e756b2e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#afc94c35c0bbe852a60046bf2e756b2e0">AddFillLayer</a> (const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;fillDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:afc94c35c0bbe852a60046bf2e756b2e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add an Fill layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#afc94c35c0bbe852a60046bf2e756b2e0">More...</a><br /></td></tr>
<tr class="separator:afc94c35c0bbe852a60046bf2e756b2e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a471991a84030eb3ae601da2bee757870"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a471991a84030eb3ae601da2bee757870">AddFullyConnectedLayer</a> (const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;fullyConnectedDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a471991a84030eb3ae601da2bee757870"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a fully connected layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a471991a84030eb3ae601da2bee757870">More...</a><br /></td></tr>
<tr class="separator:a471991a84030eb3ae601da2bee757870"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11f49d84f0cfd8df65f4d5206cd43b6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a11f49d84f0cfd8df65f4d5206cd43b6d">AddPermuteLayer</a> (const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;permuteDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a11f49d84f0cfd8df65f4d5206cd43b6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a permute layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a11f49d84f0cfd8df65f4d5206cd43b6d">More...</a><br /></td></tr>
<tr class="separator:a11f49d84f0cfd8df65f4d5206cd43b6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a9bcc00ae3d96343c93b437d6f77088"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a9a9bcc00ae3d96343c93b437d6f77088">AddBatchToSpaceNdLayer</a> (const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;batchToSpaceNdDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a9a9bcc00ae3d96343c93b437d6f77088"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a batch to space ND layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a9a9bcc00ae3d96343c93b437d6f77088">More...</a><br /></td></tr>
<tr class="separator:a9a9bcc00ae3d96343c93b437d6f77088"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae913b4351b7027f37eb5657dd7867733"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#ae913b4351b7027f37eb5657dd7867733">AddPooling2dLayer</a> (const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;pooling2dDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:ae913b4351b7027f37eb5657dd7867733"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a 2D pooling layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#ae913b4351b7027f37eb5657dd7867733">More...</a><br /></td></tr>
<tr class="separator:ae913b4351b7027f37eb5657dd7867733"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee282f8e3379d3f5bed1032d20884248"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#aee282f8e3379d3f5bed1032d20884248">AddPooling3dLayer</a> (const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;pooling3dDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:aee282f8e3379d3f5bed1032d20884248"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a 3D pooling layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#aee282f8e3379d3f5bed1032d20884248">More...</a><br /></td></tr>
<tr class="separator:aee282f8e3379d3f5bed1032d20884248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee3a15d2fa419f50a8ac45e6d3c11e16"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#aee3a15d2fa419f50a8ac45e6d3c11e16">AddPrecompiledLayer</a> (const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;preCompiledDescriptor, <a class="el" href="namespacearmnn.xhtml#af362583b7b4c471c434cb0fdb86c2ae2">CompiledBlobPtr</a> compiledBlobPtr, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; &amp;backend, const char *name=nullptr)</td></tr>
<tr class="memdesc:aee3a15d2fa419f50a8ac45e6d3c11e16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a Precompiled layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#aee3a15d2fa419f50a8ac45e6d3c11e16">More...</a><br /></td></tr>
<tr class="separator:aee3a15d2fa419f50a8ac45e6d3c11e16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa51350bdd4976f3dd5a4e9d00a906b2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#aa51350bdd4976f3dd5a4e9d00a906b2c">AddActivationLayer</a> (const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;activationDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:aa51350bdd4976f3dd5a4e9d00a906b2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an activation layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#aa51350bdd4976f3dd5a4e9d00a906b2c">More...</a><br /></td></tr>
<tr class="separator:aa51350bdd4976f3dd5a4e9d00a906b2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c5376053e1f875776d7bc36fd0b7d45"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a6c5376053e1f875776d7bc36fd0b7d45">AddNormalizationLayer</a> (const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;normalizationDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a6c5376053e1f875776d7bc36fd0b7d45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a normalization layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a6c5376053e1f875776d7bc36fd0b7d45">More...</a><br /></td></tr>
<tr class="separator:a6c5376053e1f875776d7bc36fd0b7d45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8de6b047fcaff95df48dca683e1f3aa4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a8de6b047fcaff95df48dca683e1f3aa4">AddSliceLayer</a> (const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;sliceDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a8de6b047fcaff95df48dca683e1f3aa4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a slice layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a8de6b047fcaff95df48dca683e1f3aa4">More...</a><br /></td></tr>
<tr class="separator:a8de6b047fcaff95df48dca683e1f3aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30528a3bd85a0dba158bd14e252bd68a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a30528a3bd85a0dba158bd14e252bd68a">AddSoftmaxLayer</a> (const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;softmaxDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a30528a3bd85a0dba158bd14e252bd68a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a softmax layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a30528a3bd85a0dba158bd14e252bd68a">More...</a><br /></td></tr>
<tr class="separator:a30528a3bd85a0dba158bd14e252bd68a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f6d81d8a4f1f85f3616e8306760061c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a6f6d81d8a4f1f85f3616e8306760061c">AddSplitterLayer</a> (const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;splitterDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a6f6d81d8a4f1f85f3616e8306760061c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a splitter layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a6f6d81d8a4f1f85f3616e8306760061c">More...</a><br /></td></tr>
<tr class="separator:a6f6d81d8a4f1f85f3616e8306760061c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f19808bdada45222e72edf7671a275a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a0f19808bdada45222e72edf7671a275a">AddMergeLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a0f19808bdada45222e72edf7671a275a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a merge layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a0f19808bdada45222e72edf7671a275a">More...</a><br /></td></tr>
<tr class="separator:a0f19808bdada45222e72edf7671a275a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39f1b38d89c4de186742eafcbb3b1319"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a39f1b38d89c4de186742eafcbb3b1319">AddAdditionLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a39f1b38d89c4de186742eafcbb3b1319"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an addition layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a39f1b38d89c4de186742eafcbb3b1319">More...</a><br /></td></tr>
<tr class="separator:a39f1b38d89c4de186742eafcbb3b1319"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb59f6ba9988dae88e0f48e68d87fc32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#abb59f6ba9988dae88e0f48e68d87fc32">AddMultiplicationLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:abb59f6ba9988dae88e0f48e68d87fc32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a multiplication layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#abb59f6ba9988dae88e0f48e68d87fc32">More...</a><br /></td></tr>
<tr class="separator:abb59f6ba9988dae88e0f48e68d87fc32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f798e19187ac7ae6ae6153ee64ab645"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a8f798e19187ac7ae6ae6153ee64ab645">AddBatchNormalizationLayer</a> (const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;desc, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;mean, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;variance, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;beta, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;gamma, const char *name=nullptr)</td></tr>
<tr class="memdesc:a8f798e19187ac7ae6ae6153ee64ab645"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a batch normalization layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a8f798e19187ac7ae6ae6153ee64ab645">More...</a><br /></td></tr>
<tr class="separator:a8f798e19187ac7ae6ae6153ee64ab645"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25563024ec66627ee83727244a53e944"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a25563024ec66627ee83727244a53e944">AddRankLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a25563024ec66627ee83727244a53e944"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a rank layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a25563024ec66627ee83727244a53e944">More...</a><br /></td></tr>
<tr class="separator:a25563024ec66627ee83727244a53e944"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad97411f1fcb2c30c212483d8c673506f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#ad97411f1fcb2c30c212483d8c673506f">AddResizeLayer</a> (const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;resizeDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:ad97411f1fcb2c30c212483d8c673506f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a resize layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#ad97411f1fcb2c30c212483d8c673506f">More...</a><br /></td></tr>
<tr class="separator:ad97411f1fcb2c30c212483d8c673506f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0cfae1ea51669892608a1a060d24fa0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#ae0cfae1ea51669892608a1a060d24fa0">AddReduceLayer</a> (const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;reduceDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:ae0cfae1ea51669892608a1a060d24fa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a reduce layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#ae0cfae1ea51669892608a1a060d24fa0">More...</a><br /></td></tr>
<tr class="separator:ae0cfae1ea51669892608a1a060d24fa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd61d3e7ab67551c75bc219bbc4baeb5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#abd61d3e7ab67551c75bc219bbc4baeb5">AddInstanceNormalizationLayer</a> (const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;desc, const char *name=nullptr)</td></tr>
<tr class="memdesc:abd61d3e7ab67551c75bc219bbc4baeb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an instance normalization layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#abd61d3e7ab67551c75bc219bbc4baeb5">More...</a><br /></td></tr>
<tr class="separator:abd61d3e7ab67551c75bc219bbc4baeb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaff51346dadec2c1430abf007fed4cc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#aaff51346dadec2c1430abf007fed4cc9">AddL2NormalizationLayer</a> (const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;desc, const char *name=nullptr)</td></tr>
<tr class="memdesc:aaff51346dadec2c1430abf007fed4cc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an L2 normalization layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#aaff51346dadec2c1430abf007fed4cc9">More...</a><br /></td></tr>
<tr class="separator:aaff51346dadec2c1430abf007fed4cc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83b33973ca12078166b2436b313627b9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a83b33973ca12078166b2436b313627b9">AddLogSoftmaxLayer</a> (const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;logSoftmaxDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a83b33973ca12078166b2436b313627b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a log softmax layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a83b33973ca12078166b2436b313627b9">More...</a><br /></td></tr>
<tr class="separator:a83b33973ca12078166b2436b313627b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1aa567f46c30960851c02847dc7b4215"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a1aa567f46c30960851c02847dc7b4215">AddConstantLayer</a> (const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;input, const char *name=nullptr)</td></tr>
<tr class="memdesc:a1aa567f46c30960851c02847dc7b4215"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a layer with no inputs and a single output, which always corresponds to the passed in constant tensor.  <a href="classarmnn_1_1_i_network.xhtml#a1aa567f46c30960851c02847dc7b4215">More...</a><br /></td></tr>
<tr class="separator:a1aa567f46c30960851c02847dc7b4215"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a3380be13fba749fc4208214b049347"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a8a3380be13fba749fc4208214b049347">AddReshapeLayer</a> (const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;reshapeDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a8a3380be13fba749fc4208214b049347"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a reshape layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a8a3380be13fba749fc4208214b049347">More...</a><br /></td></tr>
<tr class="separator:a8a3380be13fba749fc4208214b049347"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9dd4b5273829b846ab83b3ae7f3defc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#af9dd4b5273829b846ab83b3ae7f3defc">AddShapeLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:af9dd4b5273829b846ab83b3ae7f3defc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a shape layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#af9dd4b5273829b846ab83b3ae7f3defc">More...</a><br /></td></tr>
<tr class="separator:af9dd4b5273829b846ab83b3ae7f3defc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72b9d30e9d555bb5c35460b62faedf0d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a72b9d30e9d555bb5c35460b62faedf0d">AddSpaceToBatchNdLayer</a> (const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;spaceToBatchNdDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a72b9d30e9d555bb5c35460b62faedf0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a space to batch layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a72b9d30e9d555bb5c35460b62faedf0d">More...</a><br /></td></tr>
<tr class="separator:a72b9d30e9d555bb5c35460b62faedf0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19bad0cc50526ca9f4f84a688812cdf5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a19bad0cc50526ca9f4f84a688812cdf5">AddSpaceToDepthLayer</a> (const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;spaceToDepthDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a19bad0cc50526ca9f4f84a688812cdf5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a space to depth layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a19bad0cc50526ca9f4f84a688812cdf5">More...</a><br /></td></tr>
<tr class="separator:a19bad0cc50526ca9f4f84a688812cdf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a435ea88480b8645026dd45fd692663a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a435ea88480b8645026dd45fd692663a1">AddFloorLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a435ea88480b8645026dd45fd692663a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a floor layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a435ea88480b8645026dd45fd692663a1">More...</a><br /></td></tr>
<tr class="separator:a435ea88480b8645026dd45fd692663a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5790069aa11fd1c5bb2e17cecb06528"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#af5790069aa11fd1c5bb2e17cecb06528">AddOutputLayer</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> id, const char *name=nullptr)</td></tr>
<tr class="memdesc:af5790069aa11fd1c5bb2e17cecb06528"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an output layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#af5790069aa11fd1c5bb2e17cecb06528">More...</a><br /></td></tr>
<tr class="separator:af5790069aa11fd1c5bb2e17cecb06528"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a2fdd4f442952c97a8f24de6700473a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a0a2fdd4f442952c97a8f24de6700473a">AddLstmLayer</a> (const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;params, const char *name=nullptr)</td></tr>
<tr class="memdesc:a0a2fdd4f442952c97a8f24de6700473a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a Lstm layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a0a2fdd4f442952c97a8f24de6700473a">More...</a><br /></td></tr>
<tr class="separator:a0a2fdd4f442952c97a8f24de6700473a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0aeb4e528cf6ba4b7caca14a94fbcafe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a0aeb4e528cf6ba4b7caca14a94fbcafe">AddDivisionLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a0aeb4e528cf6ba4b7caca14a94fbcafe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a division layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a0aeb4e528cf6ba4b7caca14a94fbcafe">More...</a><br /></td></tr>
<tr class="separator:a0aeb4e528cf6ba4b7caca14a94fbcafe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af13795cdf49e63d8bc3cb409592cdb9d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#af13795cdf49e63d8bc3cb409592cdb9d">AddSubtractionLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:af13795cdf49e63d8bc3cb409592cdb9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a subtraction layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#af13795cdf49e63d8bc3cb409592cdb9d">More...</a><br /></td></tr>
<tr class="separator:af13795cdf49e63d8bc3cb409592cdb9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57590d7777211673d2052f702f0b07a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a57590d7777211673d2052f702f0b07a1">AddMaximumLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a57590d7777211673d2052f702f0b07a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a Maximum layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a57590d7777211673d2052f702f0b07a1">More...</a><br /></td></tr>
<tr class="separator:a57590d7777211673d2052f702f0b07a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4726f9b7dd11db250d2a494a8a39494"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#ad4726f9b7dd11db250d2a494a8a39494">AddMeanLayer</a> (const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;meanDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:ad4726f9b7dd11db250d2a494a8a39494"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a Mean layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#ad4726f9b7dd11db250d2a494a8a39494">More...</a><br /></td></tr>
<tr class="separator:ad4726f9b7dd11db250d2a494a8a39494"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e2df484ecc65bc82712590b96e04df4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a6e2df484ecc65bc82712590b96e04df4">AddPadLayer</a> (const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;padDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a6e2df484ecc65bc82712590b96e04df4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a fully pad layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a6e2df484ecc65bc82712590b96e04df4">More...</a><br /></td></tr>
<tr class="separator:a6e2df484ecc65bc82712590b96e04df4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b426a3feffc76e66d73b5761806e899"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a0b426a3feffc76e66d73b5761806e899">AddQuantizeLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a0b426a3feffc76e66d73b5761806e899"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a quantize layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a0b426a3feffc76e66d73b5761806e899">More...</a><br /></td></tr>
<tr class="separator:a0b426a3feffc76e66d73b5761806e899"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5c93cad39a690af862d49ffaec0d3c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#ac5c93cad39a690af862d49ffaec0d3c0">AddStridedSliceLayer</a> (const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;stridedSliceDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:ac5c93cad39a690af862d49ffaec0d3c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a strided slice layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#ac5c93cad39a690af862d49ffaec0d3c0">More...</a><br /></td></tr>
<tr class="separator:ac5c93cad39a690af862d49ffaec0d3c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bfd8dee1a0315b651e977c672c0847c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a4bfd8dee1a0315b651e977c672c0847c">AddMinimumLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a4bfd8dee1a0315b651e977c672c0847c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a Minimum layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a4bfd8dee1a0315b651e977c672c0847c">More...</a><br /></td></tr>
<tr class="separator:a4bfd8dee1a0315b651e977c672c0847c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1da203a7e3caa6ae4f0630a4758aac55"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a1da203a7e3caa6ae4f0630a4758aac55">AddGatherLayer</a> (const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;descriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a1da203a7e3caa6ae4f0630a4758aac55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add Gather layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a1da203a7e3caa6ae4f0630a4758aac55">More...</a><br /></td></tr>
<tr class="separator:a1da203a7e3caa6ae4f0630a4758aac55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af776e284b9e2c4a3563abb8cf5e8ac5e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#af776e284b9e2c4a3563abb8cf5e8ac5e">AddGatherNdLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:af776e284b9e2c4a3563abb8cf5e8ac5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add GatherNd layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#af776e284b9e2c4a3563abb8cf5e8ac5e">More...</a><br /></td></tr>
<tr class="separator:af776e284b9e2c4a3563abb8cf5e8ac5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26e69cda5fe9642f9198c24ae5fdf9bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a26e69cda5fe9642f9198c24ae5fdf9bc">AddSwitchLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a26e69cda5fe9642f9198c24ae5fdf9bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a switch layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a26e69cda5fe9642f9198c24ae5fdf9bc">More...</a><br /></td></tr>
<tr class="separator:a26e69cda5fe9642f9198c24ae5fdf9bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d614a503a34ea3712b388aa4340ddbe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a6d614a503a34ea3712b388aa4340ddbe">AddPreluLayer</a> (const char *name=nullptr)</td></tr>
<tr class="memdesc:a6d614a503a34ea3712b388aa4340ddbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a PReLU layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a6d614a503a34ea3712b388aa4340ddbe">More...</a><br /></td></tr>
<tr class="separator:a6d614a503a34ea3712b388aa4340ddbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41fd7b56923d5625bac2cbfebed1a393"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a41fd7b56923d5625bac2cbfebed1a393">AddTransposeConvolution2dLayer</a> (const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;biases, const char *name=nullptr)</td></tr>
<tr class="memdesc:a41fd7b56923d5625bac2cbfebed1a393"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a 2D transpose convolution layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a41fd7b56923d5625bac2cbfebed1a393">More...</a><br /></td></tr>
<tr class="separator:a41fd7b56923d5625bac2cbfebed1a393"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab067ba4ee9416d93abb8a52f3dc8feba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#ab067ba4ee9416d93abb8a52f3dc8feba">AddTransposeLayer</a> (const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;transposeDescriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:ab067ba4ee9416d93abb8a52f3dc8feba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a transpose layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#ab067ba4ee9416d93abb8a52f3dc8feba">More...</a><br /></td></tr>
<tr class="separator:ab067ba4ee9416d93abb8a52f3dc8feba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5210b3df77e7a51ab369b577de821aa2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a5210b3df77e7a51ab369b577de821aa2">AddStackLayer</a> (const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;descriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a5210b3df77e7a51ab369b577de821aa2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a stack layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a5210b3df77e7a51ab369b577de821aa2">More...</a><br /></td></tr>
<tr class="separator:a5210b3df77e7a51ab369b577de821aa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74894d085e78ff80f45fc09dd2381f08"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a74894d085e78ff80f45fc09dd2381f08">AddStandInLayer</a> (const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;descriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a74894d085e78ff80f45fc09dd2381f08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a stand-in layer for a type unknown to the Arm NN framework.  <a href="classarmnn_1_1_i_network.xhtml#a74894d085e78ff80f45fc09dd2381f08">More...</a><br /></td></tr>
<tr class="separator:a74894d085e78ff80f45fc09dd2381f08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40067b05f30a3ab65568c826df7a8ea7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a40067b05f30a3ab65568c826df7a8ea7">AddQuantizedLstmLayer</a> (const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a> &amp;params, const char *name=nullptr)</td></tr>
<tr class="memdesc:a40067b05f30a3ab65568c826df7a8ea7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a QuantizedLstm layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a40067b05f30a3ab65568c826df7a8ea7">More...</a><br /></td></tr>
<tr class="separator:a40067b05f30a3ab65568c826df7a8ea7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2acbae0b9e98c94b843677484775c86a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a2acbae0b9e98c94b843677484775c86a">AddQLstmLayer</a> (const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;params, const char *name=nullptr)</td></tr>
<tr class="memdesc:a2acbae0b9e98c94b843677484775c86a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a QLstm layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a2acbae0b9e98c94b843677484775c86a">More...</a><br /></td></tr>
<tr class="separator:a2acbae0b9e98c94b843677484775c86a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dfc9717e76257867ad0a9239f210df0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a7dfc9717e76257867ad0a9239f210df0">AddLogicalBinaryLayer</a> (const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;descriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a7dfc9717e76257867ad0a9239f210df0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a Logical Binary layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a7dfc9717e76257867ad0a9239f210df0">More...</a><br /></td></tr>
<tr class="separator:a7dfc9717e76257867ad0a9239f210df0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba22dcdeed6e7c489aea6eb798c0a10a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#aba22dcdeed6e7c489aea6eb798c0a10a">AddUnidirectionalSequenceLstmLayer</a> (const <a class="el" href="namespacearmnn.xhtml#ae6c5f1b51bd32133c4dcc632045d6b58">UnidirectionalSequenceLstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;params, const char *name=nullptr)</td></tr>
<tr class="memdesc:aba22dcdeed6e7c489aea6eb798c0a10a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a UnidirectionalSequenceLstm layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#aba22dcdeed6e7c489aea6eb798c0a10a">More...</a><br /></td></tr>
<tr class="separator:aba22dcdeed6e7c489aea6eb798c0a10a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a786be4af14ba595c9946f935ba99f170"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a786be4af14ba595c9946f935ba99f170">AddChannelShuffleLayer</a> (const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;descriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:a786be4af14ba595c9946f935ba99f170"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a ChannelShuffle layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#a786be4af14ba595c9946f935ba99f170">More...</a><br /></td></tr>
<tr class="separator:a786be4af14ba595c9946f935ba99f170"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aead50fe5965878e58cfdbe782736fa2a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#aead50fe5965878e58cfdbe782736fa2a">AddBatchMatMulLayer</a> (const <a class="el" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">BatchMatMulDescriptor</a> &amp;descriptor, const char *name=nullptr)</td></tr>
<tr class="memdesc:aead50fe5965878e58cfdbe782736fa2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a <a class="el" href="classarmnn_1_1_batch_mat_mul.xhtml">BatchMatMul</a> layer to the network.  <a href="classarmnn_1_1_i_network.xhtml#aead50fe5965878e58cfdbe782736fa2a">More...</a><br /></td></tr>
<tr class="separator:aead50fe5965878e58cfdbe782736fa2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72032c65bf8b8acf09b564b7d80078c5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a72032c65bf8b8acf09b564b7d80078c5">ExecuteStrategy</a> (<a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a> &amp;strategy) const</td></tr>
<tr class="separator:a72032c65bf8b8acf09b564b7d80078c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ab534dfa7f086a5f09fd9e3734ca6ab28"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#ab534dfa7f086a5f09fd9e3734ca6ab28">CreateRaw</a> (const <a class="el" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">NetworkOptions</a> &amp;networkOptions={})</td></tr>
<tr class="separator:ab534dfa7f086a5f09fd9e3734ca6ab28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41ce159095e95f7cd4174ce5d4662697"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a41ce159095e95f7cd4174ce5d4662697">Create</a> (const <a class="el" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">NetworkOptions</a> &amp;networkOptions={})</td></tr>
<tr class="separator:a41ce159095e95f7cd4174ce5d4662697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55bd1bb29076dc45bb335e7322781463"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a55bd1bb29076dc45bb335e7322781463">Destroy</a> (<a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *network)</td></tr>
<tr class="separator:a55bd1bb29076dc45bb335e7322781463"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:af760179196d57e2ddbc64b989fb72586"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#af760179196d57e2ddbc64b989fb72586">~INetwork</a> ()</td></tr>
<tr class="separator:af760179196d57e2ddbc64b989fb72586"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d936beb0fcf3c5d22ff332f0812b05e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a2d936beb0fcf3c5d22ff332f0812b05e">INetwork</a> (<a class="el" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">NetworkOptions</a> networkOptions={})</td></tr>
<tr class="separator:a2d936beb0fcf3c5d22ff332f0812b05e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a4353fa80ece13e3b1664881c27f5a67c"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_network_impl.xhtml">NetworkImpl</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a></td></tr>
<tr class="separator:a4353fa80ece13e3b1664881c27f5a67c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:abc7f5a6538288c9cba3f54ab8ac70012"><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#abc7f5a6538288c9cba3f54ab8ac70012">TestConnectionPreservation</a></td></tr>
<tr class="separator:abc7f5a6538288c9cba3f54ab8ac70012"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af32ea41e89c446958a5376291d19ef49"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#af32ea41e89c446958a5376291d19ef49">VisitLayersTopologically</a> (const <a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *inputNetwork, <a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a> &amp;strategy)</td></tr>
<tr class="separator:af32ea41e89c446958a5376291d19ef49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ec772587bcadc2fd02cc0e882efcfe8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a0ec772587bcadc2fd02cc0e882efcfe8">GetInputTensorInfo</a> (const <a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *network)</td></tr>
<tr class="separator:a0ec772587bcadc2fd02cc0e882efcfe8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae569ba62ba5cf22f910ae7f369dc7948"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#ae569ba62ba5cf22f910ae7f369dc7948">Optimize</a> (const <a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> &amp;network, const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; &amp;backendPreferences, const <a class="el" href="classarmnn_1_1_i_device_spec.xhtml">IDeviceSpec</a> &amp;deviceSpec, const <a class="el" href="structarmnn_1_1_optimizer_options.xhtml">OptimizerOptions</a> &amp;options, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::vector&lt; std::string &gt; &amp; &gt; messages)</td></tr>
<tr class="memdesc:ae569ba62ba5cf22f910ae7f369dc7948"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accept legacy <a class="el" href="structarmnn_1_1_optimizer_options.xhtml">OptimizerOptions</a>.  <a href="classarmnn_1_1_i_network.xhtml#ae569ba62ba5cf22f910ae7f369dc7948">More...</a><br /></td></tr>
<tr class="separator:ae569ba62ba5cf22f910ae7f369dc7948"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a953666c6d94c919eb5f0bd998e513dc5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_network.xhtml#a953666c6d94c919eb5f0bd998e513dc5">Optimize</a> (const <a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> &amp;network, const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; &amp;backendPreferences, const <a class="el" href="classarmnn_1_1_i_device_spec.xhtml">IDeviceSpec</a> &amp;deviceSpec, const <a class="el" href="classarmnn_1_1_optimizer_options_opaque.xhtml">OptimizerOptionsOpaque</a> &amp;options, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::vector&lt; std::string &gt; &amp; &gt; messages)</td></tr>
<tr class="memdesc:a953666c6d94c919eb5f0bd998e513dc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an optimized version of the network.  <a href="classarmnn_1_1_i_network.xhtml#a953666c6d94c919eb5f0bd998e513dc5">More...</a><br /></td></tr>
<tr class="separator:a953666c6d94c919eb5f0bd998e513dc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Main network class which provides the interface for building up a neural network. </p>
<p>This object is subsequently required by the IRuntime::Load() method. </p>

<p class="definition">Definition at line <a class="el" href="_i_network_8hpp_source.xhtml#l00335">335</a> of file <a class="el" href="_i_network_8hpp_source.xhtml">INetwork.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="af760179196d57e2ddbc64b989fb72586"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af760179196d57e2ddbc64b989fb72586">&#9670;&nbsp;</a></span>~INetwork()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2d936beb0fcf3c5d22ff332f0812b05e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d936beb0fcf3c5d22ff332f0812b05e">&#9670;&nbsp;</a></span>INetwork()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">NetworkOptions</a>&#160;</td>
          <td class="paramname"><em>networkOptions</em> = <code>{}</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00044">44</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;: <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>(<span class="keyword">new</span> NetworkImpl(networkOptions)) {}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l00647">INetwork::CreateRaw()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa51350bdd4976f3dd5a4e9d00a906b2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa51350bdd4976f3dd5a4e9d00a906b2c">&#9670;&nbsp;</a></span>AddActivationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddActivationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>activationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds an activation layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">activationDescriptor</td><td>- <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml" title="An ActivationDescriptor for the ActivationLayer.">ActivationDescriptor</a> to configure the activation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00369">369</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;{</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddActivationLayer(activationDescriptor, name);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a39f1b38d89c4de186742eafcbb3b1319"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39f1b38d89c4de186742eafcbb3b1319">&#9670;&nbsp;</a></span>AddAdditionLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddAdditionLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds an addition layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00402">402</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;{</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddAdditionLayer(name);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, and <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00074">armnn::FuseAdditionLayer()</a>.</p>

</div>
</div>
<a id="adc8c1c505bca8233fe238b3b7fb80200"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc8c1c505bca8233fe238b3b7fb80200">&#9670;&nbsp;</a></span>AddArgMinMaxLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddArgMinMaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds an ArgMinMax layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">desc</td><td>- Parameters for the L2 normalization operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00246">246</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddArgMinMaxLayer(desc, name);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="aead50fe5965878e58cfdbe782736fa2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aead50fe5965878e58cfdbe782736fa2a">&#9670;&nbsp;</a></span>AddBatchMatMulLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddBatchMatMulLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">BatchMatMulDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a <a class="el" href="classarmnn_1_1_batch_mat_mul.xhtml">BatchMatMul</a> layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">descriptor</td><td>- Parameters for the <a class="el" href="classarmnn_1_1_batch_mat_mul.xhtml">BatchMatMul</a> operation </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00636">636</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;{</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddBatchMatMulLayer(descriptor, name);</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a8f798e19187ac7ae6ae6153ee64ab645"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f798e19187ac7ae6ae6153ee64ab645">&#9670;&nbsp;</a></span>AddBatchNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddBatchNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>variance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a batch normalization layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mean</td><td>- Pre-calculated mean for each channel. </td></tr>
    <tr><td class="paramname">variance</td><td>- Pre-calculated variance for each channel. </td></tr>
    <tr><td class="paramname">beta</td><td>- Per-channel additive factor. </td></tr>
    <tr><td class="paramname">gamma</td><td>- Per-channel multiplicative factor. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00416">416</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddBatchNormalizationLayer(desc, mean, variance, beta, gamma, name);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00179">armnn::FuseBatchNormalizationLayer()</a>.</p>

</div>
</div>
<a id="a9a9bcc00ae3d96343c93b437d6f77088"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a9bcc00ae3d96343c93b437d6f77088">&#9670;&nbsp;</a></span>AddBatchToSpaceNdLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddBatchToSpaceNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>batchToSpaceNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a batch to space ND layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">batchToSpaceNdDescriptor</td><td>- Description of the layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00343">343</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;{</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddBatchToSpaceNdLayer(batchToSpaceNdDescriptor, name);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a72f7f58c37d9d856fcb648b5fa68cf59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72f7f58c37d9d856fcb648b5fa68cf59">&#9670;&nbsp;</a></span>AddCastLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddCastLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a cast layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00252">252</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;{</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddCastLayer(name);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a786be4af14ba595c9946f935ba99f170"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a786be4af14ba595c9946f935ba99f170">&#9670;&nbsp;</a></span>AddChannelShuffleLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddChannelShuffleLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a ChannelShuffle layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">descriptor</td><td>- Parameters for the ChannelShuffle operation </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00630">630</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;{</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddChannelShuffleLayer(descriptor, name);</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="ac7dca3e9f2ab2f2c64b42fc59a67188a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7dca3e9f2ab2f2c64b42fc59a67188a">&#9670;&nbsp;</a></span>AddComparisonLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddComparisonLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>comparisonDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a Comparison layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
    <tr><td class="paramname">desc</td><td>- Descriptor for the comparison operation. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00257">257</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddComparisonLayer(comparisonDescriptor, name);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="aea1059833739d3dccebb3a03ec35a1e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea1059833739d3dccebb3a03ec35a1e6">&#9670;&nbsp;</a></span>AddConcatLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddConcatLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>concatDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a concatenation layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">concatDescriptor</td><td>- ConcatDescriptor (synonym for <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml" title="An OriginsDescriptor for the ConcatLayer.">OriginsDescriptor</a>) to configure the concatenation process. Number of Views must be equal to the number of inputs, and their order must match - e.g. first view corresponds to the first input, second view to the second input, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00264">264</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;{</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddConcatLayer(concatDescriptor, name);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a1aa567f46c30960851c02847dc7b4215"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1aa567f46c30960851c02847dc7b4215">&#9670;&nbsp;</a></span>AddConstantLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddConstantLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a layer with no inputs and a single output, which always corresponds to the passed in constant tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store.">Tensor</a> to be provided as the only output of the layer. The layer will maintain its own copy of the tensor data, meaning the memory referenced by <em>input</em> can be freed or reused after this function is called. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00461">461</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddConstantLayer(input, name);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a383e74ef080d4a81b8b371be4b840248"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a383e74ef080d4a81b8b371be4b840248">&#9670;&nbsp;</a></span>AddConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a 2D convolution layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">convolution2dDescriptor</td><td>- Description of the 2D convolution layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00271">271</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;{</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddConvolution2dLayer(convolution2dDescriptor, name);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00209">armnn::FuseConvolution2dLayer()</a>.</p>

</div>
</div>
<a id="a43de8213707de0e76d80a32cd4b9b482"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43de8213707de0e76d80a32cd4b9b482">&#9670;&nbsp;</a></span>AddConvolution3dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddConvolution3dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution3dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a 3D convolution layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">convolution3dDescriptor</td><td>- Description of the 3D convolution layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00277">277</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddConvolution3dLayer(convolution3dDescriptor, name);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="af1853466264ac187607c96b501a74e2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1853466264ac187607c96b501a74e2b">&#9670;&nbsp;</a></span>AddDepthToSpaceLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddDepthToSpaceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>depthToSpaceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a depth to space layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">depthToSpaceDescriptor</td><td>- Parameters for the depth to space operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00284">284</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;{</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddDepthToSpaceLayer(depthToSpaceDescriptor, name);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="ac6771c8752811fcfa91b3f0dee748144"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6771c8752811fcfa91b3f0dee748144">&#9670;&nbsp;</a></span>AddDepthwiseConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddDepthwiseConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a 2D depthwise convolution layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">convolution2dDescriptor</td><td>- Description of the 2D depthwise convolution layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00291">291</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;{</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddDepthwiseConvolution2dLayer(convolution2dDescriptor, name);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00231">armnn::FuseDepthwiseConvolution2dLayer()</a>.</p>

</div>
</div>
<a id="a357aca04172ed22fa32e5a69122b0fec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a357aca04172ed22fa32e5a69122b0fec">&#9670;&nbsp;</a></span>AddDequantizeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddDequantizeLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a Dequantize layer to the network. </p>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00299">299</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;{</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddDequantizeLayer(name);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="ac1134a94265293ea7347180260f787d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1134a94265293ea7347180260f787d2">&#9670;&nbsp;</a></span>AddDetectionPostProcessLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddDetectionPostProcessLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a Detection PostProcess layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">descriptor</td><td>- Description of the Detection PostProcess layer. </td></tr>
    <tr><td class="paramname">anchors</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store.">Tensor</a> for anchors. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00305">305</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;{</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddDetectionPostProcessLayer(descriptor, anchors, name);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a0aeb4e528cf6ba4b7caca14a94fbcafe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0aeb4e528cf6ba4b7caca14a94fbcafe">&#9670;&nbsp;</a></span>AddDivisionLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddDivisionLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a division layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00501">501</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;{</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddDivisionLayer(name);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, and <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00116">armnn::FuseDivisionLayer()</a>.</p>

</div>
</div>
<a id="af71383a4986faf7f0e339fbaf70e8957"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af71383a4986faf7f0e339fbaf70e8957">&#9670;&nbsp;</a></span>AddElementwiseBinaryLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddElementwiseBinaryLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_binary_descriptor.xhtml">ElementwiseBinaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>elementwiseUnaryDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add an ElementwiseBinary layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
    <tr><td class="paramname">desc</td><td>- Descriptor for the elementwiseBinary operations. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00313">313</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;{</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddElementwiseBinaryLayer(elementwiseBinaryDescriptor, name);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00158">armnn::FuseElementwiseBinaryLayer()</a>.</p>

</div>
</div>
<a id="a095a9b700dc857edc23c5d3bf088919f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a095a9b700dc857edc23c5d3bf088919f">&#9670;&nbsp;</a></span>AddElementwiseUnaryLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddElementwiseUnaryLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>elementwiseUnaryDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add an ElementwiseUnary layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
    <tr><td class="paramname">desc</td><td>- Descriptor for the elementwiseUnary operations. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00319">319</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddElementwiseUnaryLayer(elementwiseUnaryDescriptor, name);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="afc94c35c0bbe852a60046bf2e756b2e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc94c35c0bbe852a60046bf2e756b2e0">&#9670;&nbsp;</a></span>AddFillLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddFillLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fillDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add an Fill layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
    <tr><td class="paramname">fillDescriptor</td><td>- Descriptor for the fill operation. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00325">325</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;{</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddFillLayer(fillDescriptor, name);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a435ea88480b8645026dd45fd692663a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a435ea88480b8645026dd45fd692663a1">&#9670;&nbsp;</a></span>AddFloorLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddFloorLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a floor layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00485">485</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;{</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddFloorLayer(name);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a471991a84030eb3ae601da2bee757870"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a471991a84030eb3ae601da2bee757870">&#9670;&nbsp;</a></span>AddFullyConnectedLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddFullyConnectedLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fullyConnectedDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a fully connected layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fullyConnectedDescriptor</td><td>- Description of the fully connected layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Weights and biases are passed in as inputs. If they are constant tensors you can simply store them in a <a class="el" href="classarmnn_1_1_constant_layer.xhtml" title="A layer that the constant data can be bound to.">ConstantLayer</a> as seen below. A full example can be found in samples/SimpleSample.cpp.</dd></dl>
<div class="fragment"><div class="line"><span class="comment">// Make sure the IsConstant flag is set on the weightsInfo before passing it to the ConstTensor.</span></div>
<div class="line">ConstTensor weights(weightsInfo, weightsData);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Constant layer that now holds weights data for FullyConnected</span></div>
<div class="line">IConnectableLayer* <span class="keyword">const</span> constantWeightsLayer = myNetwork-&gt;AddConstantLayer(weights, <span class="stringliteral">&quot;weights&quot;</span>);</div>
<div class="line"> </div>
<div class="line">FullyConnectedDescriptor fullyConnectedDesc;</div>
<div class="line">IConnectableLayer* <span class="keyword">const</span> fullyConnectedLayer = myNetwork-&gt;AddFullyConnectedLayer(fullyConnectedDesc,</div>
<div class="line">                                                                                 <span class="stringliteral">&quot;fully connected&quot;</span>);</div>
<div class="line">IConnectableLayer* InputLayer = myNetwork-&gt;AddInputLayer(0);</div>
<div class="line">InputLayer-&gt;GetOutputSlot(0).Connect(fullyConnectedLayer-&gt;GetInputSlot(0));</div>
<div class="line">constantWeightsLayer-&gt;GetOutputSlot(0).Connect(fullyConnectedLayer-&gt;GetInputSlot(1));</div>
</div><!-- fragment --> 
<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00331">331</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddFullyConnectedLayer(fullyConnectedDescriptor, name);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00253">armnn::FuseFullyConnectedLayer()</a>.</p>

</div>
</div>
<a id="a1da203a7e3caa6ae4f0630a4758aac55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1da203a7e3caa6ae4f0630a4758aac55">&#9670;&nbsp;</a></span>AddGatherLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddGatherLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add Gather layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">descriptor</td><td>- Description of the gather layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00551">551</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;{</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddGatherLayer(descriptor, name);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="af776e284b9e2c4a3563abb8cf5e8ac5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af776e284b9e2c4a3563abb8cf5e8ac5e">&#9670;&nbsp;</a></span>AddGatherNdLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddGatherNdLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add GatherNd layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00557">557</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;{</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddGatherNdLayer(name);</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="aa6c1c42ea44777302e87ce0fad5ac510"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6c1c42ea44777302e87ce0fad5ac510">&#9670;&nbsp;</a></span>AddInputLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddInputLayer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds an input layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">id</td><td>- User generated id to uniquely identify a particular input. The same id needs to be specified. when passing the inputs to the <a class="el" href="classarmnn_1_1_i_runtime.xhtml#aca51209383683ab8dbe801bbfddfe0c0" title="Evaluates a network using input in inputTensors and outputs filled into outputTensors.">IRuntime::EnqueueWorkload()</a> function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00241">241</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;{</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddInputLayer(<span class="keywordtype">id</span>, name);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="abd61d3e7ab67551c75bc219bbc4baeb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd61d3e7ab67551c75bc219bbc4baeb5">&#9670;&nbsp;</a></span>AddInstanceNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddInstanceNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds an instance normalization layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">desc</td><td>- Parameters for the instance normalization operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00443">443</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddInstanceNormalizationLayer(desc, name);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="aaff51346dadec2c1430abf007fed4cc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaff51346dadec2c1430abf007fed4cc9">&#9670;&nbsp;</a></span>AddL2NormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddL2NormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds an L2 normalization layer to the network. </p>
<p>Normalization is performed along dimension 1, but requires a 4d input. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">desc</td><td>- Parameters for the L2 normalization operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00449">449</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;{</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddL2NormalizationLayer(desc, name);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a7dfc9717e76257867ad0a9239f210df0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7dfc9717e76257867ad0a9239f210df0">&#9670;&nbsp;</a></span>AddLogicalBinaryLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddLogicalBinaryLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a Logical Binary layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">descriptor</td><td>- Description of the Logical Binary layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00616">616</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;{</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddLogicalBinaryLayer(descriptor, name);</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a83b33973ca12078166b2436b313627b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83b33973ca12078166b2436b313627b9">&#9670;&nbsp;</a></span>AddLogSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddLogSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>logSoftmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a log softmax layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">logSoftmaxDescriptor</td><td>- LogSoftmaxDescriptor to configure the log softmax. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00455">455</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;{</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddLogSoftmaxLayer(logSoftmaxDescriptor, name);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a0a2fdd4f442952c97a8f24de6700473a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a2fdd4f442952c97a8f24de6700473a">&#9670;&nbsp;</a></span>AddLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a Lstm layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">descriptor</td><td>- Parameters for the Lstm operation </td></tr>
    <tr><td class="paramname">params</td><td>- Weights and biases for the LSTM cell </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00494">494</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddLstmLayer(descriptor, params, name);</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a57590d7777211673d2052f702f0b07a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57590d7777211673d2052f702f0b07a1">&#9670;&nbsp;</a></span>AddMaximumLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddMaximumLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a Maximum layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00515">515</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;{</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddMaximumLayer(name);</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, and <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="ad4726f9b7dd11db250d2a494a8a39494"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4726f9b7dd11db250d2a494a8a39494">&#9670;&nbsp;</a></span>AddMeanLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddMeanLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>meanDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a Mean layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">meanDescriptor</td><td>- Parameters for the mean operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00522">522</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;{</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddMeanLayer(meanDescriptor, name);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a0f19808bdada45222e72edf7671a275a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f19808bdada45222e72edf7671a275a">&#9670;&nbsp;</a></span>AddMergeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddMergeLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a merge layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00397">397</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;{</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddMergeLayer(name);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a4bfd8dee1a0315b651e977c672c0847c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bfd8dee1a0315b651e977c672c0847c">&#9670;&nbsp;</a></span>AddMinimumLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddMinimumLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a Minimum layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00544">544</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;{</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddMinimumLayer(name);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, and <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="abb59f6ba9988dae88e0f48e68d87fc32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb59f6ba9988dae88e0f48e68d87fc32">&#9670;&nbsp;</a></span>AddMultiplicationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddMultiplicationLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a multiplication layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00409">409</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;{</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddMultiplicationLayer(name);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, and <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00137">armnn::FuseMultiplicationLayer()</a>.</p>

</div>
</div>
<a id="a6c5376053e1f875776d7bc36fd0b7d45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c5376053e1f875776d7bc36fd0b7d45">&#9670;&nbsp;</a></span>AddNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>normalizationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a normalization layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">normalizationDescriptor</td><td>- <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml" title="A NormalizationDescriptor for the NormalizationLayer.">NormalizationDescriptor</a> to configure the normalization. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00375">375</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;{</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddNormalizationLayer(normalizationDescriptor, name);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="af5790069aa11fd1c5bb2e17cecb06528"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5790069aa11fd1c5bb2e17cecb06528">&#9670;&nbsp;</a></span>AddOutputLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddOutputLayer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds an output layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">id</td><td>- User generated id to uniquely identify a particular output. The same id needs to be specified when passing the outputs to the <a class="el" href="classarmnn_1_1_i_runtime.xhtml#aca51209383683ab8dbe801bbfddfe0c0" title="Evaluates a network using input in inputTensors and outputs filled into outputTensors.">IRuntime::EnqueueWorkload()</a> function. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00489">489</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;{</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddOutputLayer(<span class="keywordtype">id</span>, name);</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a6e2df484ecc65bc82712590b96e04df4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e2df484ecc65bc82712590b96e04df4">&#9670;&nbsp;</a></span>AddPadLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPadLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>padDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a fully pad layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">paddings</td><td>- n by 2 tensor, where n is the rank of the input tensor, such that paddings[i,0] indicates the amount of padding to add in front of dimonsion i, and paddings[i,1] indicates the amount of padding to add after the end of dimension i </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00527">527</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;{</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddPadLayer(padDescriptor, name);</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a11f49d84f0cfd8df65f4d5206cd43b6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11f49d84f0cfd8df65f4d5206cd43b6d">&#9670;&nbsp;</a></span>AddPermuteLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPermuteLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>permuteDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a permute layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">permuteDescriptor</td><td>- <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml" title="A PermuteDescriptor for the PermuteLayer.">PermuteDescriptor</a> to configure the permute. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00337">337</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;{</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddPermuteLayer(permuteDescriptor, name);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="ae913b4351b7027f37eb5657dd7867733"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae913b4351b7027f37eb5657dd7867733">&#9670;&nbsp;</a></span>AddPooling2dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPooling2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>pooling2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a 2D pooling layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pooling2dDescriptor</td><td>- <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml" title="A Pooling2dDescriptor for the Pooling2dLayer.">Pooling2dDescriptor</a> to configure the pooling. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00349">349</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;{</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddPooling2dLayer(pooling2dDescriptor, name);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_subgraph_utils_8hpp_source.xhtml#l00082">armnn::FoldPadIntoAveragePool2d()</a>.</p>

</div>
</div>
<a id="aee282f8e3379d3f5bed1032d20884248"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee282f8e3379d3f5bed1032d20884248">&#9670;&nbsp;</a></span>AddPooling3dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPooling3dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>pooling3dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a 3D pooling layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pooling3dDescriptor</td><td>- <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml" title="A Pooling3dDescriptor for the Pooling3dLayer.">Pooling3dDescriptor</a> to configure the pooling. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00355">355</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;{</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddPooling3dLayer(pooling3dDescriptor, name);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="aee3a15d2fa419f50a8ac45e6d3c11e16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee3a15d2fa419f50a8ac45e6d3c11e16">&#9670;&nbsp;</a></span>AddPrecompiledLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPrecompiledLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>preCompiledDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#af362583b7b4c471c434cb0fdb86c2ae2">CompiledBlobPtr</a>&#160;</td>
          <td class="paramname"><em>compiledBlobPtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>backend</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a Precompiled layer to the network. </p>
<p>Method use is for backend users. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">preCompiledDescriptor</td><td>- <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml" title="A PreCompiledDescriptor for the PreCompiledLayer.">PreCompiledDescriptor</a> contains parameters for the Precompiled layer. </td></tr>
    <tr><td class="paramname">compiledBlobPtr</td><td>- CompiledBlobPtr pre-compiled object set for the Precompiled layer. </td></tr>
    <tr><td class="paramname">backend</td><td>- optional <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> set for the Precompiled layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00361">361</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;{</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddPrecompiledLayer(preCompiledDescriptor, std::move(compiledBlobPtr), backend, name);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tosa_ref_backend_8cpp_source.xhtml#l00082">TosaRefBackend::OptimizeSubgraphView()</a>.</p>

</div>
</div>
<a id="a6d614a503a34ea3712b388aa4340ddbe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d614a503a34ea3712b388aa4340ddbe">&#9670;&nbsp;</a></span>AddPreluLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPreluLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a PReLU layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00567">567</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;{</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddPreluLayer(name);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a2acbae0b9e98c94b843677484775c86a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2acbae0b9e98c94b843677484775c86a">&#9670;&nbsp;</a></span>AddQLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddQLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a QLstm layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">descriptor</td><td>- Parameters for the QLstm operation </td></tr>
    <tr><td class="paramname">params</td><td>- Weights and biases for the layer </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00609">609</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;{</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddQLstmLayer(descriptor, params, name);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a40067b05f30a3ab65568c826df7a8ea7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40067b05f30a3ab65568c826df7a8ea7">&#9670;&nbsp;</a></span>AddQuantizedLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddQuantizedLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a QuantizedLstm layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">params</td><td>- The weights and biases for the Quantized LSTM cell </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00603">603</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;{</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddQuantizedLstmLayer(params, name);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a0b426a3feffc76e66d73b5761806e899"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b426a3feffc76e66d73b5761806e899">&#9670;&nbsp;</a></span>AddQuantizeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddQuantizeLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a quantize layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00533">533</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;{</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddQuantizeLayer(name);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a25563024ec66627ee83727244a53e944"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25563024ec66627ee83727244a53e944">&#9670;&nbsp;</a></span>AddRankLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddRankLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a rank layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00426">426</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;{</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddRankLayer(name);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="ae0cfae1ea51669892608a1a060d24fa0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0cfae1ea51669892608a1a060d24fa0">&#9670;&nbsp;</a></span>AddReduceLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddReduceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>reduceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a reduce layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname"><a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml" title="A ReduceDescriptor for the REDUCE operators.">ReduceDescriptor</a></td><td>- Parameters for the reduce operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00437">437</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;{</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddReduceLayer(reduceDescriptor, name);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00279">armnn::ChainReduceLayers()</a>.</p>

</div>
</div>
<a id="a8a3380be13fba749fc4208214b049347"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a3380be13fba749fc4208214b049347">&#9670;&nbsp;</a></span>AddReshapeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddReshapeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>reshapeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a reshape layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">reshapeDescriptor</td><td>- Parameters for the reshape operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00467">467</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;{</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddReshapeLayer(reshapeDescriptor, name);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="ad97411f1fcb2c30c212483d8c673506f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad97411f1fcb2c30c212483d8c673506f">&#9670;&nbsp;</a></span>AddResizeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddResizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>resizeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a resize layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">resizeDescriptor</td><td>- Parameters for the resize operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00431">431</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;{</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddResizeLayer(resizeDescriptor, name);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="af9dd4b5273829b846ab83b3ae7f3defc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9dd4b5273829b846ab83b3ae7f3defc">&#9670;&nbsp;</a></span>AddShapeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddShapeLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a shape layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00586">586</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;{</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddShapeLayer(name);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a8de6b047fcaff95df48dca683e1f3aa4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8de6b047fcaff95df48dca683e1f3aa4">&#9670;&nbsp;</a></span>AddSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>sliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a slice layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sliceDescriptor</td><td>- <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml" title="A SliceDescriptor for the SliceLayer.">SliceDescriptor</a> to configure the slice operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00381">381</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;{</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddSliceLayer(sliceDescriptor, name);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a30528a3bd85a0dba158bd14e252bd68a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30528a3bd85a0dba158bd14e252bd68a">&#9670;&nbsp;</a></span>AddSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>softmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a softmax layer to the network. </p>
<p>If the data type is QAsymm8, then the output quantization parameters must have a scale of 1/256 and an offset of 0 </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">softmaxDescriptor</td><td>- <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml" title="A SoftmaxDescriptor for the SoftmaxLayer.">SoftmaxDescriptor</a> to configure the softmax. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00385">385</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;{</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddSoftmaxLayer(softmaxDescriptor, name);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a72b9d30e9d555bb5c35460b62faedf0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72b9d30e9d555bb5c35460b62faedf0d">&#9670;&nbsp;</a></span>AddSpaceToBatchNdLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSpaceToBatchNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToBatchNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a space to batch layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">spaceToBatchNdDescriptor</td><td>- Parameters for the space to batch operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00473">473</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;{</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddSpaceToBatchNdLayer(spaceToBatchNdDescriptor, name);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a19bad0cc50526ca9f4f84a688812cdf5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19bad0cc50526ca9f4f84a688812cdf5">&#9670;&nbsp;</a></span>AddSpaceToDepthLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSpaceToDepthLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToDepthDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a space to depth layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">spaceToDepthDescriptor</td><td>- Parameters for the space to depth operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00479">479</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;{</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddSpaceToDepthLayer(spaceToDepthDescriptor, name);</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a6f6d81d8a4f1f85f3616e8306760061c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f6d81d8a4f1f85f3616e8306760061c">&#9670;&nbsp;</a></span>AddSplitterLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSplitterLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>splitterDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a splitter layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">splitterDescriptor</td><td>- <a class="el" href="structarmnn_1_1_views_descriptor.xhtml" title="A ViewsDescriptor for the SplitterLayer.">ViewsDescriptor</a> to configure the splitting process. Number of Views must be equal to the number of outputs, and their order must match - e.g. first view corresponds to the first output, second view to the second output, etc.... </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00391">391</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;{</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddSplitterLayer(splitterDescriptor, name);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a5210b3df77e7a51ab369b577de821aa2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5210b3df77e7a51ab369b577de821aa2">&#9670;&nbsp;</a></span>AddStackLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddStackLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a stack layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">descriptor</td><td>- Description of the stack layer. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00591">591</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;{</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddStackLayer(descriptor, name);</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a74894d085e78ff80f45fc09dd2381f08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74894d085e78ff80f45fc09dd2381f08">&#9670;&nbsp;</a></span>AddStandInLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddStandInLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a stand-in layer for a type unknown to the Arm NN framework. </p>
<p>Note: Due to the nature of this layer, no validation can be performed by the framework. Furthermore, Any model containing this layer cannot make use of dynamic tensors since the tensor sizes cannot be inferred. @descriptor - Descriptor for the StandIn layer. </p><dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00597">597</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;{</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddStandInLayer(descriptor, name);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="ac5c93cad39a690af862d49ffaec0d3c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5c93cad39a690af862d49ffaec0d3c0">&#9670;&nbsp;</a></span>AddStridedSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddStridedSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>stridedSliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a strided slice layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname"><a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml" title="A StridedSliceDescriptor for the StridedSliceLayer.">StridedSliceDescriptor</a></td><td>- Parameters for the strided slice operation. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00538">538</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;{</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddStridedSliceLayer(stridedSliceDescriptor, name);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="af13795cdf49e63d8bc3cb409592cdb9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af13795cdf49e63d8bc3cb409592cdb9d">&#9670;&nbsp;</a></span>AddSubtractionLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSubtractionLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a subtraction layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00508">508</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;{</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddSubtractionLayer(name);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, and <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00095">armnn::FuseSubtractionLayer()</a>.</p>

</div>
</div>
<a id="a26e69cda5fe9642f9198c24ae5fdf9bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26e69cda5fe9642f9198c24ae5fdf9bc">&#9670;&nbsp;</a></span>AddSwitchLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSwitchLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a switch layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00562">562</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;{</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddSwitchLayer(name);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a41fd7b56923d5625bac2cbfebed1a393"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41fd7b56923d5625bac2cbfebed1a393">&#9670;&nbsp;</a></span>AddTransposeConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddTransposeConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a 2D transpose convolution layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">descriptor</td><td>- Description of the 2D transpose convolution layer. </td></tr>
    <tr><td class="paramname">weights</td><td>- <a class="el" href="classarmnn_1_1_tensor.xhtml" title="A tensor defined by a TensorInfo (shape and data type) and a mutable backing store.">Tensor</a> for the weights data. </td></tr>
    <tr><td class="paramname">biases</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> tensor for the bias data. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00572">572</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;{</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddTransposeConvolution2dLayer(descriptor, weights, biases, name);</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="ab067ba4ee9416d93abb8a52f3dc8feba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab067ba4ee9416d93abb8a52f3dc8feba">&#9670;&nbsp;</a></span>AddTransposeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddTransposeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>transposeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a transpose layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">transposeDescriptor</td><td>- <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml" title="A TransposeDescriptor for the TransposeLayer.">TransposeDescriptor</a> to configure the transpose. </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00580">580</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;{</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddTransposeLayer(transposeDescriptor, name);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="aba22dcdeed6e7c489aea6eb798c0a10a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba22dcdeed6e7c489aea6eb798c0a10a">&#9670;&nbsp;</a></span>AddUnidirectionalSequenceLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddUnidirectionalSequenceLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ae6c5f1b51bd32133c4dcc632045d6b58">UnidirectionalSequenceLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a UnidirectionalSequenceLstm layer to the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">descriptor</td><td>- Parameters for the UnidirectionalSequenceLstm operation </td></tr>
    <tr><td class="paramname">params</td><td>- Weights and biases for the UnidirectionalSequenceLstm </td></tr>
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Interface for configuring the layer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00622">622</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;{</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;AddUnidirectionalSequenceLstmLayer(descriptor, params, name);</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<a id="a41ce159095e95f7cd4174ce5d4662697"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41ce159095e95f7cd4174ce5d4662697">&#9670;&nbsp;</a></span>Create()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> Create </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">NetworkOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>networkOptions</em> = <code>{}</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="_async_execution_sample_8cpp-example.xhtml#a3">AsyncExecutionSample.cpp</a>, <a class="el" href="_custom_memory_allocator_sample_8cpp-example.xhtml#a9">CustomMemoryAllocatorSample.cpp</a>, <a class="el" href="_dynamic_sample_8cpp-example.xhtml#a1">DynamicSample.cpp</a>, and <a class="el" href="_simple_sample_8cpp-example.xhtml#a3">SimpleSample.cpp</a>.</dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00652">652</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;{</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a>(<a class="code" href="classarmnn_1_1_i_network.xhtml#ab534dfa7f086a5f09fd9e3734ca6ab28">CreateRaw</a>(networkOptions), &amp;<a class="code" href="classarmnn_1_1_i_network.xhtml#a55bd1bb29076dc45bb335e7322781463">INetwork::Destroy</a>);</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_network_8cpp_source.xhtml#l00647">INetwork::CreateRaw()</a>, and <a class="el" href="_network_8cpp_source.xhtml#l00657">INetwork::Destroy()</a>.</p>

</div>
</div>
<a id="ab534dfa7f086a5f09fd9e3734ca6ab28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab534dfa7f086a5f09fd9e3734ca6ab28">&#9670;&nbsp;</a></span>CreateRaw()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a> * CreateRaw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">NetworkOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>networkOptions</em> = <code>{}</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00647">647</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;{</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a2d936beb0fcf3c5d22ff332f0812b05e">INetwork</a>(networkOptions);</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_network_8cpp_source.xhtml#l00044">INetwork::INetwork()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l00652">INetwork::Create()</a>.</p>

</div>
</div>
<a id="a55bd1bb29076dc45bb335e7322781463"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55bd1bb29076dc45bb335e7322781463">&#9670;&nbsp;</a></span>Destroy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *&#160;</td>
          <td class="paramname"><em>network</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00657">657</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;{</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keyword">delete</span> network;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l00652">INetwork::Create()</a>.</p>

</div>
</div>
<a id="a72032c65bf8b8acf09b564b7d80078c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72032c65bf8b8acf09b564b7d80078c5">&#9670;&nbsp;</a></span>ExecuteStrategy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ExecuteStrategy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a> &amp;&#160;</td>
          <td class="paramname"><em>strategy</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00642">642</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;{</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;ExecuteStrategy(strategy);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8cpp_source.xhtml#l02437">ISerializer::SerializerImpl::Serialize()</a>.</p>

</div>
</div>
<a id="aff3fde909d22ed157046682e70129259"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff3fde909d22ed157046682e70129259">&#9670;&nbsp;</a></span>PrintGraph()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> PrintGraph </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l00236">236</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">pNetworkImpl</a>-&gt;PrintGraph();</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_network_8hpp_source.xhtml#l00849">INetwork::pNetworkImpl</a>.</p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="a0ec772587bcadc2fd02cc0e882efcfe8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ec772587bcadc2fd02cc0e882efcfe8">&#9670;&nbsp;</a></span>GetInputTensorInfo</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> GetInputTensorInfo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *&#160;</td>
          <td class="paramname"><em>network</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae569ba62ba5cf22f910ae7f369dc7948"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae569ba62ba5cf22f910ae7f369dc7948">&#9670;&nbsp;</a></span>Optimize <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> Optimize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> &amp;&#160;</td>
          <td class="paramname"><em>network</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>backendPreferences</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_device_spec.xhtml">IDeviceSpec</a> &amp;&#160;</td>
          <td class="paramname"><em>deviceSpec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_optimizer_options.xhtml">OptimizerOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::vector&lt; std::string &gt; &amp; &gt;&#160;</td>
          <td class="paramname"><em>messages</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accept legacy <a class="el" href="structarmnn_1_1_optimizer_options.xhtml">OptimizerOptions</a>. </p>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01990">1990</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;{</div>
<div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#ae569ba62ba5cf22f910ae7f369dc7948">Optimize</a>(inNetwork,</div>
<div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;                    backendPreferences,</div>
<div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;                    deviceSpec,</div>
<div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;                    OptimizerOptionsOpaque(options),</div>
<div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;                    messages);</div>
<div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a953666c6d94c919eb5f0bd998e513dc5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a953666c6d94c919eb5f0bd998e513dc5">&#9670;&nbsp;</a></span>Optimize <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> Optimize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> &amp;&#160;</td>
          <td class="paramname"><em>network</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>backendPreferences</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_device_spec.xhtml">IDeviceSpec</a> &amp;&#160;</td>
          <td class="paramname"><em>deviceSpec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optimizer_options_opaque.xhtml">OptimizerOptionsOpaque</a> &amp;&#160;</td>
          <td class="paramname"><em>options</em> = <code><a class="el" href="classarmnn_1_1_optimizer_options_opaque.xhtml">OptimizerOptionsOpaque</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::vector&lt; std::string &gt; &amp; &gt;&#160;</td>
          <td class="paramname"><em>messages</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an optimized version of the network. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">network</td><td><a class="el" href="classarmnn_1_1_i_network.xhtml" title="Main network class which provides the interface for building up a neural network.">INetwork</a> description of the network to be optimized. </td></tr>
    <tr><td class="paramname">backendPreferences</td><td>The choice of the backend ordered by user preferences. </td></tr>
    <tr><td class="paramname">deviceSpec</td><td><a class="el" href="classarmnn_1_1_device_spec.xhtml">DeviceSpec</a> object as queried from the runtime. See <a class="el" href="classarmnn_1_1_i_runtime.xhtml#a25db7b8e6fc90f8418439ccd33aaf184">IRuntime::GetDeviceSpec()</a> </td></tr>
    <tr><td class="paramname">messages</td><td>If there are failures or warnings a string describing same will be added to the vector </td></tr>
    <tr><td class="paramname">options</td><td><a class="el" href="structarmnn_1_1_optimizer_options.xhtml">OptimizerOptions</a> object with optimizer configuration options </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An IOptimizedNetworkPtr interface to the optimized network, throws an exception derived from <a class="el" href="classarmnn_1_1_exception.xhtml" title="Base class for all ArmNN exceptions so that users can filter to just those.">armnn::Exception</a> if process fails. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02003">2003</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;{</div>
<div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_network.xhtml#ae569ba62ba5cf22f910ae7f369dc7948">Optimize</a>(inNetwork.pNetworkImpl-&gt;GetGraph(),</div>
<div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;                    backendPreferences,</div>
<div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;                    deviceSpec,</div>
<div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;                    options,</div>
<div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;                    messages);</div>
<div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="abc7f5a6538288c9cba3f54ab8ac70012"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc7f5a6538288c9cba3f54ab8ac70012">&#9670;&nbsp;</a></span>TestConnectionPreservation</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend class TestConnectionPreservation</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_network_8hpp_source.xhtml#l00834">834</a> of file <a class="el" href="_i_network_8hpp_source.xhtml">INetwork.hpp</a>.</p>

</div>
</div>
<a id="af32ea41e89c446958a5376291d19ef49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af32ea41e89c446958a5376291d19ef49">&#9670;&nbsp;</a></span>VisitLayersTopologically</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VisitLayersTopologically </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *&#160;</td>
          <td class="paramname"><em>inputNetwork</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a> &amp;&#160;</td>
          <td class="paramname"><em>strategy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a4353fa80ece13e3b1664881c27f5a67c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4353fa80ece13e3b1664881c27f5a67c">&#9670;&nbsp;</a></span>pNetworkImpl</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_network_impl.xhtml">NetworkImpl</a>&gt; pNetworkImpl</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_network_8hpp_source.xhtml#l00849">849</a> of file <a class="el" href="_i_network_8hpp_source.xhtml">INetwork.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l00369">INetwork::AddActivationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00402">INetwork::AddAdditionLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00246">INetwork::AddArgMinMaxLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00636">INetwork::AddBatchMatMulLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00416">INetwork::AddBatchNormalizationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00343">INetwork::AddBatchToSpaceNdLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00252">INetwork::AddCastLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00630">INetwork::AddChannelShuffleLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00257">INetwork::AddComparisonLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00264">INetwork::AddConcatLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00461">INetwork::AddConstantLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00271">INetwork::AddConvolution2dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00277">INetwork::AddConvolution3dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00284">INetwork::AddDepthToSpaceLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00291">INetwork::AddDepthwiseConvolution2dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00299">INetwork::AddDequantizeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00305">INetwork::AddDetectionPostProcessLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00501">INetwork::AddDivisionLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00313">INetwork::AddElementwiseBinaryLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00319">INetwork::AddElementwiseUnaryLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00325">INetwork::AddFillLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00485">INetwork::AddFloorLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00331">INetwork::AddFullyConnectedLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00551">INetwork::AddGatherLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00557">INetwork::AddGatherNdLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00241">INetwork::AddInputLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00443">INetwork::AddInstanceNormalizationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00449">INetwork::AddL2NormalizationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00616">INetwork::AddLogicalBinaryLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00455">INetwork::AddLogSoftmaxLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00494">INetwork::AddLstmLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00515">INetwork::AddMaximumLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00522">INetwork::AddMeanLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00397">INetwork::AddMergeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00544">INetwork::AddMinimumLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00409">INetwork::AddMultiplicationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00375">INetwork::AddNormalizationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00489">INetwork::AddOutputLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00527">INetwork::AddPadLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00337">INetwork::AddPermuteLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00349">INetwork::AddPooling2dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00355">INetwork::AddPooling3dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00361">INetwork::AddPrecompiledLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00567">INetwork::AddPreluLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00609">INetwork::AddQLstmLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00603">INetwork::AddQuantizedLstmLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00533">INetwork::AddQuantizeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00426">INetwork::AddRankLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00437">INetwork::AddReduceLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00467">INetwork::AddReshapeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00431">INetwork::AddResizeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00586">INetwork::AddShapeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00381">INetwork::AddSliceLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00385">INetwork::AddSoftmaxLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00473">INetwork::AddSpaceToBatchNdLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00479">INetwork::AddSpaceToDepthLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00391">INetwork::AddSplitterLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00591">INetwork::AddStackLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00597">INetwork::AddStandInLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00538">INetwork::AddStridedSliceLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00508">INetwork::AddSubtractionLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00562">INetwork::AddSwitchLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00572">INetwork::AddTransposeConvolution2dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00580">INetwork::AddTransposeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00622">INetwork::AddUnidirectionalSequenceLstmLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00642">INetwork::ExecuteStrategy()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02003">armnn::Optimize()</a>, and <a class="el" href="_network_8cpp_source.xhtml#l00236">INetwork::PrintGraph()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>include/armnn/<a class="el" href="_i_network_8hpp_source.xhtml">INetwork.hpp</a></li>
<li>src/armnn/<a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarmnn_1_1_i_network_xhtml_a4353fa80ece13e3b1664881c27f5a67c"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a4353fa80ece13e3b1664881c27f5a67c">armnn::INetwork::pNetworkImpl</a></div><div class="ttdeci">std::unique_ptr&lt; NetworkImpl &gt; pNetworkImpl</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00849">INetwork.hpp:849</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_network_xhtml_ae569ba62ba5cf22f910ae7f369dc7948"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#ae569ba62ba5cf22f910ae7f369dc7948">armnn::INetwork::Optimize</a></div><div class="ttdeci">friend IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options, Optional&lt; std::vector&lt; std::string &gt; &amp; &gt; messages)</div><div class="ttdoc">Accept legacy OptimizerOptions.</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01990">Network.cpp:1990</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_network_xhtml_ab534dfa7f086a5f09fd9e3734ca6ab28"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#ab534dfa7f086a5f09fd9e3734ca6ab28">armnn::INetwork::CreateRaw</a></div><div class="ttdeci">static INetwork * CreateRaw(const NetworkOptions &amp;networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00647">Network.cpp:647</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_network_xhtml_a55bd1bb29076dc45bb335e7322781463"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a55bd1bb29076dc45bb335e7322781463">armnn::INetwork::Destroy</a></div><div class="ttdeci">static void Destroy(INetwork *network)</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00657">Network.cpp:657</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_network_xhtml_a2d936beb0fcf3c5d22ff332f0812b05e"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a2d936beb0fcf3c5d22ff332f0812b05e">armnn::INetwork::INetwork</a></div><div class="ttdeci">INetwork(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00044">Network.cpp:44</a></div></div>
<div class="ttc" id="a_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00327">INetwork.hpp:327</a></div></div>
<div class="ttc" id="a_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_i_network.xhtml">INetwork</a></li>
    <li class="footer">Generated on Thu May 18 2023 10:35:47 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
