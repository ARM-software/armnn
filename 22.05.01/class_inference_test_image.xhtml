<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: InferenceTestImage Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('class_inference_test_image.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_inference_test_image-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">InferenceTestImage Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_inference_test_image_8hpp_source.xhtml">InferenceTestImage.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:afe2346f1f07296902bc8d84beb69b45d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45d">WriteFormat</a> { <a class="el" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45daf8fd4f1b5b05c6b1cc6a661141fd4f54">Png</a>, 
<a class="el" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45da021d8346462df53d4272607b0f41a8d8">Bmp</a>, 
<a class="el" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45da38f4e5f66749f755f54ef67faa2058dc">Tga</a>
 }</td></tr>
<tr class="separator:afe2346f1f07296902bc8d84beb69b45d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7a403f69a7717c1eaae1d74b7bb7bce"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bce">ResizingMethods</a> { <a class="el" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bceaecd472e37d2e3d8542fd5e9ff63e3450">STB</a>, 
<a class="el" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bcea773b27aa8d21604182ba90d029ad2e13">BilinearAndNormalized</a>
 }</td></tr>
<tr class="separator:ae7a403f69a7717c1eaae1d74b7bb7bce"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9583c8d35e13002b79d9e65434e0b685"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a9583c8d35e13002b79d9e65434e0b685">InferenceTestImage</a> (const char *filePath)</td></tr>
<tr class="separator:a9583c8d35e13002b79d9e65434e0b685"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1221f9d864aed14208371c83b47f2686"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a1221f9d864aed14208371c83b47f2686">InferenceTestImage</a> (<a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;&amp;)=delete</td></tr>
<tr class="separator:a1221f9d864aed14208371c83b47f2686"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51b6530e9551346a609770853dedf7b0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a51b6530e9551346a609770853dedf7b0">InferenceTestImage</a> (const <a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;)=delete</td></tr>
<tr class="separator:a51b6530e9551346a609770853dedf7b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ec879fd8f3865e9937bb875eaf5c092"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a2ec879fd8f3865e9937bb875eaf5c092">operator=</a> (const <a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;)=delete</td></tr>
<tr class="separator:a2ec879fd8f3865e9937bb875eaf5c092"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85fe58abcde5d3abd1e3fb8b5282ea7b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a85fe58abcde5d3abd1e3fb8b5282ea7b">operator=</a> (<a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;&amp;)=delete</td></tr>
<tr class="separator:a85fe58abcde5d3abd1e3fb8b5282ea7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ec823e49ce46950b3d4cee1efff050b"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a4ec823e49ce46950b3d4cee1efff050b">GetWidth</a> () const</td></tr>
<tr class="separator:a4ec823e49ce46950b3d4cee1efff050b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0983225e32025d901ce6547170892f56"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a0983225e32025d901ce6547170892f56">GetHeight</a> () const</td></tr>
<tr class="separator:a0983225e32025d901ce6547170892f56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a1e22b2882917bcd82a14328ff2c5d6"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">GetNumChannels</a> () const</td></tr>
<tr class="separator:a5a1e22b2882917bcd82a14328ff2c5d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8846406ac37fbd2204f0be16ee05d5b7"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a> () const</td></tr>
<tr class="separator:a8846406ac37fbd2204f0be16ee05d5b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd495024dcb50f4081d5c05a1e66d210"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#acd495024dcb50f4081d5c05a1e66d210">GetSizeInBytes</a> () const</td></tr>
<tr class="separator:acd495024dcb50f4081d5c05a1e66d210"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97a4644e316893df9dd2ab73cdd08d33"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; uint8_t, uint8_t, uint8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a97a4644e316893df9dd2ab73cdd08d33">GetPixelAs3Channels</a> (unsigned int x, unsigned int y) const</td></tr>
<tr class="separator:a97a4644e316893df9dd2ab73cdd08d33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a746dbda8e529cdc8450f81fabb604250"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a746dbda8e529cdc8450f81fabb604250">StbResize</a> (<a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;im, const unsigned int newWidth, const unsigned int newHeight)</td></tr>
<tr class="separator:a746dbda8e529cdc8450f81fabb604250"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a6637c2a2952a14cb3a426133b67a73"><td class="memItemLeft" align="right" valign="top">std::vector&lt; float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a4a6637c2a2952a14cb3a426133b67a73">Resize</a> (unsigned int newWidth, unsigned int newHeight, const <a class="el" href="structarmnn_1_1_check_location.xhtml">armnn::CheckLocation</a> &amp;location, const <a class="el" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bce">ResizingMethods</a> meth=<a class="el" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bceaecd472e37d2e3d8542fd5e9ff63e3450">ResizingMethods::STB</a>, const std::array&lt; float, 3 &gt; &amp;mean={{0.0, 0.0, 0.0}}, const std::array&lt; float, 3 &gt; &amp;stddev={{1.0, 1.0, 1.0}}, const float scale=255.0f)</td></tr>
<tr class="separator:a4a6637c2a2952a14cb3a426133b67a73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98be3e32f21051eca5de5728c9cd43bc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_test_image.xhtml#a98be3e32f21051eca5de5728c9cd43bc">Write</a> (<a class="el" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45d">WriteFormat</a> format, const char *filePath) const</td></tr>
<tr class="separator:a98be3e32f21051eca5de5728c9cd43bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00051">51</a> of file <a class="el" href="_inference_test_image_8hpp_source.xhtml">InferenceTestImage.hpp</a>.</p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="ae7a403f69a7717c1eaae1d74b7bb7bce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7a403f69a7717c1eaae1d74b7bb7bce">&#9670;&nbsp;</a></span>ResizingMethods</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bce">ResizingMethods</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ae7a403f69a7717c1eaae1d74b7bb7bceaecd472e37d2e3d8542fd5e9ff63e3450"></a>STB&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae7a403f69a7717c1eaae1d74b7bb7bcea773b27aa8d21604182ba90d029ad2e13"></a>BilinearAndNormalized&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00062">62</a> of file <a class="el" href="_inference_test_image_8hpp_source.xhtml">InferenceTestImage.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        STB,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        BilinearAndNormalized,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    };</div></div><!-- fragment -->
</div>
</div>
<a id="afe2346f1f07296902bc8d84beb69b45d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe2346f1f07296902bc8d84beb69b45d">&#9670;&nbsp;</a></span>WriteFormat</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45d">WriteFormat</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="afe2346f1f07296902bc8d84beb69b45daf8fd4f1b5b05c6b1cc6a661141fd4f54"></a>Png&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="afe2346f1f07296902bc8d84beb69b45da021d8346462df53d4272607b0f41a8d8"></a>Bmp&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="afe2346f1f07296902bc8d84beb69b45da38f4e5f66749f755f54ef67faa2058dc"></a>Tga&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00054">54</a> of file <a class="el" href="_inference_test_image_8hpp_source.xhtml">InferenceTestImage.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        Png,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        Bmp,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        Tga</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    };</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a9583c8d35e13002b79d9e65434e0b685"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9583c8d35e13002b79d9e65434e0b685">&#9670;&nbsp;</a></span>InferenceTestImage() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filePath</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00127">127</a> of file <a class="el" href="_inference_test_image_8cpp_source.xhtml">InferenceTestImage.cpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00079">GetSizeInBytes()</a>, and <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>
<div class="fragment"><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; : m_Width(0u)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; , m_Height(0u)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; , m_NumChannels(0u)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordtype">int</span> width;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordtype">int</span> height;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">int</span> channels;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">using</span> StbImageDataPtr = std::unique_ptr&lt;unsigned char, decltype(&amp;stbi_image_free)&gt;;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    StbImageDataPtr stbData(stbi_load(filePath, &amp;width, &amp;height, &amp;channels, 0), &amp;stbi_image_free);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">if</span> (stbData == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="class_inference_test_image_load_failed.xhtml">InferenceTestImageLoadFailed</a>(fmt::format(<span class="stringliteral">&quot;Could not load the image at {}&quot;</span>, filePath));</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">if</span> (width == 0 || height == 0)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="class_inference_test_image_load_failed.xhtml">InferenceTestImageLoadFailed</a>(fmt::format(<span class="stringliteral">&quot;Could not load empty image at {}&quot;</span>, filePath));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    m_Width = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(width);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    m_Height = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(height);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    m_NumChannels = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(channels);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> sizeInBytes = <a class="code" href="class_inference_test_image.xhtml#acd495024dcb50f4081d5c05a1e66d210">GetSizeInBytes</a>();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    m_Data.resize(sizeInBytes);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    memcpy(m_Data.data(), stbData.get(), sizeInBytes);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div><div class="ttc" id="class_inference_test_image_load_failed_xhtml"><div class="ttname"><a href="class_inference_test_image_load_failed.xhtml">InferenceTestImageLoadFailed</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00021">InferenceTestImage.hpp:21</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_acd495024dcb50f4081d5c05a1e66d210"><div class="ttname"><a href="class_inference_test_image.xhtml#acd495024dcb50f4081d5c05a1e66d210">InferenceTestImage::GetSizeInBytes</a></div><div class="ttdeci">unsigned int GetSizeInBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00079">InferenceTestImage.hpp:79</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1221f9d864aed14208371c83b47f2686"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1221f9d864aed14208371c83b47f2686">&#9670;&nbsp;</a></span>InferenceTestImage() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a51b6530e9551346a609770853dedf7b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51b6530e9551346a609770853dedf7b0">&#9670;&nbsp;</a></span>InferenceTestImage() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a0983225e32025d901ce6547170892f56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0983225e32025d901ce6547170892f56">&#9670;&nbsp;</a></span>GetHeight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetHeight </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00076">76</a> of file <a class="el" href="_inference_test_image_8hpp_source.xhtml">InferenceTestImage.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00333">GetImageDataAsNormalizedFloats()</a>, <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00279">GetImageDataInArmNnLayoutAsFloats()</a>, <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00183">StbResize()</a>, and <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00243">Write()</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{ <span class="keywordflow">return</span> m_Height; }</div></div><!-- fragment -->
</div>
</div>
<a id="a5a1e22b2882917bcd82a14328ff2c5d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a1e22b2882917bcd82a14328ff2c5d6">&#9670;&nbsp;</a></span>GetNumChannels()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumChannels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00077">77</a> of file <a class="el" href="_inference_test_image_8hpp_source.xhtml">InferenceTestImage.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00158">GetPixelAs3Channels()</a>, <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00183">StbResize()</a>, and <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00243">Write()</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{ <span class="keywordflow">return</span> m_NumChannels; }</div></div><!-- fragment -->
</div>
</div>
<a id="a8846406ac37fbd2204f0be16ee05d5b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8846406ac37fbd2204f0be16ee05d5b7">&#9670;&nbsp;</a></span>GetNumElements()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumElements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00078">78</a> of file <a class="el" href="_inference_test_image_8hpp_source.xhtml">InferenceTestImage.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{ <span class="keywordflow">return</span> <a class="code" href="class_inference_test_image.xhtml#a4ec823e49ce46950b3d4cee1efff050b">GetWidth</a>() * <a class="code" href="class_inference_test_image.xhtml#a0983225e32025d901ce6547170892f56">GetHeight</a>() * <a class="code" href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">GetNumChannels</a>(); }</div><div class="ttc" id="class_inference_test_image_xhtml_a5a1e22b2882917bcd82a14328ff2c5d6"><div class="ttname"><a href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">InferenceTestImage::GetNumChannels</a></div><div class="ttdeci">unsigned int GetNumChannels() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00077">InferenceTestImage.hpp:77</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_a4ec823e49ce46950b3d4cee1efff050b"><div class="ttname"><a href="class_inference_test_image.xhtml#a4ec823e49ce46950b3d4cee1efff050b">InferenceTestImage::GetWidth</a></div><div class="ttdeci">unsigned int GetWidth() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00075">InferenceTestImage.hpp:75</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_a0983225e32025d901ce6547170892f56"><div class="ttname"><a href="class_inference_test_image.xhtml#a0983225e32025d901ce6547170892f56">InferenceTestImage::GetHeight</a></div><div class="ttdeci">unsigned int GetHeight() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00076">InferenceTestImage.hpp:76</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a97a4644e316893df9dd2ab73cdd08d33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97a4644e316893df9dd2ab73cdd08d33">&#9670;&nbsp;</a></span>GetPixelAs3Channels()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt; uint8_t, uint8_t, uint8_t &gt; GetPixelAs3Channels </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00158">158</a> of file <a class="el" href="_inference_test_image_8cpp_source.xhtml">InferenceTestImage.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00077">GetNumChannels()</a>, <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00079">GetSizeInBytes()</a>, and <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00075">GetWidth()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00333">GetImageDataAsNormalizedFloats()</a>, and <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00279">GetImageDataInArmNnLayoutAsFloats()</a>.</p>
<div class="fragment"><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">if</span> (x &gt;= m_Width || y &gt;= m_Height)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="class_inference_test_image_out_of_bounds_access.xhtml">InferenceTestImageOutOfBoundsAccess</a>(fmt::format(<span class="stringliteral">&quot;Attempted out of bounds image access. &quot;</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="stringliteral">&quot;Requested ({0}, {1}). Maximum valid coordinates ({2}, {3}).&quot;</span>, x, y, (m_Width - 1), (m_Height - 1)));</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pixelOffset = x * <a class="code" href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">GetNumChannels</a>() + y * <a class="code" href="class_inference_test_image.xhtml#a4ec823e49ce46950b3d4cee1efff050b">GetWidth</a>() * <a class="code" href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">GetNumChannels</a>();</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">const</span> uint8_t* <span class="keyword">const</span> pixelData = m_Data.data() + pixelOffset;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(pixelData &lt;= (m_Data.data() + <a class="code" href="class_inference_test_image.xhtml#acd495024dcb50f4081d5c05a1e66d210">GetSizeInBytes</a>()));</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    std::array&lt;uint8_t, 3&gt; outPixelData;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    outPixelData.fill(0);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxChannelsInPixel = std::min(<a class="code" href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">GetNumChannels</a>(), static_cast&lt;unsigned int&gt;(outPixelData.size()));</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; maxChannelsInPixel; ++c)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        outPixelData[c] = pixelData[c];</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(outPixelData[0], outPixelData[1], outPixelData[2]);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="ttc" id="class_inference_test_image_xhtml_a5a1e22b2882917bcd82a14328ff2c5d6"><div class="ttname"><a href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">InferenceTestImage::GetNumChannels</a></div><div class="ttdeci">unsigned int GetNumChannels() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00077">InferenceTestImage.hpp:77</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_a4ec823e49ce46950b3d4cee1efff050b"><div class="ttname"><a href="class_inference_test_image.xhtml#a4ec823e49ce46950b3d4cee1efff050b">InferenceTestImage::GetWidth</a></div><div class="ttdeci">unsigned int GetWidth() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00075">InferenceTestImage.hpp:75</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="class_inference_test_image_out_of_bounds_access_xhtml"><div class="ttname"><a href="class_inference_test_image_out_of_bounds_access.xhtml">InferenceTestImageOutOfBoundsAccess</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00027">InferenceTestImage.hpp:27</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_acd495024dcb50f4081d5c05a1e66d210"><div class="ttname"><a href="class_inference_test_image.xhtml#acd495024dcb50f4081d5c05a1e66d210">InferenceTestImage::GetSizeInBytes</a></div><div class="ttdeci">unsigned int GetSizeInBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00079">InferenceTestImage.hpp:79</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acd495024dcb50f4081d5c05a1e66d210"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd495024dcb50f4081d5c05a1e66d210">&#9670;&nbsp;</a></span>GetSizeInBytes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetSizeInBytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00079">79</a> of file <a class="el" href="_inference_test_image_8hpp_source.xhtml">InferenceTestImage.hpp</a>.</p>

<p class="reference">References <a class="el" href="_resize_8cpp_source.xhtml#l00065">armnn::Resize()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00158">GetPixelAs3Channels()</a>, and <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00127">InferenceTestImage()</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{ <span class="keywordflow">return</span> <a class="code" href="class_inference_test_image.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>() * GetSingleElementSizeInBytes(); }</div><div class="ttc" id="class_inference_test_image_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="class_inference_test_image.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">InferenceTestImage::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00078">InferenceTestImage.hpp:78</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4ec823e49ce46950b3d4cee1efff050b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ec823e49ce46950b3d4cee1efff050b">&#9670;&nbsp;</a></span>GetWidth()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetWidth </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00075">75</a> of file <a class="el" href="_inference_test_image_8hpp_source.xhtml">InferenceTestImage.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00333">GetImageDataAsNormalizedFloats()</a>, <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00279">GetImageDataInArmNnLayoutAsFloats()</a>, <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00158">GetPixelAs3Channels()</a>, <a class="el" href="_image_tensor_generator_8hpp_source.xhtml#l00091">PrepareImageTensor&lt; float &gt;()</a>, <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00183">StbResize()</a>, and <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00243">Write()</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{ <span class="keywordflow">return</span> m_Width; }</div></div><!-- fragment -->
</div>
</div>
<a id="a2ec879fd8f3865e9937bb875eaf5c092"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ec879fd8f3865e9937bb875eaf5c092">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a85fe58abcde5d3abd1e3fb8b5282ea7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85fe58abcde5d3abd1e3fb8b5282ea7b">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4a6637c2a2952a14cb3a426133b67a73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a6637c2a2952a14cb3a426133b67a73">&#9670;&nbsp;</a></span>Resize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; float &gt; Resize </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>newWidth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>newHeight</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_check_location.xhtml">armnn::CheckLocation</a> &amp;&#160;</td>
          <td class="paramname"><em>location</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bce">ResizingMethods</a>&#160;</td>
          <td class="paramname"><em>meth</em> = <code><a class="el" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bceaecd472e37d2e3d8542fd5e9ff63e3450">ResizingMethods::STB</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; float, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>mean</em> = <code>{{0.0,&#160;0.0,&#160;0.0}}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; float, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>stddev</em> = <code>{{1.0,&#160;1.0,&#160;1.0}}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>scale</em> = <code>255.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00209">209</a> of file <a class="el" href="_inference_test_image_8cpp_source.xhtml">InferenceTestImage.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00029">CheckLocation::AsString()</a>, <a class="el" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bcea773b27aa8d21604182ba90d029ad2e13">BilinearAndNormalized</a>, <a class="el" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bceaecd472e37d2e3d8542fd5e9ff63e3450">STB</a>, and <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00183">StbResize()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_yolo_database_8cpp_source.xhtml#l00073">YoloDatabase::GetTestCaseData()</a>.</p>
<div class="fragment"><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;{</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    std::vector&lt;float&gt; out;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">if</span> (newWidth == 0 || newHeight == 0)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="class_inference_test_image_resize_failed.xhtml">InferenceTestImageResizeFailed</a>(fmt::format(<span class="stringliteral">&quot;None of the dimensions passed to a resize &quot;</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="stringliteral">&quot;operation can be zero. Requested width: {0}. Requested height: {1}.&quot;</span>, newWidth, newHeight));</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">switch</span> (meth) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bceaecd472e37d2e3d8542fd5e9ff63e3450">ResizingMethods::STB</a>:</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <a class="code" href="class_inference_test_image.xhtml#a746dbda8e529cdc8450f81fabb604250">StbResize</a>(*<span class="keyword">this</span>, newWidth, newHeight);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bcea773b27aa8d21604182ba90d029ad2e13">ResizingMethods::BilinearAndNormalized</a>:</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            out = ResizeBilinearAndNormalize(*<span class="keyword">this</span>, newWidth, newHeight, scale, mean, stddev);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="class_inference_test_image_resize_failed.xhtml">InferenceTestImageResizeFailed</a>(fmt::format(<span class="stringliteral">&quot;Unknown resizing method asked ArmNN only&quot;</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                                             <span class="stringliteral">&quot; supports {STB, BilinearAndNormalized} {}&quot;</span>,</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                                             location.<a class="code" href="structarmnn_1_1_check_location.xhtml#a5e3562cda960da001597e7dd5679b140">AsString</a>()));</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div><div class="ttc" id="class_inference_test_image_xhtml_ae7a403f69a7717c1eaae1d74b7bb7bcea773b27aa8d21604182ba90d029ad2e13"><div class="ttname"><a href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bcea773b27aa8d21604182ba90d029ad2e13">InferenceTestImage::ResizingMethods::BilinearAndNormalized</a></div></div>
<div class="ttc" id="structarmnn_1_1_check_location_xhtml_a5e3562cda960da001597e7dd5679b140"><div class="ttname"><a href="structarmnn_1_1_check_location.xhtml#a5e3562cda960da001597e7dd5679b140">armnn::CheckLocation::AsString</a></div><div class="ttdeci">std::string AsString() const</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00029">Exceptions.hpp:29</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_ae7a403f69a7717c1eaae1d74b7bb7bceaecd472e37d2e3d8542fd5e9ff63e3450"><div class="ttname"><a href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bceaecd472e37d2e3d8542fd5e9ff63e3450">InferenceTestImage::ResizingMethods::STB</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_a746dbda8e529cdc8450f81fabb604250"><div class="ttname"><a href="class_inference_test_image.xhtml#a746dbda8e529cdc8450f81fabb604250">InferenceTestImage::StbResize</a></div><div class="ttdeci">void StbResize(InferenceTestImage &amp;im, const unsigned int newWidth, const unsigned int newHeight)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8cpp_source.xhtml#l00183">InferenceTestImage.cpp:183</a></div></div>
<div class="ttc" id="class_inference_test_image_resize_failed_xhtml"><div class="ttname"><a href="class_inference_test_image_resize_failed.xhtml">InferenceTestImageResizeFailed</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00033">InferenceTestImage.hpp:33</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a746dbda8e529cdc8450f81fabb604250"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a746dbda8e529cdc8450f81fabb604250">&#9670;&nbsp;</a></span>StbResize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void StbResize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a> &amp;&#160;</td>
          <td class="paramname"><em>im</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>newWidth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>newHeight</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00183">183</a> of file <a class="el" href="_inference_test_image_8cpp_source.xhtml">InferenceTestImage.cpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00076">GetHeight()</a>, <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00077">GetNumChannels()</a>, <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00075">GetWidth()</a>, and <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00209">Resize()</a>.</p>
<div class="fragment"><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    std::vector&lt;uint8_t&gt; newData;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    newData.resize(newWidth * newHeight * im.<a class="code" href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">GetNumChannels</a>() * im.GetSingleElementSizeInBytes());</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// armnn::numeric_cast&lt;&gt;() is used for user-provided data (protecting about overflows).</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// static_cast&lt;&gt; is ok for internal data (assumes that, when internal data was originally provided by a user,</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// a armnn::numeric_cast&lt;&gt;() handled the conversion).</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> nW = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">int</span>&gt;(newWidth);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> nH = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">int</span>&gt;(newHeight);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> w = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(im.<a class="code" href="class_inference_test_image.xhtml#a4ec823e49ce46950b3d4cee1efff050b">GetWidth</a>());</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(im.<a class="code" href="class_inference_test_image.xhtml#a0983225e32025d901ce6547170892f56">GetHeight</a>());</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> numChannels = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(im.<a class="code" href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">GetNumChannels</a>());</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> res = stbir_resize_uint8(im.m_Data.data(), w, h, 0, newData.data(), nW, nH, 0, numChannels);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">if</span> (res == 0)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="class_inference_test_image_resize_failed.xhtml">InferenceTestImageResizeFailed</a>(<span class="stringliteral">&quot;The resizing operation failed&quot;</span>);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    im.m_Data.swap(newData);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    im.m_Width = newWidth;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    im.m_Height = newHeight;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div><div class="ttc" id="class_inference_test_image_xhtml_a5a1e22b2882917bcd82a14328ff2c5d6"><div class="ttname"><a href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">InferenceTestImage::GetNumChannels</a></div><div class="ttdeci">unsigned int GetNumChannels() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00077">InferenceTestImage.hpp:77</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_a4ec823e49ce46950b3d4cee1efff050b"><div class="ttname"><a href="class_inference_test_image.xhtml#a4ec823e49ce46950b3d4cee1efff050b">InferenceTestImage::GetWidth</a></div><div class="ttdeci">unsigned int GetWidth() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00075">InferenceTestImage.hpp:75</a></div></div>
<div class="ttc" id="class_inference_test_image_resize_failed_xhtml"><div class="ttname"><a href="class_inference_test_image_resize_failed.xhtml">InferenceTestImageResizeFailed</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00033">InferenceTestImage.hpp:33</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_a0983225e32025d901ce6547170892f56"><div class="ttname"><a href="class_inference_test_image.xhtml#a0983225e32025d901ce6547170892f56">InferenceTestImage::GetHeight</a></div><div class="ttdeci">unsigned int GetHeight() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00076">InferenceTestImage.hpp:76</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a98be3e32f21051eca5de5728c9cd43bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98be3e32f21051eca5de5728c9cd43bc">&#9670;&nbsp;</a></span>Write()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Write </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45d">WriteFormat</a>&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filePath</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00243">243</a> of file <a class="el" href="_inference_test_image_8cpp_source.xhtml">InferenceTestImage.cpp</a>.</p>

<p class="reference">References <a class="el" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45da021d8346462df53d4272607b0f41a8d8">Bmp</a>, <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00076">GetHeight()</a>, <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00077">GetNumChannels()</a>, <a class="el" href="_inference_test_image_8hpp_source.xhtml#l00075">GetWidth()</a>, <a class="el" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45daf8fd4f1b5b05c6b1cc6a661141fd4f54">Png</a>, and <a class="el" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45da38f4e5f66749f755f54ef67faa2058dc">Tga</a>.</p>
<div class="fragment"><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> w = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="class_inference_test_image.xhtml#a4ec823e49ce46950b3d4cee1efff050b">GetWidth</a>());</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="class_inference_test_image.xhtml#a0983225e32025d901ce6547170892f56">GetHeight</a>());</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> numChannels = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">GetNumChannels</a>());</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordtype">int</span> res = 0;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">switch</span> (format)</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45daf8fd4f1b5b05c6b1cc6a661141fd4f54">WriteFormat::Png</a>:</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            res = stbi_write_png(filePath, w, h, numChannels, m_Data.data(), 0);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45da021d8346462df53d4272607b0f41a8d8">WriteFormat::Bmp</a>:</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            res = stbi_write_bmp(filePath, w, h, numChannels, m_Data.data());</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45da38f4e5f66749f755f54ef67faa2058dc">WriteFormat::Tga</a>:</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            res = stbi_write_tga(filePath, w, h, numChannels, m_Data.data());</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="class_inference_test_image_write_failed.xhtml">InferenceTestImageWriteFailed</a>(fmt::format(<span class="stringliteral">&quot;Unknown format {}&quot;</span>, static_cast&lt;int&gt;(format)));</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">if</span> (res == 0)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="class_inference_test_image_write_failed.xhtml">InferenceTestImageWriteFailed</a>(fmt::format(<span class="stringliteral">&quot;An error occurred when writing to file {}&quot;</span>,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                                        filePath));</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;}</div><div class="ttc" id="class_inference_test_image_xhtml_a5a1e22b2882917bcd82a14328ff2c5d6"><div class="ttname"><a href="class_inference_test_image.xhtml#a5a1e22b2882917bcd82a14328ff2c5d6">InferenceTestImage::GetNumChannels</a></div><div class="ttdeci">unsigned int GetNumChannels() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00077">InferenceTestImage.hpp:77</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_afe2346f1f07296902bc8d84beb69b45daf8fd4f1b5b05c6b1cc6a661141fd4f54"><div class="ttname"><a href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45daf8fd4f1b5b05c6b1cc6a661141fd4f54">InferenceTestImage::WriteFormat::Png</a></div></div>
<div class="ttc" id="class_inference_test_image_write_failed_xhtml"><div class="ttname"><a href="class_inference_test_image_write_failed.xhtml">InferenceTestImageWriteFailed</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00039">InferenceTestImage.hpp:39</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_afe2346f1f07296902bc8d84beb69b45da021d8346462df53d4272607b0f41a8d8"><div class="ttname"><a href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45da021d8346462df53d4272607b0f41a8d8">InferenceTestImage::WriteFormat::Bmp</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_a4ec823e49ce46950b3d4cee1efff050b"><div class="ttname"><a href="class_inference_test_image.xhtml#a4ec823e49ce46950b3d4cee1efff050b">InferenceTestImage::GetWidth</a></div><div class="ttdeci">unsigned int GetWidth() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00075">InferenceTestImage.hpp:75</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_a0983225e32025d901ce6547170892f56"><div class="ttname"><a href="class_inference_test_image.xhtml#a0983225e32025d901ce6547170892f56">InferenceTestImage::GetHeight</a></div><div class="ttdeci">unsigned int GetHeight() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00076">InferenceTestImage.hpp:76</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_afe2346f1f07296902bc8d84beb69b45da38f4e5f66749f755f54ef67faa2058dc"><div class="ttname"><a href="class_inference_test_image.xhtml#afe2346f1f07296902bc8d84beb69b45da38f4e5f66749f755f54ef67faa2058dc">InferenceTestImage::WriteFormat::Tga</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/<a class="el" href="_inference_test_image_8hpp_source.xhtml">InferenceTestImage.hpp</a></li>
<li>tests/<a class="el" href="_inference_test_image_8cpp_source.xhtml">InferenceTestImage.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="class_inference_test_image.xhtml">InferenceTestImage</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:29 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
