<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/workloads/Lstm.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_lstm_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Lstm.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_lstm_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_activation_8hpp.xhtml">Activation.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_lstm_8hpp.xhtml">Lstm.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_lstm_utils_8hpp.xhtml">LstmUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;{</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a952423703fa6b92f18d19df3995633b4">   13</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a952423703fa6b92f18d19df3995633b4">LstmImpl</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo,</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inputToOutputWeightsShape,</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; recurrentToOutputWeightsShape,</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; inputData,</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; outputStateIn,</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; cellStateIn,</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_encoder.xhtml">Encoder&lt;float&gt;</a>&gt;&amp; outputStateOut,</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_encoder.xhtml">Encoder&lt;float&gt;</a>&gt;&amp; cellStateOut,</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_encoder.xhtml">Encoder&lt;float&gt;</a>&gt;&amp; output,</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; cellStateOutDecoder,</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; outputDecoder,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; inputToInputWeightsTensor,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; inputToForgetWeightsTensor,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; inputToCellWeightsTensor,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; inputToOutputWeightsTensor,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; recurrentToInputWeightsTensor,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; recurrentToForgetWeightsTensor,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; recurrentToCellWeightsTensor,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; recurrentToOutputWeightsTensor,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; cellToInputWeightsTensor,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; cellToForgetWeightsTensor,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; cellToOutputWeightsTensor,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; inputGateBiasTensor,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; forgetGateBiasTensor,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; cellBiasTensor,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; outputGateBiasTensor,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; projectionWeightsTensor,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; projectionBiasTensor,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; inputLayerNormWeights,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; forgetLayerNormWeights,</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; cellLayerNormWeights,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; outputLayerNormWeights,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_encoder.xhtml">Encoder&lt;float&gt;</a>&gt;&amp; inputGateScratch,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_encoder.xhtml">Encoder&lt;float&gt;</a>&gt;&amp; cellScratch,</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_encoder.xhtml">Encoder&lt;float&gt;</a>&gt;&amp; forgetGateScratch,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_encoder.xhtml">Encoder&lt;float&gt;</a>&gt;&amp; outputGateScratch,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; inputGateScratchDecoder,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; cellScratchDecoder,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; forgetGateScratchDecoder,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;              std::unique_ptr&lt;<a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&gt;&amp; outputGateScratchDecoder,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;              <span class="keywordtype">float</span> layerNormEpsilon)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// This is a porting of the LSTM::Eval() method in the Android code base</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Refer to: android/frameworks/ml/nn/common/operations/LSTM.cpp</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inputShape = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&amp; outputType = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> uint32_t nBatch = inputShape[0];</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> uint32_t nInput = inputShape[1];</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> uint32_t nCell   = inputToOutputWeightsShape[0];</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> uint32_t nOutput = recurrentToOutputWeightsShape[1];</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> useCifg      = descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> usePeephole  = descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> useLayerNorm = descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">if</span> (!useLayerNorm)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="comment">// Initialize scratch buffers with bias.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a>(*inputGateBiasTensor,</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                    nCell, nBatch, *inputGateScratch);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a>(*forgetGateBiasTensor,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                nCell, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a>(*cellBiasTensor,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                nCell, nBatch, *cellScratch);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a>(*outputGateBiasTensor,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                nCell, nBatch, *outputGateScratch);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment">// Initialize scratch buffers with zeroes.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*inputGateScratch, nCell * nBatch);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*forgetGateScratch, nCell * nBatch);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*cellScratch      , nCell * nBatch);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a>(*outputGateScratch, nCell * nBatch);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// For each batch and cell: compute input_weight * input.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToInputWeightsTensor,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                            nCell, nInput, *inputData, nBatch, *inputGateScratch);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToForgetWeightsTensor,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                        nCell, nInput, *inputData, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToCellWeightsTensor,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                        nCell, nInput, *inputData, nBatch, *cellScratch);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*inputToOutputWeightsTensor,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                        nCell, nInput, *inputData, nBatch, *outputGateScratch);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// For each batch and cell: compute recurrent_weight * output_state.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToInputWeightsTensor,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                            nCell, nOutput, *outputStateIn, nBatch, *inputGateScratch);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToForgetWeightsTensor,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                        nCell, nOutput, *outputStateIn, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToCellWeightsTensor,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                        nCell, nOutput, *outputStateIn, nBatch, *cellScratch);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*recurrentToOutputWeightsTensor,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                        nCell, nOutput, *outputStateIn, nBatch, *outputGateScratch);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// For each batch and cell: update input gate.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">if</span> (!useCifg)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">if</span> (usePeephole)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a>(*cellToInputWeightsTensor,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                                    nCell, *cellStateIn, nBatch, *inputGateScratch);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">if</span> (useLayerNorm)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*inputGateScratchDecoder,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                    *inputGateScratch, nCell, nBatch, layerNormEpsilon);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*inputLayerNormWeights,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                          nCell, *inputGateScratchDecoder, nBatch, *inputGateScratch);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*inputGateBiasTensor,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                 nCell, *inputGateScratchDecoder, nBatch, *inputGateScratch);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a7636fbbc4f8ea2d0cf9f3ac2d12a4c62">Activation</a>(*inputGateScratchDecoder, *inputGateScratch,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                   <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({nCell, nBatch}, outputType),</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                   <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">ActivationFunction::Sigmoid</a>, 0, 0);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// For each batch and cell: update forget gate.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span> (usePeephole)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a>(*cellToForgetWeightsTensor, nCell,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                                *cellStateIn, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">if</span> (useLayerNorm)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*forgetGateScratchDecoder,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                *forgetGateScratch, nCell, nBatch, layerNormEpsilon);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*forgetLayerNormWeights,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                      nCell, *forgetGateScratchDecoder, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*forgetGateBiasTensor,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                             nCell, *forgetGateScratchDecoder, nBatch, *forgetGateScratch);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a7636fbbc4f8ea2d0cf9f3ac2d12a4c62">Activation</a>(*forgetGateScratchDecoder, *forgetGateScratch,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;               <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({nCell, nBatch}, outputType),</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;               <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">ActivationFunction::Sigmoid</a>, 0, 0);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// For each batch and cell: update the cell.</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span> (useLayerNorm)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*cellScratchDecoder,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                *cellScratch, nCell, nBatch, layerNormEpsilon);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*cellLayerNormWeights,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                      nCell, *cellScratchDecoder, nBatch, *cellScratch);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*cellBiasTensor,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                             nCell, *cellScratchDecoder, nBatch, *cellScratch);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a5b81dc0a1a9a2bccab8bb79dfa3e77b7">VectorVectorCwiseProduct</a>(*forgetGateScratchDecoder, *cellStateIn, nBatch * nCell, *cellStateOut);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationFunction</a> armnnActivationFunc = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">ActivationFunction::Sigmoid</a>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordtype">float</span> a = 0;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordtype">float</span> b = 0;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#afc83b9418e9721cee21de245cb8533de">SetActivationParameters</a>(descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a>, armnnActivationFunc, a, b);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> &gt; 0)</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a7636fbbc4f8ea2d0cf9f3ac2d12a4c62">Activation</a>(*cellScratchDecoder, *cellScratch,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                   <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({nCell, nBatch}, outputType),</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                   armnnActivationFunc, a, b);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">if</span> (useCifg)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#aca7bd1dff180b6a5de894537f8220793">Sub1Vector</a>(*forgetGateScratchDecoder, nBatch * nCell, *forgetGateScratch);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a2e653f948d93f4177f267a7b1b4ed47d">VectorVectorCwiseProductAccumulate</a>(</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            *cellScratchDecoder, *forgetGateScratchDecoder, nBatch * nCell, *cellStateOut);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a2e653f948d93f4177f267a7b1b4ed47d">VectorVectorCwiseProductAccumulate</a>(</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            *cellScratchDecoder, *inputGateScratchDecoder, nBatch * nCell, *cellStateOut);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> &gt; 0.0)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a117781e8e9b7321722bbdd8ff74b484a">ClipVector</a>(*cellStateOutDecoder, nBatch * nCell, descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a>, *cellStateOut);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="comment">// For each batch and cell: update the output gate.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span> (usePeephole)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a>(*cellToOutputWeightsTensor,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                                nCell, *cellStateOutDecoder, nBatch, *outputGateScratch);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span> (useLayerNorm)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a>(*outputGateScratchDecoder,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                *outputGateScratch, nCell, nBatch, layerNormEpsilon);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a>(*outputLayerNormWeights,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                      nCell, *outputGateScratchDecoder, nBatch, *outputGateScratch);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a>(*outputGateBiasTensor,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                             nCell, *outputGateScratchDecoder, nBatch, *outputGateScratch);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a7636fbbc4f8ea2d0cf9f3ac2d12a4c62">Activation</a>(*outputGateScratchDecoder, *outputGateScratch,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;               <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({nCell, nBatch}, outputType),</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;               <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">ActivationFunction::Sigmoid</a>, 0, 0);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> &gt; 0)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a7636fbbc4f8ea2d0cf9f3ac2d12a4c62">Activation</a>(*cellStateOutDecoder, *cellScratch,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                   <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({nCell, nBatch}, outputType),</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                   armnnActivationFunc, a, b);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a5b81dc0a1a9a2bccab8bb79dfa3e77b7">VectorVectorCwiseProduct</a>(*outputGateScratchDecoder, *cellScratchDecoder, nBatch * nCell, *outputGateScratch);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">// For each batch: update the projection and output_state.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">if</span> (projectionBiasTensor)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a>(*projectionBiasTensor,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                    nOutput, nBatch, *output);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a>(*projectionWeightsTensor,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                            nOutput, nCell, *outputGateScratchDecoder, nBatch, *output);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a> &gt; 0.0)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <a class="code" href="_lstm_utils_8cpp.xhtml#a117781e8e9b7321722bbdd8ff74b484a">ClipVector</a>(*outputDecoder, nBatch * nOutput, descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a>, *output);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <a class="code" href="_lstm_utils_8cpp.xhtml#a00d8a623c04f1120f6fee3fe38d1cee9">CopyVector</a>(*outputGateScratchDecoder, nBatch * nOutput, *output);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <a class="code" href="_lstm_utils_8cpp.xhtml#a00d8a623c04f1120f6fee3fe38d1cee9">CopyVector</a>(*outputDecoder, nBatch * nOutput, *outputStateOut);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;} <span class="comment">//namespace armnn</span></div><div class="ttc" id="_lstm_utils_8cpp_xhtml_a0ed27dd6d6125a06bf654080f4184360"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a0ed27dd6d6125a06bf654080f4184360">MeanStddevNormalization</a></div><div class="ttdeci">void MeanStddevNormalization(armnn::Decoder&lt; float &gt; &amp;input_vector, armnn::Encoder&lt; float &gt; &amp;output_vector, uint32_t v_size, uint32_t n_batch, float normalization_epsilon)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00040">LstmUtils.cpp:40</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a389c4bbafd0fff7060cbb183f20a2134"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a389c4bbafd0fff7060cbb183f20a2134">VectorBatchVectorAdd</a></div><div class="ttdeci">void VectorBatchVectorAdd(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Decoder&lt; float &gt; &amp;batchVector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00016">LstmUtils.cpp:16</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::LstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01131">Descriptors.hpp:1131</a></div></div>
<div class="ttc" id="_activation_8hpp_xhtml"><div class="ttname"><a href="_activation_8hpp.xhtml">Activation.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a86e88bef0df4df96df752b4b8955a3af"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">armnn::LstmDescriptor::m_ClippingThresProj</a></div><div class="ttdeci">float m_ClippingThresProj</div><div class="ttdoc">Clipping threshold value for the projection. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01125">Descriptors.hpp:1125</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a117781e8e9b7321722bbdd8ff74b484a"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a117781e8e9b7321722bbdd8ff74b484a">ClipVector</a></div><div class="ttdeci">void ClipVector(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, float absLimit, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00229">LstmUtils.cpp:229</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a952423703fa6b92f18d19df3995633b4"><div class="ttname"><a href="namespacearmnn.xhtml#a952423703fa6b92f18d19df3995633b4">armnn::LstmImpl</a></div><div class="ttdeci">void LstmImpl(const LstmDescriptor &amp;descriptor, const TensorInfo &amp;inputInfo, const TensorInfo &amp;outputInfo, const TensorShape &amp;inputToOutputWeightsShape, const TensorShape &amp;recurrentToOutputWeightsShape, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;inputData, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;outputStateIn, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;cellStateIn, std::unique_ptr&lt; Encoder&lt; float &gt;&gt; &amp;outputStateOut, std::unique_ptr&lt; Encoder&lt; float &gt;&gt; &amp;cellStateOut, std::unique_ptr&lt; Encoder&lt; float &gt;&gt; &amp;output, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;cellStateOutDecoder, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;outputDecoder, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;inputToInputWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;inputToForgetWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;inputToCellWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;inputToOutputWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;recurrentToInputWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;recurrentToForgetWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;recurrentToCellWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;recurrentToOutputWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;cellToInputWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;cellToForgetWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;cellToOutputWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;inputGateBiasTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;forgetGateBiasTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;cellBiasTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;outputGateBiasTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;projectionWeightsTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;projectionBiasTensor, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;inputLayerNormWeights, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;forgetLayerNormWeights, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;cellLayerNormWeights, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;outputLayerNormWeights, std::unique_ptr&lt; Encoder&lt; float &gt;&gt; &amp;inputGateScratch, std::unique_ptr&lt; Encoder&lt; float &gt;&gt; &amp;cellScratch, std::unique_ptr&lt; Encoder&lt; float &gt;&gt; &amp;forgetGateScratch, std::unique_ptr&lt; Encoder&lt; float &gt;&gt; &amp;outputGateScratch, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;inputGateScratchDecoder, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;cellScratchDecoder, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;forgetGateScratchDecoder, std::unique_ptr&lt; Decoder&lt; float &gt;&gt; &amp;outputGateScratchDecoder, float layerNormEpsilon)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_8cpp_source.xhtml#l00013">Lstm.cpp:13</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_aca7bd1dff180b6a5de894537f8220793"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#aca7bd1dff180b6a5de894537f8220793">Sub1Vector</a></div><div class="ttdeci">void Sub1Vector(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;result)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00173">LstmUtils.cpp:173</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a00d8a623c04f1120f6fee3fe38d1cee9"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a00d8a623c04f1120f6fee3fe38d1cee9">CopyVector</a></div><div class="ttdeci">void CopyVector(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00244">LstmUtils.cpp:244</a></div></div>
<div class="ttc" id="classarmnn_1_1_encoder_xhtml"><div class="ttname"><a href="classarmnn_1_1_encoder.xhtml">armnn::Encoder&lt; float &gt;</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::ActivationFunction::Sigmoid</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a796323e16216b880043dc5ebbaa2372b"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a796323e16216b880043dc5ebbaa2372b">VectorBatchVectorCwiseProductAccumulate</a></div><div class="ttdeci">void VectorBatchVectorCwiseProductAccumulate(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Decoder&lt; float &gt; &amp;batchVector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00131">LstmUtils.cpp:131</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a4c20bc573b70e89327b334f924da97b5"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a4c20bc573b70e89327b334f924da97b5">ZeroVector</a></div><div class="ttdeci">void ZeroVector(armnn::Encoder&lt; float &gt; &amp;vector, uint32_t vSize)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00076">LstmUtils.cpp:76</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a5b81dc0a1a9a2bccab8bb79dfa3e77b7"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a5b81dc0a1a9a2bccab8bb79dfa3e77b7">VectorVectorCwiseProduct</a></div><div class="ttdeci">void VectorVectorCwiseProduct(armnn::Decoder&lt; float &gt; &amp;vector1, armnn::Decoder&lt; float &gt; &amp;vector2, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00187">LstmUtils.cpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a1d7ad9698b02282a57fdb17b3af745f9"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a1d7ad9698b02282a57fdb17b3af745f9">VectorBatchVectorCwiseProduct</a></div><div class="ttdeci">void VectorBatchVectorCwiseProduct(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, armnn::Decoder&lt; float &gt; &amp;batchVector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00152">LstmUtils.cpp:152</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_ab93a2c78551c3d3aba8ddcafb792a36d"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#ab93a2c78551c3d3aba8ddcafb792a36d">MatrixBatchVectorMultiplyAccumulate</a></div><div class="ttdeci">void MatrixBatchVectorMultiplyAccumulate(armnn::Decoder&lt; float &gt; &amp;matrix, uint32_t mRows, uint32_t mCols, armnn::Decoder&lt; float &gt; &amp;vector, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00087">LstmUtils.cpp:87</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a></div><div class="ttdoc">An LstmDescriptor for the LstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01083">Descriptors.hpp:1083</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7636fbbc4f8ea2d0cf9f3ac2d12a4c62"><div class="ttname"><a href="namespacearmnn.xhtml#a7636fbbc4f8ea2d0cf9f3ac2d12a4c62">armnn::Activation</a></div><div class="ttdeci">float Activation(float in, ActivationFunction function, float a, float b)</div><div class="ttdef"><b>Definition:</b> <a href="_activation_8cpp_source.xhtml#l00013">Activation.cpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::LstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01129">Descriptors.hpp:1129</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a2e653f948d93f4177f267a7b1b4ed47d"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a2e653f948d93f4177f267a7b1b4ed47d">VectorVectorCwiseProductAccumulate</a></div><div class="ttdeci">void VectorVectorCwiseProductAccumulate(armnn::Decoder&lt; float &gt; &amp;vector1, armnn::Decoder&lt; float &gt; &amp;vector2, uint32_t vSize, armnn::Encoder&lt; float &gt; &amp;outResult)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00204">LstmUtils.cpp:204</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ae1b07ed928036004bd257169e5aeeef4"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">armnn::LstmDescriptor::m_ActivationFunc</a></div><div class="ttdeci">uint32_t m_ActivationFunc</div><div class="ttdoc">The activation function to use. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01121">Descriptors.hpp:1121</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_a8c4a96233c9b62c76d611316da11124b"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#a8c4a96233c9b62c76d611316da11124b">VectorBatchVectorAssign</a></div><div class="ttdeci">void VectorBatchVectorAssign(armnn::Decoder&lt; float &gt; &amp;vector, uint32_t vSize, uint32_t nBatch, armnn::Encoder&lt; float &gt; &amp;outBatchVector)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00113">LstmUtils.cpp:113</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a531a3907ec13d3772370da88030191a5"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">armnn::LstmDescriptor::m_ClippingThresCell</a></div><div class="ttdeci">float m_ClippingThresCell</div><div class="ttdoc">Clipping threshold value for the cell state. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01123">Descriptors.hpp:1123</a></div></div>
<div class="ttc" id="_lstm_8hpp_xhtml"><div class="ttname"><a href="_lstm_8hpp.xhtml">Lstm.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::LstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable cifg (coupled input &amp; forget gate). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01127">Descriptors.hpp:1127</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a4a8ec49f130084445d44297549254780"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">armnn::LstmDescriptor::m_LayerNormEnabled</a></div><div class="ttdeci">bool m_LayerNormEnabled</div><div class="ttdoc">Enable/disable layer normalization. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01133">Descriptors.hpp:1133</a></div></div>
<div class="ttc" id="_lstm_utils_8cpp_xhtml_afc83b9418e9721cee21de245cb8533de"><div class="ttname"><a href="_lstm_utils_8cpp.xhtml#afc83b9418e9721cee21de245cb8533de">SetActivationParameters</a></div><div class="ttdeci">void SetActivationParameters(uint32_t activation, armnn::ActivationFunction &amp;outArmnnActivation, float &amp;outA, float &amp;outB)</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_utils_8cpp_source.xhtml#l00258">LstmUtils.cpp:258</a></div></div>
<div class="ttc" id="_lstm_utils_8hpp_xhtml"><div class="ttname"><a href="_lstm_utils_8hpp.xhtml">LstmUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9ea"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a></div><div class="ttdeci">ActivationFunction</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00086">Types.hpp:86</a></div></div>
<div class="ttc" id="classarmnn_1_1_decoder_xhtml"><div class="ttname"><a href="classarmnn_1_1_decoder.xhtml">armnn::Decoder&lt; float &gt;</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_d2f3b8e2e64df3181ebe92efcc0a3012.xhtml">workloads</a></li><li class="navelem"><a class="el" href="_lstm_8cpp.xhtml">Lstm.cpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:14 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
