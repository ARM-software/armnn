<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnUtils/ModelAccuracyChecker.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_model_accuracy_checker_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ModelAccuracyChecker.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_model_accuracy_checker_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_8hpp.xhtml">armnn/Types.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_assert_8hpp.xhtml">armnn/utility/Assert.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;mapbox/variant.hpp&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn_utils.xhtml">armnnUtils</a></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">// Category names associated with a label</span></div><div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="namespacearmnn_utils.xhtml#ab175d8bf2482d5a39c2331d1f0ddcece">   25</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn_utils.xhtml#ab175d8bf2482d5a39c2331d1f0ddcece">LabelCategoryNames</a> = std::vector&lt;std::string&gt;;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">/** Split a string into tokens by a delimiter</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> * @param[in] originalString    Original string to be split</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> * @param[in] delimiter         Delimiter used to split \p originalString</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> * @param[in] includeEmptyToekn If true, include empty tokens in the result</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> * @return A vector of tokens split from \p originalString by \delimiter</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;std::vector&lt;std::string&gt;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="namespacearmnn_utils.xhtml#a158a68b143d2564fa1ca047646cf4185">SplitBy</a>(<span class="keyword">const</span> std::string&amp; originalString, <span class="keyword">const</span> std::string&amp; delimiter = <span class="stringliteral">&quot; &quot;</span>, <span class="keywordtype">bool</span> includeEmptyToken = <span class="keyword">false</span>);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/** Remove any preceding and trailing character specified in the characterSet.</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> * @param[in] originalString    Original string to be stripped</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> * @param[in] characterSet      Set of characters to be stripped from \p originalString</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> * @return A string stripped of all characters specified in \p characterSet from \p originalString</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;std::string <a class="code" href="namespacearmnn_utils.xhtml#a14be0364a6fc0975d45e84737dfe21bc">Strip</a>(<span class="keyword">const</span> std::string&amp; originalString, <span class="keyword">const</span> std::string&amp; characterSet = <span class="stringliteral">&quot; &quot;</span>);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarmnn_utils_1_1_model_accuracy_checker.xhtml">   45</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_utils_1_1_model_accuracy_checker.xhtml">ModelAccuracyChecker</a></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">    /** Constructor for a model top k accuracy checker</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">     * @param[in] validationLabelSet Mapping from names of images to be validated, to category names of their</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">                                     corresponding ground-truth labels.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">     * @param[in] modelOutputLabels  Mapping from output nodes to the category names of their corresponding labels</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">                                     Note that an output node can have multiple category names.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="classarmnn_utils_1_1_model_accuracy_checker.xhtml#a143dac91f5ef85d672e7bccb0358e3f7">ModelAccuracyChecker</a>(<span class="keyword">const</span> std::map&lt;std::string, std::string&gt;&amp; validationLabelSet,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                         <span class="keyword">const</span> std::vector&lt;LabelCategoryNames&gt;&amp; modelOutputLabels);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">    /** Get Top K accuracy</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     * @param[in] k The number of top predictions to use for validating the ground-truth label. For example, if \p k is</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">                    3, then a prediction is considered correct as long as the ground-truth appears in the top 3</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">                    predictions.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">     * @return  The accuracy, according to the top \p k th predictions.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarmnn_utils_1_1_model_accuracy_checker.xhtml#ad6ddd3b77dd12eb33875d58a391b2412">GetAccuracy</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">    /** Record the prediction result of an image</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     * @param[in] imageName     Name of the image.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     * @param[in] outputTensor  Output tensor of the network running \p imageName.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TContainer&gt;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classarmnn_utils_1_1_model_accuracy_checker.xhtml#a38d140dac29d228fdd1681e465507c29">   73</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_utils_1_1_model_accuracy_checker.xhtml#a38d140dac29d228fdd1681e465507c29">AddImageResult</a>(<span class="keyword">const</span> std::string&amp; imageName, std::vector&lt;TContainer&gt; outputTensor)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="comment">// Increment the total number of images processed</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        ++m_ImagesProcessed;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        std::map&lt;int, float&gt; confidenceMap;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keyword">auto</span>&amp; output = outputTensor[0];</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="comment">// Create a map of all predictions</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        mapbox::util::apply_visitor([&amp;confidenceMap](<span class="keyword">auto</span> &amp;&amp; value)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                             {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                 <span class="keywordtype">int</span> index = 0;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                                 <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp; o : value)</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                 {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                     <span class="keywordflow">if</span> (o &gt; 0)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                     {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                         confidenceMap.insert(std::pair&lt;int, float&gt;(index, static_cast&lt;float&gt;(o)));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                     }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                     ++index;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                 }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                             },</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                             output);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="comment">// Create a comparator for sorting the map in order of highest probability</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keyword">typedef</span> std::function&lt;bool(std::pair&lt;int, float&gt;, std::pair&lt;int, float&gt;)&gt; Comparator;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        Comparator compFunctor =</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            [](std::pair&lt;int, float&gt; element1, std::pair&lt;int, float&gt; element2)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keywordflow">return</span> element1.second &gt; element2.second;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            };</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="comment">// Do the sorting and store in an ordered set</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        std::set&lt;std::pair&lt;int, float&gt;, Comparator&gt; setOfPredictions(</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            confidenceMap.begin(), confidenceMap.end(), compFunctor);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">const</span> std::string correctLabel = m_GroundTruthLabelSet.at(imageName);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index = 1;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">for</span> (std::pair&lt;int, float&gt; element : setOfPredictions)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">if</span> (index &gt;= m_TopK.size())</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="comment">// Check if the ground truth label value is included in the topi prediction.</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="comment">// Note that a prediction can have multiple prediction labels.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearmnn_utils.xhtml#ab175d8bf2482d5a39c2331d1f0ddcece">LabelCategoryNames</a> predictionLabels = m_ModelOutputLabels[<span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(element.first)];</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">if</span> (std::find(predictionLabels.begin(), predictionLabels.end(), correctLabel) != predictionLabels.end())</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                ++m_TopK[index];</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            ++index;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::string&gt; m_GroundTruthLabelSet;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">const</span> std::vector&lt;LabelCategoryNames&gt; m_ModelOutputLabels;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    std::vector&lt;unsigned int&gt; m_TopK = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_ImagesProcessed   = 0;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;};</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;} <span class="comment">//namespace armnnUtils</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="ttc" id="classarmnn_utils_1_1_model_accuracy_checker_xhtml_a143dac91f5ef85d672e7bccb0358e3f7"><div class="ttname"><a href="classarmnn_utils_1_1_model_accuracy_checker.xhtml#a143dac91f5ef85d672e7bccb0358e3f7">armnnUtils::ModelAccuracyChecker::ModelAccuracyChecker</a></div><div class="ttdeci">ModelAccuracyChecker(const std::map&lt; std::string, std::string &gt; &amp;validationLabelSet, const std::vector&lt; LabelCategoryNames &gt; &amp;modelOutputLabels)</div><div class="ttdoc">Constructor for a model top k accuracy checker. </div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_8cpp_source.xhtml#l00016">ModelAccuracyChecker.cpp:16</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_model_accuracy_checker_xhtml_ad6ddd3b77dd12eb33875d58a391b2412"><div class="ttname"><a href="classarmnn_utils_1_1_model_accuracy_checker.xhtml#ad6ddd3b77dd12eb33875d58a391b2412">armnnUtils::ModelAccuracyChecker::GetAccuracy</a></div><div class="ttdeci">float GetAccuracy(unsigned int k)</div><div class="ttdoc">Get Top K accuracy. </div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_8cpp_source.xhtml#l00022">ModelAccuracyChecker.cpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_model_accuracy_checker_xhtml_a38d140dac29d228fdd1681e465507c29"><div class="ttname"><a href="classarmnn_utils_1_1_model_accuracy_checker.xhtml#a38d140dac29d228fdd1681e465507c29">armnnUtils::ModelAccuracyChecker::AddImageResult</a></div><div class="ttdeci">void AddImageResult(const std::string &amp;imageName, std::vector&lt; TContainer &gt; outputTensor)</div><div class="ttdoc">Record the prediction result of an image. </div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_8hpp_source.xhtml#l00073">ModelAccuracyChecker.hpp:73</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a14be0364a6fc0975d45e84737dfe21bc"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a14be0364a6fc0975d45e84737dfe21bc">armnnUtils::Strip</a></div><div class="ttdeci">std::string Strip(const std::string &amp;originalString, const std::string &amp;characterSet)</div><div class="ttdoc">Remove any preceding and trailing character specified in the characterSet. </div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_8cpp_source.xhtml#l00064">ModelAccuracyChecker.cpp:64</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a158a68b143d2564fa1ca047646cf4185"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a158a68b143d2564fa1ca047646cf4185">armnnUtils::SplitBy</a></div><div class="ttdeci">std::vector&lt; std::string &gt; SplitBy(const std::string &amp;originalString, const std::string &amp;delimiter, bool includeEmptyToken)</div><div class="ttdoc">Split a string into tokens by a delimiter. </div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_8cpp_source.xhtml#l00040">ModelAccuracyChecker.cpp:40</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml"><div class="ttname"><a href="_types_8hpp.xhtml">Types.hpp</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml"><div class="ttname"><a href="_assert_8hpp.xhtml">Assert.hpp</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_model_accuracy_checker_xhtml"><div class="ttname"><a href="classarmnn_utils_1_1_model_accuracy_checker.xhtml">armnnUtils::ModelAccuracyChecker</a></div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_8hpp_source.xhtml#l00045">ModelAccuracyChecker.hpp:45</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml"><div class="ttname"><a href="namespacearmnn_utils.xhtml">armnnUtils</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_utils_2_compatible_types_8hpp_source.xhtml#l00010">CompatibleTypes.hpp:10</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ab175d8bf2482d5a39c2331d1f0ddcece"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ab175d8bf2482d5a39c2331d1f0ddcece">armnnUtils::LabelCategoryNames</a></div><div class="ttdeci">std::vector&lt; std::string &gt; LabelCategoryNames</div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_8hpp_source.xhtml#l00025">ModelAccuracyChecker.hpp:25</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_5d9c764a006d252ff232a5efbbd99a46.xhtml">armnnUtils</a></li><li class="navelem"><a class="el" href="_model_accuracy_checker_8hpp.xhtml">ModelAccuracyChecker.hpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:21 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
