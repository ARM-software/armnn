<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/ModelAccuracyTool-Armnn/ModelAccuracyTool-Armnn.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_model_accuracy_tool-_armnn_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ModelAccuracyTool-Armnn.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_model_accuracy_tool-_armnn_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;../ImageTensorGenerator/ImageTensorGenerator.hpp&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;../InferenceTest.hpp&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_model_accuracy_checker_8hpp.xhtml">ModelAccuracyChecker.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_deserializer_8hpp.xhtml">armnnDeserializer/IDeserializer.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_filesystem_8hpp.xhtml">armnnUtils/Filesystem.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_t_container_8hpp.xhtml">armnnUtils/TContainer.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;cxxopts/cxxopts.hpp&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn_1_1test.xhtml">armnn::test</a>;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/** Load image names and ground-truth labels from the image directory and the ground truth label file</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * @pre \p validationLabelPath exists and is valid regular file</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * @pre \p imageDirectoryPath exists and is valid directory</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> * @pre labels in validation file correspond to images which are in lexicographical order with the image name</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> * @pre image index starts at 1</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> * @pre \p begIndex and \p endIndex are end-inclusive</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"> * @param[in] validationLabelPath Path to validation label file</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"> * @param[in] imageDirectoryPath  Path to directory containing validation images</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> * @param[in] begIndex            Begin index of images to be loaded. Inclusive</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> * @param[in] endIndex            End index of images to be loaded. Inclusive</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> * @param[in] excludelistPath     Path to excludelist file</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> * @return A map mapping image file names to their corresponding ground-truth labels</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;map&lt;std::string, std::string&gt; <a class="code" href="_model_accuracy_tool-_armnn_8cpp.xhtml#af41b1e4ed41e41c17cf6b7ee6f7d359e">LoadValidationImageFilenamesAndLabels</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; validationLabelPath,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                                                    <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; imageDirectoryPath,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                                                    <span class="keywordtype">size_t</span> begIndex             = 0,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                                                    <span class="keywordtype">size_t</span> endIndex             = 0,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                                                                    <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; excludelistPath = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/** Load model output labels from file</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * @pre \p modelOutputLabelsPath exists and is a regular file</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> * @param[in] modelOutputLabelsPath path to model output labels file</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * @return A vector of labels, which in turn is described by a list of category names</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;std::vector&lt;armnnUtils::LabelCategoryNames&gt; <a class="code" href="_model_accuracy_tool-_armnn_8cpp.xhtml#a0860c525c02a295d28f4fe0a0c0747c6">LoadModelOutputLabels</a>(<span class="keyword">const</span> std::string&amp; modelOutputLabelsPath);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="_model_accuracy_tool-_armnn_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">   49</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="_model_accuracy_tool-_armnn_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3d">armnn::LogSeverity</a> level = <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::LogSeverity::Debug</a>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="namespacearmnn.xhtml#aa59f7a819c3e29d10ffc41e5c0616872">armnn::ConfigureLogging</a>(<span class="keyword">true</span>, <span class="keyword">true</span>, level);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        std::string modelPath;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        std::string modelFormat;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        std::vector&lt;std::string&gt; inputNames;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        std::vector&lt;std::string&gt; outputNames;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        std::string dataDir;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        std::string modelOutputLabelsPath;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        std::string validationLabelPath;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        std::string inputLayout;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        std::vector&lt;armnn::BackendId&gt; computeDevice;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        std::string validationRange;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        std::string excludelistPath;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> std::string backendsMessage = <span class="stringliteral">&quot;Which device to run layers on by default. Possible choices: &quot;</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                            + <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#ae1de2f7ca1db17f45f97155e239b8b45">GetBackendIdsAsString</a>();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            cxxopts::Options options(<span class="stringliteral">&quot;ModeAccuracyTool-Armnn&quot;</span>,<span class="stringliteral">&quot;Options&quot;</span>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            options.add_options()</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                (<span class="stringliteral">&quot;h,help&quot;</span>, <span class="stringliteral">&quot;Display help messages&quot;</span>)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                (<span class="stringliteral">&quot;m,model-path&quot;</span>,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    <span class="stringliteral">&quot;Path to armnn format model file&quot;</span>,</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    cxxopts::value&lt;std::string&gt;(modelPath))</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                (<span class="stringliteral">&quot;f,model-format&quot;</span>,</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    <span class="stringliteral">&quot;The model format. Supported values: tflite&quot;</span>,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    cxxopts::value&lt;std::string&gt;(modelFormat))</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                (<span class="stringliteral">&quot;i,input-name&quot;</span>,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    <span class="stringliteral">&quot;Identifier of the input tensors in the network separated by comma with no space.&quot;</span>,</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    cxxopts::value&lt;std::vector&lt;std::string&gt;&gt;(inputNames))</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                (<span class="stringliteral">&quot;o,output-name&quot;</span>,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    <span class="stringliteral">&quot;Identifier of the output tensors in the network separated by comma with no space.&quot;</span>,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    cxxopts::value&lt;std::vector&lt;std::string&gt;&gt;(outputNames))</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                (<span class="stringliteral">&quot;d,data-dir&quot;</span>,</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="stringliteral">&quot;Path to directory containing the ImageNet test data&quot;</span>,</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    cxxopts::value&lt;std::string&gt;(dataDir))</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                (<span class="stringliteral">&quot;p,model-output-labels&quot;</span>,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    <span class="stringliteral">&quot;Path to model output labels file.&quot;</span>,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    cxxopts::value&lt;std::string&gt;(modelOutputLabelsPath))</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                (<span class="stringliteral">&quot;v,validation-labels-path&quot;</span>,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="stringliteral">&quot;Path to ImageNet Validation Label file&quot;</span>,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    cxxopts::value&lt;std::string&gt;(validationLabelPath))</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                (<span class="stringliteral">&quot;l,data-layout&quot;</span>,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="stringliteral">&quot;Data layout. Supported value: NHWC, NCHW. Default: NHWC&quot;</span>,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    cxxopts::value&lt;std::string&gt;(inputLayout)-&gt;default_value(<span class="stringliteral">&quot;NHWC&quot;</span>))</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                (<span class="stringliteral">&quot;c,compute&quot;</span>,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    backendsMessage.c_str(),</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    cxxopts::value&lt;std::vector&lt;armnn::BackendId&gt;&gt;(computeDevice)-&gt;default_value(<span class="stringliteral">&quot;CpuAcc,CpuRef&quot;</span>))</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                (<span class="stringliteral">&quot;r,validation-range&quot;</span>,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="stringliteral">&quot;The range of the images to be evaluated. Specified in the form &lt;begin index&gt;:&lt;end index&gt;.&quot;</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    <span class="stringliteral">&quot;The index starts at 1 and the range is inclusive.&quot;</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    <span class="stringliteral">&quot;By default the evaluation will be performed on all images.&quot;</span>,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    cxxopts::value&lt;std::string&gt;(validationRange)-&gt;default_value(<span class="stringliteral">&quot;1:0&quot;</span>))</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                (<span class="stringliteral">&quot;e,excludelist-path&quot;</span>,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="stringliteral">&quot;Path to a excludelist file where each line denotes the index of an image to be &quot;</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="stringliteral">&quot;excluded from evaluation.&quot;</span>,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    cxxopts::value&lt;std::string&gt;(excludelistPath)-&gt;default_value(<span class="stringliteral">&quot;&quot;</span>));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <a class="code" href="namespacearmnn.xhtml#adf15f9b51e289cd234206cc5112f0346">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(<span class="stringliteral">&quot;This b,blacklist-path command is deprecated&quot;</span>, <span class="stringliteral">&quot;22.08&quot;</span>)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                (<span class="stringliteral">&quot;b,blacklist-path&quot;</span>,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                     <span class="stringliteral">&quot;Path to a blacklist file where each line denotes the index of an image to be &quot;</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                     <span class="stringliteral">&quot;excluded from evaluation. This command will be deprecated in favor of: --excludelist-path &quot;</span>,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                     cxxopts::value&lt;std::string&gt;(excludelistPath)-&gt;default_value(<span class="stringliteral">&quot;&quot;</span>));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keyword">auto</span> result = options.parse(argc, argv);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">if</span> (result.count(<span class="stringliteral">&quot;help&quot;</span>) &gt; 0)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                std::cout &lt;&lt; options.help() &lt;&lt; std::endl;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="comment">// Check for mandatory single options.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            std::string mandatorySingleParameters[] = { <span class="stringliteral">&quot;model-path&quot;</span>, <span class="stringliteral">&quot;model-format&quot;</span>, <span class="stringliteral">&quot;input-name&quot;</span>, <span class="stringliteral">&quot;output-name&quot;</span>,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                                        <span class="stringliteral">&quot;data-dir&quot;</span>, <span class="stringliteral">&quot;model-output-labels&quot;</span>, <span class="stringliteral">&quot;validation-labels-path&quot;</span> };</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> param : mandatorySingleParameters)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keywordflow">if</span> (result.count(param) != 1)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    std::cerr &lt;&lt; <span class="stringliteral">&quot;Parameter \&#39;--&quot;</span> &lt;&lt; param &lt;&lt; <span class="stringliteral">&quot;\&#39; is required but missing.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> cxxopts::OptionException&amp; e)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            std::cerr &lt;&lt; e.what() &lt;&lt; std::endl &lt;&lt; std::endl;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Caught unexpected exception&quot;</span>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            std::cerr &lt;&lt; <span class="stringliteral">&quot;Fatal internal error: &quot;</span> &lt;&lt; e.what() &lt;&lt; std::endl;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="comment">// Check if the requested backend are all valid</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        std::string invalidBackends;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">if</span> (!CheckRequestedBackendsAreValid(computeDevice, <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a>(invalidBackends)))</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;The list of preferred devices contains invalid backend IDs: &quot;</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                             &lt;&lt; invalidBackends;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> status;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="comment">// Create runtime</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options));</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        std::ifstream file(modelPath);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment">// Create Parser</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keyword">using</span> IParser = <a class="code" href="classarmnn_deserializer_1_1_i_deserializer.xhtml">armnnDeserializer::IDeserializer</a>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keyword">auto</span> armnnparser(IParser::Create());</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="comment">// Create a network</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network = armnnparser-&gt;CreateNetworkFromBinary(file);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// Optimizes the network.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a> optimizedNet(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            optimizedNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a>(*network, computeDevice, runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>&amp; e)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            std::stringstream message;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            message &lt;&lt; <span class="stringliteral">&quot;armnn::Exception (&quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>() &lt;&lt; <span class="stringliteral">&quot;) caught from optimize.&quot;</span>;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; message.str();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="comment">// Loads the network into the runtime.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> networkId;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        status = runtime-&gt;LoadNetwork(networkId, std::move(optimizedNet));</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">if</span> (status == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a>)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;armnn::IRuntime: Failed to load network&quot;</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="comment">// Set up Network</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">BindingPointInfo</a> = <a class="code" href="namespace_inference_model_internal.xhtml#a9084adbf804022c874039ad40d1939e9">InferenceModelInternal::BindingPointInfo</a>;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="comment">// Handle inputNames and outputNames, there can be multiple.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        std::vector&lt;BindingPointInfo&gt; inputBindings;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span>&amp; input: inputNames)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml">armnnDeserializer::BindingPointInfo</a>&amp;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    inputBindingInfo = armnnparser-&gt;GetNetworkInputBindingInfo(0, input);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            std::pair&lt;armnn::LayerBindingId, armnn::TensorInfo&gt;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    m_InputBindingInfo(inputBindingInfo.<a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml#a663b3104ec65e4e08b5e37fb42942087">m_BindingId</a>, inputBindingInfo.<a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml#aa308d10e76e29f09e44a933a2d091a79">m_TensorInfo</a>);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            inputBindings.push_back(m_InputBindingInfo);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        std::vector&lt;BindingPointInfo&gt; outputBindings;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span>&amp; output: outputNames)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml">armnnDeserializer::BindingPointInfo</a>&amp;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    outputBindingInfo = armnnparser-&gt;GetNetworkOutputBindingInfo(0, output);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            std::pair&lt;armnn::LayerBindingId, armnn::TensorInfo&gt;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    m_OutputBindingInfo(outputBindingInfo.<a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml#a663b3104ec65e4e08b5e37fb42942087">m_BindingId</a>, outputBindingInfo.<a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml#aa308d10e76e29f09e44a933a2d091a79">m_TensorInfo</a>);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            outputBindings.push_back(m_OutputBindingInfo);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="comment">// Load model output labels</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">if</span> (modelOutputLabelsPath.empty() || !fs::exists(modelOutputLabelsPath) ||</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            !fs::is_regular_file(modelOutputLabelsPath))</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Invalid model output labels path at &quot;</span> &lt;&lt; modelOutputLabelsPath;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keyword">const</span> std::vector&lt;armnnUtils::LabelCategoryNames&gt; modelOutputLabels =</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <a class="code" href="_model_accuracy_tool-_armnn_8cpp.xhtml#a0860c525c02a295d28f4fe0a0c0747c6">LoadModelOutputLabels</a>(modelOutputLabelsPath);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="comment">// Parse begin and end image indices</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        std::vector&lt;std::string&gt; imageIndexStrs = <a class="code" href="namespacearmnn_utils.xhtml#a158a68b143d2564fa1ca047646cf4185">armnnUtils::SplitBy</a>(validationRange, <span class="stringliteral">&quot;:&quot;</span>);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordtype">size_t</span> imageBegIndex;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordtype">size_t</span> imageEndIndex;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">if</span> (imageIndexStrs.size() != 2)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Invalid validation range specification: Invalid format &quot;</span> &lt;&lt; validationRange;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            imageBegIndex = std::stoul(imageIndexStrs[0]);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            imageEndIndex = std::stoul(imageIndexStrs[1]);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Invalid validation range specification: &quot;</span> &lt;&lt; validationRange;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="comment">// Validate  excludelist file if it&#39;s specified</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">if</span> (!excludelistPath.empty() &amp;&amp;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            !(fs::exists(excludelistPath) &amp;&amp; fs::is_regular_file(excludelistPath)))</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Invalid path to excludelist file at &quot;</span> &lt;&lt; excludelistPath;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        fs::path pathToDataDir(dataDir);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keyword">const</span> map&lt;std::string, std::string&gt; imageNameToLabel = <a class="code" href="_model_accuracy_tool-_armnn_8cpp.xhtml#af41b1e4ed41e41c17cf6b7ee6f7d359e">LoadValidationImageFilenamesAndLabels</a>(</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            validationLabelPath, pathToDataDir.string(), imageBegIndex, imageEndIndex, excludelistPath);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <a class="code" href="classarmnn_utils_1_1_model_accuracy_checker.xhtml">armnnUtils::ModelAccuracyChecker</a> checker(imageNameToLabel, modelOutputLabels);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">ValidateDirectory</a>(dataDir))</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModel&lt;armnnDeserializer::IDeserializer, float&gt;::Params</a> params;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>      = modelPath;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a>  = <span class="keyword">true</span>;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a> = computeDevice;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="comment">// Insert inputNames and outputNames into params vector</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>.insert(std::end(params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>),</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                          std::begin(inputNames),</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                          std::end(inputNames));</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>.insert(std::end(params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>),</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                           std::begin(outputNames),</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                           std::end(outputNames));</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keyword">using</span> TParser = <a class="code" href="classarmnn_deserializer_1_1_i_deserializer.xhtml">armnnDeserializer::IDeserializer</a>;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="comment">// If dynamicBackends is empty it will be disabled by default.</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <a class="code" href="class_inference_model.xhtml">InferenceModel&lt;TParser, float&gt;</a> model(params, <span class="keyword">false</span>, <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="comment">// Get input tensor information</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputTensorInfo   = model.<a class="code" href="class_inference_model.xhtml#a9a28e0c17604e5a945409f994c020212">GetInputBindingInfo</a>().second;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; inputTensorShape = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a>&amp; inputTensorDataType = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>();</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> inputTensorDataLayout;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">if</span> (inputLayout == <span class="stringliteral">&quot;NCHW&quot;</span>)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            {</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                inputTensorDataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            }</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (inputLayout == <span class="stringliteral">&quot;NHWC&quot;</span>)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                inputTensorDataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Invalid Data layout: &quot;</span> &lt;&lt; inputLayout;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputTensorWidth =</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                inputTensorDataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a> ? inputTensorShape[3] : inputTensorShape[2];</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputTensorHeight =</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                inputTensorDataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a> ? inputTensorShape[2] : inputTensorShape[1];</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="comment">// Get output tensor info</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputNumElements = model.<a class="code" href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">GetOutputSize</a>();</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <span class="comment">// Check output tensor shape is valid</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keywordflow">if</span> (modelOutputLabels.size() != outputNumElements)</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Number of output elements: &quot;</span> &lt;&lt; outputNumElements</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                         &lt;&lt; <span class="stringliteral">&quot; , mismatches the number of output labels: &quot;</span> &lt;&lt; modelOutputLabels.size();</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            }</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 1;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            <span class="comment">// Get normalisation parameters</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <a class="code" href="_image_tensor_generator_8hpp.xhtml#a7599848540a5f43e977119c054b3563e">SupportedFrontend</a> modelFrontend;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="keywordflow">if</span> (modelFormat == <span class="stringliteral">&quot;tflite&quot;</span>)</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            {</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                modelFrontend = <a class="code" href="_image_tensor_generator_8hpp.xhtml#a7599848540a5f43e977119c054b3563ea35120628a2097980f88fd49246124cae">SupportedFrontend::TFLite</a>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            }</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Unsupported frontend: &quot;</span> &lt;&lt; modelFormat;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keyword">const</span> <a class="code" href="struct_normalization_parameters.xhtml">NormalizationParameters</a>&amp; normParams = <a class="code" href="_image_tensor_generator_8hpp.xhtml#a572494250ece8d94b68ea490d0bf46e4">GetNormalizationParameters</a>(modelFrontend, inputTensorDataType);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; imageEntry : imageNameToLabel)</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                <span class="keyword">const</span> std::string imageName = imageEntry.first;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                std::cout &lt;&lt; <span class="stringliteral">&quot;Processing image: &quot;</span> &lt;&lt; imageName &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                vector&lt;armnnUtils::TContainer&gt; inputDataContainers;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                vector&lt;armnnUtils::TContainer&gt; outputDataContainers;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                <span class="keyword">auto</span> imagePath = pathToDataDir / fs::path(imageName);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                <span class="keywordflow">switch</span> (inputTensorDataType)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>:</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                        inputDataContainers.push_back(</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                            <a class="code" href="_image_tensor_generator_8hpp.xhtml#ac1e8e68c74e5d1c8fd19a91a68de3cb7">PrepareImageTensor&lt;int&gt;</a>(imagePath.string(),</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                            inputTensorWidth, inputTensorHeight,</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                            normParams,</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                            batchSize,</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                            inputTensorDataLayout));</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                        outputDataContainers = { vector&lt;int&gt;(outputNumElements) };</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>:</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                        inputDataContainers.push_back(</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                            <a class="code" href="_image_tensor_generator_8hpp.xhtml#ac372cd2b257f33f29999217e1d2d8a37">PrepareImageTensor&lt;uint8_t&gt;</a>(imagePath.string(),</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                            inputTensorWidth, inputTensorHeight,</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                            normParams,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                            batchSize,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                            inputTensorDataLayout));</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                        outputDataContainers = { vector&lt;uint8_t&gt;(outputNumElements) };</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>:</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                        inputDataContainers.push_back(</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                            <a class="code" href="_image_tensor_generator_8hpp.xhtml#affacfe95f011fce3b897b2745880f82a">PrepareImageTensor&lt;float&gt;</a>(imagePath.string(),</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                            inputTensorWidth, inputTensorHeight,</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                            normParams,</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                            batchSize,</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                            inputTensorDataLayout));</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                        outputDataContainers = { vector&lt;float&gt;(outputNumElements) };</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                status = runtime-&gt;EnqueueWorkload(networkId,</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                                  <a class="code" href="namespacearmnn_utils.xhtml#ad5310a199d4969927169ed084b1f6c28">armnnUtils::MakeInputTensors</a>(inputBindings, inputDataContainers),</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                                  <a class="code" href="namespacearmnn_utils.xhtml#ad4efd5a7fa660df5246466d83517220d">armnnUtils::MakeOutputTensors</a>(outputBindings, outputDataContainers));</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                <span class="keywordflow">if</span> (status == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a>)</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;armnn::IRuntime: Failed to enqueue workload for image: &quot;</span> &lt;&lt; imageName;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                }</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                checker.AddImageResult&lt;<a class="code" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a>&gt;(imageName, outputDataContainers);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            }</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        {</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="keywordflow">return</span> EXIT_SUCCESS;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 1; i &lt;= 5; ++i)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        {</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Top &quot;</span> &lt;&lt; i &lt;&lt;  <span class="stringliteral">&quot; Accuracy: &quot;</span> &lt;&lt; checker.GetAccuracy(i) &lt;&lt; <span class="stringliteral">&quot;%&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        }</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Accuracy Tool ran successfully!&quot;</span>;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keywordflow">return</span> EXIT_SUCCESS;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    }</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>&amp; e)</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    {</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="comment">// Coverity fix: BOOST_LOG_TRIVIAL (typically used to report errors) may throw an</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="comment">// exception of type std::length_error.</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="comment">// Using stderr instead in this context as there is no point in nesting try-catch blocks here.</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Armnn Error: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>() &lt;&lt; std::endl;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="comment">// Coverity fix: various boost exceptions can be thrown by methods called by this test.</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;WARNING: ModelAccuracyTool-Armnn: An error has occurred when running the &quot;</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                     <span class="stringliteral">&quot;Accuracy Tool: &quot;</span> &lt;&lt; e.what() &lt;&lt; std::endl;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    }</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;}</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="_model_accuracy_tool-_armnn_8cpp.xhtml#af41b1e4ed41e41c17cf6b7ee6f7d359e">  411</a></span>&#160;map&lt;std::string, std::string&gt; <a class="code" href="_model_accuracy_tool-_armnn_8cpp.xhtml#af41b1e4ed41e41c17cf6b7ee6f7d359e">LoadValidationImageFilenamesAndLabels</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; validationLabelPath,</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                                                    <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; imageDirectoryPath,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                                                    <span class="keywordtype">size_t</span> begIndex,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                                                    <span class="keywordtype">size_t</span> endIndex,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                                                    <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; excludelistPath)</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;{</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="comment">// Populate imageFilenames with names of all .JPEG, .PNG images</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    std::vector&lt;std::string&gt; imageFilenames;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; imageEntry : fs::directory_iterator(fs::path(imageDirectoryPath)))</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    {</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        fs::path imagePath = imageEntry.path();</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="comment">// Get extension and convert to uppercase</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        std::string imageExtension = imagePath.extension().string();</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        std::transform(imageExtension.begin(), imageExtension.end(), imageExtension.begin(), ::toupper);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keywordflow">if</span> (fs::is_regular_file(imagePath) &amp;&amp; (imageExtension == <span class="stringliteral">&quot;.JPEG&quot;</span> || imageExtension == <span class="stringliteral">&quot;.PNG&quot;</span>))</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        {</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            imageFilenames.push_back(imagePath.filename().string());</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        }</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    }</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keywordflow">if</span> (imageFilenames.empty())</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    {</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;No image file (JPEG, PNG) found at &quot;</span> + imageDirectoryPath);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    }</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="comment">// Sort the image filenames lexicographically</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    std::sort(imageFilenames.begin(), imageFilenames.end());</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    std::cout &lt;&lt; imageFilenames.size() &lt;&lt; <span class="stringliteral">&quot; images found at &quot;</span> &lt;&lt; imageDirectoryPath &lt;&lt; std::endl;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="comment">// Get default end index</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">if</span> (begIndex &lt; 1 || endIndex &gt; imageFilenames.size())</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Invalid image index range&quot;</span>);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    }</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    endIndex = endIndex == 0 ? imageFilenames.size() : endIndex;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">if</span> (begIndex &gt; endIndex)</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    {</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Invalid image index range&quot;</span>);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    }</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="comment">// Load excludelist if there is one</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    std::vector&lt;unsigned int&gt; excludelist;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keywordflow">if</span> (!excludelistPath.empty())</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    {</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        std::ifstream excludelistFile(excludelistPath);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keywordflow">while</span> (excludelistFile &gt;&gt; index)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        {</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            excludelist.push_back(index);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        }</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="comment">// Load ground truth labels and pair them with corresponding image names</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    std::string classification;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    map&lt;std::string, std::string&gt; imageNameToLabel;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    ifstream infile(validationLabelPath);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordtype">size_t</span> imageIndex          = begIndex;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordtype">size_t</span> excludelistIndexCount = 0;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordflow">while</span> (std::getline(infile, classification))</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    {</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="keywordflow">if</span> (imageIndex &gt; endIndex)</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        {</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        }</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <span class="comment">// If current imageIndex is included in excludelist, skip the current image</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keywordflow">if</span> (excludelistIndexCount &lt; excludelist.size() &amp;&amp; imageIndex == excludelist[excludelistIndexCount])</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        {</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            ++imageIndex;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            ++excludelistIndexCount;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        }</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        imageNameToLabel.insert(std::pair&lt;std::string, std::string&gt;(imageFilenames[imageIndex - 1], classification));</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        ++imageIndex;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    }</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    std::cout &lt;&lt; excludelistIndexCount &lt;&lt; <span class="stringliteral">&quot; images in excludelist&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    std::cout &lt;&lt; imageIndex - begIndex - excludelistIndexCount &lt;&lt; <span class="stringliteral">&quot; images to be loaded&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">return</span> imageNameToLabel;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;}</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno"><a class="line" href="_model_accuracy_tool-_armnn_8cpp.xhtml#a0860c525c02a295d28f4fe0a0c0747c6">  492</a></span>&#160;std::vector&lt;armnnUtils::LabelCategoryNames&gt; <a class="code" href="_model_accuracy_tool-_armnn_8cpp.xhtml#a0860c525c02a295d28f4fe0a0c0747c6">LoadModelOutputLabels</a>(<span class="keyword">const</span> std::string&amp; modelOutputLabelsPath)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;{</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    std::vector&lt;armnnUtils::LabelCategoryNames&gt; modelOutputLabels;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    ifstream modelOutputLablesFile(modelOutputLabelsPath);</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    std::string line;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordflow">while</span> (std::getline(modelOutputLablesFile, line))</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    {</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <a class="code" href="namespacearmnn_utils.xhtml#ab175d8bf2482d5a39c2331d1f0ddcece">armnnUtils::LabelCategoryNames</a> tokens                  = <a class="code" href="namespacearmnn_utils.xhtml#a158a68b143d2564fa1ca047646cf4185">armnnUtils::SplitBy</a>(line, <span class="stringliteral">&quot;:&quot;</span>);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <a class="code" href="namespacearmnn_utils.xhtml#ab175d8bf2482d5a39c2331d1f0ddcece">armnnUtils::LabelCategoryNames</a> predictionCategoryNames = <a class="code" href="namespacearmnn_utils.xhtml#a158a68b143d2564fa1ca047646cf4185">armnnUtils::SplitBy</a>(tokens.back(), <span class="stringliteral">&quot;,&quot;</span>);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        std::transform(predictionCategoryNames.begin(), predictionCategoryNames.end(), predictionCategoryNames.begin(),</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                       [](<span class="keyword">const</span> std::string&amp; category) { <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_utils.xhtml#a14be0364a6fc0975d45e84737dfe21bc">armnnUtils::Strip</a>(category); });</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        modelOutputLabels.push_back(predictionCategoryNames);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    }</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="keywordflow">return</span> modelOutputLabels;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00040">Runtime.cpp:40</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00049">Types.hpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="_model_accuracy_checker_8hpp_xhtml"><div class="ttname"><a href="_model_accuracy_checker_8hpp.xhtml">ModelAccuracyChecker.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa59f7a819c3e29d10ffc41e5c0616872"><div class="ttname"><a href="namespacearmnn.xhtml#aa59f7a819c3e29d10ffc41e5c0616872">armnn::ConfigureLogging</a></div><div class="ttdeci">void ConfigureLogging(bool printToStandardOutput, bool printToDebugOutput, LogSeverity severity)</div><div class="ttdoc">Configures the logging behaviour of the ARMNN library. </div><div class="ttdef"><b>Definition:</b> <a href="_utils_8cpp_source.xhtml#l00018">Utils.cpp:18</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_a7599848540a5f43e977119c054b3563ea35120628a2097980f88fd49246124cae"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#a7599848540a5f43e977119c054b3563ea35120628a2097980f88fd49246124cae">SupportedFrontend::TFLite</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_a572494250ece8d94b68ea490d0bf46e4"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#a572494250ece8d94b68ea490d0bf46e4">GetNormalizationParameters</a></div><div class="ttdeci">NormalizationParameters GetNormalizationParameters(const SupportedFrontend &amp;modelFormat, const armnn::DataType &amp;outputType)</div><div class="ttdoc">Get normalization parameters. </div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00038">ImageTensorGenerator.hpp:38</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00031">IRuntime.hpp:31</a></div></div>
<div class="ttc" id="class_inference_model_xhtml"><div class="ttname"><a href="class_inference_model.xhtml">InferenceModel</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00372">InferenceModel.hpp:372</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a9a28e0c17604e5a945409f994c020212"><div class="ttname"><a href="class_inference_model.xhtml#a9a28e0c17604e5a945409f994c020212">InferenceModel::GetInputBindingInfo</a></div><div class="ttdeci">const armnn::BindingPointInfo &amp; GetInputBindingInfo(unsigned int inputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00726">InferenceModel.hpp:726</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_ac372cd2b257f33f29999217e1d2d8a37"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#ac372cd2b257f33f29999217e1d2d8a37">PrepareImageTensor&lt; uint8_t &gt;</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; PrepareImageTensor&lt; uint8_t &gt;(const std::string &amp;imagePath, unsigned int newWidth, unsigned int newHeight, const NormalizationParameters &amp;normParams, unsigned int batchSize, const armnn::DataLayout &amp;outputLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00148">ImageTensorGenerator.hpp:148</a></div></div>
<div class="ttc" id="namespace_inference_model_internal_xhtml_a9084adbf804022c874039ad40d1939e9"><div class="ttname"><a href="namespace_inference_model_internal.xhtml#a9084adbf804022c874039ad40d1939e9">InferenceModelInternal::BindingPointInfo</a></div><div class="ttdeci">armnn::BindingPointInfo BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00085">InferenceModel.hpp:85</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_ae1de2f7ca1db17f45f97155e239b8b45"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#ae1de2f7ca1db17f45f97155e239b8b45">armnn::BackendRegistry::GetBackendIdsAsString</a></div><div class="ttdeci">std::string GetBackendIdsAsString() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00083">BackendRegistry.cpp:83</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="_filesystem_8hpp_xhtml"><div class="ttname"><a href="_filesystem_8hpp.xhtml">Filesystem.hpp</a></div></div>
<div class="ttc" id="structarmnn_deserializer_1_1_binding_point_info_xhtml"><div class="ttname"><a href="structarmnn_deserializer_1_1_binding_point_info.xhtml">armnnDeserializer::BindingPointInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_deserializer_8hpp_source.xhtml#l00018">IDeserializer.hpp:18</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a8282dddf88e0deb3c414235e20a6cb2c"><div class="ttname"><a href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">InferenceModel::GetOutputSize</a></div><div class="ttdeci">unsigned int GetOutputSize(unsigned int outputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00582">InferenceModel.hpp:582</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_aad2ac35d4cb83ee4da9fad5fbcb907e0"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">InferenceModelInternal::Params::m_InputBindings</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputBindings</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00092">InferenceModel.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a14be0364a6fc0975d45e84737dfe21bc"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a14be0364a6fc0975d45e84737dfe21bc">armnnUtils::Strip</a></div><div class="ttdeci">std::string Strip(const std::string &amp;originalString, const std::string &amp;characterSet)</div><div class="ttdoc">Remove any preceding and trailing character specified in the characterSet. </div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_8cpp_source.xhtml#l00064">ModelAccuracyChecker.cpp:64</a></div></div>
<div class="ttc" id="struct_normalization_parameters_xhtml"><div class="ttname"><a href="struct_normalization_parameters.xhtml">NormalizationParameters</a></div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00019">ImageTensorGenerator.hpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00035">Types.hpp:35</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ad5310a199d4969927169ed084b1f6c28"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ad5310a199d4969927169ed084b1f6c28">armnnUtils::MakeInputTensors</a></div><div class="ttdeci">armnn::InputTensors MakeInputTensors(const std::vector&lt; armnn::BindingPointInfo &gt; &amp;inputBindings, const std::vector&lt; TContainer &gt; &amp;inputDataContainers)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_i_o_utils_8hpp_source.xhtml#l00017">TensorIOUtils.hpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a158a68b143d2564fa1ca047646cf4185"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a158a68b143d2564fa1ca047646cf4185">armnnUtils::SplitBy</a></div><div class="ttdeci">std::vector&lt; std::string &gt; SplitBy(const std::string &amp;originalString, const std::string &amp;delimiter, bool includeEmptyToken)</div><div class="ttdoc">Split a string into tokens by a delimiter. </div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_8cpp_source.xhtml#l00040">ModelAccuracyChecker.cpp:40</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01680">Network.cpp:1680</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_abeacb4ed1ca9256ee0e8aea73185a0cc"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">InferenceModelInternal::Params::m_OutputBindings</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputBindings</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00094">InferenceModel.hpp:94</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2d54e6252c1c9a0e29f7706ba03b2b74"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">InferenceModelInternal::Params::m_ComputeDevices</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; m_ComputeDevices</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00095">InferenceModel.hpp:95</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00029">Types.hpp:29</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00242">INetwork.hpp:242</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf15f9b51e289cd234206cc5112f0346"><div class="ttname"><a href="namespacearmnn.xhtml#adf15f9b51e289cd234206cc5112f0346">armnn::ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a></div><div class="ttdeci">ARMNN_NO_DEPRECATE_WARN_BEGIN struct ARMNN_DEPRECATED_MSG_REMOVAL_DATE(&quot;ResizeBilinearQueueDescriptor is deprecated use ResizeQueueDescriptor instead&quot;, &quot;22.08&quot;) ResizeBilinearQueueDescriptor</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00346">WorkloadData.hpp:346</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_ac1e8e68c74e5d1c8fd19a91a68de3cb7"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#ac1e8e68c74e5d1c8fd19a91a68de3cb7">PrepareImageTensor&lt; int &gt;</a></div><div class="ttdeci">std::vector&lt; int &gt; PrepareImageTensor&lt; int &gt;(const std::string &amp;imagePath, unsigned int newWidth, unsigned int newHeight, const NormalizationParameters &amp;normParams, unsigned int batchSize, const armnn::DataLayout &amp;outputLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00128">ImageTensorGenerator.hpp:128</a></div></div>
<div class="ttc" id="_model_accuracy_tool-_armnn_8cpp_xhtml_af41b1e4ed41e41c17cf6b7ee6f7d359e"><div class="ttname"><a href="_model_accuracy_tool-_armnn_8cpp.xhtml#af41b1e4ed41e41c17cf6b7ee6f7d359e">LoadValidationImageFilenamesAndLabels</a></div><div class="ttdeci">map&lt; std::string, std::string &gt; LoadValidationImageFilenamesAndLabels(const string &amp;validationLabelPath, const string &amp;imageDirectoryPath, size_t begIndex=0, size_t endIndex=0, const string &amp;excludelistPath=&quot;&quot;)</div><div class="ttdoc">Load image names and ground-truth labels from the image directory and the ground truth label file...</div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00411">ModelAccuracyTool-Armnn.cpp:411</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ad4efd5a7fa660df5246466d83517220d"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ad4efd5a7fa660df5246466d83517220d">armnnUtils::MakeOutputTensors</a></div><div class="ttdeci">armnn::OutputTensors MakeOutputTensors(const std::vector&lt; armnn::BindingPointInfo &gt; &amp;outputBindings, std::vector&lt; TContainer &gt; &amp;outputDataContainers)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_i_o_utils_8hpp_source.xhtml#l00056">TensorIOUtils.hpp:56</a></div></div>
<div class="ttc" id="_model_accuracy_tool-_armnn_8cpp_xhtml_a0ddf1224851353fc92bfbff6f499fa97"><div class="ttname"><a href="_model_accuracy_tool-_armnn_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a></div><div class="ttdeci">int main(int argc, char *argv[])</div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00049">ModelAccuracyTool-Armnn.cpp:49</a></div></div>
<div class="ttc" id="_t_container_8hpp_xhtml"><div class="ttname"><a href="_t_container_8hpp.xhtml">TContainer.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_model_accuracy_checker_xhtml"><div class="ttname"><a href="classarmnn_utils_1_1_model_accuracy_checker.xhtml">armnnUtils::ModelAccuracyChecker</a></div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_8hpp_source.xhtml#l00045">ModelAccuracyChecker.hpp:45</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<div class="ttc" id="_i_deserializer_8hpp_xhtml"><div class="ttname"><a href="_i_deserializer_8hpp.xhtml">IDeserializer.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml">armnn::test</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00024">InferenceTest.cpp:24</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a></div></div>
<div class="ttc" id="structarmnn_deserializer_1_1_binding_point_info_xhtml_aa308d10e76e29f09e44a933a2d091a79"><div class="ttname"><a href="structarmnn_deserializer_1_1_binding_point_info.xhtml#aa308d10e76e29f09e44a933a2d091a79">armnnDeserializer::BindingPointInfo::m_TensorInfo</a></div><div class="ttdeci">armnn::TensorInfo m_TensorInfo</div><div class="ttdef"><b>Definition:</b> <a href="_i_deserializer_8hpp_source.xhtml#l00021">IDeserializer.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ac7bd4ea667375c07718086368507ed44"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a></div><div class="ttdeci">mapbox::util::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt;, std::vector&lt; int8_t &gt; &gt; TContainer</div><div class="ttdef"><b>Definition:</b> <a href="_t_container_8hpp_source.xhtml#l00018">TContainer.hpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a8a678fb3a8864e31aeb77f857ae6fc43"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">armnn::test::ValidateDirectory</a></div><div class="ttdeci">bool ValidateDirectory(std::string &amp;dir)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00084">InferenceTest.cpp:84</a></div></div>
<div class="ttc" id="_model_accuracy_tool-_armnn_8cpp_xhtml_a0860c525c02a295d28f4fe0a0c0747c6"><div class="ttname"><a href="_model_accuracy_tool-_armnn_8cpp.xhtml#a0860c525c02a295d28f4fe0a0c0747c6">LoadModelOutputLabels</a></div><div class="ttdeci">std::vector&lt; armnnUtils::LabelCategoryNames &gt; LoadModelOutputLabels(const std::string &amp;modelOutputLabelsPath)</div><div class="ttdoc">Load model output labels from file. </div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00492">ModelAccuracyTool-Armnn.cpp:492</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a4fa312cf0d60fbd3988a7c76ab8e2980"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">InferenceModelInternal::Params::m_ModelPath</a></div><div class="ttdeci">std::string m_ModelPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00091">InferenceModel.hpp:91</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a6bf2f586c403977d31c7d32d371918cf"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">InferenceModelInternal::Params::m_IsModelBinary</a></div><div class="ttdeci">bool m_IsModelBinary</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00098">InferenceModel.hpp:98</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_a7599848540a5f43e977119c054b3563e"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#a7599848540a5f43e977119c054b3563e">SupportedFrontend</a></div><div class="ttdeci">SupportedFrontend</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00026">ImageTensorGenerator.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="classarmnn_deserializer_1_1_i_deserializer_xhtml"><div class="ttname"><a href="classarmnn_deserializer_1_1_i_deserializer.xhtml">armnnDeserializer::IDeserializer</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_deserializer_8hpp_source.xhtml#l00027">IDeserializer.hpp:27</a></div></div>
<div class="ttc" id="structarmnn_deserializer_1_1_binding_point_info_xhtml_a663b3104ec65e4e08b5e37fb42942087"><div class="ttname"><a href="structarmnn_deserializer_1_1_binding_point_info.xhtml#a663b3104ec65e4e08b5e37fb42942087">armnnDeserializer::BindingPointInfo::m_BindingId</a></div><div class="ttdeci">armnn::LayerBindingId m_BindingId</div><div class="ttdef"><b>Definition:</b> <a href="_i_deserializer_8hpp_source.xhtml#l00020">IDeserializer.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00089">InferenceModel.hpp:89</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a93a3ba385cad27c4774e5fe64c025d3d"><div class="ttname"><a href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3d">armnn::LogSeverity</a></div><div class="ttdeci">LogSeverity</div><div class="ttdef"><b>Definition:</b> <a href="_utils_8hpp_source.xhtml#l00014">Utils.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ab175d8bf2482d5a39c2331d1f0ddcece"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ab175d8bf2482d5a39c2331d1f0ddcece">armnnUtils::LabelCategoryNames</a></div><div class="ttdeci">std::vector&lt; std::string &gt; LabelCategoryNames</div><div class="ttdef"><b>Definition:</b> <a href="_model_accuracy_checker_8hpp_source.xhtml#l00025">ModelAccuracyChecker.hpp:25</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_affacfe95f011fce3b897b2745880f82a"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#affacfe95f011fce3b897b2745880f82a">PrepareImageTensor&lt; float &gt;</a></div><div class="ttdeci">std::vector&lt; float &gt; PrepareImageTensor&lt; float &gt;(const std::string &amp;imagePath, unsigned int newWidth, unsigned int newHeight, const NormalizationParameters &amp;normParams, unsigned int batchSize, const armnn::DataLayout &amp;outputLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00091">ImageTensorGenerator.hpp:91</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::LayerType::Debug</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_6ace9d3935bcb28cfb421db2ada147b2.xhtml">ModelAccuracyTool-Armnn</a></li><li class="navelem"><a class="el" href="_model_accuracy_tool-_armnn_8cpp.xhtml">ModelAccuracyTool-Armnn.cpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:00 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
