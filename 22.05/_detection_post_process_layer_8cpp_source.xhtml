<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/layers/DetectionPostProcessLayer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_detection_post_process_layer_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DetectionPostProcessLayer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_detection_post_process_layer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_detection_post_process_layer_8hpp.xhtml">DetectionPostProcessLayer.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_layer_clone_base_8hpp.xhtml">LayerCloneBase.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_utils_8hpp.xhtml">armnn/TypesUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_workload_data_8hpp.xhtml">armnn/backends/WorkloadData.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_workload_factory_8hpp.xhtml">armnn/backends/WorkloadFactory.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="classarmnn_1_1_detection_post_process_layer.xhtml#a8270bf304cb3fa6af15c99562892b1ff">   18</a></span>&#160;<a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a8270bf304cb3fa6af15c99562892b1ff">DetectionPostProcessLayer::DetectionPostProcessLayer</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a>&amp; param, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    : <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml">LayerWithParameters</a>(2, 4, <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>::<a class="code" href="namespacearmnn.xhtml#ae76ce23fa9fc18e56448d52b37dd3f32">DetectionPostProcess</a>, param, name)</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;}</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="classarmnn_1_1_detection_post_process_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">   23</a></span>&#160;std::unique_ptr&lt;IWorkload&gt; <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">DetectionPostProcessLayer::CreateWorkload</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; factory)<span class="keyword"> const</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">DetectionPostProcessQueueDescriptor</a> descriptor;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml#aeb542471c225031a9922db3433f40b56">m_Anchors</a> = <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">m_Anchors</a>.get();</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#af7f0460d32511de0da525f1817d13e8c">SetAdditionalInfo</a>(descriptor);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">return</span> factory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">LayerType::DetectionPostProcess</a>, descriptor, <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#a30a858b2b26d651a066537e499fbf40d">PrepInfoAndDesc</a>(descriptor));</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classarmnn_1_1_detection_post_process_layer.xhtml#a8d3b0c5e823f04841d74a2647e6a5246">   32</a></span>&#160;<a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml">DetectionPostProcessLayer</a>* <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a8d3b0c5e823f04841d74a2647e6a5246">DetectionPostProcessLayer::Clone</a>(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph)<span class="keyword"> const</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">auto</span> layer = CloneBase&lt;DetectionPostProcessLayer&gt;(graph, <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#ad32ac22bc72e28dfd6b466d143c8e262">m_Param</a>, <a class="code" href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a>());</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">m_Anchors</a> = <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">m_Anchors</a> ? <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">m_Anchors</a> : <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> std::move(layer);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classarmnn_1_1_detection_post_process_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">   39</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">DetectionPostProcessLayer::ValidateTensorShapesFromInputs</a>()</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#a0607e36e88f38c34c71c663164b76776">VerifyLayerConnections</a>(2, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>());</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; outputShape = <a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#a448afc716fda85394df1e8e5b7d530e8">VerifyShapeInferenceType</a>(outputShape, <a class="code" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a>);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">// on this level constant data should not be released.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">m_Anchors</a> != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;DetectionPostProcessLayer: Anchors data should not be null.&quot;</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<a class="code" href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">GetNumOutputSlots</a>() == 4, <span class="stringliteral">&quot;DetectionPostProcessLayer: The layer should return 4 outputs.&quot;</span>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> detectedBoxes = <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#ad32ac22bc72e28dfd6b466d143c8e262">m_Param</a>.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">m_MaxDetections</a> * <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#ad32ac22bc72e28dfd6b466d143c8e262">m_Param</a>.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">m_MaxClassesPerDetection</a>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inferredDetectionBoxes = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({ 1, detectedBoxes, 4 });</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inferredDetectionScores = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({ 1, detectedBoxes });</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inferredNumberDetections = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({ 1 });</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#aeb2d638cc0e02c10075e015100996f2d">ValidateAndCopyShape</a>(outputShape, inferredDetectionBoxes, <a class="code" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a>, <span class="stringliteral">&quot;DetectionPostProcessLayer&quot;</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#aeb2d638cc0e02c10075e015100996f2d">ValidateAndCopyShape</a>(<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(1).<a class="code" href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">GetTensorInfo</a>().GetShape(),</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                         inferredDetectionScores,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                         <a class="code" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a>,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                         <span class="stringliteral">&quot;DetectionPostProcessLayer&quot;</span>, 1);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#aeb2d638cc0e02c10075e015100996f2d">ValidateAndCopyShape</a>(<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(2).<a class="code" href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">GetTensorInfo</a>().GetShape(),</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                         inferredDetectionScores,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                         <a class="code" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a>,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                         <span class="stringliteral">&quot;DetectionPostProcessLayer&quot;</span>, 2);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#aeb2d638cc0e02c10075e015100996f2d">ValidateAndCopyShape</a>(<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(3).<a class="code" href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">GetTensorInfo</a>().GetShape(),</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                         inferredNumberDetections,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                         <a class="code" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a>,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                         <span class="stringliteral">&quot;DetectionPostProcessLayer&quot;</span>, 3);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classarmnn_1_1_detection_post_process_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">   76</a></span>&#160;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#af978f897fb7e115a901cb7ed95f8e532">Layer::ConstantTensors</a> <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">DetectionPostProcessLayer::GetConstantTensorsByRef</a>()</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// For API stability DO NOT ALTER order and add new members to the end of vector</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> { <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">m_Anchors</a> };</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classarmnn_1_1_detection_post_process_layer.xhtml#a5c0289829d87ee65f7bba2a8c3839370">   83</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a5c0289829d87ee65f7bba2a8c3839370">DetectionPostProcessLayer::Accept</a>(ILayerVisitor&amp; visitor)<span class="keyword"> const</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="classarmnn_1_1_managed_const_tensor_handle.xhtml">ManagedConstTensorHandle</a> managedAnchors(<a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">m_Anchors</a>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> anchorTensor(managedAnchors.<a class="code" href="classarmnn_1_1_managed_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>(), managedAnchors.<a class="code" href="classarmnn_1_1_managed_const_tensor_handle.xhtml#a85e02725184184331cc2e3b00642be47">Map</a>());</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    visitor.VisitDetectionPostProcessLayer(<span class="keyword">this</span>, <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">GetParameters</a>(), anchorTensor, <a class="code" href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a>());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">m_Anchors</a>-&gt;Unmap();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classarmnn_1_1_detection_post_process_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">   92</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">DetectionPostProcessLayer::ExecuteStrategy</a>(<a class="code" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a>&amp; strategy)<span class="keyword"> const</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="classarmnn_1_1_managed_const_tensor_handle.xhtml">ManagedConstTensorHandle</a> managedAnchors(<a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">m_Anchors</a>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    std::vector&lt;armnn::ConstTensor&gt; constTensors { {managedAnchors.<a class="code" href="classarmnn_1_1_managed_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>(), managedAnchors.<a class="code" href="classarmnn_1_1_managed_const_tensor_handle.xhtml#a85e02725184184331cc2e3b00642be47">Map</a>()} };</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    strategy.<a class="code" href="classarmnn_1_1_i_strategy.xhtml#aad5bb4d8050fd428ff03ae6d81e3014c">ExecuteStrategy</a>(<span class="keyword">this</span>, <a class="code" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">GetParameters</a>(), constTensors, <a class="code" href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a>());</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_layer_with_parameters_xhtml_ad32ac22bc72e28dfd6b466d143c8e262"><div class="ttname"><a href="classarmnn_1_1_layer_with_parameters.xhtml#ad32ac22bc72e28dfd6b466d143c8e262">armnn::LayerWithParameters&lt; DetectionPostProcessDescriptor &gt;::m_Param</a></div><div class="ttdeci">DetectionPostProcessDescriptor m_Param</div><div class="ttdoc">The parameters for the layer (not including tensor-valued weights etc.). </div><div class="ttdef"><b>Definition:</b> <a href="_layer_with_parameters_8hpp_source.xhtml#l00051">LayerWithParameters.hpp:51</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">armnn::DetectionPostProcessQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00261">WorkloadData.hpp:261</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00022">WorkloadFactory.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml_adfa912d0c4c6c00f1af2cbfa799572b7"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">armnn::DetectionPostProcessLayer::CreateWorkload</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateWorkload(const IWorkloadFactory &amp;factory) const override</div><div class="ttdoc">Makes a workload for the DetectionPostProcess type. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8cpp_source.xhtml#l00023">DetectionPostProcessLayer.cpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_strategy_xhtml_aad5bb4d8050fd428ff03ae6d81e3014c"><div class="ttname"><a href="classarmnn_1_1_i_strategy.xhtml#aad5bb4d8050fd428ff03ae6d81e3014c">armnn::IStrategy::ExecuteStrategy</a></div><div class="ttdeci">virtual void ExecuteStrategy(const armnn::IConnectableLayer *layer, const armnn::BaseDescriptor &amp;descriptor, const std::vector&lt; armnn::ConstTensor &gt; &amp;constants, const char *name, const armnn::LayerBindingId id=0)=0</div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml_a8270bf304cb3fa6af15c99562892b1ff"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml#a8270bf304cb3fa6af15c99562892b1ff">armnn::DetectionPostProcessLayer::DetectionPostProcessLayer</a></div><div class="ttdeci">DetectionPostProcessLayer(const DetectionPostProcessDescriptor &amp;param, const char *name)</div><div class="ttdoc">Constructor to create a DetectionPostProcessLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8cpp_source.xhtml#l00018">DetectionPostProcessLayer.cpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml_a5c0289829d87ee65f7bba2a8c3839370"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml#a5c0289829d87ee65f7bba2a8c3839370">armnn::DetectionPostProcessLayer::Accept</a></div><div class="ttdeci">ARMNN_NO_DEPRECATE_WARN_BEGIN void Accept(ILayerVisitor &amp;visitor) const override</div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8cpp_source.xhtml#l00083">DetectionPostProcessLayer.cpp:83</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml_aa8678fecd6d84054895c67b8cf075daf"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">armnn::DetectionPostProcessLayer::ExecuteStrategy</a></div><div class="ttdeci">ARMNN_NO_DEPRECATE_WARN_END void ExecuteStrategy(IStrategy &amp;strategy) const override</div><div class="ttdoc">Apply a visitor to this layer. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8cpp_source.xhtml#l00092">DetectionPostProcessLayer.cpp:92</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_workload_factory_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_workload_factory_8hpp.xhtml">WorkloadFactory.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml">armnn::DetectionPostProcessLayer</a></div><div class="ttdoc">This layer represents a detection postprocess operator. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8hpp_source.xhtml#l00016">DetectionPostProcessLayer.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a448afc716fda85394df1e8e5b7d530e8"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a448afc716fda85394df1e8e5b7d530e8">armnn::Layer::VerifyShapeInferenceType</a></div><div class="ttdeci">void VerifyShapeInferenceType(const TensorShape &amp;outputShape, ShapeInferenceMethod shapeInferenceMethod)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00491">Layer.cpp:491</a></div></div>
<div class="ttc" id="classarmnn_1_1_managed_const_tensor_handle_xhtml_a66e8f43a5b42b500871ed96e15419567"><div class="ttname"><a href="classarmnn_1_1_managed_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">armnn::ManagedConstTensorHandle::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00239">TensorHandle.hpp:239</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_with_parameters_xhtml_afa3e8a8f23589b1eaddbe203825bbdcf"><div class="ttname"><a href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">armnn::LayerWithParameters&lt; DetectionPostProcessDescriptor &gt;::GetParameters</a></div><div class="ttdeci">const DetectionPostProcessDescriptor &amp; GetParameters() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_with_parameters_8hpp_source.xhtml#l00018">LayerWithParameters.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a1594bddc87d6477df300317658f566bb"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">armnn::Layer::GetNumOutputSlots</a></div><div class="ttdeci">unsigned int GetNumOutputSlots() const override</div><div class="ttdoc">Returns the number of connectable output slots. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00320">Layer.hpp:320</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aeb2d638cc0e02c10075e015100996f2d"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aeb2d638cc0e02c10075e015100996f2d">armnn::Layer::ValidateAndCopyShape</a></div><div class="ttdeci">void ValidateAndCopyShape(const TensorShape &amp;outputShape, const TensorShape &amp;inferredShape, const ShapeInferenceMethod shapeInferenceMethod, const std::string &amp;layerName, const unsigned int outputSlotIndex=0)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00422">Layer.cpp:422</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a9ae2c9796692ebeafe19a4d3f09c8ea8"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">armnn::DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a></div><div class="ttdeci">uint32_t m_MaxClassesPerDetection</div><div class="ttdoc">Maximum numbers of classes per detection, used in Fast NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00712">Descriptors.hpp:712</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_strategy_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_strategy.xhtml">armnn::IStrategy</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_strategy_8hpp_source.xhtml#l00013">IStrategy.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a0607e36e88f38c34c71c663164b76776"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a0607e36e88f38c34c71c663164b76776">armnn::Layer::VerifyLayerConnections</a></div><div class="ttdeci">void VerifyLayerConnections(unsigned int expectedConnections, const CheckLocation &amp;location) const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00378">Layer.cpp:378</a></div></div>
<div class="ttc" id="_detection_post_process_layer_8hpp_xhtml"><div class="ttname"><a href="_detection_post_process_layer_8hpp.xhtml">DetectionPostProcessLayer.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae72089bcab60ac175557f4241b16a014"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">armnn::DetectionPostProcessDescriptor::m_MaxDetections</a></div><div class="ttdeci">uint32_t m_MaxDetections</div><div class="ttdoc">Maximum numbers of detections. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00710">Descriptors.hpp:710</a></div></div>
<div class="ttc" id="_types_utils_8hpp_xhtml"><div class="ttname"><a href="_types_utils_8hpp.xhtml">TypesUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae76ce23fa9fc18e56448d52b37dd3f32"><div class="ttname"><a href="namespacearmnn.xhtml#ae76ce23fa9fc18e56448d52b37dd3f32">armnn::DetectionPostProcess</a></div><div class="ttdeci">void DetectionPostProcess(const TensorInfo &amp;boxEncodingsInfo, const TensorInfo &amp;scoresInfo, const TensorInfo &amp;anchorsInfo, const TensorInfo &amp;detectionBoxesInfo, const TensorInfo &amp;detectionClassesInfo, const TensorInfo &amp;detectionScoresInfo, const TensorInfo &amp;numDetectionsInfo, const DetectionPostProcessDescriptor &amp;desc, Decoder&lt; float &gt; &amp;boxEncodings, Decoder&lt; float &gt; &amp;scores, Decoder&lt; float &gt; &amp;anchors, float *detectionBoxes, float *detectionClasses, float *detectionScores, float *numDetections)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00140">DetectionPostProcess.cpp:140</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_af978f897fb7e115a901cb7ed95f8e532"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#af978f897fb7e115a901cb7ed95f8e532">armnn::IConnectableLayer::ConstantTensors</a></div><div class="ttdeci">std::vector&lt; std::reference_wrapper&lt; std::shared_ptr&lt; ConstTensorHandle &gt; &gt;&gt; ConstantTensors</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00124">INetwork.hpp:124</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::LayerType::DetectionPostProcess</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">TensorHandle.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml_abe659a5afa7523f5dbc04bcba9b31f1a"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">armnn::DetectionPostProcessLayer::GetConstantTensorsByRef</a></div><div class="ttdeci">ConstantTensors GetConstantTensorsByRef() override</div><div class="ttdoc">Retrieve the handles to the constant values stored by the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8cpp_source.xhtml#l00076">DetectionPostProcessLayer.cpp:76</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_af7f0460d32511de0da525f1817d13e8c"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#af7f0460d32511de0da525f1817d13e8c">armnn::Layer::SetAdditionalInfo</a></div><div class="ttdeci">void SetAdditionalInfo(QueueDescriptor &amp;descriptor) const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00274">Layer.cpp:274</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml_a8c8f543d7e9729362c266d12ec169966"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">armnn::DetectionPostProcessLayer::ValidateTensorShapesFromInputs</a></div><div class="ttdeci">void ValidateTensorShapesFromInputs() override</div><div class="ttdoc">Check if the input tensor shape(s) will lead to a valid configuration of DetectionPostProcessLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8cpp_source.xhtml#l00039">DetectionPostProcessLayer.cpp:39</a></div></div>
<div class="ttc" id="classarmnn_1_1_managed_const_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_managed_const_tensor_handle.xhtml">armnn::ManagedConstTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00187">TensorHandle.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_with_parameters_xhtml_a30a858b2b26d651a066537e499fbf40d"><div class="ttname"><a href="classarmnn_1_1_layer_with_parameters.xhtml#a30a858b2b26d651a066537e499fbf40d">armnn::LayerWithParameters&lt; DetectionPostProcessDescriptor &gt;::PrepInfoAndDesc</a></div><div class="ttdeci">WorkloadInfo PrepInfoAndDesc(QueueDescriptor &amp;descriptor) const</div><div class="ttdoc">Helper function to reduce duplication in *LayerCreateWorkload. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_with_parameters_8hpp_source.xhtml#l00043">LayerWithParameters.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a0e36688a43c35668d8db5257274c68fe"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">armnn::Layer::GetOutputSlot</a></div><div class="ttdeci">const OutputSlot &amp; GetOutputSlot(unsigned int index=0) const override</div><div class="ttdoc">Get the const output slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00324">Layer.hpp:324</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a7ddf0cf6f620d59c10e63495ace795d0"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">armnn::Layer::GetName</a></div><div class="ttdeci">const char * GetName() const override</div><div class="ttdoc">Returns the name of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00317">Layer.hpp:317</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_queue_descriptor_xhtml_aeb542471c225031a9922db3433f40b56"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml#aeb542471c225031a9922db3433f40b56">armnn::DetectionPostProcessQueueDescriptor::m_Anchors</a></div><div class="ttdeci">const ConstTensorHandle * m_Anchors</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00268">WorkloadData.hpp:268</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_with_parameters_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer_with_parameters.xhtml">armnn::LayerWithParameters</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_with_parameters_8hpp_source.xhtml#l00013">LayerWithParameters.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml_a8d3b0c5e823f04841d74a2647e6a5246"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml#a8d3b0c5e823f04841d74a2647e6a5246">armnn::DetectionPostProcessLayer::Clone</a></div><div class="ttdeci">DetectionPostProcessLayer * Clone(Graph &amp;graph) const override</div><div class="ttdoc">Creates a dynamically-allocated copy of this layer. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8cpp_source.xhtml#l00032">DetectionPostProcessLayer.cpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_managed_const_tensor_handle_xhtml_a85e02725184184331cc2e3b00642be47"><div class="ttname"><a href="classarmnn_1_1_managed_const_tensor_handle.xhtml#a85e02725184184331cc2e3b00642be47">armnn::ManagedConstTensorHandle::Map</a></div><div class="ttdeci">const void * Map(bool blocking=true)</div><div class="ttdoc">RAII Managed resource Unmaps MemoryArea once out of scope. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00196">TensorHandle.hpp:196</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00678">Descriptors.hpp:678</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af7ec4c0fa4375a45a70e4e31f3d8af47"><div class="ttname"><a href="namespacearmnn.xhtml#af7ec4c0fa4375a45a70e4e31f3d8af47">armnn::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo(const ITensorHandle *tensorHandle)</div><div class="ttdoc">float32 helpers </div><div class="ttdef"><b>Definition:</b> <a href="_ref_workload_utils_8hpp_source.xhtml#l00026">RefWorkloadUtils.hpp:26</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml_a6dc8f4e1c0a2109b2a8412251c2cf7b0"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">armnn::DetectionPostProcessLayer::m_Anchors</a></div><div class="ttdeci">std::shared_ptr&lt; ConstTensorHandle &gt; m_Anchors</div><div class="ttdoc">A unique pointer to store Anchor values. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8hpp_source.xhtml#l00020">DetectionPostProcessLayer.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a13060ebb89d2c21a7a5d897e99cccf72"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">armnn::IWorkloadFactory::CreateWorkload</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateWorkload(LayerType type, const QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01559">WorkloadFactory.cpp:1559</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ada2ad7d1caeeb4ef6195c8925fad6a65"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">armnn::OutputSlot::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00092">Layer.cpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_afe508761cc8318b15329ba4acf7fbfec"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">armnn::Layer::m_ShapeInferenceMethod</a></div><div class="ttdeci">ShapeInferenceMethod m_ShapeInferenceMethod</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00421">Layer.hpp:421</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_workload_data_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_workload_data_8hpp.xhtml">WorkloadData.hpp</a></div></div>
<div class="ttc" id="_layer_clone_base_8hpp_xhtml"><div class="ttname"><a href="_layer_clone_base_8hpp.xhtml">LayerCloneBase.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">armnn::LayerType</a></div><div class="ttdeci">LayerType</div><div class="ttdoc">When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below...</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00467">Types.hpp:467</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9da6642ce0fd5a8c83524f1b621275be.xhtml">layers</a></li><li class="navelem"><a class="el" href="_detection_post_process_layer_8cpp.xhtml">DetectionPostProcessLayer.cpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:26:32 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
