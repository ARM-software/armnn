<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: SocketProfilingConnection Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1profiling_1_1_socket_profiling_connection-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SocketProfilingConnection Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_socket_profiling_connection_8hpp_source.xhtml">SocketProfilingConnection.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for SocketProfilingConnection:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1profiling_1_1_socket_profiling_connection.png" usemap="#SocketProfilingConnection_map" alt=""/>
  <map id="SocketProfilingConnection_map" name="SocketProfilingConnection_map">
<area href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml" alt="IProfilingConnection" shape="rect" coords="0,0,161,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aba0a393ed98758e76bd30d2862e0740e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml#aba0a393ed98758e76bd30d2862e0740e">SocketProfilingConnection</a> ()</td></tr>
<tr class="separator:aba0a393ed98758e76bd30d2862e0740e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaca9d54975c036540e7e5299a0c6df7a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml#aaca9d54975c036540e7e5299a0c6df7a">IsOpen</a> () const final</td></tr>
<tr class="separator:aaca9d54975c036540e7e5299a0c6df7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29dc6798f18d73abd4ba8e4910f6831f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml#a29dc6798f18d73abd4ba8e4910f6831f">Close</a> () final</td></tr>
<tr class="separator:a29dc6798f18d73abd4ba8e4910f6831f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a096549d574d3fc51e6948efd24988f3e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml#a096549d574d3fc51e6948efd24988f3e">WritePacket</a> (const unsigned char *buffer, uint32_t length) final</td></tr>
<tr class="separator:a096549d574d3fc51e6948efd24988f3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6ab5855149849240fd6e33ae3c59664"><td class="memItemLeft" align="right" valign="top">arm::pipe::Packet&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml#ac6ab5855149849240fd6e33ae3c59664">ReadPacket</a> (uint32_t timeout) final</td></tr>
<tr class="separator:ac6ab5855149849240fd6e33ae3c59664"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1profiling_1_1_i_profiling_connection"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1profiling_1_1_i_profiling_connection')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml">IProfilingConnection</a></td></tr>
<tr class="memitem:a8c5a75b8ee005a7aa9391f3991480d74 inherit pub_methods_classarmnn_1_1profiling_1_1_i_profiling_connection"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#a8c5a75b8ee005a7aa9391f3991480d74">~IProfilingConnection</a> ()</td></tr>
<tr class="separator:a8c5a75b8ee005a7aa9391f3991480d74 inherit pub_methods_classarmnn_1_1profiling_1_1_i_profiling_connection"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_socket_profiling_connection_8hpp_source.xhtml#l00018">18</a> of file <a class="el" href="_socket_profiling_connection_8hpp_source.xhtml">SocketProfilingConnection.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aba0a393ed98758e76bd30d2862e0740e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba0a393ed98758e76bd30d2862e0740e">&#9670;&nbsp;</a></span>SocketProfilingConnection()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml">SocketProfilingConnection</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml">SocketProfilingConnection.cpp</a>.</p>

<p class="reference">References <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml#l00068">SocketProfilingConnection::Close()</a>.</p>
<div class="fragment"><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    arm::pipe::Initialize();</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    memset(m_Socket, 0, <span class="keyword">sizeof</span>(m_Socket));</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="comment">// Note: we&#39;re using Linux specific SOCK_CLOEXEC flag.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    m_Socket[0].fd = socket(PF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordflow">if</span> (m_Socket[0].fd == -1)</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keywordflow">throw</span> arm::pipe::SocketConnectionException(</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            std::string(<span class="stringliteral">&quot;SocketProfilingConnection: Socket construction failed: &quot;</span>)  + strerror(errno),</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            m_Socket[0].fd,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            errno);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="comment">// Connect to the named unix domain socket.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    sockaddr_un server{};</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    memset(&amp;server, 0, <span class="keyword">sizeof</span>(sockaddr_un));</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// As m_GatorNamespace begins with a null character we need to ignore that when getting its length.</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    memcpy(server.sun_path, m_GatorNamespace, strlen(m_GatorNamespace + 1) + 1);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    server.sun_family = AF_UNIX;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">if</span> (0 != connect(m_Socket[0].fd, reinterpret_cast&lt;const sockaddr*&gt;(&amp;server), <span class="keyword">sizeof</span>(sockaddr_un)))</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <a class="code" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml#a29dc6798f18d73abd4ba8e4910f6831f">Close</a>();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">throw</span> arm::pipe::SocketConnectionException(</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            std::string(<span class="stringliteral">&quot;SocketProfilingConnection: Cannot connect to stream socket: &quot;</span>)  + strerror(errno),</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            m_Socket[0].fd,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            errno);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Our socket will only be interested in polling reads.</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    m_Socket[0].events = POLLIN;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Make the socket non blocking.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span> (!arm::pipe::SetNonBlocking(m_Socket[0].fd))</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml#a29dc6798f18d73abd4ba8e4910f6831f">Close</a>();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">throw</span> arm::pipe::SocketConnectionException(</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            std::string(<span class="stringliteral">&quot;SocketProfilingConnection: Failed to set socket as non blocking: &quot;</span>)  + strerror(errno),</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            m_Socket[0].fd,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            errno);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_socket_profiling_connection_xhtml_a29dc6798f18d73abd4ba8e4910f6831f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml#a29dc6798f18d73abd4ba8e4910f6831f">armnn::profiling::SocketProfilingConnection::Close</a></div><div class="ttdeci">void Close() final</div><div class="ttdef"><b>Definition:</b> <a href="_socket_profiling_connection_8cpp_source.xhtml#l00068">SocketProfilingConnection.cpp:68</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a29dc6798f18d73abd4ba8e4910f6831f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29dc6798f18d73abd4ba8e4910f6831f">&#9670;&nbsp;</a></span>Close()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Close </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">final</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#aacb6d0e5e6d570cdc2b0da14c3921ff0">IProfilingConnection</a>.</p>

<p class="definition">Definition at line <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml#l00068">68</a> of file <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml">SocketProfilingConnection.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml#l00091">SocketProfilingConnection::ReadPacket()</a>, and <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml#l00020">SocketProfilingConnection::SocketProfilingConnection()</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">if</span> (arm::pipe::Close(m_Socket[0].fd) != 0)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">throw</span> arm::pipe::SocketConnectionException(</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            std::string(<span class="stringliteral">&quot;SocketProfilingConnection: Cannot close stream socket: &quot;</span>)  + strerror(errno),</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            m_Socket[0].fd,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            errno);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    memset(m_Socket, 0, <span class="keyword">sizeof</span>(m_Socket));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaca9d54975c036540e7e5299a0c6df7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaca9d54975c036540e7e5299a0c6df7a">&#9670;&nbsp;</a></span>IsOpen()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsOpen </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">final</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#a8a3511046982c64efa3e3833d749e5ef">IProfilingConnection</a>.</p>

<p class="definition">Definition at line <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml#l00063">63</a> of file <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml">SocketProfilingConnection.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> m_Socket[0].fd &gt; 0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac6ab5855149849240fd6e33ae3c59664"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6ab5855149849240fd6e33ae3c59664">&#9670;&nbsp;</a></span>ReadPacket()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">arm::pipe::Packet ReadPacket </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>timeout</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">final</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#a5247de645666d82d97c2b047835404ee">IProfilingConnection</a>.</p>

<p class="definition">Definition at line <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml#l00091">91</a> of file <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml">SocketProfilingConnection.cpp</a>.</p>

<p class="reference">References <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml#l00068">SocketProfilingConnection::Close()</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// Is there currently at least a header worth of data waiting to be read?</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordtype">int</span> bytes_available = 0;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    arm::pipe::Ioctl(m_Socket[0].fd, FIONREAD, &amp;bytes_available);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">if</span> (bytes_available &gt;= 8)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="comment">// Yes there is. Read it:</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">return</span> ReceivePacket();</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// Poll for data on the socket or until timeout occurs</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">int</span> pollResult = arm::pipe::Poll(&amp;m_Socket[0], 1, static_cast&lt;int&gt;(timeout));</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">switch</span> (pollResult)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">case</span> -1: <span class="comment">// Error</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">throw</span> arm::pipe::SocketConnectionException(</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            std::string(<span class="stringliteral">&quot;SocketProfilingConnection: Error occured while reading from socket: &quot;</span>) + strerror(errno),</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            m_Socket[0].fd,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            errno);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">case</span> 0: <span class="comment">// Timeout</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">throw</span> arm::pipe::TimeoutException(<span class="stringliteral">&quot;SocketProfilingConnection: Timeout while reading from socket&quot;</span>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">default</span>: <span class="comment">// Normal poll return but it could still contain an error signal</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="comment">// Check if the socket reported an error</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">if</span> (m_Socket[0].revents &amp; (POLLNVAL | POLLERR | POLLHUP))</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">if</span> (m_Socket[0].revents == POLLNVAL)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="comment">// This is an unrecoverable error.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <a class="code" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml#a29dc6798f18d73abd4ba8e4910f6831f">Close</a>();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordflow">throw</span> arm::pipe::SocketConnectionException(</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    std::string(<span class="stringliteral">&quot;SocketProfilingConnection: Error occured while polling receiving socket: POLLNVAL.&quot;</span>),</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    m_Socket[0].fd);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">if</span> (m_Socket[0].revents == POLLERR)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keywordflow">throw</span> arm::pipe::SocketConnectionException(</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    std::string(</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        <span class="stringliteral">&quot;SocketProfilingConnection: Error occured while polling receiving socket: POLLERR: &quot;</span>)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                        + strerror(errno),</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    m_Socket[0].fd,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    errno);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">if</span> (m_Socket[0].revents == POLLHUP)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="comment">// This is an unrecoverable error.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <a class="code" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml#a29dc6798f18d73abd4ba8e4910f6831f">Close</a>();</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">throw</span> arm::pipe::SocketConnectionException(</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    std::string(<span class="stringliteral">&quot;SocketProfilingConnection: Connection closed by remote client: POLLHUP.&quot;</span>),</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    m_Socket[0].fd);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="comment">// Check if there is data to read</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">if</span> (!(m_Socket[0].revents &amp; (POLLIN)))</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="comment">// This is a corner case. The socket as been woken up but not with any data.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="comment">// We&#39;ll throw a timeout exception to loop around again.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_timeout_exception.xhtml">armnn::TimeoutException</a>(</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="stringliteral">&quot;SocketProfilingConnection: File descriptor was polled but no data was available to receive.&quot;</span>);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">return</span> ReceivePacket();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_timeout_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_timeout_exception.xhtml">armnn::TimeoutException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00135">Exceptions.hpp:135</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_socket_profiling_connection_xhtml_a29dc6798f18d73abd4ba8e4910f6831f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml#a29dc6798f18d73abd4ba8e4910f6831f">armnn::profiling::SocketProfilingConnection::Close</a></div><div class="ttdeci">void Close() final</div><div class="ttdef"><b>Definition:</b> <a href="_socket_profiling_connection_8cpp_source.xhtml#l00068">SocketProfilingConnection.cpp:68</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a096549d574d3fc51e6948efd24988f3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a096549d574d3fc51e6948efd24988f3e">&#9670;&nbsp;</a></span>WritePacket()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool WritePacket </td>
          <td>(</td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">final</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#ac78c6bd1a545934a805c88194214b09d">IProfilingConnection</a>.</p>

<p class="definition">Definition at line <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml#l00081">81</a> of file <a class="el" href="_socket_profiling_connection_8cpp_source.xhtml">SocketProfilingConnection.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">if</span> (buffer == <span class="keyword">nullptr</span> || length == 0)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">return</span> arm::pipe::Write(m_Socket[0].fd, buffer, length) != -1;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/profiling/<a class="el" href="_socket_profiling_connection_8hpp_source.xhtml">SocketProfilingConnection.hpp</a></li>
<li>src/profiling/<a class="el" href="_socket_profiling_connection_8cpp_source.xhtml">SocketProfilingConnection.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1profiling.xhtml">profiling</a></li><li class="navelem"><a class="el" href="classarmnn_1_1profiling_1_1_socket_profiling_connection.xhtml">SocketProfilingConnection</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:25 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
