<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnTestUtils/CommonTestUtils.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('armnn_test_utils_2_common_test_utils_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CommonTestUtils.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="armnn_test_utils_2_common_test_utils_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="est_utils_2_test_utils_8hpp.xhtml">TestUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_graph_8hpp.xhtml">Graph.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_subgraph_view_selector_8hpp.xhtml">SubgraphViewSelector.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_registry_8hpp.xhtml">armnn/BackendRegistry.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_8hpp.xhtml">armnn/Types.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_subgraph_view_8hpp.xhtml">armnn/backends/SubgraphView.hpp</a>&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">// Checks that two collections have the exact same contents (in any order)</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">// The given collections do not have to contain duplicates</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">// Cannot use std::sort here because std lists have their own std::list::sort method</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CollectionType&gt;</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a551d3e8e273f6ff0f4fc4b0b56e1895d">   27</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a551d3e8e273f6ff0f4fc4b0b56e1895d">AreEqual</a>(<span class="keyword">const</span> CollectionType&amp; lhs, <span class="keyword">const</span> CollectionType&amp; rhs)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">if</span> (lhs.size() != rhs.size())</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">auto</span> lhs_it = std::find_if(lhs.begin(), lhs.end(), [&amp;rhs](<span class="keyword">auto</span>&amp; item)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">return</span> std::find(rhs.begin(), rhs.end(), item) == rhs.end();</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    });</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> lhs_it == lhs.end();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">// Checks that the given collection contains the specified item</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CollectionType&gt;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a5fa64e793b38cf9074e6fcdb2c9c7293">   44</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a5fa64e793b38cf9074e6fcdb2c9c7293">Contains</a>(<span class="keyword">const</span> CollectionType&amp; collection, <span class="keyword">const</span> <span class="keyword">typename</span> CollectionType::value_type&amp; item)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> std::find(collection.begin(), collection.end(), item) != collection.end();</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">// Checks that the given map contains the specified key</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> MapType&gt;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a34600ef61efcbbf11322f11ce2cfacab">   51</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a5fa64e793b38cf9074e6fcdb2c9c7293">Contains</a>(<span class="keyword">const</span> MapType&amp; map, <span class="keyword">const</span> <span class="keyword">typename</span> MapType::key_type&amp; key)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> map.find(key) != map.end();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">// Utility template for comparing tensor elements</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, <span class="keyword">typename</span> T = armnn::ResolveType&lt;ArmnnType&gt;&gt;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#ae828f1d70436f4ad1e74a5c4ecf96929">   58</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#ae828f1d70436f4ad1e74a5c4ecf96929">Compare</a>(T a, T b, <span class="keywordtype">float</span> tolerance = 0.000001f)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span> (ArmnnType == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a>)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="comment">// NOTE: Boolean is represented as uint8_t (with zero equals</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="comment">// false and everything else equals true), therefore values</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="comment">// need to be casted to bool before comparing them</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">bool</span><span class="keyword">&gt;</span>(a) == static_cast&lt;bool&gt;(b);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// NOTE: All other types can be cast to float and compared with</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// a certain level of tolerance</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> std::fabs(static_cast&lt;float&gt;(a) - static_cast&lt;float&gt;(b)) &lt;= tolerance;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ConvolutionLayer&gt;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#acacca57727df8ccf5c5597e6026da814">   74</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#acacca57727df8ccf5c5597e6026da814">SetWeightAndBias</a>(ConvolutionLayer* layer, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; weightInfo, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; biasInfo)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    layer-&gt;m_Weight = std::make_unique&lt;armnn::ScopedTensorHandle&gt;(weightInfo);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    layer-&gt;m_Bias   = std::make_unique&lt;armnn::ScopedTensorHandle&gt;(biasInfo);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    layer-&gt;m_Weight-&gt;Allocate();</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    layer-&gt;m_Bias-&gt;Allocate();</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a> <a class="code" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a0fb7899a6c5808108263d16f187d2ff3">CreateInputsFrom</a>(<a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* layer,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                                 std::vector&lt;unsigned int&gt; ignoreSlots = {});</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a> <a class="code" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a0fb7899a6c5808108263d16f187d2ff3">CreateInputsFrom</a>(<span class="keyword">const</span> std::vector&lt;armnn::Layer*&gt;&amp; layers,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                                 std::vector&lt;unsigned int&gt; ignoreSlots = {});</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">armnn::SubgraphView::OutputSlots</a> <a class="code" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#aff493fee27236e9ddc581e48c4b931a9">CreateOutputsFrom</a>(<span class="keyword">const</span> std::vector&lt;armnn::Layer*&gt;&amp; layers);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a4684a457c7786484375f06e9ab2d2265">armnn::SubgraphView::SubgraphViewPtr</a> <a class="code" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#abf999283bc03f1bafd01680149ed7e3e">CreateSubgraphViewFrom</a>(<a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a>&amp;&amp; inputs,</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                                            <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">armnn::SubgraphView::OutputSlots</a>&amp;&amp; outputs,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                            <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a74798938fdaeae75c8adfa4a7439e7f9">armnn::SubgraphView::Layers</a>&amp;&amp; layers);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<a class="code" href="namespacearmnn.xhtml#ade0af9dacaa52cafdd701bef2e901c77">armnn::IBackendInternalUniquePtr</a> <a class="code" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a>&amp; backendId);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> <a class="code" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a46d07efd379e728fc3df18a88ec878b0">MakeTensorShape</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batches,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channels,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> layout);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">static</span> std::vector&lt;DataType&gt; GenerateRandomData(<span class="keywordtype">size_t</span> size)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    constexpr <span class="keywordtype">bool</span> isIntegerType = std::is_integral&lt;DataType&gt;::value;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">using</span> Distribution =</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">typename</span> std::conditional&lt;isIntegerType,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            std::uniform_int_distribution&lt;DataType&gt;,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            std::uniform_real_distribution&lt;DataType&gt;&gt;::type;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> lowerLimit = std::numeric_limits&lt;DataType&gt;::min();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> upperLimit = std::numeric_limits&lt;DataType&gt;::max();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">static</span> Distribution distribution(lowerLimit, upperLimit);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">static</span> std::default_random_engine generator;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    std::vector&lt;DataType&gt; randomData(size);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    generate(randomData.begin(), randomData.end(), []() { <span class="keywordflow">return</span> distribution(generator); });</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> randomData;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="ttc" id="est_utils_2_test_utils_8hpp_xhtml"><div class="ttname"><a href="est_utils_2_test_utils_8hpp.xhtml">TestUtils.hpp</a></div></div>
<div class="ttc" id="armnn_test_utils_2_common_test_utils_8hpp_xhtml_a5fa64e793b38cf9074e6fcdb2c9c7293"><div class="ttname"><a href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a5fa64e793b38cf9074e6fcdb2c9c7293">Contains</a></div><div class="ttdeci">bool Contains(const CollectionType &amp;collection, const typename CollectionType::value_type &amp;item)</div><div class="ttdef"><b>Definition:</b> <a href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00044">CommonTestUtils.hpp:44</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00062">Types.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a78293334750ec5279eb9c96d56deaf08"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">armnn::SubgraphView::OutputSlots</a></div><div class="ttdeci">std::vector&lt; OutputSlot * &gt; OutputSlots</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00051">SubgraphView.hpp:51</a></div></div>
<div class="ttc" id="_resolve_type_8hpp_xhtml"><div class="ttname"><a href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="_backend_registry_8hpp_xhtml"><div class="ttname"><a href="_backend_registry_8hpp.xhtml">BackendRegistry.hpp</a></div></div>
<div class="ttc" id="armnn_test_utils_2_common_test_utils_8hpp_xhtml_ae828f1d70436f4ad1e74a5c4ecf96929"><div class="ttname"><a href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#ae828f1d70436f4ad1e74a5c4ecf96929">Compare</a></div><div class="ttdeci">bool Compare(T a, T b, float tolerance=0.000001f)</div><div class="ttdef"><b>Definition:</b> <a href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00058">CommonTestUtils.hpp:58</a></div></div>
<div class="ttc" id="armnn_test_utils_2_common_test_utils_8hpp_xhtml_a0fb7899a6c5808108263d16f187d2ff3"><div class="ttname"><a href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a0fb7899a6c5808108263d16f187d2ff3">CreateInputsFrom</a></div><div class="ttdeci">armnn::SubgraphView::InputSlots CreateInputsFrom(armnn::Layer *layer, std::vector&lt; unsigned int &gt; ignoreSlots={})</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00012">CommonTestUtils.cpp:12</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a4684a457c7786484375f06e9ab2d2265"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a4684a457c7786484375f06e9ab2d2265">armnn::SubgraphView::SubgraphViewPtr</a></div><div class="ttdeci">std::unique_ptr&lt; SubgraphView &gt; SubgraphViewPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00048">SubgraphView.hpp:48</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="armnn_test_utils_2_common_test_utils_8hpp_xhtml_a46d07efd379e728fc3df18a88ec878b0"><div class="ttname"><a href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a46d07efd379e728fc3df18a88ec878b0">MakeTensorShape</a></div><div class="ttdeci">armnn::TensorShape MakeTensorShape(unsigned int batches, unsigned int channels, unsigned int height, unsigned int width, armnn::DataLayout layout)</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00081">CommonTestUtils.cpp:81</a></div></div>
<div class="ttc" id="_graph_8hpp_xhtml"><div class="ttname"><a href="_graph_8hpp.xhtml">Graph.hpp</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml"><div class="ttname"><a href="_types_8hpp.xhtml">Types.hpp</a></div></div>
<div class="ttc" id="armnn_test_utils_2_common_test_utils_8hpp_xhtml_abf999283bc03f1bafd01680149ed7e3e"><div class="ttname"><a href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#abf999283bc03f1bafd01680149ed7e3e">CreateSubgraphViewFrom</a></div><div class="ttdeci">armnn::SubgraphView::SubgraphViewPtr CreateSubgraphViewFrom(armnn::SubgraphView::InputSlots &amp;&amp;inputs, armnn::SubgraphView::OutputSlots &amp;&amp;outputs, armnn::SubgraphView::Layers &amp;&amp;layers)</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00065">CommonTestUtils.cpp:65</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">TensorHandle.hpp</a></div></div>
<div class="ttc" id="armnn_test_utils_2_common_test_utils_8hpp_xhtml_aff493fee27236e9ddc581e48c4b931a9"><div class="ttname"><a href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#aff493fee27236e9ddc581e48c4b931a9">CreateOutputsFrom</a></div><div class="ttdeci">armnn::SubgraphView::OutputSlots CreateOutputsFrom(const std::vector&lt; armnn::Layer *&gt; &amp;layers)</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00052">CommonTestUtils.cpp:52</a></div></div>
<div class="ttc" id="armnn_test_utils_2_common_test_utils_8hpp_xhtml_acacca57727df8ccf5c5597e6026da814"><div class="ttname"><a href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#acacca57727df8ccf5c5597e6026da814">SetWeightAndBias</a></div><div class="ttdeci">void SetWeightAndBias(ConvolutionLayer *layer, const armnn::TensorInfo &amp;weightInfo, const armnn::TensorInfo &amp;biasInfo)</div><div class="ttdef"><b>Definition:</b> <a href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00074">CommonTestUtils.hpp:74</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a5cc65e15002dbc33a5c8a7d6680e9a9d"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a></div><div class="ttdeci">std::vector&lt; InputSlot * &gt; InputSlots</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00049">SubgraphView.hpp:49</a></div></div>
<div class="ttc" id="armnn_test_utils_2_common_test_utils_8hpp_xhtml_a7a4090354279f08b1e27244bab25aa86"><div class="ttname"><a href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a></div><div class="ttdeci">armnn::IBackendInternalUniquePtr CreateBackendObject(const armnn::BackendId &amp;backendId)</div><div class="ttdef"><b>Definition:</b> <a href="_common_test_utils_8cpp_source.xhtml#l00072">CommonTestUtils.cpp:72</a></div></div>
<div class="ttc" id="armnn_test_utils_2_common_test_utils_8hpp_xhtml_a551d3e8e273f6ff0f4fc4b0b56e1895d"><div class="ttname"><a href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a551d3e8e273f6ff0f4fc4b0b56e1895d">AreEqual</a></div><div class="ttdeci">bool AreEqual(const CollectionType &amp;lhs, const CollectionType &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00027">CommonTestUtils.hpp:27</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_subgraph_view_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_subgraph_view_8hpp.xhtml">SubgraphView.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ade0af9dacaa52cafdd701bef2e901c77"><div class="ttname"><a href="namespacearmnn.xhtml#ade0af9dacaa52cafdd701bef2e901c77">armnn::IBackendInternalUniquePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IBackendInternal &gt; IBackendInternalUniquePtr</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00032">BackendRegistry.hpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a74798938fdaeae75c8adfa4a7439e7f9"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a74798938fdaeae75c8adfa4a7439e7f9">armnn::SubgraphView::Layers</a></div><div class="ttdeci">std::list&lt; Layer * &gt; Layers</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00053">SubgraphView.hpp:53</a></div></div>
<div class="ttc" id="_subgraph_view_selector_8hpp_xhtml"><div class="ttname"><a href="_subgraph_view_selector_8hpp.xhtml">SubgraphViewSelector.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00217">Layer.hpp:217</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_f574f3650e467f7ec35d628d20229555.xhtml">armnnTestUtils</a></li><li class="navelem"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml">CommonTestUtils.hpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:27 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
