<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/InstanceNormalizationEndToEndTestImpl.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_instance_normalization_end_to_end_test_impl_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">InstanceNormalizationEndToEndTestImpl.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_instance_normalization_end_to_end_test_impl_8hpp_source.xhtml">InstanceNormalizationEndToEndTestImpl.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_end_to_end_test_impl_8hpp_source.xhtml">EndToEndTestImpl.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_permute_8hpp_source.xhtml">armnnUtils/Permute.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_data_layout_indexed_8hpp_source.xhtml">armnnUtils/DataLayoutIndexed.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_i_network_8hpp_source.xhtml">armnn/INetwork.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_test_utils_2_data_layout_utils_8hpp_source.xhtml">armnnTestUtils/DataLayoutUtils.hpp</a>&gt;</code><br />
<code>#include &lt;TestUtils.hpp&gt;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
</div>
<p><a href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ae0bf53a96bad08ac5218f3c3747e5bed"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#ae0bf53a96bad08ac5218f3c3747e5bed">InstanceNormalizationNhwcEndToEndTest1</a> (const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;defaultBackends)</td></tr>
<tr class="separator:ae0bf53a96bad08ac5218f3c3747e5bed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a120f2896c50cfa77409d16ef6b1628eb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a120f2896c50cfa77409d16ef6b1628eb">InstanceNormalizationNchwEndToEndTest1</a> (const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;defaultBackends)</td></tr>
<tr class="separator:a120f2896c50cfa77409d16ef6b1628eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a891c49c919ac2d170b7aa99e23e8871b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a891c49c919ac2d170b7aa99e23e8871b">InstanceNormalizationNhwcEndToEndTest2</a> (const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;defaultBackends)</td></tr>
<tr class="separator:a891c49c919ac2d170b7aa99e23e8871b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e262db2d488773b8824f73c4f6ab145"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml#a3e262db2d488773b8824f73c4f6ab145">InstanceNormalizationNchwEndToEndTest2</a> (const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;defaultBackends)</td></tr>
<tr class="separator:a3e262db2d488773b8824f73c4f6ab145"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a120f2896c50cfa77409d16ef6b1628eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a120f2896c50cfa77409d16ef6b1628eb">&#9670;&nbsp;</a></span>InstanceNormalizationNchwEndToEndTest1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void InstanceNormalizationNchwEndToEndTest1 </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>defaultBackends</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00168">168</a> of file <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml">InstanceNormalizationEndToEndTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_end_to_end_tests_8cpp_source.xhtml#l00026">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> eps       = 0.0001f;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> beta      = 0.0f;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> gamma     = 1.0f;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape{2, 2, 2, 2};</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo(inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape{2, 2, 2, 2};</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputTensorInfo(outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    std::vector&lt;float&gt; inputData = std::vector&lt;float&gt;(</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="comment">// Batch 0, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            0.f,  1.f,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="comment">// Batch 0, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            0.f,  2.f,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="comment">// Batch 0, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            0.f,  2.f,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="comment">// Batch 0, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            0.f,  4.f,</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="comment">// Batch 1, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            1.f, -1.f,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="comment">// Batch 1, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            -1.f,  2.f,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="comment">// Batch 1, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            -1.f, -2.f,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="comment">// Batch 1, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            1.f,  4.f</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        });</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::vector&lt;float&gt; expectedOutputData = std::vector&lt;float&gt;(</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="comment">// Batch 0, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            0.f, -1.1470304f,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="comment">// Batch 0, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            0.f, -0.22940612f,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="comment">// Batch 0, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            0.f, -0.22940612f,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="comment">// Batch 0, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            0.f,  1.6058424f,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="comment">// Batch 1, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            0.99995005f, -0.7337929f,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="comment">// Batch 1, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            -0.99995005f,  0.52413774f,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="comment">// Batch 1, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            -0.99995005f, -1.1531031f,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="comment">// Batch 1, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            0.99995005f,  1.3627582f</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        });</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    InstanceNormalizationEndToEnd(defaultBackends,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                  <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>,</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                  inputTensorInfo,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                  outputTensorInfo,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                  inputData,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                  expectedOutputData,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                  gamma,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                  beta,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                  eps);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3e262db2d488773b8824f73c4f6ab145"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e262db2d488773b8824f73c4f6ab145">&#9670;&nbsp;</a></span>InstanceNormalizationNchwEndToEndTest2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void InstanceNormalizationNchwEndToEndTest2 </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>defaultBackends</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00310">310</a> of file <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml">InstanceNormalizationEndToEndTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_end_to_end_tests_8cpp_source.xhtml#l00026">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;{</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> eps        = 0.0001f;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> beta       = 10.0f;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> gamma      = 2.0f;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape{2, 2, 2, 2};</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape{2, 2, 2, 2};</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputTensorInfo(outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo(inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    std::vector&lt;float&gt; inputData = std::vector&lt;float&gt;(</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="comment">// Batch 0, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            0.f,  1.f,</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="comment">// Batch 0, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            0.f,  2.f,</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="comment">// Batch 0, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            0.f,  2.f,</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="comment">// Batch 0, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            0.f,  4.f,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <span class="comment">// Batch 1, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            1.f, -1.f,</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="comment">// Batch 1, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            -1.f,  2.f,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="comment">// Batch 1, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            -1.f, -2.f,</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="comment">// Batch 1, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            1.f,  4.f</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        });</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    std::vector&lt;float&gt; expectedOutputData = std::vector&lt;float&gt;(</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="comment">// Batch 0, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            10.f,     7.7059393f,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="comment">// Batch 0, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            10.f,     9.541187f,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="comment">// Batch 0, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            10.f,     9.541187f,</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="comment">// Batch 0, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            10.f,     13.211685f,</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            <span class="comment">// Batch 1, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            11.9999f, 8.532414f,</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="comment">// Batch 1, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            8.0001f,  11.048275f,</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="comment">// Batch 1, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            8.0001f,  7.693794f,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="comment">// Batch 1, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            11.9999f, 12.725516f</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        });</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    InstanceNormalizationEndToEnd(defaultBackends,</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                  <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>,</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                  inputTensorInfo,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                  outputTensorInfo,</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                  inputData,</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                  expectedOutputData,</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                  gamma,</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                                  beta,</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                                  eps);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae0bf53a96bad08ac5218f3c3747e5bed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0bf53a96bad08ac5218f3c3747e5bed">&#9670;&nbsp;</a></span>InstanceNormalizationNhwcEndToEndTest1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void InstanceNormalizationNhwcEndToEndTest1 </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>defaultBackends</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00098">98</a> of file <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml">InstanceNormalizationEndToEndTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_end_to_end_tests_8cpp_source.xhtml#l00026">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> eps       = 0.0001f;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> beta      = 0.0f;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> gamma     = 1.0f;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape{2, 2, 2, 2};</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo(inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape{2, 2, 2, 2};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputTensorInfo(outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    std::vector&lt;float&gt; inputData = std::vector&lt;float&gt;(</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="comment">// Batch 0, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        0.f,  1.f,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="comment">// Batch 0, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        0.f,  2.f,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">// Batch 0, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        0.f,  2.f,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="comment">// Batch 0, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        0.f,  4.f,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="comment">// Batch 1, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        1.f, -1.f,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="comment">// Batch 1, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        -1.f,  2.f,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="comment">// Batch 1, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        -1.f, -2.f,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="comment">// Batch 1, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        1.f,  4.f</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    });</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    std::vector&lt;float&gt; expectedOutputData = std::vector&lt;float&gt;(</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="comment">// Batch 0, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        0.f, -1.1470304f,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment">// Batch 0, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        0.f, -0.22940612f,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="comment">// Batch 0, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        0.f, -0.22940612f,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="comment">// Batch 0, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        0.f,  1.6058424f,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="comment">// Batch 1, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        0.99995005f, -0.7337929f,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="comment">// Batch 1, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        -0.99995005f,  0.52413774f,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="comment">// Batch 1, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        -0.99995005f, -1.1531031f,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment">// Batch 1, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        0.99995005f,  1.3627582f</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    });</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    InstanceNormalizationEndToEnd(defaultBackends,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                  <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                  inputTensorInfo,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                  outputTensorInfo,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                  inputData,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                  expectedOutputData,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                  gamma,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                  beta,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                  eps);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a891c49c919ac2d170b7aa99e23e8871b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a891c49c919ac2d170b7aa99e23e8871b">&#9670;&nbsp;</a></span>InstanceNormalizationNhwcEndToEndTest2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void InstanceNormalizationNhwcEndToEndTest2 </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>defaultBackends</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml#l00239">239</a> of file <a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp_source.xhtml">InstanceNormalizationEndToEndTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_end_to_end_tests_8cpp_source.xhtml#l00026">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> eps        = 0.0001f;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> beta       = 10.0f;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> gamma      = 2.0f;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape{2, 2, 2, 2};</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape{2, 2, 2, 2};</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputTensorInfo(outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo(inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    std::vector&lt;float&gt; inputData = std::vector&lt;float&gt;(</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="comment">// Batch 0, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        0.f,  1.f,</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="comment">// Batch 0, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        0.f,  2.f,</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="comment">// Batch 0, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        0.f,  2.f,</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="comment">// Batch 0, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        0.f,  4.f,</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="comment">// Batch 1, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        1.f, -1.f,</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="comment">// Batch 1, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        -1.f,  2.f,</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="comment">// Batch 1, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        -1.f, -2.f,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="comment">// Batch 1, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        1.f,  4.f</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    });</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    std::vector&lt;float&gt; expectedOutputData = std::vector&lt;float&gt;(</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="comment">// Batch 0, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        10.f,     7.7059393f,</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="comment">// Batch 0, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        10.f,     9.541187f,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="comment">// Batch 0, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        10.f,     9.541187f,</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="comment">// Batch 0, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        10.f,     13.211685f,</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="comment">// Batch 1, Height 0, Width 0 x Channel (2)</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        11.9999f, 8.532414f,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="comment">// Batch 1, Height 0, Width 1 x Channel (2)</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        8.0001f,  11.048275f,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="comment">// Batch 1, Height 1, Width 0 x Channel (2)</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        8.0001f,  7.693794f,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="comment">// Batch 1, Height 1, Width 1 x Channel (2)</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        11.9999f, 12.725516f</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    });</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    InstanceNormalizationEndToEnd(defaultBackends,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                  <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>,</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                  inputTensorInfo,</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                  outputTensorInfo,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                  inputData,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                  expectedOutputData,</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                  gamma,</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                  beta,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                  eps);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="_instance_normalization_end_to_end_test_impl_8cpp.xhtml">InstanceNormalizationEndToEndTestImpl.cpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:16 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
