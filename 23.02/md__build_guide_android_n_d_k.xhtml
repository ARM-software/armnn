<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: How to use the Android NDK to build Arm NN</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('md__build_guide_android_n_d_k.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">How to use the Android NDK to build Arm NN </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#download-the-android-ndk-and-make-a-standalone-toolchain">Download the Android NDK and make a standalone toolchain</a></li>
<li><a href="#install-cmake">Install Cmake</a></li>
<li><a href="#build-google-s-protobuf-library">Build Google's Protobuf library</a></li>
<li><a href="#build-flatbuffers">Build Flatbuffers</a></li>
<li><a href="#download-arm-nn">Download Arm NN</a></li>
<li><a href="#build-arm-compute-library">Build Arm Compute Library</a></li>
<li><a href="#build-arm-nn">Build Arm NN</a></li>
<li><a href="#build-standalone-sample-dynamic-backend">Build Standalone Sample Dynamic Backend</a></li>
<li><a href="#run-the-armnn-unit-tests-on-an-android-device">Run the Arm NN unit tests on an Android device</a></li>
</ul>
<h2>Introduction</h2>
<p>These are step by step instructions for using the Android NDK to build Arm NN. They have been tested on a clean install of Ubuntu 18.04 and 20.04, and should also work with other OS versions. The instructions show how to build the Arm NN core library. Building protobuf is optional. We have given steps should the user wish to build it (i.e. as an Onnx dependency). All downloaded or generated files will be saved inside the <code>$HOME/armnn-devenv</code> directory.</p>
<h2>Download the Android NDK and make a standalone toolchain</h2>
<ul>
<li>Download the Android NDK from <a href="https://developer.android.com/ndk/downloads/index.html">the official website</a>: <div class="fragment"><div class="line">mkdir -p $HOME/armnn-devenv/</div><div class="line">cd $HOME/armnn-devenv/</div><div class="line"># For Mac OS, change the NDK download link accordingly.</div><div class="line">wget https://dl.google.com/android/repository/android-ndk-r25-linux.zip</div><div class="line">unzip android-ndk-r25.zip</div><div class="line">export NDK=$HOME/armnn-devenv/android-ndk-r25</div><div class="line">export NDK_TOOLCHAIN_ROOT=$NDK/toolchains/llvm/prebuilt/linux-x86_64</div><div class="line">export PATH=$NDK_TOOLCHAIN_ROOT/bin/:$PATH</div><div class="line"></div><div class="line"># You may want to append the above export variables commands to your `~/.bashrc` (or `~/.bash_profile` in Mac OS).</div></div><!-- fragment --></li>
<li>With the android ndk-25, you don't need to use the make_standalone_toolchain script to create a toolchain for a specific version of android. Android's current preference is for you to just specify the architecture and operating system while setting the compiler and just use the ndk directory.</li>
</ul>
<h2>Install Cmake</h2>
<p>Cmake 3.19rc3 is required to build Arm NN.</p>
<div class="fragment"><div class="line">cd $HOME/armnn-devenv</div><div class="line">sudo apt-get install libssl-dev</div><div class="line">wget https://github.com/Kitware/CMake/releases/download/v3.19.0-rc3/cmake-3.19.0-rc3.tar.gz</div><div class="line">tar -zxvf cmake-3.19.0-rc3.tar.gz</div><div class="line">cd cmake-3.19.0-rc3</div><div class="line">./bootstrap --prefix=$HOME/armnn-devenv/cmake/install</div><div class="line">make all install</div><div class="line">cd..</div></div><!-- fragment --><h2>Build Google's Protobuf library (Optional)</h2>
<ul>
<li>Clone protobuf: (Requires Git if not previously installed: <code>sudo apt install git</code>) <div class="fragment"><div class="line">mkdir $HOME/armnn-devenv/google</div><div class="line">cd $HOME/armnn-devenv/google</div><div class="line">git clone https://github.com/google/protobuf.git</div><div class="line">cd protobuf</div><div class="line">git checkout -b v3.12.0 v3.12.0</div></div><!-- fragment --></li>
<li>Build a native (x86) version of the protobuf libraries and compiler (protoc): (Requires cUrl, autoconf, llibtool, and other build dependencies if not previously installed: <code>sudo apt install curl autoconf libtool build-essential g++</code>) <div class="fragment"><div class="line">./autogen.sh</div><div class="line">mkdir x86_64_build</div><div class="line">cd x86_64_build</div><div class="line">../configure --prefix=$HOME/armnn-devenv/google/x86_64_pb_install</div><div class="line">make install -j16</div><div class="line">cd ..</div></div><!-- fragment --></li>
<li>Build the arm64 version of the protobuf libraries: <div class="fragment"><div class="line">mkdir arm64_build</div><div class="line">cd arm64_build</div><div class="line">CC=aarch64-linux-android&lt;Android_API&gt;-clang \</div><div class="line">CXX=aarch64-linux-android&lt;Android_API&gt;-clang++ \</div><div class="line">CFLAGS=&quot;-fPIE -fPIC&quot; \</div><div class="line">    LDFLAGS=&quot;-llog -lz -lc++_static&quot; \</div><div class="line">   ../configure --host=aarch64-linux-android \</div><div class="line">   --prefix=$HOME/armnn-devenv/google/arm64_pb_install \</div><div class="line">   --enable-cross-compile \</div><div class="line">   --with-protoc=$HOME/armnn-devenv/google/x86_64_pb_install/bin/protoc</div><div class="line">make install -j16</div><div class="line">cd ..</div></div><!-- fragment --></li>
</ul>
<p>Note: The ANDROID_API variable should be set to the Android API version number you are using. E.g. "30" for Android R.</p>
<h2>Build Flatbuffers</h2>
<ul>
<li>Download Flatbuffers <div class="fragment"><div class="line">cd $HOME/armnn-devenv</div><div class="line">wget https://github.com/google/flatbuffers/archive/v2.0.6.tar.gz</div><div class="line">tar xf v2.0.6.tar.gz</div></div><!-- fragment --></li>
<li>Build Flatbuffers <div class="fragment"><div class="line">cd flatbuffers-2.0.6</div><div class="line">rm -f CMakeCache.txt</div><div class="line">rm -rf build</div><div class="line">mkdir build</div><div class="line">cd build</div><div class="line">CXXFLAGS=&quot;-fPIC&quot; $CMAKE .. \</div><div class="line">          -DFLATBUFFERS_BUILD_FLATC=1 \</div><div class="line">          -DCMAKE_INSTALL_PREFIX:PATH=$WORKING_DIR/flatbuffers</div><div class="line"></div><div class="line">make all install</div></div><!-- fragment --> Note: -fPIC is added to allow users to use the libraries in shared objects.</li>
</ul>
<h2>Download Arm NN</h2>
<ul>
<li>Clone Arm NN: (Requires Git if not previously installed: <code>sudo apt install git</code>)</li>
</ul>
<div class="fragment"><div class="line">cd $HOME/armnn-devenv</div><div class="line">git clone https://github.com/ARM-software/armnn.git</div></div><!-- fragment --><ul>
<li>Checkout Arm NN branch: <div class="fragment"><div class="line">cd armnn</div><div class="line">git checkout &lt;branch_name&gt;</div><div class="line">git pull</div></div><!-- fragment --></li>
</ul>
<p>For example, if you want to check out the 23.02 release branch: </p><div class="fragment"><div class="line">git checkout branches/armnn_23_02</div><div class="line">git pull</div></div><!-- fragment --><h2>Build Arm Compute Library</h2>
<ul>
<li>Clone Arm Compute Library:</li>
</ul>
<div class="fragment"><div class="line">cd $HOME/armnn-devenv</div><div class="line">git clone https://github.com/ARM-software/ComputeLibrary.git</div></div><!-- fragment --><ul>
<li>Checkout Arm Compute Library release tag: <div class="fragment"><div class="line">cd ComputeLibrary</div><div class="line">git checkout &lt;tag_name&gt;</div></div><!-- fragment --> For example, if you want to checkout the 23.02 release tag: <div class="fragment"><div class="line">git checkout v23.02</div></div><!-- fragment --></li>
</ul>
<p>Arm NN and Arm Compute Library are developed closely together. If you would like to use a particular release of Arm NN you will need the same release tag of ACL too.</p>
<p>Arm NN provides a script that downloads the version of Arm Compute Library that Arm NN was tested with: </p><div class="fragment"><div class="line">git checkout $(../armnn/scripts/get_compute_library.sh -p) </div></div><!-- fragment --><ul>
<li>the Arm Compute Library: (Requires SCons if not previously installed: <code>sudo apt install scons</code>) <div class="fragment"><div class="line">scons arch=arm64-v8a neon=1 opencl=1 embed_kernels=1 extra_cxx_flags=&quot;-fPIC&quot; \</div><div class="line"> benchmark_tests=0 validation_tests=0 os=android -j16</div></div><!-- fragment --></li>
</ul>
<h2>Build Arm NN</h2>
<ul>
<li>Build Arm NN: (Requires CMake if not previously installed: <code>sudo apt install cmake</code>) <div class="fragment"><div class="line">mkdir $HOME/armnn-devenv/armnn/build</div><div class="line">cd $HOME/armnn-devenv/armnn/build</div><div class="line">CXX=aarch64-linux-android&lt;Android_API&gt;-clang++ \</div><div class="line">CC=aarch64-linux-android&lt;Android_API&gt;-clang \</div><div class="line">CXX_FLAGS=&quot;-fPIE -fPIC&quot; \</div><div class="line">cmake .. \</div><div class="line">    -DCMAKE_ANDROID_NDK=$NDK \</div><div class="line">    -DCMAKE_SYSTEM_NAME=Android \</div><div class="line">    -DCMAKE_SYSTEM_VERSION=&lt;Android_API&gt; \</div><div class="line">    -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \</div><div class="line">    -DCMAKE_EXE_LINKER_FLAGS=&quot;-pie -llog -lz&quot; \</div><div class="line">    -DARMCOMPUTE_ROOT=$HOME/armnn-devenv/ComputeLibrary/ \</div><div class="line">    -DARMCOMPUTE_BUILD_DIR=$HOME/armnn-devenv/ComputeLibrary/build \</div><div class="line">    -DARMCOMPUTENEON=1 -DARMCOMPUTECL=1 -DARMNNREF=1 \</div><div class="line">    -DPROTOBUF_ROOT=$HOME/armnn-devenv/google/arm64_pb_install/</div><div class="line">    -DFLATBUFFERS_ROOT=$HOME/armnn-devenv/flatbuffers \</div><div class="line">    -DFLATC_DIR=$HOME/armnn-devenv/flatbuffers-2.0.6/build \</div></div><!-- fragment --></li>
</ul>
<p>To include standalone sample dynamic backend tests, add the argument to enable the tests and the dynamic backend path to the CMake command:</p>
<div class="fragment"><div class="line">-DSAMPLE_DYNAMIC_BACKEND=1 \</div><div class="line">-DDYNAMIC_BACKEND_PATHS=$SAMPLE_DYNAMIC_BACKEND_PATH</div><div class="line"># Where $SAMPLE_DYNAMIC_BACKEND_PATH is the path where libArm_SampleDynamic_backend.so library file is pushed</div></div><!-- fragment --><ul>
<li>Run the build <div class="fragment"><div class="line">make -j16</div></div><!-- fragment --></li>
</ul>
<h2>Build Standalone Sample Dynamic Backend</h2>
<ul>
<li>The sample dynamic backend is located in armnn/src/dynamic/sample <div class="fragment"><div class="line">mkdir build</div><div class="line">cd build</div></div><!-- fragment --></li>
<li>Use CMake to configure the build environment, update the following script and run it from the armnn/src/dynamic/sample/build directory to set up the Arm NN build: <div class="fragment"><div class="line">#!/bin/bash</div><div class="line">CXX=aarch64-linux-android&lt;Android_API&gt;-clang++ \</div><div class="line">CC=aarch64-linux-android&lt;Android_API&gt;-clang \</div><div class="line">CXX_FLAGS=&quot;-fPIE -fPIC&quot; \</div><div class="line">cmake \</div><div class="line">-DCMAKE_C_COMPILER_WORKS=TRUE \</div><div class="line">-DCMAKE_CXX_COMPILER_WORKS=TRUE \</div><div class="line">-DCMAKE_ANDROID_NDK=$NDK \</div><div class="line">-DCMAKE_SYSTEM_NAME=Android \</div><div class="line">-DCMAKE_SYSTEM_VERSION=$ANDROID_API \</div><div class="line">-DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \</div><div class="line">-DCMAKE_SYSROOT=$HOME/armnn-devenv/android-ndk-r25/toolchains/llvm/prebuilt/linux-x86_64/sysroot \</div><div class="line">-DCMAKE_CXX_FLAGS=--std=c++14 \</div><div class="line">-DCMAKE_EXE_LINKER_FLAGS=&quot;-pie -llog&quot; \</div><div class="line">-DCMAKE_MODULE_LINKER_FLAGS=&quot;-llog&quot; \</div><div class="line">-DARMNN_PATH=$HOME/armnn-devenv/armnn/build/libarmnn.so ..</div></div><!-- fragment --></li>
<li>Run the build <div class="fragment"><div class="line">make</div></div><!-- fragment --></li>
</ul>
<h2>Run the Arm NN unit tests on an Android device</h2>
<ul>
<li>Push the build results to an Android device and make symbolic links for shared libraries: Currently adb version we have used for testing is 1.0.41. <div class="fragment"><div class="line">adb push libarmnn.so /data/local/tmp/</div><div class="line">    adb push libtimelineDecoder.so /data/local/tmp/</div><div class="line">adb push UnitTests /data/local/tmp/</div><div class="line">adb push $NDK/sources/cxx-stl/llvm-libc++/libs/arm64-v8a/libc++_shared.so /data/local/tmp/</div><div class="line">adb push $HOME/armnn-devenv/google/arm64_pb_install/lib/libprotobuf.so /data/local/tmp/libprotobuf.so.23.0.0</div><div class="line">adb shell &#39;ln -s libprotobuf.so.23.0.0 /data/local/tmp/libprotobuf.so.23&#39;</div><div class="line">adb shell &#39;ln -s libprotobuf.so.23.0.0 /data/local/tmp/libprotobuf.so&#39;</div></div><!-- fragment --></li>
<li>Push the files needed for the unit tests (they are a mix of files, directories and symbolic links): <div class="fragment"><div class="line">adb shell mkdir -p /data/local/tmp/src/backends/backendsCommon/test/testSharedObject</div><div class="line">adb push -p $HOME/armnn-devenv/armnn/build/src/backends/backendsCommon/test/testSharedObject/* /data/local/tmp/src/backends/backendsCommon/test/testSharedObject/</div><div class="line"></div><div class="line">adb shell mkdir -p /data/local/tmp/src/backends/backendsCommon/test/testDynamicBackend</div><div class="line">adb push -p $HOME/armnn-devenv/armnn/build/src/backends/backendsCommon/test/testDynamicBackend/* /data/local/tmp/src/backends/backendsCommon/test/testDynamicBackend/</div><div class="line"></div><div class="line">adb shell mkdir -p /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath1</div><div class="line">adb push -p $HOME/armnn-devenv/armnn/build/src/backends/backendsCommon/test/backendsTestPath1/* /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath1/</div><div class="line"></div><div class="line">adb shell mkdir -p /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath2</div><div class="line">adb push -p $HOME/armnn-devenv/armnn/build/src/backends/backendsCommon/test/backendsTestPath2/Arm_CpuAcc_backend.so /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath2/</div><div class="line">adb shell ln -s Arm_CpuAcc_backend.so /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath2/Arm_CpuAcc_backend.so.1</div><div class="line">adb shell ln -s Arm_CpuAcc_backend.so.1 /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath2/Arm_CpuAcc_backend.so.1.2</div><div class="line">adb shell ln -s Arm_CpuAcc_backend.so.1.2 /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath2/Arm_CpuAcc_backend.so.1.2.3</div><div class="line">adb push -p $HOME/armnn-devenv/armnn/build/src/backends/backendsCommon/test/backendsTestPath2/Arm_GpuAcc_backend.so /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath2/</div><div class="line">adb shell ln -s nothing /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath2/Arm_no_backend.so</div><div class="line"></div><div class="line">adb shell mkdir -p /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath3</div><div class="line"></div><div class="line">adb shell mkdir -p /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath5</div><div class="line">adb push -p $HOME/armnn-devenv/armnn/build/src/backends/backendsCommon/test/backendsTestPath5/* /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath5/</div><div class="line"></div><div class="line">adb shell mkdir -p /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath6</div><div class="line">adb push -p $HOME/armnn-devenv/armnn/build/src/backends/backendsCommon/test/backendsTestPath6/* /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath6/</div><div class="line"></div><div class="line">adb shell mkdir -p /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath7</div><div class="line"></div><div class="line">adb shell mkdir -p /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath9</div><div class="line">adb push -p $HOME/armnn-devenv/armnn/build/src/backends/backendsCommon/test/backendsTestPath9/* /data/local/tmp/src/backends/backendsCommon/test/backendsTestPath9/</div><div class="line"></div><div class="line">adb shell mkdir -p /data/local/tmp/src/backends/dynamic/reference</div><div class="line">adb push -p $HOME/armnn-devenv/armnn/build/src/backends/dynamic/reference/Arm_CpuRef_backend.so /data/local/tmp/src/backends/dynamic/reference/</div><div class="line"></div><div class="line"># If the standalone sample dynamic tests are enabled, also push libArm_SampleDynamic_backend.so library file to the folder specified as $SAMPLE_DYNAMIC_BACKEND_PATH when Arm NN is built.</div><div class="line"># This is the example when $SAMPLE_DYNAMIC_BACKEND_PATH is specified as /data/local/tmp/dynamic/sample/:</div><div class="line"></div><div class="line">adb shell mkdir -p /data/local/tmp/dynamic/sample/</div><div class="line">adb push -p $HOME/armnn-devenv/armnn/src/dynamic/sample/build/libArm_SampleDynamic_backend.so /data/local/tmp/dynamic/sample/</div></div><!-- fragment --></li>
<li>Run Arm NN unit tests: <div class="fragment"><div class="line">adb shell &#39;LD_LIBRARY_PATH=/data/local/tmp:/vendor/lib64:/vendor/lib64/egl /data/local/tmp/UnitTests&#39;</div></div><!-- fragment --> If libarmnnUtils.a is present in <code>$HOME/armnn-devenv/armnn/build/</code> and the unit tests run without failure then the build was successful. </li>
</ul>
</div></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="buildguides.xhtml">Build Guides</a></li>
    <li class="footer">Generated on Fri Feb 24 2023 10:24:28 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
