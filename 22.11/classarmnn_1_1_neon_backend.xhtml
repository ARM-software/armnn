<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: NeonBackend Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_neon_backend.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_1_1_neon_backend-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NeonBackend Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_neon_backend_8hpp_source.xhtml">NeonBackend.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NeonBackend:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_neon_backend.png" usemap="#NeonBackend_map" alt=""/>
  <map id="NeonBackend_map" name="NeonBackend_map">
<area href="classarmnn_1_1_i_backend_internal.xhtml" alt="IBackendInternal" shape="rect" coords="0,56,106,80"/>
<area href="classarmnn_1_1_i_backend.xhtml" title="Each backend should implement an IBackend. " alt="IBackend" shape="rect" coords="0,0,106,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1d64639ac88622afa0d86f7943f39d99"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a1d64639ac88622afa0d86f7943f39d99">NeonBackend</a> ()=default</td></tr>
<tr class="separator:a1d64639ac88622afa0d86f7943f39d99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40ea6686e7870a7b7c4f97877294e1b3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a40ea6686e7870a7b7c4f97877294e1b3">~NeonBackend</a> ()=default</td></tr>
<tr class="separator:a40ea6686e7870a7b7c4f97877294e1b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c6c3d137a7792e264a89cc40ea94bb0"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a6c6c3d137a7792e264a89cc40ea94bb0">GetId</a> () const override</td></tr>
<tr class="separator:a6c6c3d137a7792e264a89cc40ea94bb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93fcb3bff141d8c77b53466a44b58eee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IBackendInternal::IMemoryManagerUniquePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a93fcb3bff141d8c77b53466a44b58eee">CreateMemoryManager</a> () const override</td></tr>
<tr class="separator:a93fcb3bff141d8c77b53466a44b58eee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e19e275c8162e34e6d8d10a9245dbc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a8e19e275c8162e34e6d8d10a9245dbc9">CreateWorkloadFactory</a> (const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager=nullptr) const override</td></tr>
<tr class="separator:a8e19e275c8162e34e6d8d10a9245dbc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb0e4b4255c996c68fe87e3c13451a43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#afb0e4b4255c996c68fe87e3c13451a43">CreateWorkloadFactory</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;tensorHandleFactoryRegistry) const override</td></tr>
<tr class="separator:afb0e4b4255c996c68fe87e3c13451a43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19441d1c63ca23efb8d4305933bcb712"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a19441d1c63ca23efb8d4305933bcb712">CreateWorkloadFactory</a> (const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const override</td></tr>
<tr class="separator:a19441d1c63ca23efb8d4305933bcb712"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95c304f397c4ef9f0108834e16631219"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a95c304f397c4ef9f0108834e16631219">CreateWorkloadFactory</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;tensorHandleFactoryRegistry, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const override</td></tr>
<tr class="separator:a95c304f397c4ef9f0108834e16631219"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a801cf3170dc777aca3e6f926d1bd70a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendInternal::IBackendContextPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a801cf3170dc777aca3e6f926d1bd70a5">CreateBackendContext</a> (const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;) const override</td></tr>
<tr class="memdesc:a801cf3170dc777aca3e6f926d1bd70a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the runtime context of the backend.  <a href="#a801cf3170dc777aca3e6f926d1bd70a5">More...</a><br /></td></tr>
<tr class="separator:a801cf3170dc777aca3e6f926d1bd70a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68c2ef244261cc9649799284774af132"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">IBackendInternal::IBackendProfilingContextPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a68c2ef244261cc9649799284774af132">CreateBackendProfilingContext</a> (const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;, <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">IBackendProfilingPtr</a> &amp;backendProfiling) override</td></tr>
<tr class="memdesc:a68c2ef244261cc9649799284774af132"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create context specifically used for profiling interaction from backends.  <a href="#a68c2ef244261cc9649799284774af132">More...</a><br /></td></tr>
<tr class="separator:a68c2ef244261cc9649799284774af132"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93d4285a3ea5e4e3b35578484d889daa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a93d4285a3ea5e4e3b35578484d889daa">GetLayerSupport</a> () const override</td></tr>
<tr class="separator:a93d4285a3ea5e4e3b35578484d889daa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e458b98037dbb048877d0fc3fdbd17d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a9e458b98037dbb048877d0fc3fdbd17d">GetLayerSupport</a> (const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const override</td></tr>
<tr class="separator:a9e458b98037dbb048877d0fc3fdbd17d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a339efc194a1738cd93fcdde4d948a5cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a339efc194a1738cd93fcdde4d948a5cd">OptimizeSubgraphView</a> (const <a class="el" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> &amp;subgraph, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const override</td></tr>
<tr class="separator:a339efc194a1738cd93fcdde4d948a5cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63559c7f206c265f5fff5ffcc8a58e3e"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a63559c7f206c265f5fff5ffcc8a58e3e">GetHandleFactoryPreferences</a> () const override</td></tr>
<tr class="memdesc:a63559c7f206c265f5fff5ffcc8a58e3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Returns a vector of supported TensorHandleFactory ids in preference order.  <a href="#a63559c7f206c265f5fff5ffcc8a58e3e">More...</a><br /></td></tr>
<tr class="separator:a63559c7f206c265f5fff5ffcc8a58e3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a583bc4404a9d27ee1f8c46239637125d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a583bc4404a9d27ee1f8c46239637125d">RegisterTensorHandleFactories</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;registry) override</td></tr>
<tr class="memdesc:a583bc4404a9d27ee1f8c46239637125d"><td class="mdescLeft">&#160;</td><td class="mdescRight">(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Register TensorHandleFactories Either this method or <a class="el" href="classarmnn_1_1_neon_backend.xhtml#a93fcb3bff141d8c77b53466a44b58eee">CreateMemoryManager()</a> and IWorkloadFactory::CreateTensor() IWorkloadFactory::CreateSubtensor() methods must be implemented.  <a href="#a583bc4404a9d27ee1f8c46239637125d">More...</a><br /></td></tr>
<tr class="separator:a583bc4404a9d27ee1f8c46239637125d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2482b4a7d5bde88e9b963be08017ce2b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">CreateBackendSpecificModelContext</a> (const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const override</td></tr>
<tr class="separator:a2482b4a7d5bde88e9b963be08017ce2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9199ff425571ba62412bb903c2c933e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#aa9c506b558b8aa33a228b15164f40dc3">BackendCapabilities</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#ab9199ff425571ba62412bb903c2c933e">GetCapabilities</a> () const override</td></tr>
<tr class="memdesc:ab9199ff425571ba62412bb903c2c933e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a BackendCapability if the backend lists the capability The BackendCapability must then be inspected to check whether or not that BackendCapability is supported Otherwise returns an <a class="el" href="structarmnn_1_1_empty_optional.xhtml" title="EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...">EmptyOptional</a> if the BackendCapability is unlisted.  <a href="#ab9199ff425571ba62412bb903c2c933e">More...</a><br /></td></tr>
<tr class="separator:ab9199ff425571ba62412bb903c2c933e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb75bad43612f5314622c4fa8a16e63d"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#afb75bad43612f5314622c4fa8a16e63d">GetDefaultAllocator</a> () const override</td></tr>
<tr class="memdesc:afb75bad43612f5314622c4fa8a16e63d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the default memory allocator for the backend.  <a href="#afb75bad43612f5314622c4fa8a16e63d">More...</a><br /></td></tr>
<tr class="separator:afb75bad43612f5314622c4fa8a16e63d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a8c507c220869f89aec2dc370ea6c5a0b inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a8c507c220869f89aec2dc370ea6c5a0b">~IBackendInternal</a> () override=default</td></tr>
<tr class="memdesc:a8c507c220869f89aec2dc370ea6c5a0b inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow backends created by the factory function to be destroyed through <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a>.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a8c507c220869f89aec2dc370ea6c5a0b">More...</a><br /></td></tr>
<tr class="separator:a8c507c220869f89aec2dc370ea6c5a0b inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6abedf4465c7f6b634a207d228cdf284 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a6abedf4465c7f6b634a207d228cdf284">CreateWorkloadFactory</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;tensorHandleFactoryRegistry, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> inputFlags, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> outputFlags) const</td></tr>
<tr class="separator:a6abedf4465c7f6b634a207d228cdf284 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a674f56c735a3d6300463cefb642f808a inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a674f56c735a3d6300463cefb642f808a">OptimizeSubgraphView</a> (const <a class="el" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> &amp;subgraph) const</td></tr>
<tr class="separator:a674f56c735a3d6300463cefb642f808a inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8f716b0eab6b9d63196d5a53d5fac81 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#af8f716b0eab6b9d63196d5a53d5fac81">SupportsTensorAllocatorAPI</a> () const</td></tr>
<tr class="separator:af8f716b0eab6b9d63196d5a53d5fac81 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ccbb386cc96a5336a8295a3c25d33dd inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a6ccbb386cc96a5336a8295a3c25d33dd">GetBackwardCompatibleFavoriteHandleFactory</a> ()</td></tr>
<tr class="separator:a6ccbb386cc96a5336a8295a3c25d33dd inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36b46ce669164b5188cb21796557d897 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a36b46ce669164b5188cb21796557d897">RegisterTensorHandleFactories</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;registry, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> inputFlags, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> outputFlags)</td></tr>
<tr class="memdesc:a36b46ce669164b5188cb21796557d897 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Register TensorHandleFactories Either this method or <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a0fe4c12c8f1f0722d2a91f61c02a687a">CreateMemoryManager()</a> and IWorkloadFactory::CreateTensor() IWorkloadFactory::CreateSubtensor() methods must be implemented.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a36b46ce669164b5188cb21796557d897">More...</a><br /></td></tr>
<tr class="separator:a36b46ce669164b5188cb21796557d897 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75af5f33aff768de09b8f703b87636ab inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a75af5f33aff768de09b8f703b87636ab">UseCustomMemoryAllocator</a> (std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt; allocator, <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; std::string &amp;&gt; errMsg)</td></tr>
<tr class="memdesc:a75af5f33aff768de09b8f703b87636ab inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Signals the backend to use a custom memory allocator provided by the user.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a75af5f33aff768de09b8f703b87636ab">More...</a><br /></td></tr>
<tr class="separator:a75af5f33aff768de09b8f703b87636ab inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87d128382876683170ffc3529aadabbf inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a87d128382876683170ffc3529aadabbf">GetNumberOfCacheFiles</a> () const</td></tr>
<tr class="memdesc:a87d128382876683170ffc3529aadabbf inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of files cached if backend supports caching.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a87d128382876683170ffc3529aadabbf">More...</a><br /></td></tr>
<tr class="separator:a87d128382876683170ffc3529aadabbf inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86a4b2845b0da158907d657c7b147ab0 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structarmnn_1_1experimental_1_1_execution_data.xhtml">ExecutionData</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a86a4b2845b0da158907d657c7b147ab0">CreateExecutionData</a> (<a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &amp;workingMemDescriptor) const</td></tr>
<tr class="memdesc:a86a4b2845b0da158907d657c7b147ab0 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns ExecutionData for the backend.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a86a4b2845b0da158907d657c7b147ab0">More...</a><br /></td></tr>
<tr class="separator:a86a4b2845b0da158907d657c7b147ab0 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf96527a67532246f07ce44266e95e79 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#adf96527a67532246f07ce44266e95e79">UpdateExecutionData</a> (<a class="el" href="structarmnn_1_1experimental_1_1_execution_data.xhtml">ExecutionData</a> &amp;executionData, <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &amp;workingMemDescriptor) const</td></tr>
<tr class="memdesc:adf96527a67532246f07ce44266e95e79 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the ExecutionData for a layer.  <a href="classarmnn_1_1_i_backend_internal.xhtml#adf96527a67532246f07ce44266e95e79">More...</a><br /></td></tr>
<tr class="separator:adf96527a67532246f07ce44266e95e79 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a177af502214bbc8123fbb4a3c4f0a1b8"><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_backend.xhtml#a177af502214bbc8123fbb4a3c4f0a1b8">GetIdStatic</a> ()</td></tr>
<tr class="separator:a177af502214bbc8123fbb4a3c4f0a1b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a878b8f50d8a2f92ed624803e9f6968ae inherit pub_static_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a878b8f50d8a2f92ed624803e9f6968ae">GetApiVersion</a> ()</td></tr>
<tr class="memdesc:a878b8f50d8a2f92ed624803e9f6968ae inherit pub_static_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the version of the Backend API.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a878b8f50d8a2f92ed624803e9f6968ae">More...</a><br /></td></tr>
<tr class="separator:a878b8f50d8a2f92ed624803e9f6968ae inherit pub_static_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a72ca1cf423bda4b0a9ffb789627126de inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> &gt;</td></tr>
<tr class="separator:a72ca1cf423bda4b0a9ffb789627126de inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada6d56575c0fe53cf23c7ae4610c6367 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendContextPtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_backend_context.xhtml">IBackendContext</a> &gt;</td></tr>
<tr class="separator:ada6d56575c0fe53cf23c7ae4610c6367 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae44a82b0e485e551a0f77150b1076e06 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">IBackendProfilingContextPtr</a> = std::shared_ptr&lt; arm::pipe::IBackendProfilingContext &gt;</td></tr>
<tr class="memdesc:ae44a82b0e485e551a0f77150b1076e06 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the bridge between backend and backend profiling we'll keep it in the backend namespace.  <a href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">More...</a><br /></td></tr>
<tr class="separator:ae44a82b0e485e551a0f77150b1076e06 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a335964abd41c91f7e6ef5c65865a7b98 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">IBackendProfilingPtr</a> = std::unique_ptr&lt; arm::pipe::IBackendProfiling &gt;</td></tr>
<tr class="separator:a335964abd41c91f7e6ef5c65865a7b98 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11fa919c11fe46aad613b2e960fcfe90 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">ILayerSupportSharedPtr</a> = std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a> &gt;</td></tr>
<tr class="separator:a11fa919c11fe46aad613b2e960fcfe90 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d0238968a7643dbb170547dd22bba54 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendSpecificModelContextPtr</a> = std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_backend_model_context.xhtml">IBackendModelContext</a> &gt;</td></tr>
<tr class="separator:a4d0238968a7643dbb170547dd22bba54 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12bff6d51d63dac1375c89bc8415dc46 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IMemoryManagerUniquePtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;</td></tr>
<tr class="separator:a12bff6d51d63dac1375c89bc8415dc46 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a693b40e6b94e958836aeb0410ca186bd inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IMemoryManagerSharedPtr</a> = std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;</td></tr>
<tr class="separator:a693b40e6b94e958836aeb0410ca186bd inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a675fed08e681be4343fb09ae73eb7641 inherit pro_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a675fed08e681be4343fb09ae73eb7641">IBackendInternal</a> ()=default</td></tr>
<tr class="memdesc:a675fed08e681be4343fb09ae73eb7641 inherit pro_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creation must be done through a specific backend interface.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a675fed08e681be4343fb09ae73eb7641">More...</a><br /></td></tr>
<tr class="separator:a675fed08e681be4343fb09ae73eb7641 inherit pro_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_backend"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_backend')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend.xhtml">IBackend</a></td></tr>
<tr class="memitem:a7cfc55eae265fa65b7d25e7dd3203f22 inherit pro_methods_classarmnn_1_1_i_backend"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend.xhtml#a7cfc55eae265fa65b7d25e7dd3203f22">IBackend</a> ()</td></tr>
<tr class="separator:a7cfc55eae265fa65b7d25e7dd3203f22 inherit pro_methods_classarmnn_1_1_i_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa73289e0503a4f7ec5909e117a57aa2b inherit pro_methods_classarmnn_1_1_i_backend"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend.xhtml#aa73289e0503a4f7ec5909e117a57aa2b">~IBackend</a> ()</td></tr>
<tr class="separator:aa73289e0503a4f7ec5909e117a57aa2b inherit pro_methods_classarmnn_1_1_i_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_neon_backend_8hpp_source.xhtml#l00026">26</a> of file <a class="el" href="_neon_backend_8hpp_source.xhtml">NeonBackend.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a1d64639ac88622afa0d86f7943f39d99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d64639ac88622afa0d86f7943f39d99">&#9670;&nbsp;</a></span>NeonBackend()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_neon_backend.xhtml">NeonBackend</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a40ea6686e7870a7b7c4f97877294e1b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40ea6686e7870a7b7c4f97877294e1b3">&#9670;&nbsp;</a></span>~NeonBackend()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_neon_backend.xhtml">NeonBackend</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a801cf3170dc777aca3e6f926d1bd70a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a801cf3170dc777aca3e6f926d1bd70a5">&#9670;&nbsp;</a></span>CreateBackendContext()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendInternal::IBackendContextPtr</a> CreateBackendContext </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create the runtime context of the backend. </p>
<p>Implementations may return a default-constructed IBackendContextPtr if no context is needed at runtime. Implementations must throw <a class="el" href="classarmnn_1_1_backend_unavailable_exception.xhtml" title="Class for non-fatal exceptions raised while initialising a backend. ">BackendUnavailableException</a> if the backend cannot be used (for example, necessary accelerator hardware is not present). The default implementation always returns a default-constructed pointer. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a07a1b3f9ac897364b5c2aacc227cbebc">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8hpp_source.xhtml#l00033">NeonBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendContextPtr</a>{};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_ada6d56575c0fe53cf23c7ae4610c6367"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">armnn::IBackendInternal::IBackendContextPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IBackendContext &gt; IBackendContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00090">IBackendInternal.hpp:90</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a68c2ef244261cc9649799284774af132"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68c2ef244261cc9649799284774af132">&#9670;&nbsp;</a></span>CreateBackendProfilingContext()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">IBackendInternal::IBackendProfilingContextPtr</a> CreateBackendProfilingContext </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>creationOptions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">IBackendProfilingPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>backendProfiling</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create context specifically used for profiling interaction from backends. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a6c5064ef6323af5c547674d01b15d7ab">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00112">112</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8hpp_source.xhtml#l00033">NeonBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">IBackendProfilingContextPtr</a>{};</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_ae44a82b0e485e551a0f77150b1076e06"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">armnn::IBackendInternal::IBackendProfilingContextPtr</a></div><div class="ttdeci">std::shared_ptr&lt; arm::pipe::IBackendProfilingContext &gt; IBackendProfilingContextPtr</div><div class="ttdoc">This is the bridge between backend and backend profiling we&amp;#39;ll keep it in the backend namespace...</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00092">IBackendInternal.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2482b4a7d5bde88e9b963be08017ce2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2482b4a7d5bde88e9b963be08017ce2b">&#9670;&nbsp;</a></span>CreateBackendSpecificModelContext()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> CreateBackendSpecificModelContext </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a41f38c8c2182463dec4f03769ea54f63">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00118">118</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8cpp_source.xhtml#l00063">NeonBackend::CreateWorkloadFactory()</a>, <a class="el" href="_neon_backend_8hpp_source.xhtml#l00033">NeonBackend::GetId()</a>, and <a class="el" href="_neon_backend_8cpp_source.xhtml#l00133">NeonBackend::GetLayerSupport()</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendSpecificModelContextPtr</a>{<span class="keyword">new</span> NeonBackendModelContext{modelOptions}};</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a4d0238968a7643dbb170547dd22bba54"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">armnn::IBackendInternal::IBackendSpecificModelContextPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IBackendModelContext &gt; IBackendSpecificModelContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00096">IBackendInternal.hpp:96</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a93fcb3bff141d8c77b53466a44b58eee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93fcb3bff141d8c77b53466a44b58eee">&#9670;&nbsp;</a></span>CreateMemoryManager()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IBackendInternal::IMemoryManagerUniquePtr</a> CreateMemoryManager </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a0fe4c12c8f1f0722d2a91f61c02a687a">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00050">50</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">BaseMemoryManager::Offset</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8hpp_source.xhtml#l00033">NeonBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonMemoryManager&gt;(std::make_unique&lt;arm_compute::Allocator&gt;(),</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                               <a class="code" href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">BaseMemoryManager::MemoryAffinity::Offset</a>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_base_memory_manager_xhtml_aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e"><div class="ttname"><a href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">armnn::BaseMemoryManager::MemoryAffinity::Offset</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8e19e275c8162e34e6d8d10a9245dbc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e19e275c8162e34e6d8d10a9245dbc9">&#9670;&nbsp;</a></span>CreateWorkloadFactory() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a> CreateWorkloadFactory </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em> = <code>nullptr</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#afd5a5e90515b31c0174f76ec8897e9b1">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8hpp_source.xhtml#l00033">NeonBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonWorkloadFactory&gt;(</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        PolymorphicPointerDowncast&lt;NeonMemoryManager&gt;(memoryManager));</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afb0e4b4255c996c68fe87e3c13451a43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb0e4b4255c996c68fe87e3c13451a43">&#9670;&nbsp;</a></span>CreateWorkloadFactory() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a> CreateWorkloadFactory </td>
          <td>(</td>
          <td class="paramtype">class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactoryRegistry</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a41c5c170ef6708c1efc683d900f624ff">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00070">70</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">BaseMemoryManager::Offset</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00066">TensorHandleFactoryRegistry::RegisterCopyAndImportFactoryPair()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00012">TensorHandleFactoryRegistry::RegisterFactory()</a>, and <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00034">TensorHandleFactoryRegistry::RegisterMemoryManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">auto</span> memoryManager = std::make_shared&lt;NeonMemoryManager&gt;(std::make_unique&lt;arm_compute::Allocator&gt;(),</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                                             <a class="code" href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">BaseMemoryManager::MemoryAffinity::Offset</a>);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    tensorHandleFactoryRegistry.RegisterMemoryManager(memoryManager);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">auto</span> factory = std::make_unique&lt;NeonTensorHandleFactory&gt;(memoryManager);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// Register copy and import factory pair</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    tensorHandleFactoryRegistry.RegisterCopyAndImportFactoryPair(factory-&gt;GetId(), factory-&gt;GetId());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="comment">// Register the factory</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    tensorHandleFactoryRegistry.RegisterFactory(std::move(factory));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonWorkloadFactory&gt;(</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        PolymorphicPointerDowncast&lt;NeonMemoryManager&gt;(memoryManager));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_base_memory_manager_xhtml_aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e"><div class="ttname"><a href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">armnn::BaseMemoryManager::MemoryAffinity::Offset</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a19441d1c63ca23efb8d4305933bcb712"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19441d1c63ca23efb8d4305933bcb712">&#9670;&nbsp;</a></span>CreateWorkloadFactory() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a> CreateWorkloadFactory </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a22973198ab5ac5624b4caa78100d2d25">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00063">63</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_backend_8cpp_source.xhtml#l00118">NeonBackend::CreateBackendSpecificModelContext()</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonWorkloadFactory&gt;(</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        PolymorphicPointerDowncast&lt;NeonMemoryManager&gt;(memoryManager), <a class="code" href="classarmnn_1_1_neon_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">CreateBackendSpecificModelContext</a>(modelOptions));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_neon_backend_xhtml_a2482b4a7d5bde88e9b963be08017ce2b"><div class="ttname"><a href="classarmnn_1_1_neon_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">armnn::NeonBackend::CreateBackendSpecificModelContext</a></div><div class="ttdeci">IBackendInternal::IBackendSpecificModelContextPtr CreateBackendSpecificModelContext(const ModelOptions &amp;modelOptions) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_backend_8cpp_source.xhtml#l00118">NeonBackend.cpp:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a95c304f397c4ef9f0108834e16631219"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95c304f397c4ef9f0108834e16631219">&#9670;&nbsp;</a></span>CreateWorkloadFactory() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a> CreateWorkloadFactory </td>
          <td>(</td>
          <td class="paramtype">class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactoryRegistry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#aebacbea86fddc46858f6329671ccf750">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_backend_8cpp_source.xhtml#l00118">NeonBackend::CreateBackendSpecificModelContext()</a>, <a class="el" href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">BaseMemoryManager::Offset</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00066">TensorHandleFactoryRegistry::RegisterCopyAndImportFactoryPair()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00012">TensorHandleFactoryRegistry::RegisterFactory()</a>, and <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00034">TensorHandleFactoryRegistry::RegisterMemoryManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">auto</span> memoryManager = std::make_shared&lt;NeonMemoryManager&gt;(std::make_unique&lt;arm_compute::Allocator&gt;(),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                                             <a class="code" href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">BaseMemoryManager::MemoryAffinity::Offset</a>);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    tensorHandleFactoryRegistry.RegisterMemoryManager(memoryManager);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">auto</span> factory = std::make_unique&lt;NeonTensorHandleFactory&gt;(memoryManager);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Register copy and import factory pair</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    tensorHandleFactoryRegistry.RegisterCopyAndImportFactoryPair(factory-&gt;GetId(), factory-&gt;GetId());</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Register the factory</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    tensorHandleFactoryRegistry.RegisterFactory(std::move(factory));</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;NeonWorkloadFactory&gt;(</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        PolymorphicPointerDowncast&lt;NeonMemoryManager&gt;(memoryManager), <a class="code" href="classarmnn_1_1_neon_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">CreateBackendSpecificModelContext</a>(modelOptions));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_base_memory_manager_xhtml_aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e"><div class="ttname"><a href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">armnn::BaseMemoryManager::MemoryAffinity::Offset</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_backend_xhtml_a2482b4a7d5bde88e9b963be08017ce2b"><div class="ttname"><a href="classarmnn_1_1_neon_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">armnn::NeonBackend::CreateBackendSpecificModelContext</a></div><div class="ttdeci">IBackendInternal::IBackendSpecificModelContextPtr CreateBackendSpecificModelContext(const ModelOptions &amp;modelOptions) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_backend_8cpp_source.xhtml#l00118">NeonBackend.cpp:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab9199ff425571ba62412bb903c2c933e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9199ff425571ba62412bb903c2c933e">&#9670;&nbsp;</a></span>GetCapabilities()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#aa9c506b558b8aa33a228b15164f40dc3">BackendCapabilities</a> GetCapabilities </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a BackendCapability if the backend lists the capability The BackendCapability must then be inspected to check whether or not that BackendCapability is supported Otherwise returns an <a class="el" href="structarmnn_1_1_empty_optional.xhtml" title="EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...">EmptyOptional</a> if the BackendCapability is unlisted. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a057f6c5c3ab3248050ed548273c4beb9">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8hpp_source.xhtml#l00065">65</a> of file <a class="el" href="_neon_backend_8hpp_source.xhtml">NeonBackend.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a140decc881c774b2cf515db7bc161a4e">armnn::cpuAccCapabilities</a>, and <a class="el" href="_neon_backend_8cpp_source.xhtml#l00455">NeonBackend::GetDefaultAllocator()</a>.</p>
<div class="fragment"><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a140decc881c774b2cf515db7bc161a4e">cpuAccCapabilities</a>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    };</div><div class="ttc" id="namespacearmnn_xhtml_a140decc881c774b2cf515db7bc161a4e"><div class="ttname"><a href="namespacearmnn.xhtml#a140decc881c774b2cf515db7bc161a4e">armnn::cpuAccCapabilities</a></div><div class="ttdeci">const BackendCapabilities cpuAccCapabilities(&quot;CpuAcc&quot;, { {&quot;NonConstWeights&quot;, false}, {&quot;AsyncExecution&quot;, false}, {&quot;ProtectedContentAllocation&quot;, false}, {&quot;ConstantTensorsAsInputs&quot;, true}, {&quot;PreImportIOTensors&quot;, false}, {&quot;ExternallyManagedMemory&quot;, true}, {&quot;MultiAxisPacking&quot;, false}, {&quot;SingleAxisPacking&quot;, true} })</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afb75bad43612f5314622c4fa8a16e63d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb75bad43612f5314622c4fa8a16e63d">&#9670;&nbsp;</a></span>GetDefaultAllocator()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt; GetDefaultAllocator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the default memory allocator for the backend. </p>
<dl class="section return"><dt>Returns</dt><dd>- Returns unique pointer to the Default <a class="el" href="structarmnn_1_1_allocator.xhtml">Allocator</a> of the Backend </dd></dl>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a563472222884844adc3183c433f38e54">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00455">455</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8hpp_source.xhtml#l00065">NeonBackend::GetCapabilities()</a>.</p>
<div class="fragment"><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;{</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;DefaultAllocator&gt;();</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a63559c7f206c265f5fff5ffcc8a58e3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63559c7f206c265f5fff5ffcc8a58e3e">&#9670;&nbsp;</a></span>GetHandleFactoryPreferences()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> &gt; GetHandleFactoryPreferences </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Returns a vector of supported TensorHandleFactory ids in preference order. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ac5d107c5672f446603b6e6b92bce6244">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00436">436</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_tensor_handle_factory_8cpp_source.xhtml#l00089">NeonTensorHandleFactory::GetIdStatic()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8hpp_source.xhtml#l00033">NeonBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;{</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordflow">return</span> std::vector&lt;ITensorHandleFactory::FactoryId&gt;() = { <a class="code" href="classarmnn_1_1_neon_tensor_handle_factory.xhtml#acdecb5b442434112c2cc8fc48c0ea922">NeonTensorHandleFactory::GetIdStatic</a>() };</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_neon_tensor_handle_factory_xhtml_acdecb5b442434112c2cc8fc48c0ea922"><div class="ttname"><a href="classarmnn_1_1_neon_tensor_handle_factory.xhtml#acdecb5b442434112c2cc8fc48c0ea922">armnn::NeonTensorHandleFactory::GetIdStatic</a></div><div class="ttdeci">static const FactoryId &amp; GetIdStatic()</div><div class="ttdef"><b>Definition:</b> <a href="_neon_tensor_handle_factory_8cpp_source.xhtml#l00089">NeonTensorHandleFactory.cpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6c6c3d137a7792e264a89cc40ea94bb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c6c3d137a7792e264a89cc40ea94bb0">&#9670;&nbsp;</a></span>GetId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_backend.xhtml#aa9fc23b7155bd678232eeb351059b748">IBackend</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8hpp_source.xhtml#l00033">33</a> of file <a class="el" href="_neon_backend_8hpp_source.xhtml">NeonBackend.hpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_backend_8cpp_source.xhtml#l00107">NeonBackend::CreateBackendContext()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00112">NeonBackend::CreateBackendProfilingContext()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00118">NeonBackend::CreateBackendSpecificModelContext()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00050">NeonBackend::CreateMemoryManager()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00056">NeonBackend::CreateWorkloadFactory()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00436">NeonBackend::GetHandleFactoryPreferences()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00044">NeonBackend::GetIdStatic()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00124">NeonBackend::GetLayerSupport()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00142">NeonBackend::OptimizeSubgraphView()</a>, and <a class="el" href="_neon_backend_8cpp_source.xhtml#l00441">NeonBackend::RegisterTensorHandleFactories()</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{ <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_backend.xhtml#a177af502214bbc8123fbb4a3c4f0a1b8">GetIdStatic</a>(); }</div><div class="ttc" id="classarmnn_1_1_neon_backend_xhtml_a177af502214bbc8123fbb4a3c4f0a1b8"><div class="ttname"><a href="classarmnn_1_1_neon_backend.xhtml#a177af502214bbc8123fbb4a3c4f0a1b8">armnn::NeonBackend::GetIdStatic</a></div><div class="ttdeci">static const BackendId &amp; GetIdStatic()</div><div class="ttdef"><b>Definition:</b> <a href="_neon_backend_8cpp_source.xhtml#l00044">NeonBackend.cpp:44</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a177af502214bbc8123fbb4a3c4f0a1b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a177af502214bbc8123fbb4a3c4f0a1b8">&#9670;&nbsp;</a></span>GetIdStatic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp; GetIdStatic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00044">44</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_backend_id_8hpp_source.xhtml#l00010">armnn::NeonBackendId()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8hpp_source.xhtml#l00033">NeonBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> BackendId s_Id{<a class="code" href="namespacearmnn.xhtml#a3a34a305e5187f3a3c67030d3bebbdb0">NeonBackendId</a>()};</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> s_Id;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a3a34a305e5187f3a3c67030d3bebbdb0"><div class="ttname"><a href="namespacearmnn.xhtml#a3a34a305e5187f3a3c67030d3bebbdb0">armnn::NeonBackendId</a></div><div class="ttdeci">constexpr const char * NeonBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_neon_backend_id_8hpp_source.xhtml#l00010">NeonBackendId.hpp:10</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a93d4285a3ea5e4e3b35578484d889daa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93d4285a3ea5e4e3b35578484d889daa">&#9670;&nbsp;</a></span>GetLayerSupport() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a> GetLayerSupport </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ad86597efa7c25997572c80dc29f3104a">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00124">124</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8hpp_source.xhtml#l00033">NeonBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">ILayerSupportSharedPtr</a> layerSupport</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keyword">new</span> NeonLayerSupport(<a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a>{})</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        };</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> layerSupport;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a4d0238968a7643dbb170547dd22bba54"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">armnn::IBackendInternal::IBackendSpecificModelContextPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IBackendModelContext &gt; IBackendSpecificModelContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00096">IBackendInternal.hpp:96</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a11fa919c11fe46aad613b2e960fcfe90"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">armnn::IBackendInternal::ILayerSupportSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; ILayerSupport &gt; ILayerSupportSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00094">IBackendInternal.hpp:94</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9e458b98037dbb048877d0fc3fdbd17d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e458b98037dbb048877d0fc3fdbd17d">&#9670;&nbsp;</a></span>GetLayerSupport() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a> GetLayerSupport </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#aa654fe558005ad90f2e9a2e1f175ebce">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_backend_8cpp_source.xhtml#l00118">NeonBackend::CreateBackendSpecificModelContext()</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">ILayerSupportSharedPtr</a> layerSupport</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keyword">new</span> NeonLayerSupport(<a class="code" href="classarmnn_1_1_neon_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">CreateBackendSpecificModelContext</a>(modelOptions))</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        };</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">return</span> layerSupport;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_neon_backend_xhtml_a2482b4a7d5bde88e9b963be08017ce2b"><div class="ttname"><a href="classarmnn_1_1_neon_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">armnn::NeonBackend::CreateBackendSpecificModelContext</a></div><div class="ttdeci">IBackendInternal::IBackendSpecificModelContextPtr CreateBackendSpecificModelContext(const ModelOptions &amp;modelOptions) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_backend_8cpp_source.xhtml#l00118">NeonBackend.cpp:118</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a11fa919c11fe46aad613b2e960fcfe90"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">armnn::IBackendInternal::ILayerSupportSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; ILayerSupport &gt; ILayerSupportSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00094">IBackendInternal.hpp:94</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a339efc194a1738cd93fcdde4d948a5cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a339efc194a1738cd93fcdde4d948a5cd">&#9670;&nbsp;</a></span>OptimizeSubgraphView()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a> OptimizeSubgraphView </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> &amp;&#160;</td>
          <td class="paramname"><em>subgraph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a3623ac8294bf071d68eb7d71383e9a83">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00142">142</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::Activation</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::Addition</a>, <a class="el" href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00044">OptimizationViews::AddUntouchedSubgraph()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::BatchNormalization</a>, <a class="el" href="_subgraph_view_8cpp_source.xhtml#l00316">SubgraphView::beginIConnectable()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00253">Layer::BeginOutputSlots()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::Convolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::DepthwiseConvolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::Division</a>, <a class="el" href="_subgraph_view_8cpp_source.xhtml#l00321">SubgraphView::endIConnectable()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00254">Layer::EndOutputSlots()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::FullyConnected</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00355">Layer::GetAdditionalInformation()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00056">InputSlot::GetConnectedOutputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00330">Layer::GetGuid()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00324">Layer::GetInputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00319">Layer::GetName()</a>, <a class="el" href="_layer_with_parameters_8hpp_source.xhtml#l00019">LayerWithParameters&lt; Parameters &gt;::GetParameters()</a>, <a class="el" href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00049">OptimizationViews::GetSubstitutions()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00092">OutputSlot::GetTensorInfo()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00273">Layer::GetType()</a>, <a class="el" href="_batch_normalization_layer_8hpp_source.xhtml#l00023">BatchNormalizationLayer::m_Beta</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00543">Convolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00669">DepthwiseConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_batch_normalization_layer_8hpp_source.xhtml#l00025">BatchNormalizationLayer::m_Gamma</a>, <a class="el" href="_batch_normalization_layer_8hpp_source.xhtml#l00019">BatchNormalizationLayer::m_Mean</a>, <a class="el" href="_batch_normalization_layer_8hpp_source.xhtml#l00021">BatchNormalizationLayer::m_Variance</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::Multiplication</a>, <a class="el" href="_neon_addition_workload_8cpp_source.xhtml#l00020">armnn::NeonAdditionWorkloadValidate()</a>, <a class="el" href="_neon_batch_normalization_workload_8cpp_source.xhtml#l00024">armnn::NeonBatchNormalizationValidate()</a>, <a class="el" href="_neon_convolution2d_workload_8cpp_source.xhtml#l00024">armnn::NeonConvolution2dWorkloadValidate()</a>, <a class="el" href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00029">armnn::NeonDepthwiseConvolutionWorkloadValidate()</a>, <a class="el" href="_neon_division_workload_8cpp_source.xhtml#l00018">armnn::NeonDivisionWorkloadValidate()</a>, <a class="el" href="_neon_fully_connected_workload_8cpp_source.xhtml#l00024">armnn::NeonFullyConnectedWorkloadValidate()</a>, <a class="el" href="_neon_multiplication_workload_8cpp_source.xhtml#l00019">armnn::NeonMultiplicationWorkloadValidate()</a>, <a class="el" href="_neon_subtraction_workload_8cpp_source.xhtml#l00022">armnn::NeonSubtractionWorkloadValidate()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::Reduce</a>, <a class="el" href="_subgraph_utils_8hpp_source.xhtml#l00052">armnn::ReportUntouchedLayers()</a>, and <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::Subtraction</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8hpp_source.xhtml#l00033">NeonBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    OptimizationViews optimizationViews(modelOptions);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">auto</span> it = subgraph.endIConnectable();</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    std::map&lt;LayerGuid, Layer*&gt; untouched;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">while</span> (it != subgraph.beginIConnectable())</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        --it;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        Layer&amp; base = *(PolymorphicDowncast&lt;Layer*&gt;(*it));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        untouched.insert({base.GetGuid(), &amp;base});</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    it = subgraph.endIConnectable();</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">while</span> (it != subgraph.beginIConnectable())</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        --it;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        Layer&amp; base = *(PolymorphicDowncast&lt;Layer*&gt;(*it));</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="comment">// Fuse activation into previous layer if supported by backend</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">if</span> ((base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">LayerType::DepthwiseConvolution2d</a> || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">LayerType::Convolution2d</a></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;             || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">LayerType::BatchNormalization</a> || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">LayerType::FullyConnected</a></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;             || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a> || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">LayerType::Multiplication</a></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;             || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">LayerType::Subtraction</a> || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">LayerType::Division</a>)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            &amp;&amp; (base.GetAdditionalInformation&lt;ActivationDescriptor&gt;() == <span class="keyword">nullptr</span>))</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> output = base.BeginOutputSlots(); output != base.EndOutputSlots(); ++output)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keywordflow">if</span> (output-&gt;GetNumConnections() == 1)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; childInput : output-&gt;GetConnections())</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        <span class="keywordflow">if</span> ((childInput-&gt;GetOwningLayer().GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">LayerType::Activation</a>) &amp;&amp;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                            (checkDataTypeInputandOutput(childInput-&gt;GetOwningLayer())))</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                            Layer&amp; child = childInput-&gt;GetOwningLayer();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                            <span class="keyword">auto</span>* activationLayer = PolymorphicDowncast&lt;ActivationLayer*&gt;(&amp;child);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                            <span class="keyword">const</span> std::string name = std::string(<span class="stringliteral">&quot;fused-&quot;</span>) + child.GetName() + std::string(<span class="stringliteral">&quot;-into-&quot;</span>) +</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                                     base.GetName();</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                            <span class="comment">// Get params from activation layer</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                            ActivationDescriptor activationDesc = activationLayer-&gt;GetParameters();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                            <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">LayerType::Convolution2d</a>)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                            {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                Convolution2dLayer* baseLayer = PolymorphicDowncast&lt;Convolution2dLayer*&gt;(&amp;base);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                Optional&lt;TensorInfo&gt; biases;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                <span class="keywordflow">if</span> (baseLayer-&gt;GetParameters().m_BiasEnabled)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                    biases = baseLayer-&gt;GetInputSlot(2).GetConnectedOutputSlot()-&gt;GetTensorInfo();</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#a45691b0c4a46c239b4986cfed95de13b">NeonConvolution2dWorkloadValidate</a>(</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                        baseLayer-&gt;GetParameters(),</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                        biases,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                        <span class="keyword">false</span>,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                    FuseConvolution2dLayer&lt;Convolution2dLayer&gt;(optimizationViews,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                                                               baseLayer,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                                                               activationLayer,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                                                                               activationDesc,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                                                               name);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                            }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">LayerType::DepthwiseConvolution2d</a>)</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                            {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                DepthwiseConvolution2dLayer* baseLayer =</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                        PolymorphicDowncast&lt;DepthwiseConvolution2dLayer*&gt;(&amp;base);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                Optional&lt;TensorInfo&gt; biases;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                <span class="keywordflow">if</span> (baseLayer-&gt;GetParameters().m_BiasEnabled)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                    biases = baseLayer-&gt;GetInputSlot(2).GetConnectedOutputSlot()-&gt;GetTensorInfo();</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">NeonDepthwiseConvolutionWorkloadValidate</a>(</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                        baseLayer-&gt;GetParameters(),</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                        biases,</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                    FuseDepthwiseConvolution2dLayer&lt;DepthwiseConvolution2dLayer&gt;(optimizationViews,</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                                                                                 baseLayer,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                                                                                 activationLayer,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                                                                                 activationDesc,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                                                                                 name);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                            }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">LayerType::FullyConnected</a>)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                            {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                FullyConnectedLayer* baseLayer = PolymorphicDowncast&lt;FullyConnectedLayer*&gt;(&amp;base);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                FullyConnectedDescriptor descriptor = baseLayer-&gt;GetParameters();</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                <span class="comment">// As bias is optional only try to get TensorInfo from input if bias is enabled.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                Optional&lt;TensorInfo&gt; biases;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                <span class="keywordflow">if</span> (descriptor.m_BiasEnabled)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                    biases = baseLayer-&gt;GetInputSlot(2).GetConnectedOutputSlot()-&gt;GetTensorInfo();</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#ae455144d3472c502b636697f4775400c">NeonFullyConnectedWorkloadValidate</a>(</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                        biases,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                        baseLayer-&gt;GetParameters(),</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                    FuseFullyConnectedLayer&lt;FullyConnectedLayer&gt;(optimizationViews,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                                                                 baseLayer,</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                                                                 activationLayer,</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                                                                 activationDesc,</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                                                                 name);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                            }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">LayerType::BatchNormalization</a>)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                            {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                BatchNormalizationLayer* baseLayer =</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                        PolymorphicDowncast&lt;BatchNormalizationLayer*&gt;(&amp;base);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#ac1be1c9a317b23b5684c83af59fb2c96">NeonBatchNormalizationValidate</a>(</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                        baseLayer-&gt;m_Mean-&gt;GetTensorInfo(),</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                        baseLayer-&gt;m_Variance-&gt;GetTensorInfo(),</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                        baseLayer-&gt;m_Beta-&gt;GetTensorInfo(),</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                        baseLayer-&gt;m_Gamma-&gt;GetTensorInfo(),</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                        baseLayer-&gt;GetParameters(),</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                    BatchNormalizationLayer* replacementLayer =</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                        FuseBatchNormalizationLayer&lt;BatchNormalizationLayer&gt;(optimizationViews,</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                                                                             baseLayer,</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                                                                             activationLayer,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                                                                             activationDesc,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                                                                             name);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                    replacementLayer-&gt;m_Beta     = std::move(baseLayer-&gt;m_Beta);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                    replacementLayer-&gt;m_Gamma    = std::move(baseLayer-&gt;m_Gamma);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                    replacementLayer-&gt;m_Mean     = std::move(baseLayer-&gt;m_Mean);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                    replacementLayer-&gt;m_Variance = std::move(baseLayer-&gt;m_Variance);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                            }</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                            {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                                AdditionLayer* baseLayer = PolymorphicDowncast&lt;AdditionLayer*&gt;(&amp;base);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#a1b03e82a1a53b686aedea3734b2fb957">NeonAdditionWorkloadValidate</a>(</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                                    FuseAdditionLayer&lt;AdditionLayer&gt;(optimizationViews,</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                                                     baseLayer,</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                                                     activationLayer,</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                                                                     activationDesc,</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                                                     name);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                                }</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                            }</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">LayerType::Division</a>)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                            {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                DivisionLayer* baseLayer = PolymorphicDowncast&lt;DivisionLayer*&gt;(&amp;base);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#a65c912bfcf02b3096f36caf21fa175d0">NeonDivisionWorkloadValidate</a>(</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                {</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                    FuseDivisionLayer&lt;DivisionLayer&gt;(optimizationViews,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                                                     baseLayer,</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                                                     activationLayer,</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                                                     activationDesc,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                                                     name);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                }</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                            }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">LayerType::Multiplication</a>)</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                            {</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                MultiplicationLayer* baseLayer = PolymorphicDowncast&lt;MultiplicationLayer*&gt;(&amp;base);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#ad512520e809bfed4fbd3db9fbc241263">NeonMultiplicationWorkloadValidate</a>(</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                {</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                    FuseMultiplicationLayer&lt;MultiplicationLayer&gt;(optimizationViews,</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                                                                 baseLayer,</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                                                                 activationLayer,</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                                                                 activationDesc,</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                                                                 name);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                            }</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">LayerType::Subtraction</a>)</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                            {</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                SubtractionLayer* baseLayer = PolymorphicDowncast&lt;SubtractionLayer*&gt;(&amp;base);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#abc968e1323027f9e42cbc7642800d5ce">NeonSubtractionWorkloadValidate</a>(</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                    FuseSubtractionLayer&lt;SubtractionLayer&gt;(optimizationViews,</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                                                           baseLayer,</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                                                           activationLayer,</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                                                           activationDesc,</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                                                           name);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                }</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                            }</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                        }</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                    }</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                }</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        }</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="comment">// Separate reduce layer with multiple axes into multiple reduce layers with 1 axis.</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">LayerType::Reduce</a>)</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            ReduceLayer* baseLayer            = PolymorphicDowncast&lt;ReduceLayer*&gt;(&amp;base);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            ReduceDescriptor reduceDescriptor = baseLayer-&gt;GetParameters();</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            <span class="keywordflow">if</span> (!reduceDescriptor.m_vAxis.empty() &amp;&amp; reduceDescriptor.m_vAxis.size() &gt; 1)</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            {</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                <span class="comment">// Add new layers to the graph and connect them.</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                std::vector&lt;IConnectableLayer*&gt; layers = ChainReduceLayers&lt;ReduceLayer&gt;(optimizationViews,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                                                                        baseLayer,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                                                                        reduceDescriptor);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                <span class="comment">// Replace existing baselayer with new subgraph.</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                ReplaceLayers&lt;ReduceLayer&gt;(optimizationViews, baseLayer, layers);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            }</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        }</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    }</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordflow">if</span> (optimizationViews.GetSubstitutions().empty())</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    {</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        optimizationViews.AddUntouchedSubgraph(SubgraphView(subgraph));</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    }</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    {</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <a class="code" href="namespacearmnn.xhtml#aa1002c35597679b4f6624827524af04e">ReportUntouchedLayers</a>(optimizationViews, untouched);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    }</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keywordflow">return</span> optimizationViews;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ac1be1c9a317b23b5684c83af59fb2c96"><div class="ttname"><a href="namespacearmnn.xhtml#ac1be1c9a317b23b5684c83af59fb2c96">armnn::NeonBatchNormalizationValidate</a></div><div class="ttdeci">arm_compute::Status NeonBatchNormalizationValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_batch_normalization_workload_8cpp_source.xhtml#l00024">NeonBatchNormalizationWorkload.cpp:24</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa1002c35597679b4f6624827524af04e"><div class="ttname"><a href="namespacearmnn.xhtml#aa1002c35597679b4f6624827524af04e">armnn::ReportUntouchedLayers</a></div><div class="ttdeci">void ReportUntouchedLayers(OptimizationViews &amp;optimizationViews, std::map&lt; LayerGuid, Layer *&gt; untouched)</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_utils_8hpp_source.xhtml#l00052">SubgraphUtils.hpp:52</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a63d684b26fb838b22123490d780bce08"><div class="ttname"><a href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">armnn::NeonDepthwiseConvolutionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDepthwiseConvolutionWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00029">NeonDepthwiseConvolutionWorkload.cpp:29</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae455144d3472c502b636697f4775400c"><div class="ttname"><a href="namespacearmnn.xhtml#ae455144d3472c502b636697f4775400c">armnn::NeonFullyConnectedWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonFullyConnectedWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const FullyConnectedDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_fully_connected_workload_8cpp_source.xhtml#l00024">NeonFullyConnectedWorkload.cpp:24</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::LayerType::FullyConnected</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::LayerType::Reduce</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1b03e82a1a53b686aedea3734b2fb957"><div class="ttname"><a href="namespacearmnn.xhtml#a1b03e82a1a53b686aedea3734b2fb957">armnn::NeonAdditionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonAdditionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_addition_workload_8cpp_source.xhtml#l00020">NeonAdditionWorkload.cpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abc968e1323027f9e42cbc7642800d5ce"><div class="ttname"><a href="namespacearmnn.xhtml#abc968e1323027f9e42cbc7642800d5ce">armnn::NeonSubtractionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSubtractionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_subtraction_workload_8cpp_source.xhtml#l00022">NeonSubtractionWorkload.cpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::LayerType::Convolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00042">Types.hpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a45691b0c4a46c239b4986cfed95de13b"><div class="ttname"><a href="namespacearmnn.xhtml#a45691b0c4a46c239b4986cfed95de13b">armnn::NeonConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_convolution2d_workload_8cpp_source.xhtml#l00024">NeonConvolution2dWorkload.cpp:24</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a65c912bfcf02b3096f36caf21fa175d0"><div class="ttname"><a href="namespacearmnn.xhtml#a65c912bfcf02b3096f36caf21fa175d0">armnn::NeonDivisionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDivisionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_division_workload_8cpp_source.xhtml#l00018">NeonDivisionWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::LayerType::DepthwiseConvolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::LayerType::Division</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad512520e809bfed4fbd3db9fbc241263"><div class="ttname"><a href="namespacearmnn.xhtml#ad512520e809bfed4fbd3db9fbc241263">armnn::NeonMultiplicationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMultiplicationWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_multiplication_workload_8cpp_source.xhtml#l00019">NeonMultiplicationWorkload.cpp:19</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a583bc4404a9d27ee1f8c46239637125d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a583bc4404a9d27ee1f8c46239637125d">&#9670;&nbsp;</a></span>RegisterTensorHandleFactories()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void RegisterTensorHandleFactories </td>
          <td>(</td>
          <td class="paramtype">class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Register TensorHandleFactories Either this method or <a class="el" href="classarmnn_1_1_neon_backend.xhtml#a93fcb3bff141d8c77b53466a44b58eee">CreateMemoryManager()</a> and IWorkloadFactory::CreateTensor() IWorkloadFactory::CreateSubtensor() methods must be implemented. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a517bc1a44d6d2d7a45c1847fba287135">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_backend_8cpp_source.xhtml#l00441">441</a> of file <a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">BaseMemoryManager::Offset</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00066">TensorHandleFactoryRegistry::RegisterCopyAndImportFactoryPair()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00012">TensorHandleFactoryRegistry::RegisterFactory()</a>, and <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00034">TensorHandleFactoryRegistry::RegisterMemoryManager()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8hpp_source.xhtml#l00033">NeonBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;{</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keyword">auto</span> memoryManager = std::make_shared&lt;NeonMemoryManager&gt;(std::make_unique&lt;arm_compute::Allocator&gt;(),</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                                             <a class="code" href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">BaseMemoryManager::MemoryAffinity::Offset</a>);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    registry.RegisterMemoryManager(memoryManager);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keyword">auto</span> factory = std::make_unique&lt;NeonTensorHandleFactory&gt;(memoryManager);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="comment">// Register copy and import factory pair</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    registry.RegisterCopyAndImportFactoryPair(factory-&gt;GetId(), factory-&gt;GetId());</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="comment">// Register the factory</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    registry.RegisterFactory(std::move(factory));</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_base_memory_manager_xhtml_aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e"><div class="ttname"><a href="classarmnn_1_1_base_memory_manager.xhtml#aaadc6dca70e0b3cc64ae0aba17be0aaeadfd0a82c4bf37b1e90b690a22a20692e">armnn::BaseMemoryManager::MemoryAffinity::Offset</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/neon/<a class="el" href="_neon_backend_8hpp_source.xhtml">NeonBackend.hpp</a></li>
<li>src/backends/neon/<a class="el" href="_neon_backend_8cpp_source.xhtml">NeonBackend.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_neon_backend.xhtml">NeonBackend</a></li>
    <li class="footer">Generated on Wed Nov 23 2022 10:57:41 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
