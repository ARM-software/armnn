<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/MinimumTestImpl.hpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_minimum_test_impl_8hpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MinimumTestImpl.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="include_2armnn_test_utils_2_layer_test_result_8hpp_source.xhtml">armnnTestUtils/LayerTestResult.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_half_8hpp_source.xhtml">Half.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_i_backend_internal_8hpp_source.xhtml">armnn/backends/IBackendInternal.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml">armnn/backends/WorkloadFactory.hpp</a>&gt;</code><br />
</div>
<p><a href="_minimum_test_impl_8hpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:afbb0d5288fd45940575db1be8a9a0b7a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#afbb0d5288fd45940575db1be8a9a0b7a">MinimumBroadcast1ElementTest1</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:afbb0d5288fd45940575db1be8a9a0b7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0d6a66720576a313eed34244f98948c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#ad0d6a66720576a313eed34244f98948c">MinimumBroadcast1ElementTest2</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:ad0d6a66720576a313eed34244f98948c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a821d46ff2da8a7b28ba9d598ccac6e9e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; uint8_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#a821d46ff2da8a7b28ba9d598ccac6e9e">MinimumBroadcast1DVectorUint8Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a821d46ff2da8a7b28ba9d598ccac6e9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4137937813214a30bed47bec6741ee9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; <a class="el" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a>, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#af4137937813214a30bed47bec6741ee9">MinimumFloat16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:af4137937813214a30bed47bec6741ee9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27938c387664aabd35d738e2ef11f5a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; <a class="el" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a>, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#a27938c387664aabd35d738e2ef11f5a1">MinimumBroadcast1ElementFloat16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a27938c387664aabd35d738e2ef11f5a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0aff10ec06a2cfa53d055badbed61c9a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; <a class="el" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a>, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#a0aff10ec06a2cfa53d055badbed61c9a">MinimumBroadcast1DVectorFloat16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a0aff10ec06a2cfa53d055badbed61c9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac30ef496f98ff51fa372d8dde3782163"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#ac30ef496f98ff51fa372d8dde3782163">MinimumInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:ac30ef496f98ff51fa372d8dde3782163"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa25001e43d8e8139398522952fecb4ce"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#aa25001e43d8e8139398522952fecb4ce">MinimumBroadcast1ElementInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:aa25001e43d8e8139398522952fecb4ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6de81e6a2716a97985fcf0edeec169c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int16_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#a6de81e6a2716a97985fcf0edeec169c8">MinimumBroadcast1DVectorInt16Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a6de81e6a2716a97985fcf0edeec169c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63eff6203a293eaa2b35640fb25cff8a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int32_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#a63eff6203a293eaa2b35640fb25cff8a">MinimumInt32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a63eff6203a293eaa2b35640fb25cff8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25dc8ecaa66e502acb1fc60d4afc98b0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int32_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#a25dc8ecaa66e502acb1fc60d4afc98b0">MinimumBroadcast1ElementInt32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a25dc8ecaa66e502acb1fc60d4afc98b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14f19bbf241882d57c95c10531d106fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; int32_t, 4 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_minimum_test_impl_8hpp.xhtml#a14f19bbf241882d57c95c10531d106fb">MinimumBroadcast1DVectorInt32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory)</td></tr>
<tr class="separator:a14f19bbf241882d57c95c10531d106fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a0aff10ec06a2cfa53d055badbed61c9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0aff10ec06a2cfa53d055badbed61c9a">&#9670;&nbsp;</a></span>MinimumBroadcast1DVectorFloat16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;<a class="el" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a>, 4&gt; MinimumBroadcast1DVectorFloat16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00181">181</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">using namespace </span>half_float::literal;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 3 };</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    std::vector&lt;armnn::Half&gt; input0 =</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        1._h, 2._h, 3._h,  4._h,  5._h,  6._h,</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        7._h, 8._h, 9._h, 10._h, 11._h, 12._h</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    };</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::vector&lt;armnn::Half&gt; input1 = { 1._h, 10._h, 3._h };</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    std::vector&lt;armnn::Half&gt; output =</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        1._h, 2._h, 3._h, 1._h,  5._h, 3._h,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        1._h, 8._h, 3._h, 1._h, 10._h, 3._h</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    };</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::Float16&gt;(</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        workloadFactory,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        memoryManager,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        shape0,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        input0,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        shape1,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        input1,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        shape0,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        output,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6de81e6a2716a97985fcf0edeec169c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6de81e6a2716a97985fcf0edeec169c8">&#9670;&nbsp;</a></span>MinimumBroadcast1DVectorInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; MinimumBroadcast1DVectorInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00287">287</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 3 };</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    std::vector&lt;int16_t&gt; input0 =</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        1, 2, 3,  4,  5,  6,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        7, 8, 9, 10, 11, 12</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    };</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    std::vector&lt;int16_t&gt; input1 = { 1, 10, 3 };</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    std::vector&lt;int16_t&gt; output =</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        1, 2, 3, 1,  5, 3,</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        1, 8, 3, 1, 10, 3</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    };</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        workloadFactory,</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        memoryManager,</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        shape0,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        input0,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        shape1,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        input1,</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        shape0,</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        output,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a14f19bbf241882d57c95c10531d106fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14f19bbf241882d57c95c10531d106fb">&#9670;&nbsp;</a></span>MinimumBroadcast1DVectorInt32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int32_t, 4&gt; MinimumBroadcast1DVectorInt32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00392">392</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;{</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 3 };</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    std::vector&lt;int32_t&gt; input0 =</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    {</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        1, 2, 3,  4,  5,  6,</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        7, 8, 9, 10, 11, 12</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    };</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    std::vector&lt;int32_t&gt; input1 = { 1, 10, 3 };</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    std::vector&lt;int32_t&gt; output =</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    {</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        1, 2, 3, 1,  5, 3,</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        1, 8, 3, 1, 10, 3</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    };</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        workloadFactory,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        memoryManager,</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        shape0,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        input0,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        shape1,</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        input1,</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        shape0,</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        output,</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a821d46ff2da8a7b28ba9d598ccac6e9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a821d46ff2da8a7b28ba9d598ccac6e9e">&#9670;&nbsp;</a></span>MinimumBroadcast1DVectorUint8Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;uint8_t, 4&gt; MinimumBroadcast1DVectorUint8Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 3 };</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::vector&lt;uint8_t&gt; input0 =</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        1, 2, 3, 3, 2, 1,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        7, 1, 2, 3, 4, 5</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    };</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    std::vector&lt;uint8_t&gt; input1 = { 1, 2, 3 };</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    std::vector&lt;uint8_t&gt; output =</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        1, 2, 3, 1, 2, 1,</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        1, 1, 2, 1, 2, 3</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    };</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::QAsymmU8&gt;(</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        workloadFactory,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        memoryManager,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        shape0,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        input0,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        shape1,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        input1,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        shape0,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        output,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a27938c387664aabd35d738e2ef11f5a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27938c387664aabd35d738e2ef11f5a1">&#9670;&nbsp;</a></span>MinimumBroadcast1ElementFloat16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;<a class="el" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a>, 4&gt; MinimumBroadcast1ElementFloat16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00145">145</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">using namespace </span>half_float::literal;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 1 };</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    std::vector&lt;armnn::Half&gt; input0 =</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        1._h, 2._h, 3._h,  4._h,  5._h,  6._h,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        7._h, 8._h, 9._h, 10._h, 11._h, 12._h</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    };</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    std::vector&lt;armnn::Half&gt; input1 = { 2._h };</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    std::vector&lt;armnn::Half&gt; output =</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        1._h, 2._h, 2._h, 2._h, 2._h, 2._h,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        2._h, 2._h, 2._h, 2._h, 2._h, 2._h</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    };</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::Float16&gt;(</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        workloadFactory,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        memoryManager,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        shape0,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        input0,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        shape1,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        input1,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        shape0,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        output,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa25001e43d8e8139398522952fecb4ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa25001e43d8e8139398522952fecb4ce">&#9670;&nbsp;</a></span>MinimumBroadcast1ElementInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t, 4&gt; MinimumBroadcast1ElementInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00253">253</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 1 };</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    std::vector&lt;int16_t&gt; input0 =</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        1, 2, 3,  4,  5,  6,</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        7, 8, 9, 10, 11, 12</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    };</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    std::vector&lt;int16_t&gt; input1 = { 2 };</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    std::vector&lt;int16_t&gt; output =</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        1, 2, 2, 2, 2, 2,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        2, 2, 2, 2, 2, 2</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    };</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        workloadFactory,</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        memoryManager,</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        shape0,</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        input0,</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        shape1,</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        input1,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        shape0,</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        output,</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a25dc8ecaa66e502acb1fc60d4afc98b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25dc8ecaa66e502acb1fc60d4afc98b0">&#9670;&nbsp;</a></span>MinimumBroadcast1ElementInt32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int32_t, 4&gt; MinimumBroadcast1ElementInt32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00358">358</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;{</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 3 };</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 1 };</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    std::vector&lt;int32_t&gt; input0 =</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    {</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        1, 2, 3,  4,  5,  6,</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        7, 8, 9, 10, 11, 12</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    };</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    std::vector&lt;int32_t&gt; input1 = { 2 };</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    std::vector&lt;int32_t&gt; output =</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        1, 2, 2, 2, 2, 2,</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        2, 2, 2, 2, 2, 2</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    };</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        workloadFactory,</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        memoryManager,</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        shape0,</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        input0,</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        shape1,</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        input1,</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        shape0,</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        output,</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afbb0d5288fd45940575db1be8a9a0b7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbb0d5288fd45940575db1be8a9a0b7a">&#9670;&nbsp;</a></span>MinimumBroadcast1ElementTest1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; MinimumBroadcast1ElementTest1 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00019">19</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 2 };</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 1 };</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    std::vector&lt;float&gt; input0 = { 1.f, 2.f, 3.f, 4.f, 5.f, 6.f, 7.f, 8.f };</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    std::vector&lt;float&gt; input1 = { 2.f };</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    std::vector&lt;float&gt; output = { 1.f, 2.f, 2.f, 2.f, 2.f, 2.f, 2.f, 2.f };</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        workloadFactory,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        memoryManager,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        shape0,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        input0,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        shape1,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        input1,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        shape0,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        output,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad0d6a66720576a313eed34244f98948c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0d6a66720576a313eed34244f98948c">&#9670;&nbsp;</a></span>MinimumBroadcast1ElementTest2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 4&gt; MinimumBroadcast1ElementTest2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_tests_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[] = { 1, 2, 2, 2 };</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[] = { 1, 1, 1, 1 };</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    std::vector&lt;float&gt; input0 = { 1.f, 6.f, 3.f, 2.f, 8.f, 9.f, 1.f, 10.f };</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::vector&lt;float&gt; input1 = { 5.f };</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    std::vector&lt;float&gt; output = { 1.f, 5.f, 3.f, 2.f, 5.f, 5.f, 1.f, 5.f };</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        workloadFactory,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        memoryManager,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        shape0,</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        input0,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        shape1,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        input1,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        shape0,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        output,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af4137937813214a30bed47bec6741ee9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4137937813214a30bed47bec6741ee9">&#9670;&nbsp;</a></span>MinimumFloat16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;<a class="el" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a> , 4&gt; MinimumFloat16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00106">106</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">using namespace </span>half_float::literal;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = { 2, 2, 2, 2 };</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    std::vector&lt;armnn::Half&gt; input0 =</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        1._h, 1._h, 1._h, 1._h, 6._h, 6._h, 6._h, 6._h,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        3._h, 3._h, 3._h, 3._h, 4._h, 4._h, 4._h, 4._h</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    };</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    std::vector&lt;armnn::Half&gt; input1 =</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        2._h, 2._h, 2._h, 2._h, 3._h, 3._h, 3._h, 3._h,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        4._h, 4._h, 4._h, 4._h, 5._h, 5._h, 5._h, 5._h</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    };</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    std::vector&lt;armnn::Half&gt; output</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        1._h, 1._h, 1._h, 1._h, 3._h, 3._h, 3._h, 3._h,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        3._h, 3._h, 3._h, 3._h, 4._h, 4._h, 4._h, 4._h</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    };</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::Float16&gt;(</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        workloadFactory,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        memoryManager,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        shape,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        input0,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        shape,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        input1,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        shape,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        output,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac30ef496f98ff51fa372d8dde3782163"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac30ef496f98ff51fa372d8dde3782163">&#9670;&nbsp;</a></span>MinimumInt16Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int16_t , 4&gt; MinimumInt16Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00216">216</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;{</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = { 2, 2, 2, 2 };</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    std::vector&lt;int16_t&gt; input0 =</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        1, 1, 1, 1, 6, 6, 6, 6,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        3, 3, 3, 3, 4, 4, 4, 4</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    };</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    std::vector&lt;int16_t&gt; input1 =</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        2, 2, 2, 2, 3, 3, 3, 3,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        4, 4, 4, 4, 5, 5, 5, 5</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    };</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    std::vector&lt;int16_t&gt; output</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        1, 1, 1, 1, 3, 3, 3, 3,</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        3, 3, 3, 3, 4, 4, 4, 4</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    };</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::QSymmS16&gt;(</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        workloadFactory,</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        memoryManager,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        shape,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        input0,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        shape,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        input1,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        shape,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        output,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a63eff6203a293eaa2b35640fb25cff8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63eff6203a293eaa2b35640fb25cff8a">&#9670;&nbsp;</a></span>MinimumInt32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;int32_t , 4&gt; MinimumInt32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_minimum_test_impl_8cpp_source.xhtml#l00321">321</a> of file <a class="el" href="_minimum_test_impl_8cpp_source.xhtml">MinimumTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_layer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;{</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape[] = { 2, 2, 2, 2 };</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    std::vector&lt;int32_t&gt; input0 =</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        1, 1, 1, 1, 6, 6, 6, 6,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        3, 3, 3, 3, 4, 4, 4, 4</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    };</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    std::vector&lt;int32_t&gt; input1 =</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        2, 2, 2, 2, 3, 3, 3, 3,</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        4, 4, 4, 4, 5, 5, 5, 5</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    };</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    std::vector&lt;int32_t&gt; output</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    {</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        1, 1, 1, 1, 3, 3, 3, 3,</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        3, 3, 3, 3, 4, 4, 4, 4</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    };</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;4, armnn::MinimumQueueDescriptor, armnn::DataType::Signed32&gt;(</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        workloadFactory,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        memoryManager,</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        shape,</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        input0,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        shape,</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        input1,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        shape,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        output,</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        tensorHandleFactory);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_minimum_test_impl_8hpp.xhtml">MinimumTestImpl.hpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:26 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
