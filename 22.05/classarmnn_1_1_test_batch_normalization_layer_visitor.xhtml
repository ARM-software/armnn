<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: TestBatchNormalizationLayerVisitor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classarmnn_1_1_test_batch_normalization_layer_visitor-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TestBatchNormalizationLayerVisitor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml">ConstTensorLayerVisitor.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for TestBatchNormalizationLayerVisitor:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_test_batch_normalization_layer_visitor.png" usemap="#TestBatchNormalizationLayerVisitor_map" alt=""/>
  <map id="TestBatchNormalizationLayerVisitor_map" name="TestBatchNormalizationLayerVisitor_map">
<area href="classarmnn_1_1_test_layer_visitor.xhtml" alt="TestLayerVisitor" shape="rect" coords="0,112,212,136"/>
<area href="classarmnn_1_1_strategy_base.xhtml" alt="StrategyBase&lt; NoThrowStrategy &gt;" shape="rect" coords="0,56,212,80"/>
<area href="classarmnn_1_1_i_strategy.xhtml" alt="IStrategy" shape="rect" coords="0,0,212,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac22fdba4058911b3b322e7382203973a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml#ac22fdba4058911b3b322e7382203973a">TestBatchNormalizationLayerVisitor</a> (const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;mean, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;variance, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;beta, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;gamma, const char *name=nullptr)</td></tr>
<tr class="separator:ac22fdba4058911b3b322e7382203973a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49f7f1098adb86fd2197d9aee3924de2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml#a49f7f1098adb86fd2197d9aee3924de2">ExecuteStrategy</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a> &amp;descriptor, const std::vector&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &gt; &amp;constants, const char *name, const <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> id=0) override</td></tr>
<tr class="separator:a49f7f1098adb86fd2197d9aee3924de2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_test_layer_visitor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_test_layer_visitor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml">TestLayerVisitor</a></td></tr>
<tr class="memitem:a7bca6e8733a25190cb5b2731d31c195f inherit pub_methods_classarmnn_1_1_test_layer_visitor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a7bca6e8733a25190cb5b2731d31c195f">TestLayerVisitor</a> (const char *name)</td></tr>
<tr class="separator:a7bca6e8733a25190cb5b2731d31c195f inherit pub_methods_classarmnn_1_1_test_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_strategy"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_strategy')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a></td></tr>
<tr class="memitem:adf2f7effbf860b32e9a4ef2a73f84190 inherit pub_methods_classarmnn_1_1_i_strategy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_strategy.xhtml#adf2f7effbf860b32e9a4ef2a73f84190">FinishStrategy</a> ()</td></tr>
<tr class="separator:adf2f7effbf860b32e9a4ef2a73f84190 inherit pub_methods_classarmnn_1_1_i_strategy"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:abb0d5c2c24fc8c43d01e0fe503df2e93"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml#abb0d5c2c24fc8c43d01e0fe503df2e93">CheckDescriptor</a> (const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;descriptor)</td></tr>
<tr class="separator:abb0d5c2c24fc8c43d01e0fe503df2e93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_test_layer_visitor"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_test_layer_visitor')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml">TestLayerVisitor</a></td></tr>
<tr class="memitem:a91d4162aba5f047ac80adaf0abf9c804 inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a91d4162aba5f047ac80adaf0abf9c804">~TestLayerVisitor</a> ()</td></tr>
<tr class="separator:a91d4162aba5f047ac80adaf0abf9c804 inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50d9ed2d05fac25795824c880f0eee6b inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a50d9ed2d05fac25795824c880f0eee6b">CheckLayerName</a> (const char *name)</td></tr>
<tr class="separator:a50d9ed2d05fac25795824c880f0eee6b inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fb243351836fe2feebd36e7e3869154 inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a3fb243351836fe2feebd36e7e3869154">CheckLayerPointer</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *layer)</td></tr>
<tr class="separator:a3fb243351836fe2feebd36e7e3869154 inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab49c9a185af94e39ae9cd81aa8ec926c inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a> (const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;expected, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;actual)</td></tr>
<tr class="separator:ab49c9a185af94e39ae9cd81aa8ec926c inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7737443404804375fd677bc4b7c599be inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a7737443404804375fd677bc4b7c599be">CheckConstTensors</a> (const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;expected, const <a class="el" href="classarmnn_1_1_const_tensor_handle.xhtml">ConstTensorHandle</a> &amp;actual)</td></tr>
<tr class="separator:a7737443404804375fd677bc4b7c599be inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac45b7720c3156ab1004a904da7d42b44 inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#ac45b7720c3156ab1004a904da7d42b44">CheckConstTensorPtrs</a> (const std::string &amp;name, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> *expected, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> *actual)</td></tr>
<tr class="separator:ac45b7720c3156ab1004a904da7d42b44 inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a606572552d4609bbb3e9d46c1147f218 inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a606572552d4609bbb3e9d46c1147f218">CheckConstTensorPtrs</a> (const std::string &amp;name, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> *expected, const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_const_tensor_handle.xhtml">ConstTensorHandle</a> &gt; actual)</td></tr>
<tr class="separator:a606572552d4609bbb3e9d46c1147f218 inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d389b5affe2059991cfd9184b8e0b47 inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_test_layer_visitor.xhtml#a2d389b5affe2059991cfd9184b8e0b47">CheckOptionalConstTensors</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;expected, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;actual)</td></tr>
<tr class="separator:a2d389b5affe2059991cfd9184b8e0b47 inherit pro_methods_classarmnn_1_1_test_layer_visitor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_strategy_base"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_strategy_base')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_strategy_base.xhtml">StrategyBase&lt; NoThrowStrategy &gt;</a></td></tr>
<tr class="memitem:ae3168b9deef118b7f6031f6f38fdc781 inherit pro_methods_classarmnn_1_1_strategy_base"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_strategy_base.xhtml#ae3168b9deef118b7f6031f6f38fdc781">~StrategyBase</a> ()</td></tr>
<tr class="separator:ae3168b9deef118b7f6031f6f38fdc781 inherit pro_methods_classarmnn_1_1_strategy_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_strategy"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_strategy')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a></td></tr>
<tr class="memitem:a196ae18353afdcea7f8ab5c4cc7b3a6b inherit pro_methods_classarmnn_1_1_i_strategy"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_strategy.xhtml#a196ae18353afdcea7f8ab5c4cc7b3a6b">IStrategy</a> ()</td></tr>
<tr class="separator:a196ae18353afdcea7f8ab5c4cc7b3a6b inherit pro_methods_classarmnn_1_1_i_strategy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f538e1051453290c8b8bb61e417bce1 inherit pro_methods_classarmnn_1_1_i_strategy"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_strategy.xhtml#a6f538e1051453290c8b8bb61e417bce1">~IStrategy</a> ()</td></tr>
<tr class="separator:a6f538e1051453290c8b8bb61e417bce1 inherit pro_methods_classarmnn_1_1_i_strategy"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_attribs_classarmnn_1_1_strategy_base"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classarmnn_1_1_strategy_base')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classarmnn_1_1_strategy_base.xhtml">StrategyBase&lt; NoThrowStrategy &gt;</a></td></tr>
<tr class="memitem:a9a0391eb40693be520f3092c130c2a57 inherit pro_attribs_classarmnn_1_1_strategy_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1_no_throw_strategy.xhtml">NoThrowStrategy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_strategy_base.xhtml#a9a0391eb40693be520f3092c130c2a57">m_DefaultStrategy</a></td></tr>
<tr class="separator:a9a0391eb40693be520f3092c130c2a57 inherit pro_attribs_classarmnn_1_1_strategy_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00142">142</a> of file <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml">ConstTensorLayerVisitor.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ac22fdba4058911b3b322e7382203973a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac22fdba4058911b3b322e7382203973a">&#9670;&nbsp;</a></span>TestBatchNormalizationLayerVisitor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml">TestBatchNormalizationLayerVisitor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>variance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00145">145</a> of file <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml">ConstTensorLayerVisitor.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        : <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#a7bca6e8733a25190cb5b2731d31c195f">TestLayerVisitor</a>(name)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        , m_Descriptor(descriptor)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        , m_Mean(mean)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        , m_Variance(variance)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        , m_Beta(beta)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        , m_Gamma(gamma)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {}</div><div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_a7bca6e8733a25190cb5b2731d31c195f"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#a7bca6e8733a25190cb5b2731d31c195f">armnn::TestLayerVisitor::TestLayerVisitor</a></div><div class="ttdeci">TestLayerVisitor(const char *name)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8hpp_source.xhtml#l00041">TestLayerVisitor.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="abb0d5c2c24fc8c43d01e0fe503df2e93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb0d5c2c24fc8c43d01e0fe503df2e93">&#9670;&nbsp;</a></span>CheckDescriptor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckDescriptor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml">ConstTensorLayerVisitor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_descriptors_8hpp_source.xhtml#l00549">Convolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00808">BatchNormalizationDescriptor::m_DataLayout</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00806">BatchNormalizationDescriptor::m_Eps</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    CHECK(m_Descriptor.<a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">m_Eps</a> == descriptor.m_Eps);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    CHECK(m_Descriptor.<a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> == descriptor.m_DataLayout);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml_a11c821c7524251004a72ed13c510853c"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">armnn::BatchNormalizationDescriptor::m_Eps</a></div><div class="ttdeci">float m_Eps</div><div class="ttdoc">Value to add to the variance. Used to avoid dividing by zero. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00806">Descriptors.hpp:806</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::BatchNormalizationDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00808">Descriptors.hpp:808</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a49f7f1098adb86fd2197d9aee3924de2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49f7f1098adb86fd2197d9aee3924de2">&#9670;&nbsp;</a></span>ExecuteStrategy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ExecuteStrategy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>constants</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_strategy_base.xhtml#a889a82ed924e0a300c4d98a0333b37ff">StrategyBase&lt; NoThrowStrategy &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml#l00159">159</a> of file <a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml">ConstTensorLayerVisitor.hpp</a>.</p>

<p class="reference">References <a class="el" href="_strategy_base_8hpp_source.xhtml#l00022">NoThrowStrategy::Apply()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::BatchNormalization</a>, <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00034">TestLayerVisitor::CheckConstTensors()</a>, <a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00014">TestConvolution2dLayerVisitor::CheckDescriptor()</a>, <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00013">TestLayerVisitor::CheckLayerName()</a>, <a class="el" href="_test_layer_visitor_8cpp_source.xhtml#l00029">TestLayerVisitor::CheckLayerPointer()</a>, <a class="el" href="_internal_types_8cpp_source.xhtml#l00013">armnn::GetLayerTypeAsCString()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">IConnectableLayer::GetType()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_strategy_base_8hpp_source.xhtml#l00050">StrategyBase&lt; NoThrowStrategy &gt;::m_DefaultStrategy</a>.</p>
<div class="fragment"><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(descriptor, constants, <span class="keywordtype">id</span>);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">switch</span> (layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">GetType</a>())</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a>:</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#a3fb243351836fe2feebd36e7e3869154">CheckLayerPointer</a>(layer);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#a50d9ed2d05fac25795824c880f0eee6b">CheckLayerName</a>(name);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <a class="code" href="classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml#abb0d5c2c24fc8c43d01e0fe503df2e93">CheckDescriptor</a>(static_cast&lt;const armnn::BatchNormalizationDescriptor&amp;&gt;(descriptor));</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a>(m_Mean,     constants[0]);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a>(m_Variance, constants[1]);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a>(m_Beta,     constants[2]);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a>(m_Gamma,    constants[3]);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <a class="code" href="classarmnn_1_1_strategy_base.xhtml#a9a0391eb40693be520f3092c130c2a57">m_DefaultStrategy</a>.<a class="code" href="structarmnn_1_1_no_throw_strategy.xhtml#a2aca18ff985599b0b917abb4292b8a91">Apply</a>(<a class="code" href="namespacearmnn.xhtml#addb6b14dd1b632263ffe77430259a7c4">GetLayerTypeAsCString</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">GetType</a>()));</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_test_batch_normalization_layer_visitor_xhtml_abb0d5c2c24fc8c43d01e0fe503df2e93"><div class="ttname"><a href="classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml#abb0d5c2c24fc8c43d01e0fe503df2e93">armnn::TestBatchNormalizationLayerVisitor::CheckDescriptor</a></div><div class="ttdeci">void CheckDescriptor(const BatchNormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00045">ConstTensorLayerVisitor.cpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_a50d9ed2d05fac25795824c880f0eee6b"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#a50d9ed2d05fac25795824c880f0eee6b">armnn::TestLayerVisitor::CheckLayerName</a></div><div class="ttdeci">void CheckLayerName(const char *name)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00013">TestLayerVisitor.cpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_a3fb243351836fe2feebd36e7e3869154"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#a3fb243351836fe2feebd36e7e3869154">armnn::TestLayerVisitor::CheckLayerPointer</a></div><div class="ttdeci">void CheckLayerPointer(const IConnectableLayer *layer)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00029">TestLayerVisitor.cpp:29</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_ab49c9a185af94e39ae9cd81aa8ec926c"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">armnn::TestLayerVisitor::CheckConstTensors</a></div><div class="ttdeci">void CheckConstTensors(const ConstTensor &amp;expected, const ConstTensor &amp;actual)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00034">TestLayerVisitor.cpp:34</a></div></div>
<div class="ttc" id="classarmnn_1_1_strategy_base_xhtml_a9a0391eb40693be520f3092c130c2a57"><div class="ttname"><a href="classarmnn_1_1_strategy_base.xhtml#a9a0391eb40693be520f3092c130c2a57">armnn::StrategyBase&lt; NoThrowStrategy &gt;::m_DefaultStrategy</a></div><div class="ttdeci">NoThrowStrategy m_DefaultStrategy</div><div class="ttdef"><b>Definition:</b> <a href="_strategy_base_8hpp_source.xhtml#l00050">StrategyBase.hpp:50</a></div></div>
<div class="ttc" id="structarmnn_1_1_no_throw_strategy_xhtml_a2aca18ff985599b0b917abb4292b8a91"><div class="ttname"><a href="structarmnn_1_1_no_throw_strategy.xhtml#a2aca18ff985599b0b917abb4292b8a91">armnn::NoThrowStrategy::Apply</a></div><div class="ttdeci">void Apply(const std::string &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="_strategy_base_8hpp_source.xhtml#l00022">StrategyBase.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_adceb04ae84c524e4d01881e3754a4d59"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">armnn::IConnectableLayer::GetType</a></div><div class="ttdeci">virtual LayerType GetType() const =0</div><div class="ttdoc">Returns the armnn::LayerType of this layer. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_addb6b14dd1b632263ffe77430259a7c4"><div class="ttname"><a href="namespacearmnn.xhtml#addb6b14dd1b632263ffe77430259a7c4">armnn::GetLayerTypeAsCString</a></div><div class="ttdeci">const char * GetLayerTypeAsCString(LayerType type)</div><div class="ttdef"><b>Definition:</b> <a href="_internal_types_8cpp_source.xhtml#l00013">InternalTypes.cpp:13</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/test/<a class="el" href="_const_tensor_layer_visitor_8hpp_source.xhtml">ConstTensorLayerVisitor.hpp</a></li>
<li>src/armnn/test/<a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml">ConstTensorLayerVisitor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_test_batch_normalization_layer_visitor.xhtml">TestBatchNormalizationLayerVisitor</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:26 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
