<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ArmnnPreparedModel Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarmnn__driver_1_1_armnn_prepared_model.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn__driver_1_1_armnn_prepared_model-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ArmnnPreparedModel Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_armnn_prepared_model_8hpp_source.xhtml">ArmnnPreparedModel.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ArmnnPreparedModel:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn__driver_1_1_armnn_prepared_model.png" alt=""/>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a4905d77691ee9a2e9705e90557f64c2b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#a4905d77691ee9a2e9705e90557f64c2b">ArmnnPreparedModel</a> (<a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> networkId, <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> *runtime, const <a class="el" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a> &amp;model, const std::string &amp;requestInputsAndOutputsDumpDir, const bool gpuProfilingEnabled, Priority priority=Priority::MEDIUM)</td></tr>
<tr class="separator:a4905d77691ee9a2e9705e90557f64c2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b6d4da9a2af5b8c583f0e646e5798c5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#a5b6d4da9a2af5b8c583f0e646e5798c5">ArmnnPreparedModel</a> (<a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> networkId, <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> *runtime, const std::string &amp;requestInputsAndOutputsDumpDir, const bool gpuProfilingEnabled, Priority priority=Priority::MEDIUM, const bool prepareModelFromCache=false)</td></tr>
<tr class="separator:a5b6d4da9a2af5b8c583f0e646e5798c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8ea5639172e7326168e2b73ed07e47e"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#ac8ea5639172e7326168e2b73ed07e47e">~ArmnnPreparedModel</a> ()</td></tr>
<tr class="separator:ac8ea5639172e7326168e2b73ed07e47e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67e5c38788f9b0152baee24e8f57bc2b"><td class="memItemLeft" align="right" valign="top">ExecutionResult&lt; std::pair&lt; std::vector&lt; OutputShape &gt;, Timing &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#a67e5c38788f9b0152baee24e8f57bc2b">execute</a> (const Request &amp;request, MeasureTiming measureTiming, const OptionalTimePoint &amp;deadline, const OptionalDuration &amp;loopTimeoutDuration, const std::vector&lt; android::nn::TokenValuePair &gt; &amp;hints, const std::vector&lt; android::nn::ExtensionNameAndPrefix &gt; &amp;extensionNameToPrefix) const override</td></tr>
<tr class="separator:a67e5c38788f9b0152baee24e8f57bc2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d70cd869c7c1eda1c5891ba7e015661"><td class="memItemLeft" align="right" valign="top">GeneralResult&lt; std::pair&lt; SyncFence, ExecuteFencedInfoCallback &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#a8d70cd869c7c1eda1c5891ba7e015661">executeFenced</a> (const Request &amp;request, const std::vector&lt; SyncFence &gt; &amp;waitFor, MeasureTiming measureTiming, const OptionalTimePoint &amp;deadline, const OptionalDuration &amp;loopTimeoutDuration, const OptionalDuration &amp;timeoutDurationAfterFence, const std::vector&lt; android::nn::TokenValuePair &gt; &amp;hints, const std::vector&lt; android::nn::ExtensionNameAndPrefix &gt; &amp;extensionNameToPrefix) const override</td></tr>
<tr class="separator:a8d70cd869c7c1eda1c5891ba7e015661"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab108fedcef5c0d766444eb2def3b7bad"><td class="memItemLeft" align="right" valign="top">GeneralResult&lt; android::nn::SharedExecution &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#ab108fedcef5c0d766444eb2def3b7bad">createReusableExecution</a> (const Request &amp;request, MeasureTiming measureTiming, const OptionalDuration &amp;loopTimeoutDuration, const std::vector&lt; android::nn::TokenValuePair &gt; &amp;hints, const std::vector&lt; android::nn::ExtensionNameAndPrefix &gt; &amp;extensionNameToPrefix) const override</td></tr>
<tr class="separator:ab108fedcef5c0d766444eb2def3b7bad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d898cab83b5bb67f5b8f6a766ea245b"><td class="memItemLeft" align="right" valign="top">GeneralResult&lt; SharedBurst &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#a6d898cab83b5bb67f5b8f6a766ea245b">configureExecutionBurst</a> () const override</td></tr>
<tr class="separator:a6d898cab83b5bb67f5b8f6a766ea245b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0481f4c1ca5608339a5688daf256a4e4"><td class="memItemLeft" align="right" valign="top">std::any&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#a0481f4c1ca5608339a5688daf256a4e4">getUnderlyingResource</a> () const override</td></tr>
<tr class="separator:a0481f4c1ca5608339a5688daf256a4e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af62ba010a5b9f3187cfeb50db1dcad0a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn__driver.xhtml#a1fa5070fa0d079873acaf7581de8a2ad">ErrorStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#af62ba010a5b9f3187cfeb50db1dcad0a">ExecuteGraph</a> (std::shared_ptr&lt; std::vector&lt; android::nn::RunTimePoolInfo &gt;&gt; &amp;pMemPools, <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> &amp;inputTensors, <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> &amp;outputTensors, <a class="el" href="structarmnn__driver_1_1_canonical_execution_context.xhtml">CanonicalExecutionContext</a> callback, const bool pointerMemory=false) const</td></tr>
<tr class="memdesc:af62ba010a5b9f3187cfeb50db1dcad0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">execute the graph prepared from the request  <a href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#af62ba010a5b9f3187cfeb50db1dcad0a">More...</a><br /></td></tr>
<tr class="separator:af62ba010a5b9f3187cfeb50db1dcad0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac88833eb361390437abc2a81ab43d04a"><td class="memItemLeft" align="right" valign="top">Priority&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#ac88833eb361390437abc2a81ab43d04a">GetModelPriority</a> () const</td></tr>
<tr class="separator:ac88833eb361390437abc2a81ab43d04a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad84aace3d1df79ad6fa37dcd952c085f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#ad84aace3d1df79ad6fa37dcd952c085f">ExecuteWithDummyInputs</a> (unsigned int numInputs, unsigned int numOutputs) const</td></tr>
<tr class="memdesc:ad84aace3d1df79ad6fa37dcd952c085f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes this model with dummy inputs (e.g.  <a href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#ad84aace3d1df79ad6fa37dcd952c085f">More...</a><br /></td></tr>
<tr class="separator:ad84aace3d1df79ad6fa37dcd952c085f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00038">38</a> of file <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml">ArmnnPreparedModel.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a4905d77691ee9a2e9705e90557f64c2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4905d77691ee9a2e9705e90557f64c2b">&#9670;&nbsp;</a></span>ArmnnPreparedModel() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml">ArmnnPreparedModel</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> *&#160;</td>
          <td class="paramname"><em>runtime</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>requestInputsAndOutputsDumpDir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>gpuProfilingEnabled</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Priority&#160;</td>
          <td class="paramname"><em>priority</em> = <code>Priority::MEDIUM</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00126">126</a> of file <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    : m_NetworkId(networkId)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    , m_Runtime(runtime)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    , m_Model(model)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    , m_RequestInputsAndOutputsDumpDir(requestInputsAndOutputsDumpDir)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    , m_GpuProfilingEnabled(gpuProfilingEnabled)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    , m_ModelPriority(priority)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    , m_PrepareFromCache(<span class="keyword">false</span>)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    Init();</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5b6d4da9a2af5b8c583f0e646e5798c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b6d4da9a2af5b8c583f0e646e5798c5">&#9670;&nbsp;</a></span>ArmnnPreparedModel() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml">ArmnnPreparedModel</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> *&#160;</td>
          <td class="paramname"><em>runtime</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>requestInputsAndOutputsDumpDir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>gpuProfilingEnabled</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Priority&#160;</td>
          <td class="paramname"><em>priority</em> = <code>Priority::MEDIUM</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>prepareModelFromCache</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00143">143</a> of file <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    : m_NetworkId(networkId)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    , m_Runtime(runtime)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    , m_RequestInputsAndOutputsDumpDir(requestInputsAndOutputsDumpDir)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    , m_GpuProfilingEnabled(gpuProfilingEnabled)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    , m_ModelPriority(priority)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    , m_PrepareFromCache(prepareModelFromCache)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    Init();</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac8ea5639172e7326168e2b73ed07e47e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8ea5639172e7326168e2b73ed07e47e">&#9670;&nbsp;</a></span>~ArmnnPreparedModel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml">ArmnnPreparedModel</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00628">628</a> of file <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;{</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnPreparedModel::~ArmnnPreparedModel()&quot;</span>;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="comment">// Get a hold of the profiler used by this model.</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keywordflow">if</span> (m_GpuProfilingEnabled)</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    {</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        <span class="keyword">auto</span> profiler = m_Runtime-&gt;<a class="code" href="classarmnn_1_1_i_runtime.xhtml#af87d0743d1266e264c3197a32299f4b2">GetProfiler</a>(m_NetworkId);</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        <span class="keywordflow">if</span> (profiler)</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        {</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;            <span class="comment">// Dump the profiling info to a file if required.</span></div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#aa313ae79f70102e3451d45d3387c2e46">DumpJsonProfilingIfRequired</a>(m_GpuProfilingEnabled,</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                                        m_RequestInputsAndOutputsDumpDir,</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                                        m_NetworkId,</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                        profiler.get());</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        }</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    }</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="comment">// Unload the network associated with this model</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    m_Runtime-&gt;<a class="code" href="classarmnn_1_1_i_runtime.xhtml#aed397991b99f485ffab9a42aece47019">UnloadNetwork</a>(m_NetworkId);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_canonical_utils_8cpp_source.xhtml#l00350">armnn_driver::DumpJsonProfilingIfRequired()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00151">IRuntime::GetProfiler()</a>, and <a class="el" href="_runtime_8cpp_source.xhtml#l00136">IRuntime::UnloadNetwork()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a6d898cab83b5bb67f5b8f6a766ea245b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d898cab83b5bb67f5b8f6a766ea245b">&#9670;&nbsp;</a></span>configureExecutionBurst()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GeneralResult&lt; SharedBurst &gt; configureExecutionBurst </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00600">600</a> of file <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;{</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="comment">// TODO: Implement BURST</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ab108fedcef5c0d766444eb2def3b7bad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab108fedcef5c0d766444eb2def3b7bad">&#9670;&nbsp;</a></span>createReusableExecution()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GeneralResult&lt; SharedExecution &gt; createReusableExecution </td>
          <td>(</td>
          <td class="paramtype">const Request &amp;&#160;</td>
          <td class="paramname"><em>request</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">MeasureTiming&#160;</td>
          <td class="paramname"><em>measureTiming</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OptionalDuration &amp;&#160;</td>
          <td class="paramname"><em>loopTimeoutDuration</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; android::nn::TokenValuePair &gt; &amp;&#160;</td>
          <td class="paramname"><em>hints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; android::nn::ExtensionNameAndPrefix &gt; &amp;&#160;</td>
          <td class="paramname"><em>extensionNameToPrefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00586">586</a> of file <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;{</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnPreparedModel::createReusableExecution()&quot;</span>;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keywordflow">return</span> std::make_shared&lt;DefaultExecution&gt;(shared_from_this(),</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                                              request,</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                                              measureTiming,</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                                              loopTimeoutDuration);</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a67e5c38788f9b0152baee24e8f57bc2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67e5c38788f9b0152baee24e8f57bc2b">&#9670;&nbsp;</a></span>execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ExecutionResult&lt; std::pair&lt; std::vector&lt; OutputShape &gt;, Timing &gt; &gt; execute </td>
          <td>(</td>
          <td class="paramtype">const Request &amp;&#160;</td>
          <td class="paramname"><em>request</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">MeasureTiming&#160;</td>
          <td class="paramname"><em>measureTiming</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OptionalTimePoint &amp;&#160;</td>
          <td class="paramname"><em>deadline</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OptionalDuration &amp;&#160;</td>
          <td class="paramname"><em>loopTimeoutDuration</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; android::nn::TokenValuePair &gt; &amp;&#160;</td>
          <td class="paramname"><em>hints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; android::nn::ExtensionNameAndPrefix &gt; &amp;&#160;</td>
          <td class="paramname"><em>extensionNameToPrefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00295">295</a> of file <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;{</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;CanonicalDriver::PreparedModel::execute()&quot;</span>;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <a class="code" href="structarmnn__driver_1_1_canonical_execution_context.xhtml">CanonicalExecutionContext</a> ctx;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">if</span> (measureTiming == MeasureTiming::YES)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        ctx.<a class="code" href="structarmnn__driver_1_1_canonical_execution_context.xhtml#aeb7cb4ac5b343a8eb2efd91aeee37743">measureTimings</a> = measureTiming;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        ctx.<a class="code" href="structarmnn__driver_1_1_canonical_execution_context.xhtml#ab6f19cc463ef7a388af5de182a393ed2">driverStart</a> =  Clock::now();</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">if</span> (!m_PrepareFromCache)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> modelRequest = validateRequestForModel(request, m_Model);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">if</span> (!modelRequest.ok())</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::INVALID_ARGUMENT) &lt;&lt; modelRequest.error();</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnPreparedModel::execute(): &quot;</span> &lt;&lt; <a class="code" href="namespacearmnn__driver.xhtml#a31b494d1b36f5ed7fc7556a0fbc2c17c">GetModelSummary</a>(m_Model).c_str();</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordflow">if</span> (hasDeadlinePassed(deadline))</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::MISSED_DEADLINE_PERSISTENT);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="comment">// map the memory pool into shared pointers</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="comment">// use a shared memory pools vector on the heap, as it is passed to the request thread</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keyword">auto</span> memPools = std::make_shared&lt;std::vector&lt;android::nn::RunTimePoolInfo&gt;&gt;();</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="comment">// allocate the tensors on the heap, as they are passed to the request thread</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">auto</span> inputTensors = std::make_shared&lt;armnn::InputTensors&gt;();</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keyword">auto</span> outputTensors = std::make_shared&lt;armnn::OutputTensors&gt;();</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">auto</span> isPointerTypeMemory = IsPointerTypeMemory(request);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a1fa5070fa0d079873acaf7581de8a2ad">ErrorStatus</a> theErrorStatus = PrepareMemoryForIO(*inputTensors,</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                                    *outputTensors,</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                                    *memPools,</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                                    request,</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                                    isPointerTypeMemory);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">switch</span>(theErrorStatus)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keywordflow">case</span> ErrorStatus::OUTPUT_INSUFFICIENT_SIZE:</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::OUTPUT_INSUFFICIENT_SIZE);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keywordflow">case</span> ErrorStatus::GENERAL_FAILURE:</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keywordflow">case</span> ErrorStatus::INVALID_ARGUMENT:</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::INVALID_ARGUMENT);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        {}</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    std::vector&lt;OutputShape&gt; outputShapes(outputTensors-&gt;size());</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputTensors-&gt;size(); i++)</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        std::pair&lt;int, armnn::Tensor&gt; outputTensorPair = (*outputTensors)[i];</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a> outputTensor = outputTensorPair.second;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo = outputTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>();</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        outputShapes[i] = <a class="code" href="namespacearmnn__driver.xhtml#a93d7282d7b5701a723304d87fcdc3a43">ComputeShape</a>(outputTensorInfo);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    Timing theTiming;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnPreparedModel::execute(...) before ExecuteGraph&quot;</span>;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">auto</span> errorStatus = <a class="code" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#af62ba010a5b9f3187cfeb50db1dcad0a">ExecuteGraph</a>(memPools, *inputTensors, *outputTensors, ctx, isPointerTypeMemory);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">if</span> (errorStatus != ErrorStatus::NONE)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(errorStatus) &lt;&lt; <span class="stringliteral">&quot;execute() failed&quot;</span>;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnPreparedModel::execute(...) after ExecuteGraph&quot;</span>;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160; </div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">return</span> std::make_pair(outputShapes, theTiming);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_canonical_utils_8hpp_source.xhtml#l00095">armnn_driver::ComputeShape()</a>, <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00033">CanonicalExecutionContext::driverStart</a>, <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00375">ArmnnPreparedModel::ExecuteGraph()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00295">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_canonical_utils_8cpp_source.xhtml#l00521">armnn_driver::GetModelSummary()</a>, and <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00031">CanonicalExecutionContext::measureTimings</a>.</p>

</div>
</div>
<a id="a8d70cd869c7c1eda1c5891ba7e015661"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d70cd869c7c1eda1c5891ba7e015661">&#9670;&nbsp;</a></span>executeFenced()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GeneralResult&lt; std::pair&lt; SyncFence, ExecuteFencedInfoCallback &gt; &gt; executeFenced </td>
          <td>(</td>
          <td class="paramtype">const Request &amp;&#160;</td>
          <td class="paramname"><em>request</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; SyncFence &gt; &amp;&#160;</td>
          <td class="paramname"><em>waitFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">MeasureTiming&#160;</td>
          <td class="paramname"><em>measureTiming</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OptionalTimePoint &amp;&#160;</td>
          <td class="paramname"><em>deadline</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OptionalDuration &amp;&#160;</td>
          <td class="paramname"><em>loopTimeoutDuration</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OptionalDuration &amp;&#160;</td>
          <td class="paramname"><em>timeoutDurationAfterFence</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; android::nn::TokenValuePair &gt; &amp;&#160;</td>
          <td class="paramname"><em>hints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; android::nn::ExtensionNameAndPrefix &gt; &amp;&#160;</td>
          <td class="paramname"><em>extensionNameToPrefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00478">478</a> of file <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;{</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnPreparedModel::executeFenced()&quot;</span>;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160; </div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordflow">if</span> (!m_PrepareFromCache) {</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> modelRequest = validateRequestForModel(request, m_Model);</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">if</span> (!modelRequest.ok())</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        {</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::INVALID_ARGUMENT) &lt;&lt; modelRequest.error();</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnPreparedModel::executeFenced(): &quot;</span> &lt;&lt; <a class="code" href="namespacearmnn__driver.xhtml#a31b494d1b36f5ed7fc7556a0fbc2c17c">GetModelSummary</a>(m_Model).c_str();</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    }</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">if</span> (hasDeadlinePassed(deadline))</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    {</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::MISSED_DEADLINE_PERSISTENT);</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    }</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160; </div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <a class="code" href="structarmnn__driver_1_1_canonical_execution_context.xhtml">CanonicalExecutionContext</a> ctx;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keywordflow">if</span> (measureTiming == MeasureTiming::YES)</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    {</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        ctx.<a class="code" href="structarmnn__driver_1_1_canonical_execution_context.xhtml#aeb7cb4ac5b343a8eb2efd91aeee37743">measureTimings</a> = measureTiming;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        ctx.<a class="code" href="structarmnn__driver_1_1_canonical_execution_context.xhtml#ab6f19cc463ef7a388af5de182a393ed2">driverStart</a> =  Clock::now();</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    }</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160; </div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="comment">// Wait for the dependent events to signal</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; syncFence : waitFor)</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    {</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        <span class="keywordflow">if</span> (!syncFence.getSharedHandle())</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        {</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::INVALID_ARGUMENT);</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        }</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keywordflow">if</span> (syncFence.syncWait({}) != SyncFence::FenceState::SIGNALED)</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        {</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; <span class="stringliteral">&quot;syncWait failed&quot;</span>;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        }</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    }</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160; </div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    android::nn::TimePoint fenceExecutionStart;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keywordflow">if</span> (measureTiming == MeasureTiming::YES)</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    {</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        fenceExecutionStart = Clock::now();</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    }</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160; </div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="comment">// map the memory pool into shared pointers</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="comment">// use a shared memory pools vector on the heap, as it is passed to the request thread</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keyword">auto</span> memPools = std::make_shared&lt;std::vector&lt;android::nn::RunTimePoolInfo&gt;&gt;();</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160; </div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="comment">// allocate the tensors on the heap, as they are passed to the request thread</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keyword">auto</span> inputTensors = std::make_shared&lt;armnn::InputTensors&gt;();</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keyword">auto</span> outputTensors = std::make_shared&lt;armnn::OutputTensors&gt;();</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160; </div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keyword">auto</span> isPointerTypeMemory = IsPointerTypeMemory(request);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a1fa5070fa0d079873acaf7581de8a2ad">ErrorStatus</a> theErrorStatus = PrepareMemoryForIO(*inputTensors,</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                                                    *outputTensors,</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                                                    *memPools,</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                                                    request,</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                                    isPointerTypeMemory);</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160; </div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keywordflow">if</span> (theErrorStatus != ErrorStatus::NONE)</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    {</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::INVALID_ARGUMENT) &lt;&lt; <span class="stringliteral">&quot;executeFenced() failed&quot;</span>;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    }</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160; </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    Timing timingSinceLaunch = {};</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    Timing timingAfterFence  = {};</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keywordflow">if</span> (measureTiming == MeasureTiming::YES)</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    {</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        timingAfterFence.timeOnDevice = ctx.<a class="code" href="structarmnn__driver_1_1_canonical_execution_context.xhtml#ac4711bb6ab33a33529c62c2c6842a831">deviceEnd</a> - ctx.<a class="code" href="structarmnn__driver_1_1_canonical_execution_context.xhtml#a6da5957063ca094917c6e5bfeac65898">deviceStart</a>;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        timingAfterFence.timeInDriver = ctx.<a class="code" href="structarmnn__driver_1_1_canonical_execution_context.xhtml#a45f03338910173fc12dd2ac19521a742">driverEnd</a> - fenceExecutionStart;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;executeFenced timingSinceLaunch = &quot;</span> &lt;&lt; timingAfterFence.timeOnDevice;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;executeFenced timingAfterFence = &quot;</span> &lt;&lt; timingAfterFence.timeInDriver;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    }</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160; </div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnCanonicalPreparedModel::executeFenced(...) before ExecuteGraph&quot;</span>;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keyword">auto</span> errorStatus = <a class="code" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#af62ba010a5b9f3187cfeb50db1dcad0a">ExecuteGraph</a>(memPools, *inputTensors, *outputTensors, ctx, isPointerTypeMemory);</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnCanonicalPreparedModel::executeFenced(...) after ExecuteGraph&quot;</span>;</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160; </div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    ExecuteFencedInfoCallback armnnFencedExecutionCallback =</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            [timingSinceLaunch, timingAfterFence, errorStatus]() {</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160; </div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                GeneralResult&lt;std::pair&lt;Timing, Timing&gt;&gt; result;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160; </div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                <span class="keywordflow">switch</span>(errorStatus)</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                {</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                    <span class="keywordflow">case</span> ErrorStatus::OUTPUT_INSUFFICIENT_SIZE:</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                        result.error().code = (ErrorStatus::OUTPUT_INSUFFICIENT_SIZE);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                    <span class="keywordflow">case</span> ErrorStatus::GENERAL_FAILURE:</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                        result.error().code = (ErrorStatus::GENERAL_FAILURE);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                    <span class="keywordflow">case</span> ErrorStatus::INVALID_ARGUMENT:</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                        result.error().code = (ErrorStatus::INVALID_ARGUMENT);</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                    {</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                        result.value() = std::make_pair(timingSinceLaunch, timingAfterFence);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                    }</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                }</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            };</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keywordflow">return</span> std::make_pair(SyncFence::createAsSignaled(), std::move(armnnFencedExecutionCallback ));</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00036">CanonicalExecutionContext::deviceEnd</a>, <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00035">CanonicalExecutionContext::deviceStart</a>, <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00034">CanonicalExecutionContext::driverEnd</a>, <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00033">CanonicalExecutionContext::driverStart</a>, <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00375">ArmnnPreparedModel::ExecuteGraph()</a>, <a class="el" href="_canonical_utils_8cpp_source.xhtml#l00521">armnn_driver::GetModelSummary()</a>, and <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00031">CanonicalExecutionContext::measureTimings</a>.</p>

</div>
</div>
<a id="af62ba010a5b9f3187cfeb50db1dcad0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af62ba010a5b9f3187cfeb50db1dcad0a">&#9670;&nbsp;</a></span>ExecuteGraph()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn__driver.xhtml#a1fa5070fa0d079873acaf7581de8a2ad">ErrorStatus</a> ExecuteGraph </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; std::vector&lt; android::nn::RunTimePoolInfo &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>pMemPools</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>outputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarmnn__driver_1_1_canonical_execution_context.xhtml">CanonicalExecutionContext</a>&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>pointerMemory</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>execute the graph prepared from the request </p>

<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00375">375</a> of file <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;{</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnPreparedModel::ExecuteGraph(...)&quot;</span>;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    DumpTensorsIfRequired(<span class="stringliteral">&quot;Input&quot;</span>, inputTensors);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    std::vector&lt;armnn::ImportedInputId&gt; importedInputIds;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    std::vector&lt;armnn::ImportedOutputId&gt; importedOutputIds;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordflow">if</span> (ctx.measureTimings == MeasureTiming::YES)</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        {</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            ctx.deviceStart =  Clock::now();</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        }</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> status;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnPreparedModel::ExecuteGraph m_AsyncModelExecutionEnabled false&quot;</span>;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        importedInputIds = m_Runtime-&gt;<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ac2cb56a0d7ee6fb53e9f97e624973c19">ImportInputs</a>(m_NetworkId, inputTensors, <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a>);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keywordflow">if</span> (!importedInputIds.empty())</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        {</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="comment">// Some or all of the input tensors been imported. We need to remove the ones that could from</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            <span class="comment">// inputTensors.</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">armnn::ImportedInputId</a>&amp; importedId : importedInputIds)</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            {</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                inputTensors.erase(</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                        std::remove_if(</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                inputTensors.begin(), inputTensors.end(),</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                [&amp;importedId](std::pair&lt;armnn::LayerBindingId, class armnn::ConstTensor&gt;&amp; element) {</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                    return (element.first == static_cast&lt;int&gt;(importedId));</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                }),</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                        inputTensors.end());</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            }</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        }</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        importedOutputIds = m_Runtime-&gt;<a class="code" href="classarmnn_1_1_i_runtime.xhtml#a7db39b06bc7f50287f54320d26df4373">ImportOutputs</a>(m_NetworkId, outputTensors, <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a>);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keywordflow">if</span> (!importedOutputIds.empty())</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="comment">// Some or all of the output tensors could not be imported. We need to remove the ones that could</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="comment">// from outputTensors.</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">armnn::ImportedInputId</a>&amp; importedId : importedOutputIds)</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            {</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                outputTensors.erase(</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                        std::remove_if(</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                outputTensors.begin(), outputTensors.end(),</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                [&amp;importedId](std::pair&lt;armnn::LayerBindingId, class armnn::Tensor&gt;&amp; element) {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                    return (element.first == static_cast&lt;int&gt;(importedId));</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                }),</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                        outputTensors.end());</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            }</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        }</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        status = m_Runtime-&gt;<a class="code" href="classarmnn_1_1_i_runtime.xhtml#aca51209383683ab8dbe801bbfddfe0c0">EnqueueWorkload</a>(m_NetworkId,</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                            inputTensors,</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                            outputTensors,</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                            importedInputIds,</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                            importedOutputIds);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160; </div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keywordflow">if</span> (ctx.measureTimings == MeasureTiming::YES)</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        {</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            ctx.deviceEnd =  Clock::now();</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        }</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keywordflow">if</span> (status != <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a>)</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        {</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnPreparedModel:ExecuteGraph EnqueueWorkload failed&quot;</span>;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordflow">return</span> ErrorStatus::GENERAL_FAILURE;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        }</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    }</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">catch</span> (<a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>&amp; e)</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;armnn:Exception caught from EnqueueWorkload: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="keywordflow">return</span> ErrorStatus::GENERAL_FAILURE;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    }</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">catch</span> (std::exception&amp; e)</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    {</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;std::exception caught from EnqueueWorkload: &quot;</span> &lt;&lt; e.what();</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <span class="keywordflow">return</span> ErrorStatus::GENERAL_FAILURE;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    }</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordflow">if</span> (!pointerMemory &amp;&amp; (!importedInputIds.empty() || !importedOutputIds.empty()))</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    {</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a7c1c80ee0f432b6b621c40571410195a">CommitPools</a>(*pMemPools);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    }</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    DumpTensorsIfRequired(<span class="stringliteral">&quot;Output&quot;</span>, outputTensors);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">if</span> (ctx.measureTimings == MeasureTiming::YES)</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    {</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        ctx.driverEnd =  Clock::now();</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        Timing timing;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        timing.timeOnDevice = ctx.deviceEnd - ctx.deviceStart;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        timing.timeInDriver = ctx.driverEnd - ctx.driverStart;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnPreparedModel::execute timing - Device = &quot;</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                     &lt;&lt; timing.timeOnDevice &lt;&lt; <span class="stringliteral">&quot;Driver = &quot;</span> &lt;&lt;  timing.timeInDriver;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    }</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordflow">return</span> ErrorStatus::NONE;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_canonical_utils_8cpp_source.xhtml#l00610">armnn_driver::CommitPools()</a>, <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00036">CanonicalExecutionContext::deviceEnd</a>, <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00035">CanonicalExecutionContext::deviceStart</a>, <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00034">CanonicalExecutionContext::driverEnd</a>, <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00033">CanonicalExecutionContext::driverStart</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00113">IRuntime::EnqueueWorkload()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00092">IRuntime::ImportInputs()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00098">IRuntime::ImportOutputs()</a>, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>, <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00031">CanonicalExecutionContext::measureTimings</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Success</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00295">ArmnnPreparedModel::execute()</a>, <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00478">ArmnnPreparedModel::executeFenced()</a>, and <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00648">ArmnnPreparedModel::ExecuteWithDummyInputs()</a>.</p>

</div>
</div>
<a id="ad84aace3d1df79ad6fa37dcd952c085f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad84aace3d1df79ad6fa37dcd952c085f">&#9670;&nbsp;</a></span>ExecuteWithDummyInputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ExecuteWithDummyInputs </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numInputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numOutputs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Executes this model with dummy inputs (e.g. </p>
<p>all zeroes). </p><dl class="section return"><dt>Returns</dt><dd>false on failure, otherwise true </dd></dl>

<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00648">648</a> of file <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;{</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    std::vector&lt;std::vector&lt;char&gt;&gt; storage;</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numInputs; i++)</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    {</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo = m_Runtime-&gt;<a class="code" href="classarmnn_1_1_i_runtime.xhtml#a25f528b76d8116e08cddc7d4a8661ee1">GetInputTensorInfo</a>(m_NetworkId, i);</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="comment">// pInputTensors (of type InputTensors) is composed of a vector of ConstTensors.</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <span class="comment">// Therefore, set all TensorInfo isConstant parameters of input Tensors to true.</span></div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>();</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        storage.emplace_back(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> inputTensor(inputTensorInfo, storage.back().data());</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160; </div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        inputTensors.emplace_back(i, inputTensor);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    }</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160; </div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numOutputs; i++)</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    {</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo = m_Runtime-&gt;<a class="code" href="classarmnn_1_1_i_runtime.xhtml#a5dccecd36bb6eda573be616face68035">GetOutputTensorInfo</a>(m_NetworkId, i);</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        storage.emplace_back(outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a> outputTensor(outputTensorInfo, storage.back().data());</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160; </div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        outputTensors.emplace_back(i, outputTensor);</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    }</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <a class="code" href="structarmnn__driver_1_1_canonical_execution_context.xhtml">CanonicalExecutionContext</a> ctx;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    ctx.<a class="code" href="structarmnn__driver_1_1_canonical_execution_context.xhtml#aeb7cb4ac5b343a8eb2efd91aeee37743">measureTimings</a> = MeasureTiming::NO;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keyword">auto</span> memPools = std::make_shared&lt;std::vector&lt;::android::nn::RunTimePoolInfo&gt;&gt;();</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160; </div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keyword">auto</span> errorStatus = <a class="code" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#af62ba010a5b9f3187cfeb50db1dcad0a">ExecuteGraph</a>(memPools,</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                                    inputTensors,</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                                    outputTensors,</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                                    ctx);</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160; </div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keywordflow">return</span> errorStatus == ErrorStatus::NONE;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00375">ArmnnPreparedModel::ExecuteGraph()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00082">IRuntime::GetInputTensorInfo()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00427">TensorInfo::GetNumBytes()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00087">IRuntime::GetOutputTensorInfo()</a>, <a class="el" href="_armnn_prepared_model_8hpp_source.xhtml#l00031">CanonicalExecutionContext::measureTimings</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00514">TensorInfo::SetConstant()</a>.</p>

</div>
</div>
<a id="ac88833eb361390437abc2a81ab43d04a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac88833eb361390437abc2a81ab43d04a">&#9670;&nbsp;</a></span>GetModelPriority()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Priority GetModelPriority </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00472">472</a> of file <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;{</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordflow">return</span> m_ModelPriority;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a0481f4c1ca5608339a5688daf256a4e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0481f4c1ca5608339a5688daf256a4e4">&#9670;&nbsp;</a></span>getUnderlyingResource()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::any getUnderlyingResource </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml#l00606">606</a> of file <a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;{</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">return</span> &amp;m_Model;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>shim/sl/canonical/<a class="el" href="_armnn_prepared_model_8hpp_source.xhtml">ArmnnPreparedModel.hpp</a></li>
<li>shim/sl/canonical/<a class="el" href="_armnn_prepared_model_8cpp_source.xhtml">ArmnnPreparedModel.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarmnn__driver_1_1_armnn_prepared_model_xhtml_af62ba010a5b9f3187cfeb50db1dcad0a"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_prepared_model.xhtml#af62ba010a5b9f3187cfeb50db1dcad0a">armnn_driver::ArmnnPreparedModel::ExecuteGraph</a></div><div class="ttdeci">ErrorStatus ExecuteGraph(std::shared_ptr&lt; std::vector&lt; android::nn::RunTimePoolInfo &gt;&gt; &amp;pMemPools, armnn::InputTensors &amp;inputTensors, armnn::OutputTensors &amp;outputTensors, CanonicalExecutionContext callback, const bool pointerMemory=false) const</div><div class="ttdoc">execute the graph prepared from the request</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_prepared_model_8cpp_source.xhtml#l00375">ArmnnPreparedModel.cpp:375</a></div></div>
<div class="ttc" id="astructarmnn__driver_1_1_canonical_execution_context_xhtml_aeb7cb4ac5b343a8eb2efd91aeee37743"><div class="ttname"><a href="structarmnn__driver_1_1_canonical_execution_context.xhtml#aeb7cb4ac5b343a8eb2efd91aeee37743">armnn_driver::CanonicalExecutionContext::measureTimings</a></div><div class="ttdeci">::android::nn::MeasureTiming measureTimings</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_prepared_model_8hpp_source.xhtml#l00031">ArmnnPreparedModel.hpp:31</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those.</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_runtime_xhtml_aed397991b99f485ffab9a42aece47019"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#aed397991b99f485ffab9a42aece47019">armnn::IRuntime::UnloadNetwork</a></div><div class="ttdeci">Status UnloadNetwork(NetworkId networkId)</div><div class="ttdoc">Unloads a network from the IRuntime.</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00136">Runtime.cpp:136</a></div></div>
<div class="ttc" id="astructarmnn__driver_1_1_canonical_execution_context_xhtml_a45f03338910173fc12dd2ac19521a742"><div class="ttname"><a href="structarmnn__driver_1_1_canonical_execution_context.xhtml#a45f03338910173fc12dd2ac19521a742">armnn_driver::CanonicalExecutionContext::driverEnd</a></div><div class="ttdeci">android::nn::TimePoint driverEnd</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_prepared_model_8hpp_source.xhtml#l00034">ArmnnPreparedModel.hpp:34</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_runtime_xhtml_af87d0743d1266e264c3197a32299f4b2"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#af87d0743d1266e264c3197a32299f4b2">armnn::IRuntime::GetProfiler</a></div><div class="ttdeci">const std::shared_ptr&lt; IProfiler &gt; GetProfiler(NetworkId networkId) const</div><div class="ttdoc">Gets the profiler corresponding to the given network id.</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00151">Runtime.cpp:151</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a></div><div class="ttdeci">@ Malloc</div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_aa313ae79f70102e3451d45d3387c2e46"><div class="ttname"><a href="namespacearmnn__driver.xhtml#aa313ae79f70102e3451d45d3387c2e46">armnn_driver::DumpJsonProfilingIfRequired</a></div><div class="ttdeci">void DumpJsonProfilingIfRequired(bool gpuProfilingEnabled, const std::string &amp;dumpDir, armnn::NetworkId networkId, const armnn::IProfiler *profiler)</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00350">CanonicalUtils.cpp:350</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1c5ec805688cb558465a82a8d9f56a90"><div class="ttname"><a href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">armnn::ImportedInputId</a></div><div class="ttdeci">unsigned int ImportedInputId</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00291">Types.hpp:291</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_runtime_xhtml_a5dccecd36bb6eda573be616face68035"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#a5dccecd36bb6eda573be616face68035">armnn::IRuntime::GetOutputTensorInfo</a></div><div class="ttdeci">TensorInfo GetOutputTensorInfo(NetworkId networkId, LayerBindingId layerId) const</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00087">Runtime.cpp:87</a></div></div>
<div class="ttc" id="astructarmnn__driver_1_1_canonical_execution_context_xhtml_ac4711bb6ab33a33529c62c2c6842a831"><div class="ttname"><a href="structarmnn__driver_1_1_canonical_execution_context.xhtml#ac4711bb6ab33a33529c62c2c6842a831">armnn_driver::CanonicalExecutionContext::deviceEnd</a></div><div class="ttdeci">android::nn::TimePoint deviceEnd</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_prepared_model_8hpp_source.xhtml#l00036">ArmnnPreparedModel.hpp:36</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8ffca1e21bdfa7f945617acd606aac91"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">armnn::TensorInfo::SetConstant</a></div><div class="ttdeci">void SetConstant(const bool IsConstant=true)</div><div class="ttdoc">Marks the data corresponding to this tensor info as constant.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00514">Tensor.cpp:514</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_runtime_xhtml_a25f528b76d8116e08cddc7d4a8661ee1"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#a25f528b76d8116e08cddc7d4a8661ee1">armnn::IRuntime::GetInputTensorInfo</a></div><div class="ttdeci">TensorInfo GetInputTensorInfo(NetworkId networkId, LayerBindingId layerId) const</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00082">Runtime.cpp:82</a></div></div>
<div class="ttc" id="astructarmnn__driver_1_1_canonical_execution_context_xhtml_a6da5957063ca094917c6e5bfeac65898"><div class="ttname"><a href="structarmnn__driver_1_1_canonical_execution_context.xhtml#a6da5957063ca094917c6e5bfeac65898">armnn_driver::CanonicalExecutionContext::deviceStart</a></div><div class="ttdeci">android::nn::TimePoint deviceStart</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_prepared_model_8hpp_source.xhtml#l00035">ArmnnPreparedModel.hpp:35</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="astructarmnn__driver_1_1_canonical_execution_context_xhtml_ab6f19cc463ef7a388af5de182a393ed2"><div class="ttname"><a href="structarmnn__driver_1_1_canonical_execution_context.xhtml#ab6f19cc463ef7a388af5de182a393ed2">armnn_driver::CanonicalExecutionContext::driverStart</a></div><div class="ttdeci">android::nn::TimePoint driverStart</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_prepared_model_8hpp_source.xhtml#l00033">ArmnnPreparedModel.hpp:33</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a93d7282d7b5701a723304d87fcdc3a43"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a93d7282d7b5701a723304d87fcdc3a43">armnn_driver::ComputeShape</a></div><div class="ttdeci">OutputShape ComputeShape(const armnn::TensorInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8hpp_source.xhtml#l00095">CanonicalUtils.hpp:95</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_runtime_xhtml_aca51209383683ab8dbe801bbfddfe0c0"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#aca51209383683ab8dbe801bbfddfe0c0">armnn::IRuntime::EnqueueWorkload</a></div><div class="ttdeci">Status EnqueueWorkload(NetworkId networkId, const InputTensors &amp;inputTensors, const OutputTensors &amp;outputTensors, std::vector&lt; ImportedInputId &gt; preImportedInputIds={}, std::vector&lt; ImportedOutputId &gt; preImportedOutputIds={})</div><div class="ttdoc">Evaluates a network using input in inputTensors and outputs filled into outputTensors.</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00113">Runtime.cpp:113</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div><div class="ttdeci">@ Success</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00042">Types.hpp:42</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a1fa5070fa0d079873acaf7581de8a2ad"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a1fa5070fa0d079873acaf7581de8a2ad">armnn_driver::ErrorStatus</a></div><div class="ttdeci">::android::nn::ErrorStatus ErrorStatus</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00049">ConversionUtils.hpp:49</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a31b494d1b36f5ed7fc7556a0fbc2c17c"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a31b494d1b36f5ed7fc7556a0fbc2c17c">armnn_driver::GetModelSummary</a></div><div class="ttdeci">std::string GetModelSummary(const Model &amp;model)</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00521">CanonicalUtils.cpp:521</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_runtime_xhtml_ac2cb56a0d7ee6fb53e9f97e624973c19"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ac2cb56a0d7ee6fb53e9f97e624973c19">armnn::IRuntime::ImportInputs</a></div><div class="ttdeci">std::vector&lt; ImportedInputId &gt; ImportInputs(NetworkId networkId, const InputTensors &amp;inputTensors, MemorySource forceImportMemorySource=MemorySource::Undefined)</div><div class="ttdoc">ImportInputs separates the importing and mapping of InputTensors from network execution.</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00092">Runtime.cpp:92</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_runtime_xhtml_a7db39b06bc7f50287f54320d26df4373"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#a7db39b06bc7f50287f54320d26df4373">armnn::IRuntime::ImportOutputs</a></div><div class="ttdeci">std::vector&lt; ImportedOutputId &gt; ImportOutputs(NetworkId networkId, const OutputTensors &amp;outputTensors, MemorySource forceImportMemorySource=MemorySource::Undefined)</div><div class="ttdoc">ImportOutputs separates the importing and mapping of OutputTensors from network execution.</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00098">Runtime.cpp:98</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::TensorInfo::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00427">Tensor.cpp:427</a></div></div>
<div class="ttc" id="astructarmnn__driver_1_1_canonical_execution_context_xhtml"><div class="ttname"><a href="structarmnn__driver_1_1_canonical_execution_context.xhtml">armnn_driver::CanonicalExecutionContext</a></div><div class="ttdef"><b>Definition:</b> <a href="_armnn_prepared_model_8hpp_source.xhtml#l00029">ArmnnPreparedModel.hpp:29</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a7c1c80ee0f432b6b621c40571410195a"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a7c1c80ee0f432b6b621c40571410195a">armnn_driver::CommitPools</a></div><div class="ttdeci">void CommitPools(std::vector&lt;::android::nn::RunTimePoolInfo &gt; &amp;memPools)</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00610">CanonicalUtils.cpp:610</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_a8aeddebdcf02e1832b22203c08a6b678"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">armnn::BaseTensor::GetInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00295">Tensor.hpp:295</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn__driver.xhtml">armnn_driver</a></li><li class="navelem"><a class="el" href="classarmnn__driver_1_1_armnn_prepared_model.xhtml">ArmnnPreparedModel</a></li>
    <li class="footer">Generated on Wed Mar 22 2023 15:53:09 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
