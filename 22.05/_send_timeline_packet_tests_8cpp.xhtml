<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/profiling/test/SendTimelinePacketTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_send_timeline_packet_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">SendTimelinePacketTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_profiling_mocks_8hpp_source.xhtml">ProfilingMocks.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_profiling_test_utils_8hpp_source.xhtml">ProfilingTestUtils.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_profiling_options_converter_8hpp_source.xhtml">ProfilingOptionsConverter.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_runtime_8hpp_source.xhtml">Runtime.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_arm_n_n_profiling_service_initialiser_8hpp_source.xhtml">ArmNNProfilingServiceInitialiser.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_arm_n_n_profiling_8hpp_source.xhtml">armnn/profiling/ArmNNProfiling.hpp</a>&gt;</code><br />
<code>#include &lt;client/src/BufferManager.hpp&gt;</code><br />
<code>#include &lt;client/src/ProfilingService.hpp&gt;</code><br />
<code>#include &lt;client/src/ProfilingUtils.hpp&gt;</code><br />
<code>#include &lt;client/src/SendTimelinePacket.hpp&gt;</code><br />
<code>#include &lt;client/src/TimelinePacketWriterFactory.hpp&gt;</code><br />
<code>#include &lt;common/include/LabelsAndEventClasses.hpp&gt;</code><br />
<code>#include &lt;common/include/SwTrace.hpp&gt;</code><br />
<code>#include &lt;common/include/Threads.hpp&gt;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
<code>#include &lt;functional&gt;</code><br />
</div>
<p><a href="_send_timeline_packet_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:afe946787073c5ea5d04daa1d434bb7c3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_send_timeline_packet_tests_8cpp.xhtml#afe946787073c5ea5d04daa1d434bb7c3">TEST_SUITE</a> (&quot;SendTimelinePacketTests&quot;)</td></tr>
<tr class="separator:afe946787073c5ea5d04daa1d434bb7c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="afe946787073c5ea5d04daa1d434bb7c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe946787073c5ea5d04daa1d434bb7c3">&#9670;&nbsp;</a></span>TEST_SUITE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TEST_SUITE </td>
          <td>(</td>
          <td class="paramtype">&quot;SendTimelinePacketTests&quot;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_send_timeline_packet_tests_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="_send_timeline_packet_tests_8cpp_source.xhtml">SendTimelinePacketTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_options_converter_8cpp_source.xhtml#l00017">arm::pipe::ConvertExternalProfilingOptions()</a>, <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00241">MockBufferManager::GetReadableBuffer()</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00138">IRuntime::CreationOptions::ExternalProfilingOptions::m_EnableProfiling</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00153">IRuntime::CreationOptions::m_ProfilingOptions</a>, and <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00252">MockBufferManager::MarkRead()</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendTimelineMessageDirectoryPackageTest&quot;</span>)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBuffer(512);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    TimelinePacketWriterFactory timelinePacketWriterFactory(mockBuffer);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; sendTimelinePacket = timelinePacketWriterFactory.GetSendTimelinePacket();</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    sendTimelinePacket-&gt;SendTimelineMessageDirectoryPackage();</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">auto</span> packetBuffer = mockBuffer.GetReadableBuffer();</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint8_t_size  = <span class="keyword">sizeof</span>(uint8_t);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint32_t_size = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint64_t_size = <span class="keyword">sizeof</span>(uint64_t);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">// Check the packet header</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    uint32_t packetHeaderWord0 = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    uint32_t packetFamily = (packetHeaderWord0 &gt;&gt; 26) &amp; 0x0000003F;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    uint32_t packetClass  = (packetHeaderWord0 &gt;&gt; 19) &amp; 0x0000007F;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    uint32_t packetType   = (packetHeaderWord0 &gt;&gt; 16) &amp; 0x00000007;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    uint32_t streamId     = (packetHeaderWord0 &gt;&gt;  0) &amp; 0x00000007;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    CHECK(packetFamily == 1);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    CHECK(packetClass  == 0);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    CHECK(packetType   == 0);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    CHECK(streamId     == 0);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    uint32_t packetHeaderWord1 = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    uint32_t sequenceNumbered = (packetHeaderWord1 &gt;&gt; 24) &amp; 0x00000001;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    uint32_t dataLength       = (packetHeaderWord1 &gt;&gt;  0) &amp; 0x00FFFFFF;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    CHECK(sequenceNumbered ==  0);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    CHECK(dataLength       == 443);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    uint8_t readStreamVersion = ReadUint8(packetBuffer, offset);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    CHECK(readStreamVersion == 4);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    offset += uint8_t_size;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    uint8_t readPointerBytes = ReadUint8(packetBuffer, offset);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    CHECK(readPointerBytes == uint64_t_size);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    offset += uint8_t_size;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    uint8_t readThreadIdBytes = ReadUint8(packetBuffer, offset);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    CHECK(readThreadIdBytes == ThreadIdSize);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    offset += uint8_t_size;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    uint32_t DeclCount = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    CHECK(DeclCount == 5);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    arm::pipe::SwTraceMessage swTraceMessage = arm::pipe::ReadSwTraceMessage(packetBuffer-&gt;GetReadableData(),</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                                                             offset,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                                                             packetBuffer-&gt;GetSize());</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    CHECK(swTraceMessage.m_Id == 0);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    CHECK(swTraceMessage.m_Name == <span class="stringliteral">&quot;declareLabel&quot;</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    CHECK(swTraceMessage.m_UiName == <span class="stringliteral">&quot;declare label&quot;</span>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    CHECK(swTraceMessage.m_ArgTypes.size() == 2);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[0] == <span class="charliteral">&#39;p&#39;</span>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[1] == <span class="charliteral">&#39;s&#39;</span>);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    CHECK(swTraceMessage.m_ArgNames.size() == 2);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    CHECK(swTraceMessage.m_ArgNames[0] == <span class="stringliteral">&quot;guid&quot;</span>);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    CHECK(swTraceMessage.m_ArgNames[1] == <span class="stringliteral">&quot;value&quot;</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    swTraceMessage = arm::pipe::ReadSwTraceMessage(packetBuffer-&gt;GetReadableData(),</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                                   offset,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                                   packetBuffer-&gt;GetSize());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    CHECK(swTraceMessage.m_Id == 1);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    CHECK(swTraceMessage.m_Name == <span class="stringliteral">&quot;declareEntity&quot;</span>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    CHECK(swTraceMessage.m_UiName == <span class="stringliteral">&quot;declare entity&quot;</span>);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    CHECK(swTraceMessage.m_ArgTypes.size() == 1);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[0] == <span class="charliteral">&#39;p&#39;</span>);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    CHECK(swTraceMessage.m_ArgNames.size() == 1);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    CHECK(swTraceMessage.m_ArgNames[0] == <span class="stringliteral">&quot;guid&quot;</span>);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    swTraceMessage = arm::pipe::ReadSwTraceMessage(packetBuffer-&gt;GetReadableData(),</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                                   offset,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                                   packetBuffer-&gt;GetSize());</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    CHECK(swTraceMessage.m_Id == 2);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    CHECK(swTraceMessage.m_Name == <span class="stringliteral">&quot;declareEventClass&quot;</span>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    CHECK(swTraceMessage.m_UiName == <span class="stringliteral">&quot;declare event class&quot;</span>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    CHECK(swTraceMessage.m_ArgTypes.size() == 2);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[0] == <span class="charliteral">&#39;p&#39;</span>);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[1] == <span class="charliteral">&#39;p&#39;</span>);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    CHECK(swTraceMessage.m_ArgNames.size() == 2);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    CHECK(swTraceMessage.m_ArgNames[0] == <span class="stringliteral">&quot;guid&quot;</span>);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    CHECK(swTraceMessage.m_ArgNames[1] == <span class="stringliteral">&quot;nameGuid&quot;</span>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    swTraceMessage = arm::pipe::ReadSwTraceMessage(packetBuffer-&gt;GetReadableData(),</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                                   offset,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                                   packetBuffer-&gt;GetSize());</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    CHECK(swTraceMessage.m_Id == 3);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    CHECK(swTraceMessage.m_Name == <span class="stringliteral">&quot;declareRelationship&quot;</span>);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    CHECK(swTraceMessage.m_UiName == <span class="stringliteral">&quot;declare relationship&quot;</span>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    CHECK(swTraceMessage.m_ArgTypes.size() == 5);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[0] == <span class="charliteral">&#39;I&#39;</span>);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[1] == <span class="charliteral">&#39;p&#39;</span>);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[2] == <span class="charliteral">&#39;p&#39;</span>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[3] == <span class="charliteral">&#39;p&#39;</span>);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[4] == <span class="charliteral">&#39;p&#39;</span>);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    CHECK(swTraceMessage.m_ArgNames.size() == 5);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    CHECK(swTraceMessage.m_ArgNames[0] == <span class="stringliteral">&quot;relationshipType&quot;</span>);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    CHECK(swTraceMessage.m_ArgNames[1] == <span class="stringliteral">&quot;relationshipGuid&quot;</span>);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    CHECK(swTraceMessage.m_ArgNames[2] == <span class="stringliteral">&quot;headGuid&quot;</span>);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    CHECK(swTraceMessage.m_ArgNames[3] == <span class="stringliteral">&quot;tailGuid&quot;</span>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    CHECK(swTraceMessage.m_ArgNames[4] == <span class="stringliteral">&quot;attributeGuid&quot;</span>);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    swTraceMessage = arm::pipe::ReadSwTraceMessage(packetBuffer-&gt;GetReadableData(),</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                                   offset,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                                   packetBuffer-&gt;GetSize());</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    CHECK(swTraceMessage.m_Id == 4);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    CHECK(swTraceMessage.m_Name == <span class="stringliteral">&quot;declareEvent&quot;</span>);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    CHECK(swTraceMessage.m_UiName == <span class="stringliteral">&quot;declare event&quot;</span>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    CHECK(swTraceMessage.m_ArgTypes.size() == 3);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[0] == <span class="charliteral">&#39;@&#39;</span>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[1] == <span class="charliteral">&#39;t&#39;</span>);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    CHECK(swTraceMessage.m_ArgTypes[2] == <span class="charliteral">&#39;p&#39;</span>);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    CHECK(swTraceMessage.m_ArgNames.size() == 3);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    CHECK(swTraceMessage.m_ArgNames[0] == <span class="stringliteral">&quot;timestamp&quot;</span>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    CHECK(swTraceMessage.m_ArgNames[1] == <span class="stringliteral">&quot;threadId&quot;</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    CHECK(swTraceMessage.m_ArgNames[2] == <span class="stringliteral">&quot;eventGuid&quot;</span>);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendTimelineEntityWithEventClassPacketTest&quot;</span>)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> bufferManager(40);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    TimelinePacketWriterFactory timelinePacketWriterFactory(bufferManager);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; sendTimelinePacket = timelinePacketWriterFactory.GetSendTimelinePacket();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">const</span> uint64_t entityBinaryPacketProfilingGuid = 123456u;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    sendTimelinePacket-&gt;SendTimelineEntityBinaryPacket(entityBinaryPacketProfilingGuid);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">const</span> uint64_t eventClassBinaryPacketProfilingGuid = 789123u;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">const</span> uint64_t eventClassBinaryPacketNameGuid = 8845u;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    sendTimelinePacket-&gt;SendTimelineEventClassBinaryPacket(</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        eventClassBinaryPacketProfilingGuid, eventClassBinaryPacketNameGuid);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="comment">// Commit the messages</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    sendTimelinePacket-&gt;Commit();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">auto</span> packetBuffer = bufferManager.GetReadableBuffer();</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint32_t_size = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint64_t_size = <span class="keyword">sizeof</span>(uint64_t);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// Check the packet header</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">// Reading TimelineEntityClassBinaryPacket</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    uint32_t entityBinaryPacketHeaderWord0  = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    uint32_t entityBinaryPacketFamily       = (entityBinaryPacketHeaderWord0 &gt;&gt; 26) &amp; 0x0000003F;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    uint32_t entityBinaryPacketClass        = (entityBinaryPacketHeaderWord0 &gt;&gt; 19) &amp; 0x0000007F;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    uint32_t entityBinaryPacketType         = (entityBinaryPacketHeaderWord0 &gt;&gt; 16) &amp; 0x00000007;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    uint32_t entityBinaryPacketStreamId     = (entityBinaryPacketHeaderWord0 &gt;&gt;  0) &amp; 0x00000007;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    CHECK(entityBinaryPacketFamily       == 1);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    CHECK(entityBinaryPacketClass        == 0);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    CHECK(entityBinaryPacketType         == 1);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    CHECK(entityBinaryPacketStreamId     == 0);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    uint32_t entityBinaryPacketHeaderWord1      = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    uint32_t entityBinaryPacketSequenceNumbered = (entityBinaryPacketHeaderWord1 &gt;&gt; 24) &amp; 0x00000001;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    uint32_t entityBinaryPacketDataLength       = (entityBinaryPacketHeaderWord1 &gt;&gt;  0) &amp; 0x00FFFFFF;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    CHECK(entityBinaryPacketSequenceNumbered == 0);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    CHECK(entityBinaryPacketDataLength       == 32);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="comment">// Check the decl_id</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    uint32_t entitytDecId = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    CHECK(entitytDecId == uint32_t(1));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">// Check the profiling GUID</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    uint64_t readProfilingGuid = ReadUint64(packetBuffer, offset);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    CHECK(readProfilingGuid == entityBinaryPacketProfilingGuid);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// Reading TimelineEventClassBinaryPacket</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    offset += uint64_t_size;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    uint32_t eventClassDeclId = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    CHECK(eventClassDeclId == uint32_t(2));</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// Check the profiling GUID</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    readProfilingGuid = ReadUint64(packetBuffer, offset);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    CHECK(readProfilingGuid == eventClassBinaryPacketProfilingGuid);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    offset += uint64_t_size;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    uint64_t readEventClassNameGuid = ReadUint64(packetBuffer, offset);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    CHECK(readEventClassNameGuid == eventClassBinaryPacketNameGuid);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    bufferManager.MarkRead(packetBuffer);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendEventClassAfterTimelineEntityPacketTest&quot;</span>)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint32_t_size = <span class="keyword">sizeof</span>(uint32_t);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint64_t_size = <span class="keyword">sizeof</span>(uint64_t);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> bufferManager(512);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    TimelinePacketWriterFactory timelinePacketWriterFactory(bufferManager);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; sendTimelinePacket = timelinePacketWriterFactory.GetSendTimelinePacket();</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// Send TimelineEntityClassBinaryPacket</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">const</span> uint64_t entityBinaryPacketProfilingGuid = 123456u;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    sendTimelinePacket-&gt;SendTimelineEntityBinaryPacket(entityBinaryPacketProfilingGuid);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// Commit the buffer</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    sendTimelinePacket-&gt;Commit();</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">auto</span> packetBuffer = bufferManager.GetReadableBuffer();</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="comment">// Check the packet header</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="comment">// Reading TimelineEntityClassBinaryPacket</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    uint32_t entityBinaryPacketHeaderWord0 = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    uint32_t entityBinaryPacketFamily = (entityBinaryPacketHeaderWord0 &gt;&gt; 26) &amp; 0x0000003F;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    uint32_t entityBinaryPacketClass  = (entityBinaryPacketHeaderWord0 &gt;&gt; 19) &amp; 0x0000007F;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    uint32_t entityBinaryPacketType   = (entityBinaryPacketHeaderWord0 &gt;&gt; 16) &amp; 0x00000007;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    uint32_t entityBinaryPacketStreamId     = (entityBinaryPacketHeaderWord0 &gt;&gt;  0) &amp; 0x00000007;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    CHECK(entityBinaryPacketFamily == 1);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    CHECK(entityBinaryPacketClass  == 0);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    CHECK(entityBinaryPacketType   == 1);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    CHECK(entityBinaryPacketStreamId     == 0);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    uint32_t entityBinaryPacketHeaderWord1 = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    uint32_t entityBinaryPacketSequenceNumbered = (entityBinaryPacketHeaderWord1 &gt;&gt; 24) &amp; 0x00000001;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    uint32_t entityBinaryPacketDataLength       = (entityBinaryPacketHeaderWord1 &gt;&gt;  0) &amp; 0x00FFFFFF;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    CHECK(entityBinaryPacketSequenceNumbered == 0);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    CHECK(entityBinaryPacketDataLength       == 12);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="comment">// Check the decl_id</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    uint32_t entitytDecId = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    CHECK(entitytDecId == uint32_t(1));</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// Check the profiling GUID</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    uint64_t readProfilingGuid = ReadUint64(packetBuffer, offset);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    CHECK(readProfilingGuid == entityBinaryPacketProfilingGuid);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    bufferManager.MarkRead(packetBuffer);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="comment">// Send TimelineEventClassBinaryPacket</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">const</span> uint64_t eventClassBinaryPacketProfilingGuid = 789123u;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keyword">const</span> uint64_t eventClassBinaryPacketNameGuid = 8845u;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    sendTimelinePacket-&gt;SendTimelineEventClassBinaryPacket(</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        eventClassBinaryPacketProfilingGuid, eventClassBinaryPacketNameGuid);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// Commit the buffer</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    sendTimelinePacket-&gt;Commit();</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    packetBuffer = bufferManager.GetReadableBuffer();</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">// Check the packet header</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    offset = 0;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="comment">// Reading TimelineEventClassBinaryPacket</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    uint32_t eventClassBinaryPacketHeaderWord0 = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    uint32_t eventClassBinaryPacketFamily = (eventClassBinaryPacketHeaderWord0 &gt;&gt; 26) &amp; 0x0000003F;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    uint32_t eventClassBinaryPacketClass  = (eventClassBinaryPacketHeaderWord0 &gt;&gt; 19) &amp; 0x0000007F;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    uint32_t eventClassBinaryPacketType   = (eventClassBinaryPacketHeaderWord0 &gt;&gt; 16) &amp; 0x00000007;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    uint32_t eventClassBinaryPacketStreamId     = (eventClassBinaryPacketHeaderWord0 &gt;&gt;  0) &amp; 0x00000007;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    CHECK(eventClassBinaryPacketFamily == 1);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    CHECK(eventClassBinaryPacketClass  == 0);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    CHECK(eventClassBinaryPacketType   == 1);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    CHECK(eventClassBinaryPacketStreamId     == 0);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    uint32_t eventClassBinaryPacketHeaderWord1 = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    uint32_t eventClassBinaryPacketSequenceNumbered = (eventClassBinaryPacketHeaderWord1 &gt;&gt; 24) &amp; 0x00000001;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    uint32_t eventClassBinaryPacketDataLength       = (eventClassBinaryPacketHeaderWord1 &gt;&gt;  0) &amp; 0x00FFFFFF;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    CHECK(eventClassBinaryPacketSequenceNumbered == 0);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    CHECK(eventClassBinaryPacketDataLength       == 20);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    uint32_t eventClassDeclId = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    CHECK(eventClassDeclId == uint32_t(2));</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="comment">// Check the profiling GUID</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    readProfilingGuid = ReadUint64(packetBuffer, offset);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    CHECK(readProfilingGuid == eventClassBinaryPacketProfilingGuid);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    offset += uint64_t_size;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    uint64_t readEventClassNameGuid = ReadUint64(packetBuffer, offset);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    CHECK(readEventClassNameGuid == eventClassBinaryPacketNameGuid);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    bufferManager.MarkRead(packetBuffer);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="comment">// Send TimelineEventBinaryPacket</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> uint64_t timestamp = 456789u;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> threadId = arm::pipe::GetCurrentThreadId();</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keyword">const</span> uint64_t eventProfilingGuid = 123456u;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    sendTimelinePacket-&gt;SendTimelineEventBinaryPacket(timestamp, threadId, eventProfilingGuid);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">// Commit the buffer</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    sendTimelinePacket-&gt;Commit();</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    packetBuffer = bufferManager.GetReadableBuffer();</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="comment">// Check the packet header</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    offset = 0;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="comment">// Reading TimelineEventBinaryPacket</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    uint32_t eventBinaryPacketHeaderWord0 = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    uint32_t eventBinaryPacketFamily = (eventBinaryPacketHeaderWord0 &gt;&gt; 26) &amp; 0x0000003F;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    uint32_t eventBinaryPacketClass  = (eventBinaryPacketHeaderWord0 &gt;&gt; 19) &amp; 0x0000007F;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    uint32_t eventBinaryPacketType   = (eventBinaryPacketHeaderWord0 &gt;&gt; 16) &amp; 0x00000007;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    uint32_t eventBinaryPacketStreamId     = (eventBinaryPacketHeaderWord0 &gt;&gt;  0) &amp; 0x00000007;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    CHECK(eventBinaryPacketFamily == 1);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    CHECK(eventBinaryPacketClass  == 0);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    CHECK(eventBinaryPacketType   == 1);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    CHECK(eventBinaryPacketStreamId     == 0);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    uint32_t eventBinaryPacketHeaderWord1 = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    uint32_t eventBinaryPacketSequenceNumbered = (eventBinaryPacketHeaderWord1 &gt;&gt; 24) &amp; 0x00000001;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    uint32_t eventBinaryPacketDataLength       = (eventBinaryPacketHeaderWord1 &gt;&gt;  0) &amp; 0x00FFFFFF;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    CHECK(eventBinaryPacketSequenceNumbered == 0);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    CHECK(eventBinaryPacketDataLength == 20 + ThreadIdSize);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="comment">// Check the decl_id</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    uint32_t eventDeclId = ReadUint32(packetBuffer, offset);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    CHECK(eventDeclId == 4);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="comment">// Check the timestamp</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    offset += uint32_t_size;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    uint64_t eventTimestamp = ReadUint64(packetBuffer, offset);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    CHECK(eventTimestamp == timestamp);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="comment">// Check the thread id</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    offset += uint64_t_size;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    std::vector&lt;uint8_t&gt; readThreadId(ThreadIdSize, 0);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    ReadBytes(packetBuffer, offset, ThreadIdSize, readThreadId.data());</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    CHECK(readThreadId == threadId);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">// Check the profiling GUID</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    offset += ThreadIdSize;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    readProfilingGuid = ReadUint64(packetBuffer, offset);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    CHECK(readProfilingGuid == eventProfilingGuid);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;}</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendTimelinePacketTests2&quot;</span>)</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;{</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> bufferManager(40);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    TimelinePacketWriterFactory timelinePacketWriterFactory(bufferManager);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; sendTimelinePacket = timelinePacketWriterFactory.GetSendTimelinePacket();</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    CHECK_THROWS_AS(sendTimelinePacket-&gt;SendTimelineMessageDirectoryPackage(),</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                    arm::pipe::ProfilingException);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;}</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendTimelinePacketTests3&quot;</span>)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> bufferManager(512);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    TimelinePacketWriterFactory timelinePacketWriterFactory(bufferManager);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; sendTimelinePacket = timelinePacketWriterFactory.GetSendTimelinePacket();</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="comment">// Send TimelineEntityClassBinaryPacket</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">const</span> uint64_t entityBinaryPacketProfilingGuid = 123456u;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    sendTimelinePacket-&gt;SendTimelineEntityBinaryPacket(entityBinaryPacketProfilingGuid);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="comment">// Commit the buffer</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    sendTimelinePacket-&gt;Commit();</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keyword">auto</span> packetBuffer = bufferManager.GetReadableBuffer();</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="comment">// Send TimelineEventClassBinaryPacket</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">const</span> uint64_t eventClassBinaryPacketProfilingGuid = 789123u;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keyword">const</span> uint64_t eventClassBinaryPacketNameGuid = 8845u;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    CHECK_THROWS_AS(sendTimelinePacket-&gt;SendTimelineEventClassBinaryPacket(</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                      eventClassBinaryPacketProfilingGuid, eventClassBinaryPacketNameGuid),</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                      BufferExhaustion);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;}</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;TEST_CASE(<span class="stringliteral">&quot;GetGuidsFromProfilingService&quot;</span>)</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;{</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    LogLevelSwapper logLevelSwapper(arm::pipe::LogSeverity::Fatal);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <a class="code" href="structarmnn_1_1_runtime_impl.xhtml">armnn::RuntimeImpl</a> runtime(options);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <a class="code" href="classarmnn_1_1_arm_n_n_profiling_service_initialiser.xhtml">armnn::ArmNNProfilingServiceInitialiser</a> initialiser;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    ProfilingService profilingService(arm::pipe::MAX_ARMNN_COUNTER,</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                      initialiser,</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                      arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                      arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                      arm::pipe::ARMNN_HARDWARE_VERSION,</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                      runtime);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    profilingService.ResetExternalProfilingOptions(</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <a class="code" href="namespacearm_1_1pipe.xhtml#aedd5bf7f3d6df99a1b42e7826c5b380b">ConvertExternalProfilingOptions</a>(options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>), <span class="keyword">true</span>);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    ProfilingStaticGuid staticGuid = profilingService.GetStaticId(<span class="stringliteral">&quot;dummy&quot;</span>);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    std::hash&lt;std::string&gt; hasher;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    uint64_t hash = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(hasher(<span class="stringliteral">&quot;dummy&quot;</span>));</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    ProfilingStaticGuid expectedStaticValue(hash | MIN_STATIC_GUID);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    CHECK(staticGuid == expectedStaticValue);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    ProfilingDynamicGuid dynamicGuid = profilingService.GetNextGuid();</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    uint64_t dynamicGuidValue = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(dynamicGuid);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    ++dynamicGuidValue;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    ProfilingDynamicGuid expectedDynamicValue(dynamicGuidValue);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    dynamicGuid = profilingService.GetNextGuid();</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    CHECK(dynamicGuid == expectedDynamicValue);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;}</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;TEST_CASE(<span class="stringliteral">&quot;GetTimelinePackerWriterFromProfilingService&quot;</span>)</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;{</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    LogLevelSwapper logLevelSwapper(arm::pipe::LogSeverity::Fatal);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    ProfilingOptions options;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    options.m_EnableProfiling = <span class="keyword">true</span>;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <a class="code" href="classarmnn_1_1_arm_n_n_profiling_service_initialiser.xhtml">armnn::ArmNNProfilingServiceInitialiser</a> initialiser;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    ProfilingService profilingService(arm::pipe::MAX_ARMNN_COUNTER,</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                                      initialiser,</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                                      arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                                      arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                                      arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    profilingService.ResetExternalProfilingOptions(options, <span class="keyword">true</span>);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; writer = profilingService.GetSendTimelinePacket();</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    CHECK(writer != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;}</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CheckStaticGuidsAndEvents&quot;</span>)</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;{</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    CHECK(<span class="stringliteral">&quot;name&quot;</span> == LabelsAndEventClasses::NAME_LABEL);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    CHECK(<span class="stringliteral">&quot;type&quot;</span> == LabelsAndEventClasses::TYPE_LABEL);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    CHECK(<span class="stringliteral">&quot;index&quot;</span> == LabelsAndEventClasses::INDEX_LABEL);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    std::hash&lt;std::string&gt; hasher;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    uint64_t hash = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(hasher(LabelsAndEventClasses::NAME_LABEL));</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    ProfilingStaticGuid expectedNameGuid(hash | MIN_STATIC_GUID);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    CHECK(LabelsAndEventClasses::NAME_GUID == expectedNameGuid);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    hash = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(hasher(LabelsAndEventClasses::TYPE_LABEL));</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    ProfilingStaticGuid expectedTypeGuid(hash | MIN_STATIC_GUID);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    CHECK(LabelsAndEventClasses::TYPE_GUID == expectedTypeGuid);</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    hash = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(hasher(LabelsAndEventClasses::INDEX_LABEL));</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    ProfilingStaticGuid expectedIndexGuid(hash | MIN_STATIC_GUID);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    CHECK(LabelsAndEventClasses::INDEX_GUID == expectedIndexGuid);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    hash = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(hasher(<span class="stringliteral">&quot;ARMNN_PROFILING_SOL&quot;</span>));</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    ProfilingStaticGuid expectedSol(hash | MIN_STATIC_GUID);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    CHECK(LabelsAndEventClasses::ARMNN_PROFILING_SOL_EVENT_CLASS == expectedSol);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    hash = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(hasher(<span class="stringliteral">&quot;ARMNN_PROFILING_EOL&quot;</span>));</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    ProfilingStaticGuid expectedEol(hash | MIN_STATIC_GUID);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    CHECK(LabelsAndEventClasses::ARMNN_PROFILING_EOL_EVENT_CLASS == expectedEol);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;}</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;}</div><div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">arm::pipe::MockBufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00207">ProfilingMocks.hpp:207</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">armnn::IRuntime::CreationOptions::ExternalProfilingOptions::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdoc">Indicates whether external profiling is enabled or not. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00138">IRuntime.hpp:138</a></div></div>
<div class="ttc" id="namespacearm_1_1pipe_xhtml_aedd5bf7f3d6df99a1b42e7826c5b380b"><div class="ttname"><a href="namespacearm_1_1pipe.xhtml#aedd5bf7f3d6df99a1b42e7826c5b380b">arm::pipe::ConvertExternalProfilingOptions</a></div><div class="ttdeci">ProfilingOptions ConvertExternalProfilingOptions(const armnn::IRuntime::CreationOptions::ExternalProfilingOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_options_converter_8cpp_source.xhtml#l00017">ProfilingOptionsConverter.cpp:17</a></div></div>
<div class="ttc" id="structarmnn_1_1_runtime_impl_xhtml"><div class="ttname"><a href="structarmnn_1_1_runtime_impl.xhtml">armnn::RuntimeImpl</a></div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8hpp_source.xhtml#l00030">Runtime.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00077">IRuntime.hpp:77</a></div></div>
<div class="ttc" id="classarmnn_1_1_arm_n_n_profiling_service_initialiser_xhtml"><div class="ttname"><a href="classarmnn_1_1_arm_n_n_profiling_service_initialiser.xhtml">armnn::ArmNNProfilingServiceInitialiser</a></div><div class="ttdef"><b>Definition:</b> <a href="_arm_n_n_profiling_service_initialiser_8hpp_source.xhtml#l00014">ArmNNProfilingServiceInitialiser.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_a30412a91cadff138686eaeb12f5357cc"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">armnn::IRuntime::CreationOptions::m_ProfilingOptions</a></div><div class="ttdeci">ExternalProfilingOptions m_ProfilingOptions</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00153">IRuntime.hpp:153</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_637c692f14729569dd2eac0c18e2a54a.xhtml">profiling</a></li><li class="navelem"><a class="el" href="dir_6b1198f6e738611120ec65b09506d2f8.xhtml">test</a></li><li class="navelem"><a class="el" href="_send_timeline_packet_tests_8cpp.xhtml">SendTimelinePacketTests.cpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:20 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
