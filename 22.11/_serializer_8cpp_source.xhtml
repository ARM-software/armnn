<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnSerializer/Serializer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_serializer_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Serializer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_serializer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_serializer_8hpp.xhtml">Serializer.hpp</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_serializer_utils_8hpp.xhtml">SerializerUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_descriptors_8hpp.xhtml">armnn/Descriptors.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_lstm_params_8hpp.xhtml">armnn/LstmParams.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_quantized_lstm_params_8hpp.xhtml">armnn/QuantizedLstmParams.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_numeric_cast_8hpp.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;fmt/format.h&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span>fb = flatbuffers;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn_serializer.xhtml">serializer</a> = <a class="code" href="namespacearmnn_serializer.xhtml">armnnSerializer</a>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn_serializer.xhtml">armnnSerializer</a></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;ISerializer::ISerializer() : pSerializerImpl(new SerializerImpl())</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;}</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;ISerializer::~ISerializer() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classarmnn_serializer_1_1_i_serializer.xhtml#a782a973f05e8615c6dc9441b0dba067f">   30</a></span>&#160;<a class="code" href="classarmnn_serializer_1_1_i_serializer.xhtml">ISerializer</a>* ISerializer::CreateRaw()</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classarmnn_serializer_1_1_i_serializer.xhtml">ISerializer</a>();</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classarmnn_serializer_1_1_i_serializer.xhtml#a3c51b5b078572dee02528bfae7202524">   35</a></span>&#160;<a class="code" href="namespacearmnn_serializer.xhtml#a550a83250b3ddebf15d5c13c224e3609">ISerializerPtr</a> ISerializer::Create()</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_serializer.xhtml#a550a83250b3ddebf15d5c13c224e3609">ISerializerPtr</a>(CreateRaw(), &amp;ISerializer::Destroy);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classarmnn_serializer_1_1_i_serializer.xhtml#a97f01015b8ee3badf4dc3ce4cd6a70c8">   40</a></span>&#160;<span class="keywordtype">void</span> ISerializer::Destroy(<a class="code" href="classarmnn_serializer_1_1_i_serializer.xhtml">ISerializer</a>* <a class="code" href="namespacearmnn_serializer.xhtml">serializer</a>)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">delete</span> serializer;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarmnn_serializer_1_1_i_serializer.xhtml#a4d146e96f4464192b762b23e1cf1e207">   45</a></span>&#160;<span class="keywordtype">void</span> ISerializer::Serialize(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a>&amp; inNetwork)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    pSerializerImpl-&gt;<a class="code" href="classarmnn_serializer_1_1_i_serializer.xhtml#a4d146e96f4464192b762b23e1cf1e207">Serialize</a>(inNetwork);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarmnn_serializer_1_1_i_serializer.xhtml#a049d34980f9dd0a518f9781822a718c4">   50</a></span>&#160;<span class="keywordtype">bool</span> ISerializer::SaveSerializedToStream(std::ostream&amp; stream)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> pSerializerImpl-&gt;SaveSerializedToStream(stream);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="namespacearmnn_serializer.xhtml#aac3bf4453f8a909ca23f290089df8ff1">   55</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">serializer::ActivationFunction</a> <a class="code" href="namespacearmnn_serializer.xhtml#aac3bf4453f8a909ca23f290089df8ff1">GetFlatBufferActivationFunction</a>(<a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a> <span class="keyword">function</span>)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">switch</span> (<span class="keyword">function</span>)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::ActivationFunction::Sigmoid</a>:</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_Sigmoid;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">armnn::ActivationFunction::TanH</a>:</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_TanH;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">armnn::ActivationFunction::Linear</a>:</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_Linear;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559">armnn::ActivationFunction::ReLu</a>:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_ReLu;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a>:</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_BoundedReLu;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaacb7667f5ec2f6e8a5943b781ba6c2735">armnn::ActivationFunction::LeakyReLu</a>:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_LeakyReLu;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a>:</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_Abs;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::ActivationFunction::Sqrt</a>:</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_Sqrt;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaceb46ca115d05c51aa5a16a8867c3304">armnn::ActivationFunction::Square</a>:</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_Square;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaed67cf7d54c570e4c4891800f085f41d">armnn::ActivationFunction::Elu</a>:</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_Elu;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa0877e5b3fbe9d7569df6399609ed0186">armnn::ActivationFunction::HardSwish</a>:</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_HardSwish;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">return</span> serializer::ActivationFunction::ActivationFunction_Sigmoid;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="namespacearmnn_serializer.xhtml#a6fcb1eefde815b0b7465a689c8d26b50">   86</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#ae7e8cbf71db6a490789ca6dcaa8deeae">serializer::ArgMinMaxFunction</a> <a class="code" href="namespacearmnn_serializer.xhtml#a6fcb1eefde815b0b7465a689c8d26b50">GetFlatBufferArgMinMaxFunction</a>(<a class="code" href="namespacearmnn.xhtml#ae7e8cbf71db6a490789ca6dcaa8deeae">armnn::ArgMinMaxFunction</a> <span class="keyword">function</span>)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">switch</span> (<span class="keyword">function</span>)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ae7e8cbf71db6a490789ca6dcaa8deeaea6a061313d22e51e0f25b7cd4dc065233">armnn::ArgMinMaxFunction::Max</a>:</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">return</span> serializer::ArgMinMaxFunction::ArgMinMaxFunction_Max;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ae7e8cbf71db6a490789ca6dcaa8deeaea78d811e98514cd165dda532286610fd2">armnn::ArgMinMaxFunction::Min</a>:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">return</span> serializer::ArgMinMaxFunction::ArgMinMaxFunction_Min;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;uint32_t SerializerStrategy::GetSerializedId(<a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">if</span> (m_guidMap.empty())</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        m_guidMap.insert(std::make_pair(guid, m_layerId));</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_guidMap.find(guid) == m_guidMap.end())</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        ++m_layerId;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        m_guidMap.insert(std::make_pair(guid, m_layerId));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">return</span> m_layerId;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> m_guidMap[guid];</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">// Build FlatBuffer for Input Layer</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeInputLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer, <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">auto</span> flatBufferInputBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Input);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// Create FlatBuffer BindableBaseLayer</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">auto</span> flatBufferInputBindableBaseLayer = serializer::CreateBindableLayerBase(m_flatBufferBuilder,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                                                                flatBufferInputBaseLayer,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                                                                <span class="keywordtype">id</span>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// Push layer binding id to outputIds.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    m_inputIds.push_back(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// Create the FlatBuffer InputLayer</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">auto</span> flatBufferInputLayer = serializer::CreateInputLayer(m_flatBufferBuilder, flatBufferInputBindableBaseLayer);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    CreateAnyLayer(flatBufferInputLayer.o, serializer::Layer::Layer_InputLayer);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">// Build FlatBuffer for Output Layer</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeOutputLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                              <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">auto</span> flatBufferOutputBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Output);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Create FlatBuffer BindableBaseLayer</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">auto</span> flatBufferOutputBindableBaseLayer = serializer::CreateBindableLayerBase(m_flatBufferBuilder,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                                                                 flatBufferOutputBaseLayer,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                                                                 <span class="keywordtype">id</span>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Push layer binding id to outputIds.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    m_outputIds.push_back(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// Create the FlatBuffer OutputLayer</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">auto</span> flatBufferOutputLayer = serializer::CreateOutputLayer(m_flatBufferBuilder, flatBufferOutputBindableBaseLayer);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    CreateAnyLayer(flatBufferOutputLayer.o, serializer::Layer::Layer_OutputLayer);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">// Build FlatBuffer for Activation Layer</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeActivationLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Activation);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Create the FlatBuffer ActivationDescriptor</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor = CreateActivationDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                                           <a class="code" href="namespacearmnn_serializer.xhtml#aac3bf4453f8a909ca23f290089df8ff1">GetFlatBufferActivationFunction</a>(descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a>),</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                                           descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a>,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                                           descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a>);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// Create the FlatBuffer ActivationLayer</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">auto</span> flatBufferAdditionLayer = CreateActivationLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                                         flatBufferBaseLayer,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                                         flatBufferDescriptor);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    CreateAnyLayer(flatBufferAdditionLayer.o, serializer::Layer::Layer_ActivationLayer);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">// Build FlatBuffer for Addition Layer</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeAdditionLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">auto</span> flatBufferAdditionBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Addition);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// Create the FlatBuffer AdditionLayer</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">auto</span> flatBufferAdditionLayer = serializer::CreateAdditionLayer(m_flatBufferBuilder, flatBufferAdditionBaseLayer);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    CreateAnyLayer(flatBufferAdditionLayer.o, serializer::Layer::Layer_AdditionLayer);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">// Build FlatBuffer for ArgMinMax Layer</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeArgMinMaxLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                                 <span class="keyword">const</span> <span class="keywordtype">char</span> *name)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_ArgMinMax);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// Create FlatBuffer Descriptor</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor = CreateArgMinMaxDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                                          <a class="code" href="namespacearmnn_serializer.xhtml#a6fcb1eefde815b0b7465a689c8d26b50">GetFlatBufferArgMinMaxFunction</a>(descriptor.<a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml#ab1ae6f520bb1a4da191a0ae907477f23">m_Function</a>),</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                                          descriptor.<a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">m_Axis</a>);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">// Create FlatBuffer ArgMinMaxLayer</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateArgMinMaxLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                                flatBufferBaseLayer,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                flatBufferDescriptor);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_ArgMinMaxLayer);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeBatchMatMulLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">armnn::BatchMatMulDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                                   <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_BatchMatMul);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// Create the FlatBuffer BatchMatMulDescriptor</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor = CreateBatchMatMulDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                                            descriptor.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#acb441bb8db19bcce78d15cdd8ceb5ea0">m_TransposeX</a>,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                                            descriptor.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#a112b466e5d2ab9d1887178adbe3afa1c">m_TransposeY</a>,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                                            descriptor.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#a0cf8306be7d301de0f095fff9901a525">m_AdjointX</a>,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                                            descriptor.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ad945fc98770356dd886a68e98a52e26b">m_AdjointY</a>,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                            <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#aedca000a005e091c23191e82d7e81b1d">m_DataLayoutX</a>),</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                                            <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#aaf7828880989b4b9378d3e86aa6dc843">m_DataLayoutY</a>));</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// Create the FlatBuffer BatchMatMulLayer</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">auto</span> flatBufferBatchMatMulLayer = CreateBatchMatMulLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                                             flatBufferBaseLayer,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                                             flatBufferDescriptor);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    CreateAnyLayer(flatBufferBatchMatMulLayer.o, serializer::Layer::Layer_BatchMatMulLayer);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">// Build FlatBuffer for BatchToSpaceNd Layer</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeBatchToSpaceNdLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                                      <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_BatchToSpaceNd);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    std::vector&lt;unsigned int&gt; crops;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    crops.reserve(descriptor.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a3941f674c071c9503e00d2b59e92e454">m_Crops</a>.size() * 2);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; crop : descriptor.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a3941f674c071c9503e00d2b59e92e454">m_Crops</a>)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        crops.push_back(crop.first);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        crops.push_back(crop.second);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        CreateBatchToSpaceNdDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                       m_flatBufferBuilder.CreateVector(descriptor.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">m_BlockShape</a>),</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                       m_flatBufferBuilder.CreateVector(crops),</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                       <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateBatchToSpaceNdLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                                                 flatBufferBaseLayer,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                                                 flatBufferDescriptor);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_BatchToSpaceNdLayer);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeBatchNormalizationLayer(</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a>&amp; batchNormDescriptor,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;{</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>&amp; mean     = constants[0];</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>&amp; variance = constants[1];</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>&amp; beta     = constants[2];</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>&amp; gamma    = constants[3];</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">auto</span> fbBatchNormalizationBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_BatchNormalization);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">auto</span> fbBatchNormalizationDescriptor = serializer::CreateBatchNormalizationDescriptor(</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                                  m_flatBufferBuilder,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                                  batchNormDescriptor.<a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">m_Eps</a>,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                                  <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(batchNormDescriptor.<a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keyword">auto</span> fbMeanConstTensorInfo     = CreateConstTensorInfo(mean);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">auto</span> fbVarianceConstTensorInfo = CreateConstTensorInfo(variance);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">auto</span> fbBetaConstTensorInfo     = CreateConstTensorInfo(beta);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">auto</span> fbGammaConstTensorInfo    = CreateConstTensorInfo(gamma);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">auto</span> fbBatchNormalizationLayer = serializer::CreateBatchNormalizationLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                                                               fbBatchNormalizationBaseLayer,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                                                               fbBatchNormalizationDescriptor,</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                                                               fbMeanConstTensorInfo,</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                                                               fbVarianceConstTensorInfo,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                                                               fbBetaConstTensorInfo,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                                                               fbGammaConstTensorInfo);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    CreateAnyLayer(fbBatchNormalizationLayer.o, serializer::Layer::Layer_BatchNormalizationLayer);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeCastLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;{</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Cast);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">auto</span> fbCastLayer = serializer::CreateCastLayer(m_flatBufferBuilder, fbBaseLayer);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    CreateAnyLayer(fbCastLayer.o, serializer::Layer::Layer_CastLayer);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeChannelShuffleLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">armnn::ChannelShuffleDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                                      <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;{</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keyword">auto</span> fbDescriptor = CreateChannelShuffleDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                                                       descriptor.<a class="code" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml#ab218de7805899c8412d75d1fd1d846d2">m_Axis</a>,</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                                       descriptor.<a class="code" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml#a1953d00371489c32ebded5a42eabc0cf">m_NumGroups</a>);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_ChannelShuffle);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keyword">auto</span> fbChannelShuffleLayer = serializer::CreateChannelShuffleLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    CreateAnyLayer(fbChannelShuffleLayer.o, serializer::Layer::Layer_ChannelShuffleLayer);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;}</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeComparisonLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                             <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;{</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Comparison);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateComparisonDescriptor(</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a1c88cccaeb232c6fe8022c7006bb21bc">GetFlatBufferComparisonOperation</a>(descriptor.<a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml#a865dc4f43cb0ff01a1dcf78036912fd1">m_Operation</a>));</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keyword">auto</span> fbLayer = serializer::CreateComparisonLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_ComparisonLayer);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;}</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment">// Build FlatBuffer for Constant Layer</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeConstantLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                                <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;{</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> input = constants[0];</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keyword">auto</span> flatBufferConstantBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Constant);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keyword">auto</span> flatBufferConstTensorInfo = CreateConstTensorInfo(input);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="comment">// Create the FlatBuffer ConstantLayer</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateConstantLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                               flatBufferConstantBaseLayer,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                               flatBufferConstTensorInfo);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_ConstantLayer);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;}</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">// Build FlatBuffer for Convolution2dLayer</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeConvolution2dLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                                                     <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;{</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Convolution2d);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor = CreateConvolution2dDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>,</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>,</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>,</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>,</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>,</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>,</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">m_DilationX</a>,</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">m_DilationY</a>,</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a>,</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                                              <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="comment">// Create the FlatBuffer Convolution2dLayer</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateConvolution2dLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                                    flatBufferBaseLayer,</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                                    flatBufferDescriptor);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_Convolution2dLayer);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">// Build FlatBuffer for Convolution3dLayer</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeConvolution3dLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml">armnn::Convolution3dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                                                     <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;{</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Convolution3d);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor = CreateConvolution3dDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>,</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>,</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#a83ca447892f460dabaa2f87d3dc3db61">m_PadFront</a>,</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#a11d5c25face9b54e90f79ee8bdc1d0fb">m_PadBack</a>,</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>,</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>,</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#a5164336f6a1b15be0d434a6bbf7289da">m_StrideZ</a>,</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">m_DilationX</a>,</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">m_DilationY</a>,</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#a16543bce17aa2e4d6e81c88f74227192">m_DilationZ</a>,</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                                              descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a>,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                                              <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.<a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="comment">// Create the FlatBuffer Convolution3dLayer</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateConvolution3dLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                                    flatBufferBaseLayer,</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                                                    flatBufferDescriptor);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_Convolution3dLayer);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeDepthToSpaceLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::DepthToSpaceDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                               <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;{</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_DepthToSpace);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keyword">auto</span> fbDescriptor = CreateDepthToSpaceDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                                     descriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">m_BlockSize</a>,</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                                     <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keyword">auto</span> fbLayer = serializer::CreateDepthToSpaceLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_DepthToSpaceLayer);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;}</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeDepthwiseConvolution2dLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                                                              <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;{</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_DepthwiseConvolution2d);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keyword">auto</span> fbDescriptor = CreateDepthwiseConvolution2dDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>,</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>,</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>,</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>,</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>,</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>,</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">m_DilationX</a>,</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">m_DilationY</a>,</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a>,</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                                                               <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateDepthwiseConvolution2dLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                                                             fbBaseLayer,</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                                                             fbDescriptor);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_DepthwiseConvolution2dLayer);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeDequantizeLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                                             <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;{</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keyword">auto</span> fbDequantizeBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Dequantize);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keyword">auto</span> fbDequantizeLayer     = serializer::CreateDequantizeLayer(m_flatBufferBuilder, fbDequantizeBaseLayer);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    CreateAnyLayer(fbDequantizeLayer.o, serializer::Layer::Layer_DequantizeLayer);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;}</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeDetectionPostProcessLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                                            <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>&amp; anchors = constants[0];</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_DetectionPostProcess);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keyword">auto</span> fbDescriptor = CreateDetectionPostProcessDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">m_MaxDetections</a>,</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">m_MaxClassesPerDetection</a>,</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">m_DetectionsPerClass</a>,</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">m_NmsScoreThreshold</a>,</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">m_NmsIouThreshold</a>,</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">m_NumClasses</a>,</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">m_UseRegularNms</a>,</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">m_ScaleX</a>,</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">m_ScaleY</a>,</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">m_ScaleW</a>,</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">m_ScaleH</a>);</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; fbAnchorsConstTensorInfo = CreateConstTensorInfo(anchors);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateDetectionPostProcessLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                                                           fbBaseLayer,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                                           fbDescriptor,</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                                                           fbAnchorsConstTensorInfo);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_DetectionPostProcessLayer);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;}</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeDivisionLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;{</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keyword">auto</span> fbDivisionBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Division);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keyword">auto</span> fbDivisionLayer     = serializer::CreateDivisionLayer(m_flatBufferBuilder, fbDivisionBaseLayer);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    CreateAnyLayer(fbDivisionLayer.o, serializer::Layer::Layer_DivisionLayer);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;}</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeElementwiseUnaryLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                                                   <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;{</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_ElementwiseUnary);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateElementwiseUnaryDescriptor(</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#ae4ba1925d55937fdb1770852ff0554bf">GetFlatBufferUnaryOperation</a>(descriptor.<a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml#afe768be66897eb3d73284424e3239b23">m_Operation</a>));</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keyword">auto</span> fbLayer = serializer::CreateElementwiseUnaryLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_ElementwiseUnaryLayer);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;}</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeFillLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fill_descriptor.xhtml">armnn::FillDescriptor</a>&amp; fillDescriptor,</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                                       <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;{</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keyword">auto</span> fbFillBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Fill);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateFillDescriptor(m_flatBufferBuilder, fillDescriptor.<a class="code" href="structarmnn_1_1_fill_descriptor.xhtml#ab3ebc5cf4a617d43371a4cb7fecdeb32">m_Value</a>);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keyword">auto</span> fbFillLayer = serializer::CreateFillLayer(m_flatBufferBuilder, fbFillBaseLayer, fbDescriptor);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    CreateAnyLayer(fbFillLayer.o, serializer::Layer::Layer_FillLayer);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;}</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeFloorLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, <span class="keyword">const</span> <span class="keywordtype">char</span> *name)</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;{</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keyword">auto</span> flatBufferFloorBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Floor);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="keyword">auto</span> flatBufferFloorLayer = serializer::CreateFloorLayer(m_flatBufferBuilder, flatBufferFloorBaseLayer);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    CreateAnyLayer(flatBufferFloorLayer.o, serializer::Layer::Layer_FloorLayer);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;}</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeGatherLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a>&amp; gatherDescriptor,</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;{</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keyword">auto</span> fbGatherDescriptor = CreateGatherDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                                                     gatherDescriptor.<a class="code" href="structarmnn_1_1_gather_descriptor.xhtml#a35d11c7d509d1adbae1ae01c58394a7f">m_Axis</a>);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="keyword">auto</span> fbGatherBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Gather);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keyword">auto</span> flatBufferLayer   = serializer::CreateGatherLayer(m_flatBufferBuilder, fbGatherBaseLayer, fbGatherDescriptor);</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_GatherLayer);</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;}</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeGatherNdLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;{</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keyword">auto</span> fbGatherNdBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_GatherNd);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keyword">auto</span> flatBufferLayer     = serializer::CreateGatherNdLayer(m_flatBufferBuilder, fbGatherNdBaseLayer);</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_GatherNdLayer);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;}</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeInstanceNormalizationLayer(</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a>&amp; instanceNormalizationDescriptor,</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;{</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateInstanceNormalizationDescriptor(</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            m_flatBufferBuilder,</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            instanceNormalizationDescriptor.<a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a5e078fd505aef7bccaa05c8058e096cc">m_Gamma</a>,</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            instanceNormalizationDescriptor.<a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>,</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            instanceNormalizationDescriptor.<a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">m_Eps</a>,</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(instanceNormalizationDescriptor.<a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keyword">auto</span> fbBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_InstanceNormalization);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keyword">auto</span> fbLayer     = serializer::CreateInstanceNormalizationLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_InstanceNormalizationLayer);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;}</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeL2NormalizationLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a>&amp; l2NormalizationDescriptor,</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                                                  <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;{</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keyword">auto</span> fbBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_L2Normalization);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="comment">// Create the FlatBuffer L2Normalization Descriptor</span></div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateL2NormalizationDescriptor(</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            m_flatBufferBuilder,</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(l2NormalizationDescriptor.<a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>),</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            l2NormalizationDescriptor.<a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">m_Eps</a>);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="comment">// Create FlatBuffer layer</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keyword">auto</span> fbLayer = serializer::CreateL2NormalizationLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_L2NormalizationLayer);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;}</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeLogicalBinaryLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_logical_binary_descriptor.xhtml">armnn::LogicalBinaryDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;{</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_LogicalBinary);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateLogicalBinaryDescriptor(</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a3078a3b577bbd2aa0b133d4732b8e645">GetFlatBufferLogicalBinaryOperation</a>(descriptor.<a class="code" href="structarmnn_1_1_logical_binary_descriptor.xhtml#a32c95d929d2e2e0fa7fc1a3a25865eb0">m_Operation</a>));</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keyword">auto</span> fbLayer = serializer::CreateLogicalBinaryLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_LogicalBinaryLayer);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;}</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeLogSoftmaxLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::LogSoftmaxDescriptor</a>&amp; logSoftmaxDescriptor,</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                                             <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;{</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keyword">auto</span> flatBufferLogSoftmaxBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_LogSoftmax);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="comment">// Create the FlatBuffer LogSoftmaxDescriptor</span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="keyword">auto</span> flatBufferLogSoftmaxDesc =</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        serializer::CreateLogSoftmaxDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                                               logSoftmaxDescriptor.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>,</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                                               logSoftmaxDescriptor.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">m_Axis</a>);</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="comment">// Create the FlatBuffer LogSoftmaxLayer</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="keyword">auto</span> flatBufferLogSoftmaxLayer =</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        serializer::CreateLogSoftmaxLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                                          flatBufferLogSoftmaxBaseLayer,</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                                          flatBufferLogSoftmaxDesc);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    CreateAnyLayer(flatBufferLogSoftmaxLayer.o, serializer::Layer::Layer_LogSoftmaxLayer);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;}</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeLstmLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                                            <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;{</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="keyword">auto</span> fbLstmBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Lstm);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keyword">auto</span> fbLstmDescriptor = serializer::CreateLstmDescriptor(</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a>,</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a>,</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a>,</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>,</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>,</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>,</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>);</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="comment">// Index for constants vector</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    std::size_t i = 0;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="comment">// Get mandatory/basic input parameters</span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keyword">auto</span> inputToForgetWeights     = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToForgetWeights</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="keyword">auto</span> inputToCellWeights       = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToCellWeights</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keyword">auto</span> inputToOutputWeights     = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToOutputWeights</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keyword">auto</span> recurrentToForgetWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToForgetWeights</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keyword">auto</span> recurrentToCellWeights   = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToCellWeights</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="keyword">auto</span> recurrentToOutputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToOutputWeights</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keyword">auto</span> forgetGateBias           = CreateConstTensorInfo(constants[i++]); <span class="comment">//ForgetGateBias</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keyword">auto</span> cellBias                 = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellBias</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keyword">auto</span> outputGateBias           = CreateConstTensorInfo(constants[i++]); <span class="comment">//OutputGateBias</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="comment">//Define optional parameters, these will be set depending on configuration in Lstm descriptor</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputToInputWeights;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; recurrentToInputWeights;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToInputWeights;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputGateBias;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; projectionWeights;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; projectionBias;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToForgetWeights;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToOutputWeights;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputLayerNormWeights;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; forgetLayerNormWeights;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellLayerNormWeights;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; outputLayerNormWeights;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    {</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        inputToInputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToInputWeights</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        recurrentToInputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToInputWeights</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        inputGateBias = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputGateBias</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    }</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>)</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    {</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        {</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            cellToInputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellToInputWeights</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        }</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        cellToForgetWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellToForgetWeights</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        cellToOutputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellToOutputWeights</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    }</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>)</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    {</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        projectionWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//ProjectionWeights</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        projectionBias = CreateConstTensorInfo(constants[i++]); <span class="comment">//ProjectionBias</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    }</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>)</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    {</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        {</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            inputLayerNormWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputLayerNormWeights</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        }</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        forgetLayerNormWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//ForgetLayerNormWeights</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        cellLayerNormWeights   = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellLayerNormWeights</span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        outputLayerNormWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//OutputLayerNormWeights</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    }</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keyword">auto</span> fbLstmParams = serializer::CreateLstmInputParams(</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        inputToForgetWeights,</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        inputToCellWeights,</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        inputToOutputWeights,</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        recurrentToForgetWeights,</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        recurrentToCellWeights,</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        recurrentToOutputWeights,</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        forgetGateBias,</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        cellBias,</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        outputGateBias,</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        inputToInputWeights,</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        recurrentToInputWeights,</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        cellToInputWeights,</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        inputGateBias,</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        projectionWeights,</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        projectionBias,</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        cellToForgetWeights,</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        cellToOutputWeights,</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        inputLayerNormWeights,</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        forgetLayerNormWeights,</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        cellLayerNormWeights,</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        outputLayerNormWeights);</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="keyword">auto</span> fbLstmLayer = serializer::CreateLstmLayer(</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        fbLstmBaseLayer,</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        fbLstmDescriptor,</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        fbLstmParams);</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    CreateAnyLayer(fbLstmLayer.o, serializer::Layer::Layer_LstmLayer);</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;}</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeMaximumLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;{</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <span class="keyword">auto</span> fbMaximumBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Maximum);</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    <span class="keyword">auto</span> fbMaximumLayer     = serializer::CreateMaximumLayer(m_flatBufferBuilder, fbMaximumBaseLayer);</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    CreateAnyLayer(fbMaximumLayer.o, serializer::Layer::Layer_MaximumLayer);</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;}</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeMeanLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                                       <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;{</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keyword">auto</span> fbMeanBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Mean);</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="keyword">auto</span> fbMeanDescriptor = serializer::CreateMeanDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                                                             m_flatBufferBuilder.CreateVector(descriptor.<a class="code" href="structarmnn_1_1_mean_descriptor.xhtml#a1f0d67b087c491248bd1cde3ff995a95">m_Axis</a>),</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                                                             descriptor.<a class="code" href="structarmnn_1_1_mean_descriptor.xhtml#a28e0548abfc4e79c48f29a3d11a062e9">m_KeepDims</a>);</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <span class="keyword">auto</span> fbMeanLayer = serializer::CreateMeanLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                                                   fbMeanBaseLayer,</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                                                   fbMeanDescriptor);</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    CreateAnyLayer(fbMeanLayer.o, serializer::Layer::Layer_MeanLayer);</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;}</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeMinimumLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;{</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="keyword">auto</span> fbMinimumBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Minimum);</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keyword">auto</span> fbMinimumLayer     = serializer::CreateMinimumLayer(m_flatBufferBuilder, fbMinimumBaseLayer);</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    CreateAnyLayer(fbMinimumLayer.o, serializer::Layer::Layer_MinimumLayer);</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;}</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeMergeLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;{</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <span class="keyword">auto</span> fbMergeBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Merge);</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <span class="keyword">auto</span> fbMergeLayer     = serializer::CreateMergeLayer(m_flatBufferBuilder, fbMergeBaseLayer);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    CreateAnyLayer(fbMergeLayer.o, serializer::Layer::Layer_MergeLayer);</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;}</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeConcatLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">armnn::ConcatDescriptor</a>&amp; concatDescriptor,</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;{</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keyword">auto</span> flatBufferConcatBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Concat);</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    std::vector&lt;flatbuffers::Offset&lt;UintVector&gt;&gt; views;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> v = 0; v &lt; concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">GetNumViews</a>(); ++v)</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    {</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;        <span class="keyword">const</span> uint32_t* origin = concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#ab78e6fe963508c1ac5c00d04bb3361a3">GetViewOrigin</a>(v);</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;        std::vector&lt;uint32_t&gt; origins;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>(); ++d)</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        {</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;            origins.push_back(origin[d]);</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        }</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        <span class="keyword">auto</span> view = m_flatBufferBuilder.CreateVector(origins);</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        <span class="keyword">auto</span> uintVector = CreateUintVector(m_flatBufferBuilder, view);</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        views.push_back(uintVector);</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    }</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    <span class="keyword">auto</span> flatBufferConcatDescriptor = CreateOriginsDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;                                                              concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a379929e3b277f1ef94f3ce645870589d">GetConcatAxis</a>(),</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                                                              concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">GetNumViews</a>(),</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;                                                              concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>(),</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;                                                              m_flatBufferBuilder.CreateVector(views));</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = CreateConcatLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                                             flatBufferConcatBaseLayer,</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                                             flatBufferConcatDescriptor);</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_ConcatLayer);</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;}</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeMultiplicationLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;{</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <span class="keyword">auto</span> fbMultiplicationBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Multiplication);</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <span class="keyword">auto</span> fbMultiplicationLayer     = serializer::CreateMultiplicationLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                                                                           fbMultiplicationBaseLayer);</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    CreateAnyLayer(fbMultiplicationLayer.o, serializer::Layer::Layer_MultiplicationLayer);</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;}</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializePadLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a>&amp; padDescriptor,</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;{</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Pad);</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    std::vector&lt;unsigned int&gt; padList;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; p: padDescriptor.<a class="code" href="structarmnn_1_1_pad_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">m_PadList</a>)</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    {</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;        padList.push_back(p.first);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;        padList.push_back(p.second);</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    }</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    <span class="keyword">auto</span> flatBufferPadDesc = serializer::CreatePadDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;                                                             m_flatBufferBuilder.CreateVector(padList),</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                                                             padDescriptor.<a class="code" href="structarmnn_1_1_pad_descriptor.xhtml#a410fa919f78af0f0f100bd1594eca4ab">m_PadValue</a>,</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;                                                             <a class="code" href="namespacearmnn_serializer.xhtml#a3f9e0ff7f7311d76ca36101721503a07">GetFlatBufferPaddingMode</a>(padDescriptor.<a class="code" href="structarmnn_1_1_pad_descriptor.xhtml#a66f2c989f51ab6116de4380390250b69">m_PaddingMode</a>));</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="keyword">auto</span> flatBufferPadLayer = serializer::CreatePadLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                                                         flatBufferBaseLayer,</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                                                         flatBufferPadDesc);</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    CreateAnyLayer(flatBufferPadLayer.o, serializer::Layer::Layer_PadLayer);</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;}</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializePermuteLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a>&amp; permuteDescriptor,</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;{</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <span class="keyword">auto</span> flatBufferPermuteBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Permute);</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    std::vector&lt;unsigned int&gt; dimMappings;</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;permuteDescriptor.<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">m_DimMappings</a>.<a class="code" href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">GetSize</a>(); ++i)</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    {</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        dimMappings.push_back(permuteDescriptor.<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">m_DimMappings</a>[i]);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    }</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <span class="keyword">auto</span> flatBufferPermuteDesc = serializer::CreatePermuteDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                                                                     m_flatBufferBuilder.CreateVector(dimMappings));</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="comment">// Create the FlatBuffer PermuteLayer</span></div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <span class="keyword">auto</span> flatBufferPermuteLayer = serializer::CreatePermuteLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                                                                 flatBufferPermuteBaseLayer,</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                                                                 flatBufferPermuteDesc);</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    CreateAnyLayer(flatBufferPermuteLayer.o, serializer::Layer::Layer_PermuteLayer);</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;}</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;<span class="comment">// Build FlatBuffer for Rank Layer</span></div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeRankLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                                       <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;{</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Rank);</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    <span class="keyword">auto</span> flatBufferRankLayer = serializer::CreateRankLayer(m_flatBufferBuilder, flatBufferBaseLayer);</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    CreateAnyLayer(flatBufferRankLayer.o, serializer::Layer::Layer_RankLayer);</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;}</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeReduceLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml">armnn::ReduceDescriptor</a>&amp; reduceDescriptor,</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                                             <span class="keyword">const</span> <span class="keywordtype">char</span>*)</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;{</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    <span class="keyword">auto</span> fbReduceBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Reduce);</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    <span class="keyword">auto</span> fbDescriptor = CreateReduceDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                                               reduceDescriptor.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#a28e0548abfc4e79c48f29a3d11a062e9">m_KeepDims</a>,</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                                               m_flatBufferBuilder.CreateVector(reduceDescriptor.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#aa1c6fc8c96404252f1072632fc5acb59">m_vAxis</a>),</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                                               <a class="code" href="namespacearmnn_serializer.xhtml#a2a4a81f69c4a84c4637c2e90e4e47968">GetFlatBufferReduceOperation</a>(reduceDescriptor.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#aa57c67b1da0011b1abb30170146e870f">m_ReduceOperation</a>));</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    <span class="keyword">auto</span> fbReduceLayer = serializer::CreateReduceLayer(m_flatBufferBuilder,</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                                                       fbReduceBaseLayer,</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                                                       fbDescriptor);</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    CreateAnyLayer(fbReduceLayer.o, serializer::Layer::Layer_ReduceLayer);</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;}</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="comment">// Build FlatBuffer for Reshape Layer</span></div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeReshapeLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a>&amp; reshapeDescriptor,</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;{</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    <span class="keyword">auto</span> flatBufferReshapeBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Reshape);</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    std::vector&lt;unsigned int&gt; targetShape;</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i =0; i &lt; reshapeDescriptor.<a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">m_TargetShape</a>.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    {</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;        targetShape.push_back(reshapeDescriptor.<a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">m_TargetShape</a>[i]);</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    }</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    <span class="keyword">auto</span> flatBufferReshapeDesc = serializer::CreateReshapeDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                                                                     m_flatBufferBuilder.CreateVector(targetShape));</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    <span class="comment">// Create the FlatBuffer ReshapeLayer</span></div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    <span class="keyword">auto</span> flatBufferReshapeLayer = serializer::CreateReshapeLayer(m_flatBufferBuilder, flatBufferReshapeBaseLayer,</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                                                                 flatBufferReshapeDesc);</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    CreateAnyLayer(flatBufferReshapeLayer.o, serializer::Layer::Layer_ReshapeLayer);</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;}</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeResizeLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a>&amp; resizeDescriptor,</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;{</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Resize);</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;            CreateResizeDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;                                   resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a>,</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                                   resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a>,</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;                                   <a class="code" href="namespacearmnn_serializer.xhtml#a255a85366167a060a9e33ce2378f28a0">GetFlatBufferResizeMethod</a>(resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">m_Method</a>),</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;                                   <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>),</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;                                   resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#ae1a4b3b6c60552509b89747cebb900a2">m_AlignCorners</a>,</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;                                   resizeDescriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a4022d5107338aaf5eb7abebf78a1360b">m_HalfPixelCenters</a>);</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateResizeLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;                                                         flatBufferBaseLayer,</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;                                                         flatBufferDescriptor);</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_ResizeLayer);</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;}</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeSliceLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a>&amp; sliceDescriptor,</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;{</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    <span class="keyword">auto</span> fbSliceBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Slice);</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keyword">auto</span> fbSliceDescriptor = CreateSliceDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;                                                   m_flatBufferBuilder.CreateVector(sliceDescriptor.<a class="code" href="structarmnn_1_1_slice_descriptor.xhtml#a4939f00778f08d6c6fec6f74c0a59b7e">m_Begin</a>),</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;                                                   m_flatBufferBuilder.CreateVector(sliceDescriptor.<a class="code" href="structarmnn_1_1_slice_descriptor.xhtml#ab52cabf19232290fa6b49828ba957ac0">m_Size</a>));</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    <span class="keyword">auto</span> fbSliceLayer = serializer::CreateSliceLayer(m_flatBufferBuilder, fbSliceBaseLayer, fbSliceDescriptor);</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    CreateAnyLayer(fbSliceLayer.o, serializer::Layer::Layer_SliceLayer);</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;}</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;<span class="comment">// Build FlatBuffer for Softmax Layer</span></div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeSoftmaxLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a>&amp; softmaxDescriptor,</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;{</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    <span class="keyword">auto</span> flatBufferSoftmaxBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Softmax);</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    <span class="comment">// Create the FlatBuffer SoftmaxDescriptor</span></div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    <span class="keyword">auto</span> flatBufferSoftmaxDesc =</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;        serializer::CreateSoftmaxDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                                            softmaxDescriptor.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>,</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                                            softmaxDescriptor.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">m_Axis</a>);</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;    <span class="comment">// Create the FlatBuffer SoftmaxLayer</span></div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    <span class="keyword">auto</span> flatBufferSoftmaxLayer =</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;        serializer::CreateSoftmaxLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                                       flatBufferSoftmaxBaseLayer,</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                                       flatBufferSoftmaxDesc);</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    CreateAnyLayer(flatBufferSoftmaxLayer.o, serializer::Layer::Layer_SoftmaxLayer);</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;}</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializePooling2dLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a>&amp; pooling2dDescriptor,</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;{</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    <span class="keyword">auto</span> fbPooling2dBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Pooling2d);</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <span class="keyword">auto</span> fbPooling2dDescriptor = serializer::CreatePooling2dDescriptor(</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#ac2eceb2274af867d713fe44720fc2d4e">GetFlatBufferPoolingAlgorithm</a>(pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">m_PoolType</a>),</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>,</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>,</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>,</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>,</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">m_PoolWidth</a>,</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">m_PoolHeight</a>,</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>,</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;        pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>,</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#aa5f62540b7f991c1522cf9c43fc005ee">GetFlatBufferOutputShapeRounding</a>(pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#affb5b68b3eba3ed45a06c7cde7781962">m_OutputShapeRounding</a>),</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a30eb1e8d2a9b090243c4ededa17746b7">GetFlatBufferPaddingMethod</a>(pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">m_PaddingMethod</a>),</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(pooling2dDescriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;    <span class="keyword">auto</span> fbPooling2dLayer = serializer::CreatePooling2dLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                                                             fbPooling2dBaseLayer,</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                                                             fbPooling2dDescriptor);</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    CreateAnyLayer(fbPooling2dLayer.o, serializer::Layer::Layer_Pooling2dLayer);</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;}</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializePooling3dLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml">armnn::Pooling3dDescriptor</a>&amp; pooling3dDescriptor,</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;{</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <span class="keyword">auto</span> fbPooling3dBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Pooling3d);</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    <span class="keyword">auto</span> fbPooling3dDescriptor = serializer::CreatePooling3dDescriptor(</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#ac2eceb2274af867d713fe44720fc2d4e">GetFlatBufferPoolingAlgorithm</a>(pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">m_PoolType</a>),</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>,</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>,</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>,</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>,</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#a83ca447892f460dabaa2f87d3dc3db61">m_PadFront</a>,</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#a11d5c25face9b54e90f79ee8bdc1d0fb">m_PadBack</a>,</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">m_PoolWidth</a>,</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">m_PoolHeight</a>,</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#acc978b36fd5d949bc781d7638e6e08b9">m_PoolDepth</a>,</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>,</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>,</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;        pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#a5164336f6a1b15be0d434a6bbf7289da">m_StrideZ</a>,</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#aa5f62540b7f991c1522cf9c43fc005ee">GetFlatBufferOutputShapeRounding</a>(pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#affb5b68b3eba3ed45a06c7cde7781962">m_OutputShapeRounding</a>),</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a30eb1e8d2a9b090243c4ededa17746b7">GetFlatBufferPaddingMethod</a>(pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">m_PaddingMethod</a>),</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(pooling3dDescriptor.<a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    <span class="keyword">auto</span> fbPooling3dLayer = serializer::CreatePooling3dLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                                                             fbPooling3dBaseLayer,</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                                                             fbPooling3dDescriptor);</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    CreateAnyLayer(fbPooling3dLayer.o, serializer::Layer::Layer_Pooling3dLayer);</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;}</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializePreluLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;{</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <span class="keyword">auto</span> flatBufferPreluBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Prelu);</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    <span class="comment">// Create the FlatBuffer AdditionLayer</span></div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="keyword">auto</span> flatBufferPreluLayer = serializer::CreatePreluLayer(m_flatBufferBuilder, flatBufferPreluBaseLayer);</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    CreateAnyLayer(flatBufferPreluLayer.o, serializer::Layer::Layer_PreluLayer);</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;}</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeQuantizeLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer, <span class="keyword">const</span> <span class="keywordtype">char</span> *name)</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;{</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    <span class="keyword">auto</span> fbQuantizeBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Quantize);</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    <span class="keyword">auto</span> fbQuantizeLayer = serializer::CreateQuantizeLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;                                                           fbQuantizeBaseLayer);</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    CreateAnyLayer(fbQuantizeLayer.o, serializer::Layer::Layer_QuantizeLayer);</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;}</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;<span class="comment">// Build FlatBuffer for FullyConnected Layer</span></div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeFullyConnectedLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a>&amp; fullyConnectedDescriptor,</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;                                                      <span class="keyword">const</span> <span class="keywordtype">char</span>*)</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;{</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_FullyConnected);</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    <span class="comment">// Create FlatBuffer FullyConnectedDescriptor</span></div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;        serializer::CreateFullyConnectedDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;                                                   fullyConnectedDescriptor.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a>,</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;                                                   fullyConnectedDescriptor.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#a281fcaec86e17c97f7b8402633f6b55a">m_TransposeWeightMatrix</a>,</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                                                   fullyConnectedDescriptor.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#a2d3dcfc10f90adedc995b64211dab6e9">m_ConstantWeights</a>);</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;    <span class="comment">// Create FlatBuffer FullyConnectedLayer</span></div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateFullyConnectedLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;                                                                 flatBufferBaseLayer,</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                                                                 flatBufferDescriptor);</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <span class="comment">// Add created FullyConnectedLayer to the FlatBufferLayers</span></div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_FullyConnectedLayer);</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;}</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;<span class="comment">// Build FlatBuffer for SpaceToBatchNd Layer</span></div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeSpaceToBatchNdLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a>&amp; spaceToBatchNdDescriptor,</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;                                                 <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;{</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_SpaceToBatchNd);</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    std::vector&lt;unsigned int&gt; padList;</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    padList.reserve(spaceToBatchNdDescriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">m_PadList</a>.size()*2);</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; pad : spaceToBatchNdDescriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">m_PadList</a>)</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    {</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;        padList.push_back(pad.first);</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;        padList.push_back(pad.second);</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    }</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;        CreateSpaceToBatchNdDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;                                       m_flatBufferBuilder.CreateVector(spaceToBatchNdDescriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">m_BlockShape</a>),</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;                                       m_flatBufferBuilder.CreateVector(padList),</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;                                       <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(spaceToBatchNdDescriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateSpaceToBatchNdLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;                                                                 flatBufferBaseLayer,</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;                                                                 flatBufferDescriptor);</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_SpaceToBatchNdLayer);</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;}</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;<span class="comment">// Build FlatBuffer for SpaceToDepthLayer</span></div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeSpaceToDepthLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a>&amp; spaceToDepthDescriptor,</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;                                               <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;{</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_SpaceToDepth);</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;        CreateSpaceToDepthDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;                                     spaceToDepthDescriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">m_BlockSize</a>,</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;                                     <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(spaceToDepthDescriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateSpaceToDepthLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;                                                               flatBufferBaseLayer,</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;                                                               flatBufferDescriptor);</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_SpaceToDepthLayer);</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;}</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;<span class="comment">// Build FlatBuffer for Splitter Layer</span></div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeSplitterLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a>&amp; viewsDescriptor,</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;{</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    <span class="comment">// Create FlatBuffer ViewOrigins</span></div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    std::vector&lt;flatbuffers::Offset&lt;UintVector&gt;&gt; flatBufferViewOrigins;</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    flatBufferViewOrigins.reserve(viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">GetNumViews</a>());</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vIdx = 0; vIdx &lt; viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">GetNumViews</a>(); ++vIdx)</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    {</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;        std::vector&lt;uint32_t&gt; viewOrigin;</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;        viewOrigin.reserve(viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>());</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;        <span class="comment">// Copy vector</span></div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dIdx = 0; dIdx &lt; viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>(); ++dIdx)</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;        {</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;            viewOrigin.push_back(viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#ab78e6fe963508c1ac5c00d04bb3361a3">GetViewOrigin</a>(vIdx)[dIdx]);</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        }</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;        flatBufferViewOrigins.push_back(CreateUintVector(m_flatBufferBuilder,</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;                                                         m_flatBufferBuilder.CreateVector(viewOrigin)));</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    }</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    <span class="comment">// Create FlatBuffer OriginsDescriptor</span></div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    <span class="keyword">auto</span> flatBufferOriginDescriptor = CreateOriginsDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;                                                              viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a88d7c8ef4baba3690a4d25eec350ecb3">GetOrigins</a>().<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a379929e3b277f1ef94f3ce645870589d">GetConcatAxis</a>(),</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;                                                              viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a88d7c8ef4baba3690a4d25eec350ecb3">GetOrigins</a>().<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">GetNumViews</a>(),</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;                                                              viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a88d7c8ef4baba3690a4d25eec350ecb3">GetOrigins</a>().<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>(),</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;                                                              m_flatBufferBuilder.CreateVector(flatBufferViewOrigins));</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    <span class="comment">// Create FlatBuffer ViewOrigins</span></div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    std::vector&lt;flatbuffers::Offset&lt;UintVector&gt;&gt; flatBufferViewSizes;</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    flatBufferViewSizes.reserve(viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">GetNumViews</a>());</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vIdx = 0; vIdx &lt; viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">GetNumViews</a>(); ++vIdx)</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    {</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;        std::vector&lt;uint32_t&gt; viewSize;</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;        viewSize.reserve(viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>());</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;        <span class="comment">// Copy vector</span></div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dIdx = 0; dIdx &lt; viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>(); ++dIdx)</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;        {</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;            viewSize.push_back(viewsDescriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a3c1ab47a0a319413b3a4b5757ed5b80b">GetViewSizes</a>(vIdx)[dIdx]);</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;        }</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;        flatBufferViewSizes.push_back(CreateUintVector(m_flatBufferBuilder,</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;                                                       m_flatBufferBuilder.CreateVector(viewSize)));</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    }</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    <span class="comment">// Create FlatBuffer ViewsDescriptor</span></div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    <span class="keyword">auto</span> flatBufferViewsDescriptor = CreateViewsDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;                                                           flatBufferOriginDescriptor,</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;                                                           m_flatBufferBuilder.CreateVector(flatBufferViewSizes));</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Splitter);</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    <span class="keyword">auto</span> flatBufferSplitterLayer = serializer::CreateSplitterLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;                                                                   flatBufferBaseLayer,</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;                                                                   flatBufferViewsDescriptor);</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    CreateAnyLayer(flatBufferSplitterLayer.o, serializer::Layer::Layer_SplitterLayer);</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;}</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeNormalizationLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;{</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;    <span class="keyword">auto</span> fbNormalizationBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Normalization);</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;    <span class="keyword">auto</span> fbNormalizationDescriptor = serializer::CreateNormalizationDescriptor(</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#af279947f1e42035d0f611e5b8cd70cb2">GetFlatBufferNormalizationAlgorithmChannel</a>(descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#afe1f0f09d49ad2befc01f8789187b7dd">m_NormChannelType</a>),</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#ac813f02c91c348db92b5a40ecfa0135e">GetFlatBufferNormalizationAlgorithmMethod</a>(descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#a05945f080edf694b631960728b87aadb">m_NormMethodType</a>),</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#aa70c05f1aad12fbd9d9ec43ea4557b03">m_NormSize</a>,</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#a174279be57d7596eeb04c6b7f7510f99">m_Alpha</a>,</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>,</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#a8526ea7cf860d8e7f8340e9f9354f9f0">m_K</a>,</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;        <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateNormalizationLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;                                                                fbNormalizationBaseLayer,</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;                                                                fbNormalizationDescriptor);</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_NormalizationLayer);</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;}</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeShapeLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;                                             <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;{</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    <span class="keyword">auto</span> shapeBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Shape);</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;    <span class="keyword">auto</span> shapeLayer = serializer::CreateShapeLayer(m_flatBufferBuilder, shapeBaseLayer);</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    CreateAnyLayer(shapeLayer.o, serializer::Layer::Layer_ShapeLayer);</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;}</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeStackLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a>&amp; stackDescriptor,</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;{</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    <span class="keyword">auto</span> stackBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Stack);</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    std::vector&lt;unsigned int&gt; inputShape;</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i =0; i &lt; stackDescriptor.<a class="code" href="structarmnn_1_1_stack_descriptor.xhtml#a2bea87b470268bb0b73457c3733dbc04">m_InputShape</a>.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    {</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;        inputShape.push_back(stackDescriptor.<a class="code" href="structarmnn_1_1_stack_descriptor.xhtml#a2bea87b470268bb0b73457c3733dbc04">m_InputShape</a>[i]);</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    }</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    <span class="keyword">auto</span> flatBufferStackDescriptor = CreateStackDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;                                                           stackDescriptor.<a class="code" href="structarmnn_1_1_stack_descriptor.xhtml#ab218de7805899c8412d75d1fd1d846d2">m_Axis</a>,</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;                                                           stackDescriptor.<a class="code" href="structarmnn_1_1_stack_descriptor.xhtml#aed6086070440ceb94129bef06f70173f">m_NumInputs</a>,</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;                                                           m_flatBufferBuilder.CreateVector(inputShape));</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    <span class="keyword">auto</span> stackLayer = serializer::CreateStackLayer(m_flatBufferBuilder, stackBaseLayer, flatBufferStackDescriptor);</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    CreateAnyLayer(stackLayer.o, serializer::Layer::Layer_StackLayer);</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;}</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeStandInLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *layer,</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stand_in_descriptor.xhtml">armnn::StandInDescriptor</a>&amp; standInDescriptor,</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;                                          <span class="keyword">const</span> <span class="keywordtype">char</span> *name)</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;{</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    <span class="keyword">auto</span> fbDescriptor = serializer::CreateStandInDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;                                                            standInDescriptor.<a class="code" href="structarmnn_1_1_stand_in_descriptor.xhtml#aed6086070440ceb94129bef06f70173f">m_NumInputs</a>,</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;                                                            standInDescriptor.<a class="code" href="structarmnn_1_1_stand_in_descriptor.xhtml#abb8a2d2bb8cc594c26aaa70c820ac5cc">m_NumOutputs</a>);</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    <span class="keyword">auto</span> fbBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_StandIn);</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    <span class="keyword">auto</span> fbLayer     = serializer::CreateStandInLayer(m_flatBufferBuilder, fbBaseLayer, fbDescriptor);</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_StandInLayer);</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;}</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeStridedSliceLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a>&amp; stridedSliceDescriptor,</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;                                               <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;{</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_StridedSlice);</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;    <span class="keyword">auto</span> flatBufferDescriptor =</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;        CreateStridedSliceDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;                                     m_flatBufferBuilder.CreateVector(stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">m_Begin</a>),</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;                                     m_flatBufferBuilder.CreateVector(stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">m_End</a>),</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;                                     m_flatBufferBuilder.CreateVector(stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">m_Stride</a>),</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;                                     stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a61081be1483984e33db452c75d569f51">m_BeginMask</a>,</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;                                     stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#ac37e49c0d6e6e54f9d2015d0f11f8ee7">m_EndMask</a>,</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;                                     stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6d0384878432cfc9652b7ae8bc59506f">m_ShrinkAxisMask</a>,</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;                                     stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#af996d82c47e43a16f4c8faa6c6b3e030">m_EllipsisMask</a>,</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;                                     stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a7c91eda2b331d607bae92cd8ebf50bb9">m_NewAxisMask</a>,</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;                                     <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateStridedSliceLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;                                                               flatBufferBaseLayer,</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;                                                               flatBufferDescriptor);</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_StridedSliceLayer);</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;}</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeSubtractionLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;{</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;    <span class="keyword">auto</span> fbSubtractionBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Subtraction);</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;    <span class="keyword">auto</span> fbSubtractionLayer = serializer::CreateSubtractionLayer(m_flatBufferBuilder, fbSubtractionBaseLayer);</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    CreateAnyLayer(fbSubtractionLayer.o, serializer::Layer::Layer_SubtractionLayer);</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;}</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeSwitchLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;{</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    <span class="keyword">auto</span> fbSwitchBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Switch);</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    <span class="keyword">auto</span> fbSwitchLayer = serializer::CreateSwitchLayer(m_flatBufferBuilder, fbSwitchBaseLayer);</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;    CreateAnyLayer(fbSwitchLayer.o, serializer::Layer::Layer_SwitchLayer);</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;}</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeTransposeConvolution2dLayer(</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;{</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>&amp; weights = constants.at(0);</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;    <span class="keyword">auto</span> fbBaseLayer  = CreateLayerBase(layer, serializer::LayerType::LayerType_Convolution2d);</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;    <span class="keyword">auto</span> fbDescriptor = CreateTransposeConvolution2dDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>,</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>,</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>,</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>,</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>,</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>,</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;                                                               descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a>,</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;                                                               <a class="code" href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">GetFlatBufferDataLayout</a>(descriptor.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>));</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;    <span class="comment">// weights &amp; biases</span></div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;    <span class="keyword">auto</span> fbWeightsConstTensorInfo = CreateConstTensorInfo(weights);</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; fbBiasesConstTensorInfo;</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    <span class="keywordflow">if</span> (constants.size() &gt; 1)</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    {</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>&amp; biases = constants.at(1);</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;        fbBiasesConstTensorInfo = CreateConstTensorInfo(biases);</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    }</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    <span class="keyword">auto</span> fbLayer = CreateTransposeConvolution2dLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;                                                     fbBaseLayer,</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;                                                     fbDescriptor,</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;                                                     fbWeightsConstTensorInfo,</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;                                                     fbBiasesConstTensorInfo);</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    CreateAnyLayer(fbLayer.o, serializer::Layer::Layer_TransposeConvolution2dLayer);</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;}</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeTransposeLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;                                            <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;{</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;    <span class="comment">// Create FlatBuffer BaseLayer</span></div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    <span class="keyword">auto</span> flatBufferBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_Transpose);</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    std::vector&lt;unsigned int&gt; dimMappings;</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;descriptor.<a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">m_DimMappings</a>.<a class="code" href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">GetSize</a>(); ++i)</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;    {</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;        dimMappings.push_back(descriptor.<a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">m_DimMappings</a>[i]);</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;    }</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    <span class="keyword">auto</span> flatBufferDesc = serializer::CreateTransposeDescriptor(m_flatBufferBuilder,</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;                                                                m_flatBufferBuilder.CreateVector(dimMappings));</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    <span class="comment">// Create the FlatBuffer TransposeLayer</span></div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    <span class="keyword">auto</span> flatBufferLayer = serializer::CreateTransposeLayer(m_flatBufferBuilder,</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;                                                            flatBufferBaseLayer,</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;                                                            flatBufferDesc);</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    <span class="comment">// Add the AnyLayer to the FlatBufferLayers</span></div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    CreateAnyLayer(flatBufferLayer.o, serializer::Layer::Layer_TransposeLayer);</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;}</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeQLstmLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml">armnn::QLstmDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;                                             <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;                                             <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;{</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    <span class="keyword">auto</span> fbQLstmBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_QLstm);</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    <span class="keyword">auto</span> fbQLstmDescriptor = serializer::CreateQLstmDescriptor(</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;            m_flatBufferBuilder,</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>,</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>,</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>,</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>,</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ac81fb0e66dc623dc37c77f219f53a6d3">m_CellClip</a>,</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa6a518b65088f34803b3214334bdff61">m_ProjectionClip</a>,</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a09e1f097944f61cc901240f9300364cf">m_InputIntermediateScale</a>,</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#afec7f36158448f723b426a9527acb189">m_ForgetIntermediateScale</a>,</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a0477ee1b44ace6090119178eea78cb0b">m_CellIntermediateScale</a>,</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa43409f9b457352c95c89f20ce5d844d">m_OutputIntermediateScale</a>,</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4556cbd764d4848d8ad0637a9eed580d">m_HiddenStateZeroPoint</a>,</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;            descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#af8f724af7210b52529216feefa993c98">m_HiddenStateScale</a></div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;            );</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;    <span class="comment">// Index for constants vector</span></div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;    std::size_t i = 0;</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    <span class="comment">// Mandatory params</span></div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    <span class="keyword">auto</span> inputToForgetWeights     = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToForgetWeights</span></div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <span class="keyword">auto</span> inputToCellWeights       = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToCellWeights</span></div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <span class="keyword">auto</span> inputToOutputWeights     = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToOutputWeights</span></div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    <span class="keyword">auto</span> recurrentToForgetWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToForgetWeights</span></div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;    <span class="keyword">auto</span> recurrentToCellWeights   = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToCellWeights</span></div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    <span class="keyword">auto</span> recurrentToOutputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToOutputWeights</span></div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    <span class="keyword">auto</span> forgetGateBias           = CreateConstTensorInfo(constants[i++]); <span class="comment">//ForgetGateBias</span></div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <span class="keyword">auto</span> cellBias                 = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellBias</span></div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    <span class="keyword">auto</span> outputGateBias           = CreateConstTensorInfo(constants[i++]); <span class="comment">//OutputGateBias</span></div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    <span class="comment">// CIFG</span></div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputToInputWeights;</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; recurrentToInputWeights;</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputGateBias;</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;    <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    {</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;        inputToInputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToInputWeights</span></div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;        recurrentToInputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToInputWeights</span></div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;        inputGateBias = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputGateBias</span></div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;    }</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;    <span class="comment">// Peephole</span></div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToInputWeights;</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToForgetWeights;</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToOutputWeights;</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>)</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;    {</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;        <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;        {</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;            cellToInputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellToInputWeights</span></div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;        }</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;        cellToForgetWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellToForgetWeights</span></div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;        cellToOutputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellToOutputWeights</span></div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    }</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    <span class="comment">// Projection</span></div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; projectionWeights;</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; projectionBias;</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>)</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;    {</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;        projectionWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//ProjectionWeights</span></div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;        projectionBias = CreateConstTensorInfo(constants[i++]); <span class="comment">//ProjectionBias</span></div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;    }</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    <span class="comment">// Layer norm</span></div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputLayerNormWeights;</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; forgetLayerNormWeights;</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellLayerNormWeights;</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; outputLayerNormWeights;</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>)</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;    {</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;        <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;        {</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;            inputLayerNormWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputLayerNormWeights</span></div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;        }</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;        forgetLayerNormWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//ForgetLayerNormWeights</span></div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;        cellLayerNormWeights   = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellLayerNormWeights</span></div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;        outputLayerNormWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//OutputLayerNormWeights</span></div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    }</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;</div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;    <span class="keyword">auto</span> fbQLstmParams = serializer::CreateQLstmInputParams(</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;            m_flatBufferBuilder,</div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;            inputToForgetWeights,</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;            inputToCellWeights,</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;            inputToOutputWeights,</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;            recurrentToForgetWeights,</div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;            recurrentToCellWeights,</div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;            recurrentToOutputWeights,</div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;            forgetGateBias,</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;            cellBias,</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;            outputGateBias,</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;            inputToInputWeights,</div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;            recurrentToInputWeights,</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;            inputGateBias,</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;            projectionWeights,</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;            projectionBias,</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;            cellToInputWeights,</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;            cellToForgetWeights,</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;            cellToOutputWeights,</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;            inputLayerNormWeights,</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;            forgetLayerNormWeights,</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;            cellLayerNormWeights,</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;            outputLayerNormWeights);</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;</div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;    <span class="keyword">auto</span> fbQLstmLayer = serializer::CreateQLstmLayer(</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;            m_flatBufferBuilder,</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;            fbQLstmBaseLayer,</div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;            fbQLstmDescriptor,</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;            fbQLstmParams);</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;</div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;    CreateAnyLayer(fbQLstmLayer.o, serializer::Layer::Layer_QLstmLayer);</div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;}</div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeQuantizedLstmLayer(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;                                                     <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;                                                     <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;{</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;    <span class="keyword">auto</span> fbQuantizedLstmBaseLayer = CreateLayerBase(layer, serializer::LayerType::LayerType_QuantizedLstm);</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;</div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;    <span class="comment">// index for constants vector</span></div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;    <span class="keywordtype">size_t</span> i = 0;</div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;</div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;    <span class="comment">// Get input parameters</span></div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;    <span class="keyword">auto</span> inputToInputWeights  = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;    <span class="keyword">auto</span> inputToForgetWeights = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;    <span class="keyword">auto</span> inputToCellWeights   = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;    <span class="keyword">auto</span> inputToOutputWeights = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;</div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;    <span class="keyword">auto</span> recurrentToInputWeights  = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    <span class="keyword">auto</span> recurrentToForgetWeights = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;    <span class="keyword">auto</span> recurrentToCellWeights   = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;    <span class="keyword">auto</span> recurrentToOutputWeights = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;</div><div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;    <span class="keyword">auto</span> inputGateBias  = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;    <span class="keyword">auto</span> forgetGateBias = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;    <span class="keyword">auto</span> cellBias       = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    <span class="keyword">auto</span> outputGateBias = CreateConstTensorInfo(constants[i++]);</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;    <span class="keyword">auto</span> fbQuantizedLstmParams = serializer::CreateQuantizedLstmInputParams(</div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;        inputToInputWeights,</div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;        inputToForgetWeights,</div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;        inputToCellWeights,</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;        inputToOutputWeights,</div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;        recurrentToInputWeights,</div><div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;        recurrentToForgetWeights,</div><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;        recurrentToCellWeights,</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;        recurrentToOutputWeights,</div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;        inputGateBias,</div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;        forgetGateBias,</div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;        cellBias,</div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;        outputGateBias);</div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;</div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;    <span class="keyword">auto</span> fbQuantizedLstmLayer = serializer::CreateQuantizedLstmLayer(</div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;        fbQuantizedLstmBaseLayer,</div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;        fbQuantizedLstmParams);</div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;</div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;    CreateAnyLayer(fbQuantizedLstmLayer.o, serializer::Layer::Layer_QuantizedLstmLayer);</div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;}</div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::SerializeUnidirectionalSequenceLstmLayer(</div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::UnidirectionalSequenceLstmDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;    <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;{</div><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(name);</div><div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;</div><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;    <span class="keyword">auto</span> fbUnidirectionalSequenceLstmBaseLayer =</div><div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;        CreateLayerBase(layer, serializer::LayerType::LayerType_UnidirectionalSequenceLstm);</div><div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;</div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;    <span class="keyword">auto</span> fbUnidirectionalSequenceLstmDescriptor = serializer::CreateUnidirectionalSequenceLstmDescriptor(</div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a>,</div><div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a>,</div><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a>,</div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>,</div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>,</div><div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>,</div><div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>,</div><div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a>);</div><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;    <span class="comment">// Index for constants vector</span></div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;    std::size_t i = 0;</div><div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;</div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;    <span class="comment">// Get mandatory/basic input parameters</span></div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;    <span class="keyword">auto</span> inputToForgetWeights     = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToForgetWeights</span></div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;    <span class="keyword">auto</span> inputToCellWeights       = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToCellWeights</span></div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;    <span class="keyword">auto</span> inputToOutputWeights     = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToOutputWeights</span></div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;    <span class="keyword">auto</span> recurrentToForgetWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToForgetWeights</span></div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;    <span class="keyword">auto</span> recurrentToCellWeights   = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToCellWeights</span></div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;    <span class="keyword">auto</span> recurrentToOutputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToOutputWeights</span></div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;    <span class="keyword">auto</span> forgetGateBias           = CreateConstTensorInfo(constants[i++]); <span class="comment">//ForgetGateBias</span></div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;    <span class="keyword">auto</span> cellBias                 = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellBias</span></div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;    <span class="keyword">auto</span> outputGateBias           = CreateConstTensorInfo(constants[i++]); <span class="comment">//OutputGateBias</span></div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;    <span class="comment">//Define optional parameters, these will be set depending on configuration in Lstm descriptor</span></div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputToInputWeights;</div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; recurrentToInputWeights;</div><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToInputWeights;</div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputGateBias;</div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; projectionWeights;</div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; projectionBias;</div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToForgetWeights;</div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellToOutputWeights;</div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; inputLayerNormWeights;</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; forgetLayerNormWeights;</div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; cellLayerNormWeights;</div><div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; outputLayerNormWeights;</div><div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;</div><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;    <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;    {</div><div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;        inputToInputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputToInputWeights</span></div><div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;        recurrentToInputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//RecurrentToInputWeights</span></div><div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;        inputGateBias = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputGateBias</span></div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;    }</div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;</div><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>)</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;    {</div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;        <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;        {</div><div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;            cellToInputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellToInputWeights</span></div><div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;        }</div><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;        cellToForgetWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellToForgetWeights</span></div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;        cellToOutputWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellToOutputWeights</span></div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;    }</div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;</div><div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>)</div><div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;    {</div><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;        projectionWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//ProjectionWeights</span></div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;        projectionBias = CreateConstTensorInfo(constants[i++]); <span class="comment">//ProjectionBias</span></div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;    }</div><div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;</div><div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>)</div><div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;    {</div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;        <span class="keywordflow">if</span> (!descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;        {</div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;            inputLayerNormWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//InputLayerNormWeights</span></div><div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;        }</div><div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;        forgetLayerNormWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//ForgetLayerNormWeights</span></div><div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;        cellLayerNormWeights   = CreateConstTensorInfo(constants[i++]); <span class="comment">//CellLayerNormWeights</span></div><div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;        outputLayerNormWeights = CreateConstTensorInfo(constants[i++]); <span class="comment">//OutputLayerNormWeights</span></div><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;    }</div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;</div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;    <span class="keyword">auto</span> fbUnidirectionalSequenceLstmParams = serializer::CreateLstmInputParams(</div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;        inputToForgetWeights,</div><div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;        inputToCellWeights,</div><div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;        inputToOutputWeights,</div><div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;        recurrentToForgetWeights,</div><div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;        recurrentToCellWeights,</div><div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;        recurrentToOutputWeights,</div><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;        forgetGateBias,</div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;        cellBias,</div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;        outputGateBias,</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;        inputToInputWeights,</div><div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;        recurrentToInputWeights,</div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;        cellToInputWeights,</div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;        inputGateBias,</div><div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;        projectionWeights,</div><div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;        projectionBias,</div><div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;        cellToForgetWeights,</div><div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;        cellToOutputWeights,</div><div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;        inputLayerNormWeights,</div><div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;        forgetLayerNormWeights,</div><div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;        cellLayerNormWeights,</div><div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;        outputLayerNormWeights);</div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;</div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;    <span class="keyword">auto</span> fbUnidirectionalSequenceLstmLayer = serializer::CreateUnidirectionalSequenceLstmLayer(</div><div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;        m_flatBufferBuilder,</div><div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;        fbUnidirectionalSequenceLstmBaseLayer,</div><div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;        fbUnidirectionalSequenceLstmDescriptor,</div><div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;        fbUnidirectionalSequenceLstmParams);</div><div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;</div><div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;    CreateAnyLayer(fbUnidirectionalSequenceLstmLayer.o, serializer::Layer::Layer_UnidirectionalSequenceLstmLayer);</div><div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;}</div><div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;</div><div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;fb::Offset&lt;serializer::LayerBase&gt; SerializerStrategy::CreateLayerBase(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer,</div><div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;                                                                     <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">serializer::LayerType</a> layerType)</div><div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;{</div><div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;</div><div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;    uint32_t fbIndex = GetSerializedId(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">GetGuid</a>());</div><div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;</div><div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;    std::vector&lt;fb::Offset&lt;serializer::InputSlot&gt;&gt; inputSlots = CreateInputSlots(layer);</div><div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;    std::vector&lt;fb::Offset&lt;serializer::OutputSlot&gt;&gt; outputSlots = CreateOutputSlots(layer);</div><div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;</div><div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;    <span class="keywordflow">return</span> serializer::CreateLayerBase(m_flatBufferBuilder,</div><div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;                                       fbIndex,</div><div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;                                       m_flatBufferBuilder.CreateString(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#afcc1c3a20bd2860e0ddd21674389246f">GetName</a>()),</div><div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;                                       layerType,</div><div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;                                       m_flatBufferBuilder.CreateVector(inputSlots),</div><div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;                                       m_flatBufferBuilder.CreateVector(outputSlots));</div><div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;}</div><div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;</div><div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;<span class="keywordtype">void</span> SerializerStrategy::CreateAnyLayer(<span class="keyword">const</span> flatbuffers::Offset&lt;void&gt;&amp; layer, <span class="keyword">const</span> serializer::Layer serializerLayer)</div><div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;{</div><div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;</div><div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;    <span class="keyword">auto</span> anyLayer = armnnSerializer::CreateAnyLayer(m_flatBufferBuilder, serializerLayer, layer);</div><div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;    m_serializedLayers.push_back(anyLayer);</div><div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;}</div><div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;</div><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;flatbuffers::Offset&lt;flatbuffers::Vector&lt;T&gt;&gt; SerializerStrategy::CreateDataVector(<span class="keyword">const</span> <span class="keywordtype">void</span>* memory, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size)</div><div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;{</div><div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;    <span class="keyword">const</span> T* buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T*<span class="keyword">&gt;</span>(memory);</div><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;    std::vector&lt;T&gt; vector(buffer, buffer + (size / <span class="keyword">sizeof</span>(T)));</div><div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;    <span class="keyword">auto</span> fbVector = m_flatBufferBuilder.CreateVector(vector);</div><div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;    <span class="keywordflow">return</span> fbVector;</div><div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;}</div><div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;</div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;flatbuffers::Offset&lt;TensorInfo&gt;  SerializerStrategy::CreateTensorInfo(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; tensorInfo)</div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;{</div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;    <span class="comment">// Get the dimensions</span></div><div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;    std::vector&lt;unsigned int&gt; shape;</div><div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;    std::vector&lt;bool&gt; specificity;</div><div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;    <span class="comment">// This assumes that the TensorShape constructors have ensured that the size of m_DimensionsSpecificity</span></div><div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;    <span class="comment">// matches the size of dimensions.</span></div><div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dim = 0; dim &lt; tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>().<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); ++dim)</div><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;    {</div><div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;        specificity.push_back(tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>().<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a3919600d4aa8d5cd801a0e0740f62308">GetDimensionSpecificity</a>(dim));</div><div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;</div><div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;        <span class="keywordflow">if</span> (tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>().<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a3919600d4aa8d5cd801a0e0740f62308">GetDimensionSpecificity</a>(dim))</div><div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;        {</div><div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;            shape.push_back(tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[dim]);</div><div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;        }</div><div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;        {</div><div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;            shape.push_back(0);</div><div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;        }</div><div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;    }</div><div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;</div><div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;    <span class="keywordflow">if</span> (tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#ab85cd8cc10c96a7c99c14042c251fc48">HasPerAxisQuantization</a>())</div><div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;    {</div><div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;        <span class="comment">// Create FlatBuffer TensorInfo</span></div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;        <span class="keyword">auto</span> flatBufferTensorInfo =</div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;            serializer::CreateTensorInfo(m_flatBufferBuilder,</div><div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;                                         m_flatBufferBuilder.CreateVector(shape),</div><div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;                                         <a class="code" href="namespacearmnn_serializer.xhtml#a27876085f01a54e1995bc0b3ea96ce41">GetFlatBufferDataType</a>(tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()),</div><div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;                                         tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">GetQuantizationScales</a>()[0],</div><div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;                                         tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>(),</div><div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;                                         m_flatBufferBuilder.CreateVector(tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">GetQuantizationScales</a>()),</div><div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;                                         tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a>().<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>(),</div><div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;                                         <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;                                         (tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>().<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a5a212540c00931bd2a4b4041beda33ae">GetDimensionality</a>()),</div><div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;                                         m_flatBufferBuilder.CreateVector(specificity));</div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;        <span class="keywordflow">return</span> flatBufferTensorInfo;</div><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;    }</div><div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;</div><div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;    <span class="comment">// Create FlatBuffer TensorInfo</span></div><div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;    <span class="keyword">auto</span> flatBufferTensorInfo = serializer::CreateTensorInfo(m_flatBufferBuilder,</div><div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;                                                             m_flatBufferBuilder.CreateVector(shape),</div><div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;                                                             <a class="code" href="namespacearmnn_serializer.xhtml#a27876085f01a54e1995bc0b3ea96ce41">GetFlatBufferDataType</a>(tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()),</div><div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;                                                             tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>(),</div><div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;                                                             tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>(),</div><div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;                                                             0,</div><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;                                                             0,</div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;                                                             <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;                                                             (tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>().<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a5a212540c00931bd2a4b4041beda33ae">GetDimensionality</a>()),</div><div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;                                                             m_flatBufferBuilder.CreateVector(specificity));</div><div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;    <span class="keywordflow">return</span> flatBufferTensorInfo;</div><div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;}</div><div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;</div><div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;flatbuffers::Offset&lt;serializer::ConstTensor&gt;</div><div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;    SerializerStrategy::CreateConstTensorInfo(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>&amp; constTensor)</div><div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;{</div><div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo = constTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>();</div><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;</div><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    flatbuffers::Offset&lt;void&gt; fbPayload;</div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;</div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;    <span class="keywordflow">switch</span> (tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>())</div><div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;    {</div><div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ae1b3c9c6087a93b07c83e0b04f377a8d">armnn::DataType::Signed64</a>:</div><div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;        {</div><div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;            <span class="keyword">auto</span> fbVector = CreateDataVector&lt;int64_t&gt;(constTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>(), constTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;            flatbuffers::Offset&lt;serializer::LongData&gt; flatBuffersData = serializer::CreateLongData(</div><div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;                    m_flatBufferBuilder,</div><div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;                    fbVector);</div><div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;            fbPayload = flatBuffersData.o;</div><div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;        }</div><div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>:</div><div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>:</div><div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;        {</div><div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;            <span class="keyword">auto</span> fbVector = CreateDataVector&lt;int32_t&gt;(constTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>(), constTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;            flatbuffers::Offset&lt;serializer::IntData&gt; flatBuffersData = serializer::CreateIntData(</div><div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;                    m_flatBufferBuilder,</div><div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;                    fbVector);</div><div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;            fbPayload = flatBuffersData.o;</div><div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;        }</div><div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>:</div><div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::DataType::BFloat16</a>:</div><div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a>:</div><div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;        {</div><div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;            <span class="keyword">auto</span> fbVector = CreateDataVector&lt;int16_t&gt;(constTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>(), constTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;            flatbuffers::Offset&lt;serializer::ShortData&gt; flatBuffersData = serializer::CreateShortData(</div><div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;                    m_flatBufferBuilder,</div><div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;                    fbVector);</div><div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;            fbPayload = flatBuffersData.o;</div><div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;        }</div><div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::DataType::QSymmS8</a>:</div><div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>:</div><div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>:</div><div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a>:</div><div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;        {</div><div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;            <span class="keyword">auto</span> fbVector = CreateDataVector&lt;int8_t&gt;(constTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>(), constTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;            flatbuffers::Offset&lt;serializer::ByteData&gt; flatBuffersData = serializer::CreateByteData(</div><div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;                    m_flatBufferBuilder,</div><div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;                    fbVector);</div><div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;            fbPayload = flatBuffersData.o;</div><div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;        }</div><div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;    }</div><div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;    flatbuffers::Offset&lt;serializer::ConstTensor&gt; flatBufferConstTensor = serializer::CreateConstTensor(</div><div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;            m_flatBufferBuilder,</div><div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;            CreateTensorInfo(tensorInfo),</div><div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;            <a class="code" href="namespacearmnn_serializer.xhtml#af7a4f31739f602d7d78a056ebed19d04">GetFlatBufferConstTensorData</a>(tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()),</div><div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;            fbPayload);</div><div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;    <span class="keywordflow">return</span> flatBufferConstTensor;</div><div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;}</div><div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;</div><div class="line"><a name="l01919"></a><span class="lineno"><a class="line" href="classarmnn_serializer_1_1_serializer_strategy.xhtml#a7594572286ad32d17d57eaa4cdde53f9"> 1919</a></span>&#160;flatbuffers::Offset&lt;armnnSerializer::FeatureCompatibilityVersions&gt; SerializerStrategy::GetVersionTable()</div><div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;{</div><div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;    flatbuffers::Offset&lt;armnnSerializer::FeatureCompatibilityVersions&gt; versionsTable =</div><div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;        serializer::CreateFeatureCompatibilityVersions(</div><div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;                m_flatBufferBuilder,</div><div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;                1, <span class="comment">// Binding ids scheme version</span></div><div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;                1, <span class="comment">// Weights layout scheme version</span></div><div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;                1  <span class="comment">// Constant tensors as inputs version</span></div><div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;            );</div><div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;    <span class="keywordflow">return</span> versionsTable;</div><div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;}</div><div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;</div><div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;std::vector&lt;fb::Offset&lt;serializer::InputSlot&gt;&gt;</div><div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;    SerializerStrategy::CreateInputSlots(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer)</div><div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;{</div><div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;    std::vector&lt;fb::Offset&lt;serializer::InputSlot&gt;&gt; inputSlots;</div><div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;</div><div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;    <span class="comment">// Get the InputSlots</span></div><div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex = 0; slotIndex&lt;layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">GetNumInputSlots</a>(); ++slotIndex)</div><div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;    {</div><div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a>&amp; inputSlot = layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(slotIndex);</div><div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;</div><div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;        <span class="comment">// Get the Connection for the InputSlot</span></div><div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">IOutputSlot</a>* connection = inputSlot.<a class="code" href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">GetConnection</a>();</div><div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;</div><div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;        <span class="comment">// Create FlatBuffer Connection</span></div><div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;        serializer::Connection conn(GetSerializedId(inputSlot.<a class="code" href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">GetConnection</a>()-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ad0c3555b126975ad6b3e250fe2a59534">GetOwningLayerGuid</a>()),</div><div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;                                    connection-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a41d30a9cd272e05986d71a69d6ad618b">CalculateIndexOnOwner</a>());</div><div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;        <span class="comment">// Create FlatBuffer InputSlot</span></div><div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;        inputSlots.push_back(serializer::CreateInputSlot(m_flatBufferBuilder, slotIndex, &amp;conn));</div><div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;    }</div><div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;    <span class="keywordflow">return</span> inputSlots;</div><div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;}</div><div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;</div><div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;std::vector&lt;fb::Offset&lt;serializer::OutputSlot&gt;&gt;</div><div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;    SerializerStrategy::CreateOutputSlots(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer)</div><div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;{</div><div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;    std::vector&lt;fb::Offset&lt;serializer::OutputSlot&gt;&gt; outputSlots;</div><div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;</div><div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;    <span class="comment">// Get the OutputSlots</span></div><div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex = 0; slotIndex &lt; layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">GetNumOutputSlots</a>(); ++slotIndex)</div><div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;    {</div><div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">IOutputSlot</a>&amp; outputSlot = layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(slotIndex);</div><div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; tensorInfo = outputSlot.<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>();</div><div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;</div><div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;        <span class="comment">// Create FlatBuffer Outputslot</span></div><div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;        outputSlots.push_back(serializer::CreateOutputSlot(m_flatBufferBuilder,</div><div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;                                                           slotIndex,</div><div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;                                                           CreateTensorInfo(tensorInfo)));</div><div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;    }</div><div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;    <span class="keywordflow">return</span> outputSlots;</div><div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;}</div><div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;</div><div class="line"><a name="l01972"></a><span class="lineno"><a class="line" href="classarmnn_serializer_1_1_serializer_strategy.xhtml#aa2061a0934479222cae45c8ee62284d9"> 1972</a></span>&#160;<span class="keywordtype">void</span> SerializerStrategy::ExecuteStrategy(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;                                         <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name,</div><div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> <span class="keywordtype">id</span>)</div><div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;{</div><div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(constants);</div><div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;</div><div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;    <span class="keywordflow">switch</span> (layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">GetType</a>())</div><div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;    {</div><div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a> :</div><div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;        {</div><div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;            SerializeActivationLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;        }</div><div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a> :</div><div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;        {</div><div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;            SerializeAdditionLayer(layer, name);</div><div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;        }</div><div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::LayerType::ArgMinMax</a> :</div><div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;        {</div><div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;            SerializeArgMinMaxLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;        }</div><div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9882ff3cfed27d6161c20a305e7a3484">armnn::LayerType::BatchMatMul</a>:</div><div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;        {</div><div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">armnn::BatchMatMulDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">armnn::BatchMatMulDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;            SerializeBatchMatMulLayer(layer,</div><div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;                                      layerDescriptor,</div><div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;                                      name);</div><div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;        }</div><div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a> :</div><div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;        {</div><div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;            SerializeBatchNormalizationLayer(layer,</div><div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;                                             layerDescriptor,</div><div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;                                             constants,</div><div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;                                             name);</div><div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;        }</div><div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::LayerType::BatchToSpaceNd</a> :</div><div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;        {</div><div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;            SerializeBatchToSpaceNdLayer(layer,</div><div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;                                         layerDescriptor,</div><div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;                                         name);</div><div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;        }</div><div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">armnn::LayerType::Cast</a> :</div><div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;        {</div><div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;            SerializeCastLayer(layer, name);</div><div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;        }</div><div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">armnn::LayerType::ChannelShuffle</a> :</div><div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;        {</div><div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">armnn::ChannelShuffleDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;                                                     <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">armnn::ChannelShuffleDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;            SerializeChannelShuffleLayer(layer,</div><div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;                                         layerDescriptor,</div><div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;                                         name);</div><div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;        }</div><div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::LayerType::Comparison</a> :</div><div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;        {</div><div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;            SerializeComparisonLayer(layer,</div><div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;                                     layerDescriptor,</div><div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;                                     name);</div><div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;        }</div><div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::LayerType::Concat</a> :</div><div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;        {</div><div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">armnn::ConcatDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">armnn::ConcatDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;            SerializeConcatLayer(layer,</div><div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;                                 layerDescriptor,</div><div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;                                 name);</div><div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160;        }</div><div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::LayerType::Constant</a> :</div><div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;        {</div><div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;            SerializeConstantLayer(layer,</div><div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;                                   constants,</div><div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;                                   name);</div><div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;        }</div><div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::LayerType::Convolution2d</a> :</div><div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;        {</div><div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;            SerializeConvolution2dLayer(layer,</div><div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;                                        layerDescriptor,</div><div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;                                        name);</div><div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;        }</div><div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">armnn::LayerType::Convolution3d</a> :</div><div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;        {</div><div class="line"><a name="l02079"></a><span class="lineno"> 2079</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml">armnn::Convolution3dDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml">armnn::Convolution3dDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;            SerializeConvolution3dLayer(layer,</div><div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;                                        layerDescriptor,</div><div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;                                        name);</div><div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;        }</div><div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::LayerType::DepthToSpace</a> :</div><div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;        {</div><div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::DepthToSpaceDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::DepthToSpaceDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;            SerializeDepthToSpaceLayer(layer,</div><div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;                                       layerDescriptor,</div><div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;                                       name);</div><div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;        }</div><div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::LayerType::DepthwiseConvolution2d</a> :</div><div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;        {</div><div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;            SerializeDepthwiseConvolution2dLayer(layer,</div><div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;                                                 layerDescriptor,</div><div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;                                                 name);</div><div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;        }</div><div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::LayerType::Dequantize</a> :</div><div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;        {</div><div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;            SerializeDequantizeLayer(layer,</div><div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;                                     name);</div><div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;        }</div><div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::LayerType::DetectionPostProcess</a> :</div><div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;        {</div><div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;            SerializeDetectionPostProcessLayer(layer, layerDescriptor, constants, name);</div><div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;        }</div><div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::LayerType::Division</a> :</div><div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;        {</div><div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;            SerializeDivisionLayer(layer, name);</div><div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;        }</div><div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::LayerType::ElementwiseUnary</a> :</div><div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;        {</div><div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;            SerializeElementwiseUnaryLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;        }</div><div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">armnn::LayerType::Fill</a> :</div><div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;        {</div><div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fill_descriptor.xhtml">armnn::FillDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_fill_descriptor.xhtml">armnn::FillDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;            SerializeFillLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;        }</div><div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::LayerType::Floor</a> :</div><div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;        {</div><div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;            SerializeFloorLayer(layer, name);</div><div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;        }</div><div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::LayerType::FullyConnected</a> :</div><div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;        {</div><div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;            SerializeFullyConnectedLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;        }</div><div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::LayerType::Gather</a> :</div><div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;        {</div><div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;            SerializeGatherLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;        }</div><div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4">armnn::LayerType::GatherNd</a> :</div><div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;        {</div><div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;            SerializeGatherNdLayer(layer, name);</div><div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;        }</div><div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>:</div><div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;        {</div><div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;            SerializeInputLayer(layer, <span class="keywordtype">id</span>, name);</div><div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;        }</div><div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::LayerType::InstanceNormalization</a> :</div><div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;        {</div><div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;            SerializeInstanceNormalizationLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;        }</div><div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::LayerType::L2Normalization</a> :</div><div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;        {</div><div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;            SerializeL2NormalizationLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;        }</div><div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">armnn::LayerType::LogicalBinary</a> :</div><div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;        {</div><div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_logical_binary_descriptor.xhtml">armnn::LogicalBinaryDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_logical_binary_descriptor.xhtml">armnn::LogicalBinaryDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;            SerializeLogicalBinaryLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;        }</div><div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LayerType::LogSoftmax</a> :</div><div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;        {</div><div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::LogSoftmaxDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::LogSoftmaxDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;            SerializeLogSoftmaxLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;        }</div><div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::LayerType::Lstm</a> :</div><div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;        {</div><div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02197"></a><span class="lineno"> 2197</span>&#160;            SerializeLstmLayer(layer, layerDescriptor, constants, name);</div><div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02199"></a><span class="lineno"> 2199</span>&#160;        }</div><div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::LayerType::QLstm</a> :</div><div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;        {</div><div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml">armnn::QLstmDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml">armnn::QLstmDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;            SerializeQLstmLayer(layer, layerDescriptor, constants, name);</div><div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;        }</div><div class="line"><a name="l02207"></a><span class="lineno"> 2207</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">armnn::LayerType::Maximum</a> :</div><div class="line"><a name="l02208"></a><span class="lineno"> 2208</span>&#160;        {</div><div class="line"><a name="l02209"></a><span class="lineno"> 2209</span>&#160;            SerializeMaximumLayer(layer, name);</div><div class="line"><a name="l02210"></a><span class="lineno"> 2210</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;        }</div><div class="line"><a name="l02212"></a><span class="lineno"> 2212</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d">armnn::LayerType::Mean</a> :</div><div class="line"><a name="l02213"></a><span class="lineno"> 2213</span>&#160;        {</div><div class="line"><a name="l02214"></a><span class="lineno"> 2214</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;            SerializeMeanLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160;        }</div><div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">armnn::LayerType::Merge</a> :</div><div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;        {</div><div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160;            SerializeMergeLayer(layer, name);</div><div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;        }</div><div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::LayerType::Minimum</a> :</div><div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;        {</div><div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;            SerializeMinimumLayer(layer, name);</div><div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;        }</div><div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a> :</div><div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;        {</div><div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;            SerializeMultiplicationLayer(layer, name);</div><div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02233"></a><span class="lineno"> 2233</span>&#160;        }</div><div class="line"><a name="l02234"></a><span class="lineno"> 2234</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::LayerType::Normalization</a> :</div><div class="line"><a name="l02235"></a><span class="lineno"> 2235</span>&#160;        {</div><div class="line"><a name="l02236"></a><span class="lineno"> 2236</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02237"></a><span class="lineno"> 2237</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02238"></a><span class="lineno"> 2238</span>&#160;            SerializeNormalizationLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02239"></a><span class="lineno"> 2239</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02240"></a><span class="lineno"> 2240</span>&#160;        }</div><div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a>:</div><div class="line"><a name="l02242"></a><span class="lineno"> 2242</span>&#160;        {</div><div class="line"><a name="l02243"></a><span class="lineno"> 2243</span>&#160;            SerializeOutputLayer(layer, <span class="keywordtype">id</span>, name);</div><div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;        }</div><div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::LayerType::Pad</a> :</div><div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;        {</div><div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;            SerializePadLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;        }</div><div class="line"><a name="l02253"></a><span class="lineno"> 2253</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::LayerType::Permute</a> :</div><div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;        {</div><div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02257"></a><span class="lineno"> 2257</span>&#160;            SerializePermuteLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02258"></a><span class="lineno"> 2258</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;        }</div><div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::LayerType::Pooling2d</a> :</div><div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;        {</div><div class="line"><a name="l02262"></a><span class="lineno"> 2262</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02263"></a><span class="lineno"> 2263</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02264"></a><span class="lineno"> 2264</span>&#160;            SerializePooling2dLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02266"></a><span class="lineno"> 2266</span>&#160;        }</div><div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">armnn::LayerType::Pooling3d</a> :</div><div class="line"><a name="l02268"></a><span class="lineno"> 2268</span>&#160;        {</div><div class="line"><a name="l02269"></a><span class="lineno"> 2269</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml">armnn::Pooling3dDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02270"></a><span class="lineno"> 2270</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml">armnn::Pooling3dDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;            SerializePooling3dLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;        }</div><div class="line"><a name="l02274"></a><span class="lineno"> 2274</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::LayerType::Prelu</a> :</div><div class="line"><a name="l02275"></a><span class="lineno"> 2275</span>&#160;        {</div><div class="line"><a name="l02276"></a><span class="lineno"> 2276</span>&#160;            SerializePreluLayer(layer, name);</div><div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;        }</div><div class="line"><a name="l02279"></a><span class="lineno"> 2279</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::LayerType::Quantize</a> :</div><div class="line"><a name="l02280"></a><span class="lineno"> 2280</span>&#160;        {</div><div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;            SerializeQuantizeLayer(layer, name);</div><div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;        }</div><div class="line"><a name="l02284"></a><span class="lineno"> 2284</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">armnn::LayerType::QuantizedLstm</a>:</div><div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;            SerializeQuantizedLstmLayer(layer, constants, name);</div><div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::LayerType::Reshape</a>:</div><div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;        {</div><div class="line"><a name="l02289"></a><span class="lineno"> 2289</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a> &amp;layerDescriptor =</div><div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a> &amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;            SerializeReshapeLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02293"></a><span class="lineno"> 2293</span>&#160;        }</div><div class="line"><a name="l02294"></a><span class="lineno"> 2294</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">armnn::LayerType::Rank</a>:</div><div class="line"><a name="l02295"></a><span class="lineno"> 2295</span>&#160;        {</div><div class="line"><a name="l02296"></a><span class="lineno"> 2296</span>&#160;            SerializeRankLayer(layer, name);</div><div class="line"><a name="l02297"></a><span class="lineno"> 2297</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02298"></a><span class="lineno"> 2298</span>&#160;        }</div><div class="line"><a name="l02299"></a><span class="lineno"> 2299</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::LayerType::Reduce</a>:</div><div class="line"><a name="l02300"></a><span class="lineno"> 2300</span>&#160;        {</div><div class="line"><a name="l02301"></a><span class="lineno"> 2301</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml">armnn::ReduceDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml">armnn::ReduceDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160;            SerializeReduceLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02305"></a><span class="lineno"> 2305</span>&#160;        }</div><div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::LayerType::Resize</a>:</div><div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160;        {</div><div class="line"><a name="l02308"></a><span class="lineno"> 2308</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02309"></a><span class="lineno"> 2309</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02310"></a><span class="lineno"> 2310</span>&#160;            SerializeResizeLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02311"></a><span class="lineno"> 2311</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02312"></a><span class="lineno"> 2312</span>&#160;        }</div><div class="line"><a name="l02313"></a><span class="lineno"> 2313</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">armnn::LayerType::Shape</a>:</div><div class="line"><a name="l02314"></a><span class="lineno"> 2314</span>&#160;        {</div><div class="line"><a name="l02315"></a><span class="lineno"> 2315</span>&#160;            SerializeShapeLayer(layer, name);</div><div class="line"><a name="l02316"></a><span class="lineno"> 2316</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02317"></a><span class="lineno"> 2317</span>&#160;        }</div><div class="line"><a name="l02318"></a><span class="lineno"> 2318</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::LayerType::Slice</a>:</div><div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;        {</div><div class="line"><a name="l02320"></a><span class="lineno"> 2320</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02322"></a><span class="lineno"> 2322</span>&#160;            SerializeSliceLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02323"></a><span class="lineno"> 2323</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02324"></a><span class="lineno"> 2324</span>&#160;        }</div><div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a>:</div><div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;        {</div><div class="line"><a name="l02327"></a><span class="lineno"> 2327</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02328"></a><span class="lineno"> 2328</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02329"></a><span class="lineno"> 2329</span>&#160;            SerializeSoftmaxLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02330"></a><span class="lineno"> 2330</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02331"></a><span class="lineno"> 2331</span>&#160;        }</div><div class="line"><a name="l02332"></a><span class="lineno"> 2332</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::LayerType::SpaceToBatchNd</a>:</div><div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;        {</div><div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02335"></a><span class="lineno"> 2335</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02336"></a><span class="lineno"> 2336</span>&#160;            SerializeSpaceToBatchNdLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02337"></a><span class="lineno"> 2337</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160;        }</div><div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::LayerType::SpaceToDepth</a>:</div><div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;        {</div><div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02342"></a><span class="lineno"> 2342</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;            SerializeSpaceToDepthLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;        }</div><div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::LayerType::Splitter</a>:</div><div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;        {</div><div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">armnn::SplitterDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_views_descriptor.xhtml">armnn::SplitterDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;            SerializeSplitterLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02351"></a><span class="lineno"> 2351</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02352"></a><span class="lineno"> 2352</span>&#160;        }</div><div class="line"><a name="l02353"></a><span class="lineno"> 2353</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::LayerType::Stack</a>:</div><div class="line"><a name="l02354"></a><span class="lineno"> 2354</span>&#160;        {</div><div class="line"><a name="l02355"></a><span class="lineno"> 2355</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02356"></a><span class="lineno"> 2356</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02357"></a><span class="lineno"> 2357</span>&#160;            SerializeStackLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02358"></a><span class="lineno"> 2358</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02359"></a><span class="lineno"> 2359</span>&#160;        }</div><div class="line"><a name="l02360"></a><span class="lineno"> 2360</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a93bca63ecbb003649425dd0e4ba79a99">armnn::LayerType::StandIn</a>:</div><div class="line"><a name="l02361"></a><span class="lineno"> 2361</span>&#160;        {</div><div class="line"><a name="l02362"></a><span class="lineno"> 2362</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stand_in_descriptor.xhtml">armnn::StandInDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02363"></a><span class="lineno"> 2363</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_stand_in_descriptor.xhtml">armnn::StandInDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02364"></a><span class="lineno"> 2364</span>&#160;            SerializeStandInLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02365"></a><span class="lineno"> 2365</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02366"></a><span class="lineno"> 2366</span>&#160;        }</div><div class="line"><a name="l02367"></a><span class="lineno"> 2367</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::LayerType::StridedSlice</a>:</div><div class="line"><a name="l02368"></a><span class="lineno"> 2368</span>&#160;        {</div><div class="line"><a name="l02369"></a><span class="lineno"> 2369</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02370"></a><span class="lineno"> 2370</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;            SerializeStridedSliceLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02373"></a><span class="lineno"> 2373</span>&#160;        }</div><div class="line"><a name="l02374"></a><span class="lineno"> 2374</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a>:</div><div class="line"><a name="l02375"></a><span class="lineno"> 2375</span>&#160;        {</div><div class="line"><a name="l02376"></a><span class="lineno"> 2376</span>&#160;            SerializeSubtractionLayer(layer, name);</div><div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;        }</div><div class="line"><a name="l02379"></a><span class="lineno"> 2379</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abbc155fb2b111bf61c4f5ff892915e6b">armnn::LayerType::Switch</a>:</div><div class="line"><a name="l02380"></a><span class="lineno"> 2380</span>&#160;        {</div><div class="line"><a name="l02381"></a><span class="lineno"> 2381</span>&#160;            SerializeSwitchLayer(layer, name);</div><div class="line"><a name="l02382"></a><span class="lineno"> 2382</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02383"></a><span class="lineno"> 2383</span>&#160;        }</div><div class="line"><a name="l02384"></a><span class="lineno"> 2384</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::LayerType::Transpose</a>:</div><div class="line"><a name="l02385"></a><span class="lineno"> 2385</span>&#160;        {</div><div class="line"><a name="l02386"></a><span class="lineno"> 2386</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02387"></a><span class="lineno"> 2387</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02388"></a><span class="lineno"> 2388</span>&#160;            SerializeTransposeLayer(layer, layerDescriptor, name);</div><div class="line"><a name="l02389"></a><span class="lineno"> 2389</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02390"></a><span class="lineno"> 2390</span>&#160;        }</div><div class="line"><a name="l02391"></a><span class="lineno"> 2391</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::LayerType::TransposeConvolution2d</a>:</div><div class="line"><a name="l02392"></a><span class="lineno"> 2392</span>&#160;        {</div><div class="line"><a name="l02393"></a><span class="lineno"> 2393</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02395"></a><span class="lineno"> 2395</span>&#160;            SerializeTransposeConvolution2dLayer(layer, layerDescriptor, constants, name);</div><div class="line"><a name="l02396"></a><span class="lineno"> 2396</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02397"></a><span class="lineno"> 2397</span>&#160;        }</div><div class="line"><a name="l02398"></a><span class="lineno"> 2398</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a> :</div><div class="line"><a name="l02399"></a><span class="lineno"> 2399</span>&#160;        {</div><div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::UnidirectionalSequenceLstmDescriptor</a>&amp; layerDescriptor =</div><div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::UnidirectionalSequenceLstmDescriptor</a>&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l02402"></a><span class="lineno"> 2402</span>&#160;            SerializeUnidirectionalSequenceLstmLayer(layer, layerDescriptor, constants, name);</div><div class="line"><a name="l02403"></a><span class="lineno"> 2403</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l02404"></a><span class="lineno"> 2404</span>&#160;        }</div><div class="line"><a name="l02405"></a><span class="lineno"> 2405</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l02406"></a><span class="lineno"> 2406</span>&#160;        {</div><div class="line"><a name="l02407"></a><span class="lineno"> 2407</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(</div><div class="line"><a name="l02408"></a><span class="lineno"> 2408</span>&#160;                    fmt::format(<span class="stringliteral">&quot;A layer of unknown type was given to the serializer. Layer name: {}; Layer Id: {}&quot;</span>,</div><div class="line"><a name="l02409"></a><span class="lineno"> 2409</span>&#160;                                layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#afcc1c3a20bd2860e0ddd21674389246f">GetName</a>(),</div><div class="line"><a name="l02410"></a><span class="lineno"> 2410</span>&#160;                                id));</div><div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;        }</div><div class="line"><a name="l02412"></a><span class="lineno"> 2412</span>&#160;    }</div><div class="line"><a name="l02413"></a><span class="lineno"> 2413</span>&#160;}</div><div class="line"><a name="l02414"></a><span class="lineno"> 2414</span>&#160;</div><div class="line"><a name="l02415"></a><span class="lineno"><a class="line" href="classarmnn_serializer_1_1_i_serializer_1_1_serializer_impl.xhtml#a4d146e96f4464192b762b23e1cf1e207"> 2415</a></span>&#160;<span class="keywordtype">void</span> ISerializer::SerializerImpl::Serialize(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_network.xhtml">INetwork</a>&amp; inNetwork)</div><div class="line"><a name="l02416"></a><span class="lineno"> 2416</span>&#160;{</div><div class="line"><a name="l02417"></a><span class="lineno"> 2417</span>&#160;    <span class="comment">// Iterate through to network</span></div><div class="line"><a name="l02418"></a><span class="lineno"> 2418</span>&#160;    inNetwork.<a class="code" href="classarmnn_1_1_i_network.xhtml#a72032c65bf8b8acf09b564b7d80078c5">ExecuteStrategy</a>(m_SerializerStrategy);</div><div class="line"><a name="l02419"></a><span class="lineno"> 2419</span>&#160;    flatbuffers::FlatBufferBuilder&amp; fbBuilder = m_SerializerStrategy.GetFlatBufferBuilder();</div><div class="line"><a name="l02420"></a><span class="lineno"> 2420</span>&#160;</div><div class="line"><a name="l02421"></a><span class="lineno"> 2421</span>&#160;    <span class="comment">// Create FlatBuffer SerializedGraph</span></div><div class="line"><a name="l02422"></a><span class="lineno"> 2422</span>&#160;    <span class="keyword">auto</span> serializedGraph = serializer::CreateSerializedGraph(</div><div class="line"><a name="l02423"></a><span class="lineno"> 2423</span>&#160;            fbBuilder,</div><div class="line"><a name="l02424"></a><span class="lineno"> 2424</span>&#160;            fbBuilder.CreateVector(m_SerializerStrategy.GetSerializedLayers()),</div><div class="line"><a name="l02425"></a><span class="lineno"> 2425</span>&#160;            fbBuilder.CreateVector(m_SerializerStrategy.GetInputIds()),</div><div class="line"><a name="l02426"></a><span class="lineno"> 2426</span>&#160;            fbBuilder.CreateVector(m_SerializerStrategy.GetOutputIds()),</div><div class="line"><a name="l02427"></a><span class="lineno"> 2427</span>&#160;            m_SerializerStrategy.GetVersionTable());</div><div class="line"><a name="l02428"></a><span class="lineno"> 2428</span>&#160;</div><div class="line"><a name="l02429"></a><span class="lineno"> 2429</span>&#160;    <span class="comment">// Serialize the graph</span></div><div class="line"><a name="l02430"></a><span class="lineno"> 2430</span>&#160;    fbBuilder.Finish(serializedGraph);</div><div class="line"><a name="l02431"></a><span class="lineno"> 2431</span>&#160;}</div><div class="line"><a name="l02432"></a><span class="lineno"> 2432</span>&#160;</div><div class="line"><a name="l02433"></a><span class="lineno"> 2433</span>&#160;</div><div class="line"><a name="l02434"></a><span class="lineno"><a class="line" href="classarmnn_serializer_1_1_i_serializer_1_1_serializer_impl.xhtml#a049d34980f9dd0a518f9781822a718c4"> 2434</a></span>&#160;<span class="keywordtype">bool</span> ISerializer::SerializerImpl::SaveSerializedToStream(std::ostream&amp; stream)</div><div class="line"><a name="l02435"></a><span class="lineno"> 2435</span>&#160;{</div><div class="line"><a name="l02436"></a><span class="lineno"> 2436</span>&#160;    flatbuffers::FlatBufferBuilder&amp; fbBuilder = m_SerializerStrategy.GetFlatBufferBuilder();</div><div class="line"><a name="l02437"></a><span class="lineno"> 2437</span>&#160;</div><div class="line"><a name="l02438"></a><span class="lineno"> 2438</span>&#160;    <span class="keyword">auto</span> bytesToWrite = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;std::streamsize&gt;(fbBuilder.GetSize());</div><div class="line"><a name="l02439"></a><span class="lineno"> 2439</span>&#160;    stream.write(reinterpret_cast&lt;const char*&gt;(fbBuilder.GetBufferPointer()), bytesToWrite);</div><div class="line"><a name="l02440"></a><span class="lineno"> 2440</span>&#160;    <span class="keywordflow">return</span> !stream.bad();</div><div class="line"><a name="l02441"></a><span class="lineno"> 2441</span>&#160;}</div><div class="line"><a name="l02442"></a><span class="lineno"> 2442</span>&#160;</div><div class="line"><a name="l02443"></a><span class="lineno"> 2443</span>&#160;} <span class="comment">// namespace armnnSerializer</span></div><div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">armnn::LayerType::Convolution3d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::LayerType::TransposeConvolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::LayerType::ElementwiseUnary</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Convolution2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00533">Descriptors.hpp:533</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::Convolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00543">Descriptors.hpp:543</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559">armnn::ActivationFunction::ReLu</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_a0031997bf43bd2747656c31e4977793a"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">armnn::Pooling3dDescriptor::m_PoolType</a></div><div class="ttdeci">PoolingAlgorithm m_PoolType</div><div class="ttdoc">The pooling algorithm to use (Max. Average, L2). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00434">Descriptors.hpp:434</a></div></div>
<div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_descriptor_xhtml_a11c821c7524251004a72ed13c510853c"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">armnn::L2NormalizationDescriptor::m_Eps</a></div><div class="ttdeci">float m_Eps</div><div class="ttdoc">Used to avoid dividing by zero. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00783">Descriptors.hpp:783</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_ac2dac3b61c94de52093616be4ab17f8d"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">armnn::IConnectableLayer::GetNumOutputSlots</a></div><div class="ttdeci">virtual unsigned int GetNumOutputSlots() const =0</div><div class="ttdoc">Returns the number of connectable output slots. </div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_ae4ba1925d55937fdb1770852ff0554bf"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#ae4ba1925d55937fdb1770852ff0554bf">armnnSerializer::GetFlatBufferUnaryOperation</a></div><div class="ttdeci">armnnSerializer::UnaryOperation GetFlatBufferUnaryOperation(armnn::UnaryOperation comparisonOperation)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00110">SerializerUtils.cpp:110</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_ad945fc98770356dd886a68e98a52e26b"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ad945fc98770356dd886a68e98a52e26b">armnn::BatchMatMulDescriptor::m_AdjointY</a></div><div class="ttdeci">bool m_AdjointY</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01551">Descriptors.hpp:1551</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::LstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01090">Descriptors.hpp:1090</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Convolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00545">Descriptors.hpp:545</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_aaf7828880989b4b9378d3e86aa6dc843"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#aaf7828880989b4b9378d3e86aa6dc843">armnn::BatchMatMulDescriptor::m_DataLayoutY</a></div><div class="ttdeci">DataLayout m_DataLayoutY</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01555">Descriptors.hpp:1555</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_descriptor_xhtml_afe768be66897eb3d73284424e3239b23"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_descriptor.xhtml#afe768be66897eb3d73284424e3239b23">armnn::ElementwiseUnaryDescriptor::m_Operation</a></div><div class="ttdeci">UnaryOperation m_Operation</div><div class="ttdoc">Specifies the elementwiseUnary operation to execute. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00125">Descriptors.hpp:125</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml_ab218de7805899c8412d75d1fd1d846d2"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml#ab218de7805899c8412d75d1fd1d846d2">armnn::StackDescriptor::m_Axis</a></div><div class="ttdeci">uint32_t m_Axis</div><div class="ttdoc">0-based axis along which to stack the input tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01213">Descriptors.hpp:1213</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::LayerType::Concat</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a></div><div class="ttdoc">A ViewsDescriptor for the SplitterLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00217">Descriptors.hpp:217</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00068">INetwork.hpp:68</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ab509802c659de19929f18bad14a35c58"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">armnn::DetectionPostProcessDescriptor::m_ScaleW</a></div><div class="ttdeci">float m_ScaleW</div><div class="ttdoc">Center size encoding scale weight. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00724">Descriptors.hpp:724</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Pooling2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00374">Descriptors.hpp:374</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::DepthwiseConvolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00669">Descriptors.hpp:669</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a72032c65bf8b8acf09b564b7d80078c5"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a72032c65bf8b8acf09b564b7d80078c5">armnn::INetwork::ExecuteStrategy</a></div><div class="ttdeci">void ExecuteStrategy(IStrategy &amp;strategy) const</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00441">Network.cpp:441</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a9c2cba04b6d7ace4fc2a2436b82a5a63"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">armnn::IConnectableLayer::GetNumInputSlots</a></div><div class="ttdeci">virtual unsigned int GetNumInputSlots() const =0</div><div class="ttdoc">Returns the number of connectable input slots. </div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml_a8526ea7cf860d8e7f8340e9f9354f9f0"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#a8526ea7cf860d8e7f8340e9f9354f9f0">armnn::NormalizationDescriptor::m_K</a></div><div class="ttdeci">float m_K</div><div class="ttdoc">Kappa value used for the across channel normalization equation. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00764">Descriptors.hpp:764</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::LayerType::Comparison</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml_a214c3636fdf0ea5bac8edb42d0e6c7f0"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">armnn::SoftmaxDescriptor::m_Axis</a></div><div class="ttdeci">int m_Axis</div><div class="ttdoc">Scalar, defaulted to the last index (-1), specifying the dimension the activation will be performed o...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00165">Descriptors.hpp:165</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a></div><div class="ttdoc">A TransposeConvolution2dDescriptor for the TransposeConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01380">Descriptors.hpp:1380</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Pooling3dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00456">Descriptors.hpp:456</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_a6d8fb685cc1ff224f25aa127fcf62c86"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">armnn::Pooling3dDescriptor::m_PoolWidth</a></div><div class="ttdeci">uint32_t m_PoolWidth</div><div class="ttdoc">Pooling width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00448">Descriptors.hpp:448</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::DepthwiseConvolution2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00659">Descriptors.hpp:659</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Pooling2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00368">Descriptors.hpp:368</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a86e88bef0df4df96df752b4b8955a3af"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">armnn::LstmDescriptor::m_ClippingThresProj</a></div><div class="ttdeci">float m_ClippingThresProj</div><div class="ttdoc">Clipping threshold value for the projection. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01084">Descriptors.hpp:1084</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_acc978b36fd5d949bc781d7638e6e08b9"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#acc978b36fd5d949bc781d7638e6e08b9">armnn::Pooling3dDescriptor::m_PoolDepth</a></div><div class="ttdeci">uint32_t m_PoolDepth</div><div class="ttdoc">Pooling depth value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00452">Descriptors.hpp:452</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a6d0384878432cfc9652b7ae8bc59506f"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6d0384878432cfc9652b7ae8bc59506f">armnn::StridedSliceDescriptor::m_ShrinkAxisMask</a></div><div class="ttdeci">int32_t m_ShrinkAxisMask</div><div class="ttdoc">Shrink axis mask value. If set, the nth specification shrinks the dimensionality by 1...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01295">Descriptors.hpp:1295</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3"><div class="ttname"><a href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::OutputShapeRounding::Floor</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a></div><div class="ttdoc">A ReshapeDescriptor for the ReshapeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00963">Descriptors.hpp:963</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml"><div class="ttname"><a href="namespacearmnn_serializer.xhtml">armnnSerializer</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_serializer_8hpp_source.xhtml#l00011">ISerializer.hpp:11</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a118fe06b7c2599da60398ee311ede923"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">armnn::StridedSliceDescriptor::m_Begin</a></div><div class="ttdeci">std::vector&lt; int &gt; m_Begin</div><div class="ttdoc">Begin values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01282">Descriptors.hpp:1282</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_a11d5c25face9b54e90f79ee8bdc1d0fb"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#a11d5c25face9b54e90f79ee8bdc1d0fb">armnn::Convolution3dDescriptor::m_PadBack</a></div><div class="ttdeci">uint32_t m_PadBack</div><div class="ttdoc">Padding back value in the depth dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00600">Descriptors.hpp:600</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::LayerType::BatchToSpaceNd</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml_a410fa919f78af0f0f100bd1594eca4ab"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml#a410fa919f78af0f0f100bd1594eca4ab">armnn::PadDescriptor::m_PadValue</a></div><div class="ttdeci">float m_PadValue</div><div class="ttdoc">Optional value to use for padding, defaults to 0. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01161">Descriptors.hpp:1161</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::DepthwiseConvolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00671">Descriptors.hpp:671</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::StridedSliceDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01303">Descriptors.hpp:1303</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml_a78e8266be865fdd92cadd04d6e25ae1f"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">armnn::ViewsDescriptor::GetNumDimensions</a></div><div class="ttdeci">uint32_t GetNumDimensions() const</div><div class="ttdoc">Get the number of dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00300">Descriptors.cpp:300</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a></div><div class="ttdoc">A ComparisonDescriptor for the ComparisonLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00089">Descriptors.hpp:89</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae64523937ea910030ad66fee6fddd51f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">armnn::DetectionPostProcessDescriptor::m_ScaleX</a></div><div class="ttdeci">float m_ScaleX</div><div class="ttdoc">Center size encoding scale x. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00720">Descriptors.hpp:720</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml_a2bea87b470268bb0b73457c3733dbc04"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml#a2bea87b470268bb0b73457c3733dbc04">armnn::StackDescriptor::m_InputShape</a></div><div class="ttdeci">TensorShape m_InputShape</div><div class="ttdoc">Required shape of all input tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01217">Descriptors.hpp:1217</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml_a281fcaec86e17c97f7b8402633f6b55a"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#a281fcaec86e17c97f7b8402633f6b55a">armnn::FullyConnectedDescriptor::m_TransposeWeightMatrix</a></div><div class="ttdeci">bool m_TransposeWeightMatrix</div><div class="ttdoc">Enable/disable transpose weight matrix. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00489">Descriptors.hpp:489</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a5a212540c00931bd2a4b4041beda33ae"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a5a212540c00931bd2a4b4041beda33ae">armnn::TensorShape::GetDimensionality</a></div><div class="ttdeci">Dimensionality GetDimensionality() const</div><div class="ttdoc">Function that returns the tensor type. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00092">Tensor.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_ab85cd8cc10c96a7c99c14042c251fc48"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#ab85cd8cc10c96a7c99c14042c251fc48">armnn::TensorInfo::HasPerAxisQuantization</a></div><div class="ttdeci">bool HasPerAxisQuantization() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00446">Tensor.cpp:446</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a6d8fb685cc1ff224f25aa127fcf62c86"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">armnn::Pooling2dDescriptor::m_PoolWidth</a></div><div class="ttdeci">uint32_t m_PoolWidth</div><div class="ttdoc">Pooling width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00376">Descriptors.hpp:376</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::QLstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01360">Descriptors.hpp:1360</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_aa5f62540b7f991c1522cf9c43fc005ee"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#aa5f62540b7f991c1522cf9c43fc005ee">armnnSerializer::GetFlatBufferOutputShapeRounding</a></div><div class="ttdeci">armnnSerializer::OutputShapeRounding GetFlatBufferOutputShapeRounding(armnn::OutputShapeRounding outputShapeRounding)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00149">SerializerUtils.cpp:149</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Convolution3dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00602">Descriptors.hpp:602</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::ActivationFunction::Sqrt</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00495">Descriptors.hpp:495</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::LayerType::Stack</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml_a174279be57d7596eeb04c6b7f7510f99"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#a174279be57d7596eeb04c6b7f7510f99">armnn::NormalizationDescriptor::m_Alpha</a></div><div class="ttdeci">float m_Alpha</div><div class="ttdoc">Alpha value for the normalization equation. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00760">Descriptors.hpp:760</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::DepthwiseConvolution2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00653">Descriptors.hpp:653</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml_a28e0548abfc4e79c48f29a3d11a062e9"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml#a28e0548abfc4e79c48f29a3d11a062e9">armnn::ReduceDescriptor::m_KeepDims</a></div><div class="ttdeci">bool m_KeepDims</div><div class="ttdoc">if true then output shape has no change. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01487">Descriptors.hpp:1487</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_af8f724af7210b52529216feefa993c98"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#af8f724af7210b52529216feefa993c98">armnn::QLstmDescriptor::m_HiddenStateScale</a></div><div class="ttdeci">float m_HiddenStateScale</div><div class="ttdoc">Hidden State quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01376">Descriptors.hpp:1376</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::LayerType::StridedSlice</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::TransposeConvolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01421">Descriptors.hpp:1421</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">armnn::LayerType::Cast</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_acb441bb8db19bcce78d15cdd8ceb5ea0"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#acb441bb8db19bcce78d15cdd8ceb5ea0">armnn::BatchMatMulDescriptor::m_TransposeX</a></div><div class="ttdeci">bool m_TransposeX</div><div class="ttdoc">Transpose the slices of each input tensor Transpose and Adjoint can not both be set to true for the s...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01545">Descriptors.hpp:1545</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaacb7667f5ec2f6e8a5943b781ba6c2735"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaacb7667f5ec2f6e8a5943b781ba6c2735">armnn::ActivationFunction::LeakyReLu</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b8fc85ce966c035d789cf22db5088a1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">armnn::TensorInfo::GetQuantizationDim</a></div><div class="ttdeci">Optional&lt; unsigned int &gt; GetQuantizationDim() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00494">Tensor.cpp:494</a></div></div>
<div class="ttc" id="_quantized_lstm_params_8hpp_xhtml"><div class="ttname"><a href="_quantized_lstm_params_8hpp.xhtml">QuantizedLstmParams.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_aa43409f9b457352c95c89f20ce5d844d"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa43409f9b457352c95c89f20ce5d844d">armnn::QLstmDescriptor::m_OutputIntermediateScale</a></div><div class="ttdeci">float m_OutputIntermediateScale</div><div class="ttdoc">Output intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01372">Descriptors.hpp:1372</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a869254cb56968986a78a79e1d6d4a86b"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">armnn::ResizeDescriptor::m_Method</a></div><div class="ttdeci">ResizeMethod m_Method</div><div class="ttdoc">The Interpolation method to use (Bilinear, NearestNeighbor). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00952">Descriptors.hpp:952</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_descriptor_xhtml_a5e078fd505aef7bccaa05c8058e096cc"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a5e078fd505aef7bccaa05c8058e096cc">armnn::InstanceNormalizationDescriptor::m_Gamma</a></div><div class="ttdeci">float m_Gamma</div><div class="ttdoc">Gamma, the scale scalar value applied for the normalized tensor. Defaults to 1.0. ...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00826">Descriptors.hpp:826</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml_a8275d51ef9a584feb95726ea0522f6e5"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">armnn::SoftmaxDescriptor::m_Beta</a></div><div class="ttdeci">float m_Beta</div><div class="ttdoc">Exponentiation value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00163">Descriptors.hpp:163</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml_ab52cabf19232290fa6b49828ba957ac0"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml#ab52cabf19232290fa6b49828ba957ac0">armnn::SliceDescriptor::m_Size</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_Size</div><div class="ttdoc">Size of the slice in each dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01187">Descriptors.hpp:1187</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml_a11c821c7524251004a72ed13c510853c"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">armnn::BatchNormalizationDescriptor::m_Eps</a></div><div class="ttdeci">float m_Eps</div><div class="ttdoc">Value to add to the variance. Used to avoid dividing by zero. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00802">Descriptors.hpp:802</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a8c29d6ea9b4186d69aad5961c910939c"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">armnn::Pooling2dDescriptor::m_PaddingMethod</a></div><div class="ttdeci">PaddingMethod m_PaddingMethod</div><div class="ttdoc">The padding method to be used. (Exclude, IgnoreValue). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00386">Descriptors.hpp:386</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_descriptor_xhtml_ab1ae6f520bb1a4da191a0ae907477f23"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml#ab1ae6f520bb1a4da191a0ae907477f23">armnn::ArgMinMaxDescriptor::m_Function</a></div><div class="ttdeci">ArgMinMaxFunction m_Function</div><div class="ttdoc">Specify if the function is to find Min or Max. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00081">Descriptors.hpp:81</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7e2f87544b8bc7e497e1dec8d3ca4055"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">armnn::DetectionPostProcessDescriptor::m_DetectionsPerClass</a></div><div class="ttdeci">uint32_t m_DetectionsPerClass</div><div class="ttdoc">Detections per classes, used in Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00710">Descriptors.hpp:710</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::BatchNormalizationDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00804">Descriptors.hpp:804</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::BatchToSpaceNdDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00863">Descriptors.hpp:863</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_a0cf8306be7d301de0f095fff9901a525"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#a0cf8306be7d301de0f095fff9901a525">armnn::BatchMatMulDescriptor::m_AdjointX</a></div><div class="ttdeci">bool m_AdjointX</div><div class="ttdoc">Adjoint the slices of each input tensor Transpose and Adjoint can not both be set to true for the sam...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01550">Descriptors.hpp:1550</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_aac3bf4453f8a909ca23f290089df8ff1"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#aac3bf4453f8a909ca23f290089df8ff1">armnnSerializer::GetFlatBufferActivationFunction</a></div><div class="ttdeci">serializer::ActivationFunction GetFlatBufferActivationFunction(armnn::ActivationFunction function)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_8cpp_source.xhtml#l00055">Serializer.cpp:55</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a></div><div class="ttdoc">Main network class which provides the interface for building up a neural network. ...</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00261">INetwork.hpp:261</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Pooling3dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00438">Descriptors.hpp:438</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::LayerType::Normalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::LayerType::SpaceToBatchNd</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_ac813f02c91c348db92b5a40ecfa0135e"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#ac813f02c91c348db92b5a40ecfa0135e">armnnSerializer::GetFlatBufferNormalizationAlgorithmMethod</a></div><div class="ttdeci">armnnSerializer::NormalizationAlgorithmMethod GetFlatBufferNormalizationAlgorithmMethod(armnn::NormalizationAlgorithmMethod normalizationAlgorithmMethod)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00200">SerializerUtils.cpp:200</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::LayerType::FullyConnected</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Pooling2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00372">Descriptors.hpp:372</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::ActivationFunction::Sigmoid</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Convolution3dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00596">Descriptors.hpp:596</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::Convolution3dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00614">Descriptors.hpp:614</a></div></div>
<div class="ttc" id="structarmnn_1_1_logical_binary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_logical_binary_descriptor.xhtml">armnn::LogicalBinaryDescriptor</a></div><div class="ttdoc">A LogicalBinaryDescriptor for the LogicalBinaryLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01451">Descriptors.hpp:1451</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::LayerType::Reduce</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6ae1b3c9c6087a93b07c83e0b04f377a8d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ae1b3c9c6087a93b07c83e0b04f377a8d">armnn::DataType::Signed64</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Convolution2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00529">Descriptors.hpp:529</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::NormalizationDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00766">Descriptors.hpp:766</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_aa81f67ac64f0c249e26499600c45d996"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">armnn::BaseTensor::GetMemoryArea</a></div><div class="ttdeci">MemoryType GetMemoryArea() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00305">Tensor.hpp:305</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml_a85f98c94e11f65a6b73f831735c040f3"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">armnn::PadDescriptor::m_PadList</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; m_PadList</div><div class="ttdoc">Specifies the padding for input dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01158">Descriptors.hpp:1158</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml_a35546e7b56e6e972a495b48748478ede"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">armnn::ViewsDescriptor::GetNumViews</a></div><div class="ttdeci">uint32_t GetNumViews() const</div><div class="ttdoc">Get the number of views. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00295">Descriptors.cpp:295</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml_aa57c67b1da0011b1abb30170146e870f"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml#aa57c67b1da0011b1abb30170146e870f">armnn::ReduceDescriptor::m_ReduceOperation</a></div><div class="ttdeci">ReduceOperation m_ReduceOperation</div><div class="ttdoc">Specifies the reduction operation to execute. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01491">Descriptors.hpp:1491</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a3dcd10ca3ea2e132558b1e2814668c15"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">armnn::LstmDescriptor::m_TimeMajor</a></div><div class="ttdeci">bool m_TimeMajor</div><div class="ttdoc">Enable/disable time major. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01094">Descriptors.hpp:1094</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Pooling3dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCDHW, NDHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00464">Descriptors.hpp:464</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_lstm_params_8hpp_xhtml"><div class="ttname"><a href="_lstm_params_8hpp.xhtml">LstmParams.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::LayerType::InstanceNormalization</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::TransposeConvolution2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01415">Descriptors.hpp:1415</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a61081be1483984e33db452c75d569f51"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a61081be1483984e33db452c75d569f51">armnn::StridedSliceDescriptor::m_BeginMask</a></div><div class="ttdeci">int32_t m_BeginMask</div><div class="ttdoc">Begin mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01290">Descriptors.hpp:1290</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_a83ca447892f460dabaa2f87d3dc3db61"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#a83ca447892f460dabaa2f87d3dc3db61">armnn::Pooling3dDescriptor::m_PadFront</a></div><div class="ttdeci">uint32_t m_PadFront</div><div class="ttdoc">Padding front value in the depth dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00444">Descriptors.hpp:444</a></div></div>
<div class="ttc" id="classarmnn_1_1_permutation_vector_xhtml_a490ec6b59006d1fe1ec2ea30e69fb97c"><div class="ttname"><a href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">armnn::PermutationVector::GetSize</a></div><div class="ttdeci">SizeType GetSize() const</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00338">Types.hpp:338</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a302b688d88dd73cde0fb1faef6679907"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">armnn::Convolution2dDescriptor::m_DilationY</a></div><div class="ttdeci">uint32_t m_DilationY</div><div class="ttdoc">Dilation along y axis. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00541">Descriptors.hpp:541</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_ac37e49c0d6e6e54f9d2015d0f11f8ee7"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#ac37e49c0d6e6e54f9d2015d0f11f8ee7">armnn::StridedSliceDescriptor::m_EndMask</a></div><div class="ttdeci">int32_t m_EndMask</div><div class="ttdoc">End mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01293">Descriptors.hpp:1293</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a></div><div class="ttdoc">A SpaceToDepthDescriptor for the SpaceToDepthLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01015">Descriptors.hpp:1015</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">armnn::LayerType::Merge</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a85f98c94e11f65a6b73f831735c040f3"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">armnn::SpaceToBatchNdDescriptor::m_PadList</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; m_PadList</div><div class="ttdoc">Specifies the padding values for the input dimension: heightPad{top, bottom} widthPad{left, right}. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01009">Descriptors.hpp:1009</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_a5699e8606c37d18c03910b242cd1b010"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">armnn::Pooling3dDescriptor::m_PoolHeight</a></div><div class="ttdeci">uint32_t m_PoolHeight</div><div class="ttdoc">Pooling height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00450">Descriptors.hpp:450</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8bc11f1fa23ef42532f9fdd04d355270"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">armnn::TensorInfo::GetQuantizationScales</a></div><div class="ttdeci">std::vector&lt; float &gt; GetQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00451">Tensor.cpp:451</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_aa3c6a77a963a98ccb8ea7b8fd008a8c1"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">armnn::Convolution3dDescriptor::m_DilationX</a></div><div class="ttdeci">uint32_t m_DilationX</div><div class="ttdoc">Dilation along x axis. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00608">Descriptors.hpp:608</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a302b688d88dd73cde0fb1faef6679907"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">armnn::DepthwiseConvolution2dDescriptor::m_DilationY</a></div><div class="ttdeci">uint32_t m_DilationY</div><div class="ttdoc">Dilation factor value for height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00667">Descriptors.hpp:667</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_af7a4f31739f602d7d78a056ebed19d04"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#af7a4f31739f602d7d78a056ebed19d04">armnnSerializer::GetFlatBufferConstTensorData</a></div><div class="ttdeci">armnnSerializer::ConstTensorData GetFlatBufferConstTensorData(armnn::DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00045">SerializerUtils.cpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a3919600d4aa8d5cd801a0e0740f62308"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a3919600d4aa8d5cd801a0e0740f62308">armnn::TensorShape::GetDimensionSpecificity</a></div><div class="ttdeci">bool GetDimensionSpecificity(unsigned int i) const</div><div class="ttdoc">Gets information about if the dimension size has been specified or not. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00211">Tensor.cpp:211</a></div></div>
<div class="ttc" id="structarmnn_1_1_logical_binary_descriptor_xhtml_a32c95d929d2e2e0fa7fc1a3a25865eb0"><div class="ttname"><a href="structarmnn_1_1_logical_binary_descriptor.xhtml#a32c95d929d2e2e0fa7fc1a3a25865eb0">armnn::LogicalBinaryDescriptor::m_Operation</a></div><div class="ttdeci">LogicalBinaryOperation m_Operation</div><div class="ttdoc">Specifies the logical operation to execute. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01467">Descriptors.hpp:1467</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a></div><div class="ttdoc">A BatchToSpaceNdDescriptor for the BatchToSpaceNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00836">Descriptors.hpp:836</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::LayerType::L2Normalization</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Pooling2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00380">Descriptors.hpp:380</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml_a14433af2b223695b40d8c8f8ba2ebb8f"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">armnn::PermuteDescriptor::m_DimMappings</a></div><div class="ttdeci">PermutationVector m_DimMappings</div><div class="ttdoc">Indicates how to translate tensor elements from a given source into the target destination, when source and target potentially have different memory layouts e.g. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00146">Descriptors.hpp:146</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a2a4a81f69c4a84c4637c2e90e4e47968"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a2a4a81f69c4a84c4637c2e90e4e47968">armnnSerializer::GetFlatBufferReduceOperation</a></div><div class="ttdeci">armnnSerializer::ReduceOperation GetFlatBufferReduceOperation(armnn::ReduceOperation reduceOperation)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00227">SerializerUtils.cpp:227</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00290">Types.hpp:290</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::LayerType::Prelu</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d"><div class="ttname"><a href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d">armnn::ReduceOperation::Mean</a></div></div>
<div class="ttc" id="_numeric_cast_8hpp_xhtml"><div class="ttname"><a href="_numeric_cast_8hpp.xhtml">NumericCast.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a27876085f01a54e1995bc0b3ea96ce41"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a27876085f01a54e1995bc0b3ea96ce41">armnnSerializer::GetFlatBufferDataType</a></div><div class="ttdeci">armnnSerializer::DataType GetFlatBufferDataType(armnn::DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00067">SerializerUtils.cpp:67</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">armnn::LayerType::LogicalBinary</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Convolution3dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00604">Descriptors.hpp:604</a></div></div>
<div class="ttc" id="structarmnn_1_1_stand_in_descriptor_xhtml_abb8a2d2bb8cc594c26aaa70c820ac5cc"><div class="ttname"><a href="structarmnn_1_1_stand_in_descriptor.xhtml#abb8a2d2bb8cc594c26aaa70c820ac5cc">armnn::StandInDescriptor::m_NumOutputs</a></div><div class="ttdeci">uint32_t m_NumOutputs</div><div class="ttdoc">Number of output tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01239">Descriptors.hpp:1239</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml_a05945f080edf694b631960728b87aadb"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#a05945f080edf694b631960728b87aadb">armnn::NormalizationDescriptor::m_NormMethodType</a></div><div class="ttdeci">NormalizationAlgorithmMethod m_NormMethodType</div><div class="ttdoc">Normalization method algorithm to use (LocalBrightness, LocalContrast). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00756">Descriptors.hpp:756</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a></div><div class="ttdoc">A ResizeDescriptor for the ResizeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00925">Descriptors.hpp:925</a></div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::L2NormalizationDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00785">Descriptors.hpp:785</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a9ae2c9796692ebeafe19a4d3f09c8ea8"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">armnn::DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a></div><div class="ttdeci">uint32_t m_MaxClassesPerDetection</div><div class="ttdoc">Maximum numbers of classes per detection, used in Fast NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00708">Descriptors.hpp:708</a></div></div>
<div class="ttc" id="structarmnn_1_1_base_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a></div><div class="ttdoc">Base class for all descriptors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00022">Descriptors.hpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_mean_descriptor_xhtml_a1f0d67b087c491248bd1cde3ff995a95"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml#a1f0d67b087c491248bd1cde3ff995a95">armnn::MeanDescriptor::m_Axis</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_Axis</div><div class="ttdoc">Values for the dimensions to reduce. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01130">Descriptors.hpp:1130</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a></div><div class="ttdoc">A StackDescriptor for the StackLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01191">Descriptors.hpp:1191</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::SpaceToBatchNdDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01011">Descriptors.hpp:1011</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::LayerType::Quantize</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6fcb1eefde815b0b7465a689c8d26b50"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6fcb1eefde815b0b7465a689c8d26b50">armnnSerializer::GetFlatBufferArgMinMaxFunction</a></div><div class="ttdeci">serializer::ArgMinMaxFunction GetFlatBufferArgMinMaxFunction(armnn::ArgMinMaxFunction function)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_8cpp_source.xhtml#l00086">Serializer.cpp:86</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_descriptor_xhtml_a1178f4dafdda81f59c15145ec327f7d9"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">armnn::ReshapeDescriptor::m_TargetShape</a></div><div class="ttdeci">TensorShape m_TargetShape</div><div class="ttdoc">Target shape value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00979">Descriptors.hpp:979</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a5699e8606c37d18c03910b242cd1b010"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">armnn::Pooling2dDescriptor::m_PoolHeight</a></div><div class="ttdeci">uint32_t m_PoolHeight</div><div class="ttdoc">Pooling height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00378">Descriptors.hpp:378</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Convolution2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00531">Descriptors.hpp:531</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae72089bcab60ac175557f4241b16a014"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">armnn::DetectionPostProcessDescriptor::m_MaxDetections</a></div><div class="ttdeci">uint32_t m_MaxDetections</div><div class="ttdoc">Maximum numbers of detections. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00706">Descriptors.hpp:706</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a></div><div class="ttdoc">A PadDescriptor for the PadLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01136">Descriptors.hpp:1136</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_ab78e6fe963508c1ac5c00d04bb3361a3"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#ab78e6fe963508c1ac5c00d04bb3361a3">armnn::OriginsDescriptor::GetViewOrigin</a></div><div class="ttdeci">const uint32_t * GetViewOrigin(uint32_t idx) const</div><div class="ttdoc">Return the view origin at the int value idx. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00197">Descriptors.cpp:197</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_aedca000a005e091c23191e82d7e81b1d"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#aedca000a005e091c23191e82d7e81b1d">armnn::BatchMatMulDescriptor::m_DataLayoutX</a></div><div class="ttdeci">DataLayout m_DataLayoutX</div><div class="ttdoc">Data layout of each input tensor, such as NHWC/NDHWC (leave as default for arbitrary layout) ...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01554">Descriptors.hpp:1554</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Convolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00535">Descriptors.hpp:535</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_a11d5c25face9b54e90f79ee8bdc1d0fb"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#a11d5c25face9b54e90f79ee8bdc1d0fb">armnn::Pooling3dDescriptor::m_PadBack</a></div><div class="ttdeci">uint32_t m_PadBack</div><div class="ttdoc">Padding back value in the depth dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00446">Descriptors.hpp:446</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_af279947f1e42035d0f611e5b8cd70cb2"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#af279947f1e42035d0f611e5b8cd70cb2">armnnSerializer::GetFlatBufferNormalizationAlgorithmChannel</a></div><div class="ttdeci">armnnSerializer::NormalizationAlgorithmChannel GetFlatBufferNormalizationAlgorithmChannel(armnn::NormalizationAlgorithmChannel normalizationAlgorithmChannel)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00186">SerializerUtils.cpp:186</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::DepthwiseConvolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00661">Descriptors.hpp:661</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a4a8ec49f130084445d44297549254780"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">armnn::QLstmDescriptor::m_LayerNormEnabled</a></div><div class="ttdeci">bool m_LayerNormEnabled</div><div class="ttdoc">Enable/disable layer normalization. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01364">Descriptors.hpp:1364</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::LayerType::DetectionPostProcess</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a53c8a7f33a40e1e240256bcfcf41b101"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">armnn::DetectionPostProcessDescriptor::m_NmsIouThreshold</a></div><div class="ttdeci">float m_NmsIouThreshold</div><div class="ttdoc">Intersection over union threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00714">Descriptors.hpp:714</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a3078a3b577bbd2aa0b133d4732b8e645"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a3078a3b577bbd2aa0b133d4732b8e645">armnnSerializer::GetFlatBufferLogicalBinaryOperation</a></div><div class="ttdeci">armnnSerializer::LogicalBinaryOperation GetFlatBufferLogicalBinaryOperation(armnn::LogicalBinaryOperation logicalBinaryOperation)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00031">SerializerUtils.cpp:31</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a></div><div class="ttdoc">An LstmDescriptor for the LstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01042">Descriptors.hpp:1042</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Pooling2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00370">Descriptors.hpp:370</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aa3c6a77a963a98ccb8ea7b8fd008a8c1"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">armnn::DepthwiseConvolution2dDescriptor::m_DilationX</a></div><div class="ttdeci">uint32_t m_DilationX</div><div class="ttdoc">Dilation factor value for width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00665">Descriptors.hpp:665</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::DepthwiseConvolution2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00657">Descriptors.hpp:657</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml_a4939f00778f08d6c6fec6f74c0a59b7e"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml#a4939f00778f08d6c6fec6f74c0a59b7e">armnn::SliceDescriptor::m_Begin</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_Begin</div><div class="ttdoc">Beginning indices of the slice in each dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01184">Descriptors.hpp:1184</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a7c91eda2b331d607bae92cd8ebf50bb9"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a7c91eda2b331d607bae92cd8ebf50bb9">armnn::StridedSliceDescriptor::m_NewAxisMask</a></div><div class="ttdeci">int32_t m_NewAxisMask</div><div class="ttdoc">New axis mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01300">Descriptors.hpp:1300</a></div></div>
<div class="ttc" id="structarmnn_1_1_mean_descriptor_xhtml_a28e0548abfc4e79c48f29a3d11a062e9"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml#a28e0548abfc4e79c48f29a3d11a062e9">armnn::MeanDescriptor::m_KeepDims</a></div><div class="ttdeci">bool m_KeepDims</div><div class="ttdoc">Enable/disable keep dimensions. If true, then the reduced dimensions that are of length 1 are kept...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01132">Descriptors.hpp:1132</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml_a02e143524aefddd40b485fcf7dea6696"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">armnn::BatchToSpaceNdDescriptor::m_BlockShape</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_BlockShape</div><div class="ttdoc">Block shape values. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00859">Descriptors.hpp:859</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae7e8cbf71db6a490789ca6dcaa8deeaea6a061313d22e51e0f25b7cd4dc065233"><div class="ttname"><a href="namespacearmnn.xhtml#ae7e8cbf71db6a490789ca6dcaa8deeaea6a061313d22e51e0f25b7cd4dc065233">armnn::ArgMinMaxFunction::Max</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_descriptor_xhtml_a11c821c7524251004a72ed13c510853c"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">armnn::InstanceNormalizationDescriptor::m_Eps</a></div><div class="ttdeci">float m_Eps</div><div class="ttdoc">Epsilon, small scalar value added to variance to avoid dividing by zero. Defaults to 1e-12f...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00830">Descriptors.hpp:830</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a></div><div class="ttdoc">An output connection slot for a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00041">INetwork.hpp:41</a></div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a></div><div class="ttdoc">A L2NormalizationDescriptor for the L2NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00770">Descriptors.hpp:770</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a770b51078da02f44a819e9f95d8058b5"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">armnn::TensorInfo::GetQuantizationOffset</a></div><div class="ttdeci">int32_t GetQuantizationOffset() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00478">Tensor.cpp:478</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a></div><div class="ttdoc">An ArgMinMaxDescriptor for ArgMinMaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00067">Descriptors.hpp:67</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a3f9e0ff7f7311d76ca36101721503a07"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a3f9e0ff7f7311d76ca36101721503a07">armnnSerializer::GetFlatBufferPaddingMode</a></div><div class="ttdeci">armnnSerializer::PaddingMode GetFlatBufferPaddingMode(armnn::PaddingMode paddingMode)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00173">SerializerUtils.cpp:173</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a047ca888c43bd7fb5702853bf72410d0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">armnn::TensorInfo::GetQuantizationScale</a></div><div class="ttdeci">float GetQuantizationScale() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00461">Tensor.cpp:461</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a></div><div class="ttdoc">An OriginsDescriptor for the ConcatLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00174">Descriptors.hpp:174</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml">armnn::ReduceDescriptor</a></div><div class="ttdoc">A ReduceDescriptor for the REDUCE operators. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01471">Descriptors.hpp:1471</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_aa6a518b65088f34803b3214334bdff61"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa6a518b65088f34803b3214334bdff61">armnn::QLstmDescriptor::m_ProjectionClip</a></div><div class="ttdeci">float m_ProjectionClip</div><div class="ttdoc">Clipping threshold value for the projection. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01356">Descriptors.hpp:1356</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a></div><div class="ttdoc">A FullyConnectedDescriptor for the FullyConnectedLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00468">Descriptors.hpp:468</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_af996d82c47e43a16f4c8faa6c6b3e030"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#af996d82c47e43a16f4c8faa6c6b3e030">armnn::StridedSliceDescriptor::m_EllipsisMask</a></div><div class="ttdeci">int32_t m_EllipsisMask</div><div class="ttdoc">Ellipsis mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01297">Descriptors.hpp:1297</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::LayerType::Gather</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_afb5e65c770f6cee222db8af7581541a6"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">armnn::IConnectableLayer::GetGuid</a></div><div class="ttdeci">virtual LayerGuid GetGuid() const =0</div><div class="ttdoc">Returns the unique id of the layer. </div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::FullyConnectedDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00487">Descriptors.hpp:487</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::LayerType::Permute</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::LayerType::Resize</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a09e1f097944f61cc901240f9300364cf"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a09e1f097944f61cc901240f9300364cf">armnn::QLstmDescriptor::m_InputIntermediateScale</a></div><div class="ttdeci">float m_InputIntermediateScale</div><div class="ttdoc">Input intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01366">Descriptors.hpp:1366</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_affb5b68b3eba3ed45a06c7cde7781962"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#affb5b68b3eba3ed45a06c7cde7781962">armnn::Pooling3dDescriptor::m_OutputShapeRounding</a></div><div class="ttdeci">OutputShapeRounding m_OutputShapeRounding</div><div class="ttdoc">The rounding method for the output shape. (Floor, Ceiling). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00460">Descriptors.hpp:460</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_adcf5037208faac36c0788239a073f75c"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">armnn::ResizeDescriptor::m_TargetWidth</a></div><div class="ttdeci">uint32_t m_TargetWidth</div><div class="ttdoc">Target width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00947">Descriptors.hpp:947</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a></div><div class="ttdoc">A GatherDescriptor for the GatherLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00905">Descriptors.hpp:905</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::LayerType::Convolution2d</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Pooling3dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00442">Descriptors.hpp:442</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::LstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01088">Descriptors.hpp:1088</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a3a04b0ccee4bb2f21721ee5045e83df4"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">armnn::DetectionPostProcessDescriptor::m_NumClasses</a></div><div class="ttdeci">uint32_t m_NumClasses</div><div class="ttdoc">Number of classes. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00716">Descriptors.hpp:716</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::LayerType::Pad</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a4022d5107338aaf5eb7abebf78a1360b"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a4022d5107338aaf5eb7abebf78a1360b">armnn::ResizeDescriptor::m_HalfPixelCenters</a></div><div class="ttdeci">bool m_HalfPixelCenters</div><div class="ttdoc">Half Pixel Centers. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00958">Descriptors.hpp:958</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">armnn::LayerType::Maximum</a></div></div>
<div class="ttc" id="classarmnn_serializer_1_1_i_serializer_xhtml_a4d146e96f4464192b762b23e1cf1e207"><div class="ttname"><a href="classarmnn_serializer_1_1_i_serializer.xhtml#a4d146e96f4464192b762b23e1cf1e207">armnnSerializer::ISerializer::Serialize</a></div><div class="ttdeci">void Serialize(const armnn::INetwork &amp;inNetwork)</div><div class="ttdoc">Serializes the network to ArmNN SerializedGraph. </div><div class="ttdef"><b>Definition:</b> <a href="_serializer_8cpp_source.xhtml#l00045">Serializer.cpp:45</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::TransposeConvolution2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01413">Descriptors.hpp:1413</a></div></div>
<div class="ttc" id="classarmnn_serializer_1_1_i_serializer_xhtml"><div class="ttname"><a href="classarmnn_serializer_1_1_i_serializer.xhtml">armnnSerializer::ISerializer</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_serializer_8hpp_source.xhtml#l00017">ISerializer.hpp:17</a></div></div>
<div class="ttc" id="structarmnn_1_1_stand_in_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stand_in_descriptor.xhtml">armnn::StandInDescriptor</a></div><div class="ttdoc">A StandInDescriptor for the StandIn layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01221">Descriptors.hpp:1221</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::LayerType::Reshape</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml">armnn::QLstmDescriptor</a></div><div class="ttdoc">A QLstmDescriptor for the QLstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01320">Descriptors.hpp:1320</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_a112b466e5d2ab9d1887178adbe3afa1c"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#a112b466e5d2ab9d1887178adbe3afa1c">armnn::BatchMatMulDescriptor::m_TransposeY</a></div><div class="ttdeci">bool m_TransposeY</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01546">Descriptors.hpp:1546</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a41d30a9cd272e05986d71a69d6ad618b"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a41d30a9cd272e05986d71a69d6ad618b">armnn::IOutputSlot::CalculateIndexOnOwner</a></div><div class="ttdeci">virtual unsigned int CalculateIndexOnOwner() const =0</div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7ed9bc7c26df67d274d5dd4cd83adf0f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">armnn::DetectionPostProcessDescriptor::m_UseRegularNms</a></div><div class="ttdeci">bool m_UseRegularNms</div><div class="ttdoc">Use Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00718">Descriptors.hpp:718</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::LayerType::Pooling2d</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_a83ca447892f460dabaa2f87d3dc3db61"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#a83ca447892f460dabaa2f87d3dc3db61">armnn::Convolution3dDescriptor::m_PadFront</a></div><div class="ttdeci">uint32_t m_PadFront</div><div class="ttdoc">Padding front value in the depth dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00598">Descriptors.hpp:598</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::TransposeConvolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01423">Descriptors.hpp:1423</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a02e143524aefddd40b485fcf7dea6696"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">armnn::SpaceToBatchNdDescriptor::m_BlockShape</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_BlockShape</div><div class="ttdoc">Block shape value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01006">Descriptors.hpp:1006</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a0d53caff836b84204adbd1c28752a201"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">armnn::StridedSliceDescriptor::m_Stride</a></div><div class="ttdeci">std::vector&lt; int &gt; m_Stride</div><div class="ttdoc">Stride values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01286">Descriptors.hpp:1286</a></div></div>
<div class="ttc" id="_serializer_utils_8hpp_xhtml"><div class="ttname"><a href="_serializer_utils_8hpp.xhtml">SerializerUtils.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00036">Descriptors.hpp:36</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::LayerType::Dequantize</a></div></div>
<div class="ttc" id="_serializer_8hpp_xhtml"><div class="ttname"><a href="_serializer_8hpp.xhtml">Serializer.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8aeddebdcf02e1832b22203c08a6b678"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">armnn::BaseTensor::GetInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00295">Tensor.hpp:295</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a></div><div class="ttdoc">min(a, max(b, input)) ReLu1 &amp; ReLu6. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">armnn::LayerType::Pooling3d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::DataType::BFloat16</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml_aed6086070440ceb94129bef06f70173f"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml#aed6086070440ceb94129bef06f70173f">armnn::StackDescriptor::m_NumInputs</a></div><div class="ttdeci">uint32_t m_NumInputs</div><div class="ttdoc">Number of input tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01215">Descriptors.hpp:1215</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Convolution3dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00590">Descriptors.hpp:590</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a46c3fa15c46fb0d1dcdc24d0ea5cb5cd"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">armnn::ResizeDescriptor::m_TargetHeight</a></div><div class="ttdeci">uint32_t m_TargetHeight</div><div class="ttdoc">Target height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00949">Descriptors.hpp:949</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ae1b07ed928036004bd257169e5aeeef4"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">armnn::LstmDescriptor::m_ActivationFunc</a></div><div class="ttdeci">uint32_t m_ActivationFunc</div><div class="ttdoc">The activation function to use. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01080">Descriptors.hpp:1080</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a></div><div class="ttdoc">A SliceDescriptor for the SliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01168">Descriptors.hpp:1168</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9882ff3cfed27d6161c20a305e7a3484"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9882ff3cfed27d6161c20a305e7a3484">armnn::LayerType::BatchMatMul</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Convolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00537">Descriptors.hpp:537</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml">armnn::Convolution3dDescriptor</a></div><div class="ttdoc">A Convolution3dDescriptor for the Convolution3dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00549">Descriptors.hpp:549</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Convolution3dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00592">Descriptors.hpp:592</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_adceb04ae84c524e4d01881e3754a4d59"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">armnn::IConnectableLayer::GetType</a></div><div class="ttdeci">virtual LayerType GetType() const =0</div><div class="ttdoc">Returns the armnn::LayerType of this layer. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">armnn::LayerType::ChannelShuffle</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a531a3907ec13d3772370da88030191a5"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">armnn::LstmDescriptor::m_ClippingThresCell</a></div><div class="ttdeci">float m_ClippingThresCell</div><div class="ttdoc">Clipping threshold value for the cell state. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01082">Descriptors.hpp:1082</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml_a6c6b8957f1e176867e5fb05b1a1a1486"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">armnn::SpaceToDepthDescriptor::m_BlockSize</a></div><div class="ttdeci">unsigned int m_BlockSize</div><div class="ttdoc">Scalar specifying the input block size. It must be &gt;= 1. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01032">Descriptors.hpp:1032</a></div></div>
<div class="ttc" id="structarmnn_1_1_channel_shuffle_descriptor_xhtml_a1953d00371489c32ebded5a42eabc0cf"><div class="ttname"><a href="structarmnn_1_1_channel_shuffle_descriptor.xhtml#a1953d00371489c32ebded5a42eabc0cf">armnn::ChannelShuffleDescriptor::m_NumGroups</a></div><div class="ttdeci">uint32_t m_NumGroups</div><div class="ttdoc">Number of groups for the channel shuffle operation. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01511">Descriptors.hpp:1511</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">armnn::BatchMatMulDescriptor</a></div><div class="ttdoc">A BatchMatMulDescriptor for the BatchMatMul operator. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01517">Descriptors.hpp:1517</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml_ab78e6fe963508c1ac5c00d04bb3361a3"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml#ab78e6fe963508c1ac5c00d04bb3361a3">armnn::ViewsDescriptor::GetViewOrigin</a></div><div class="ttdeci">const uint32_t * GetViewOrigin(uint32_t idx) const</div><div class="ttdoc">Get the view origin at the int value idx. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00305">Descriptors.cpp:305</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml_a66f2c989f51ab6116de4380390250b69"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml#a66f2c989f51ab6116de4380390250b69">armnn::PadDescriptor::m_PaddingMode</a></div><div class="ttdeci">PaddingMode m_PaddingMode</div><div class="ttdoc">Specifies the Padding mode (Constant, Reflect or Symmetric) </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01164">Descriptors.hpp:1164</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::InstanceNormalizationDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00832">Descriptors.hpp:832</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::LayerType::SpaceToDepth</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_afec7f36158448f723b426a9527acb189"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#afec7f36158448f723b426a9527acb189">armnn::QLstmDescriptor::m_ForgetIntermediateScale</a></div><div class="ttdeci">float m_ForgetIntermediateScale</div><div class="ttdoc">Forget intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01368">Descriptors.hpp:1368</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Pooling2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00388">Descriptors.hpp:388</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_descriptor_xhtml_a8275d51ef9a584feb95726ea0522f6e5"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">armnn::InstanceNormalizationDescriptor::m_Beta</a></div><div class="ttdeci">float m_Beta</div><div class="ttdoc">Beta, the offset scalar value applied for the normalized tensor. Defaults to 1.0. ...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00828">Descriptors.hpp:828</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::LayerType::DepthwiseConvolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a6a38e099993f10c9262e0b5f2bff4fcd"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a6a38e099993f10c9262e0b5f2bff4fcd">armnnSerializer::GetFlatBufferDataLayout</a></div><div class="ttdeci">armnnSerializer::DataLayout GetFlatBufferDataLayout(armnn::DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00094">SerializerUtils.cpp:94</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml">armnn::Pooling3dDescriptor</a></div><div class="ttdoc">A Pooling3dDescriptor for the Pooling3dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00392">Descriptors.hpp:392</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_a5164336f6a1b15be0d434a6bbf7289da"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#a5164336f6a1b15be0d434a6bbf7289da">armnn::Pooling3dDescriptor::m_StrideZ</a></div><div class="ttdeci">uint32_t m_StrideZ</div><div class="ttdoc">Stride value when proceeding through input for the depth dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00458">Descriptors.hpp:458</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml_aa1c6fc8c96404252f1072632fc5acb59"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml#aa1c6fc8c96404252f1072632fc5acb59">armnn::ReduceDescriptor::m_vAxis</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; m_vAxis</div><div class="ttdoc">The indices of the dimensions to reduce. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01489">Descriptors.hpp:1489</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_aa61510cbd529870182e918ac6e8b9d72"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">armnn::DetectionPostProcessDescriptor::m_ScaleH</a></div><div class="ttdeci">float m_ScaleH</div><div class="ttdoc">Center size encoding scale height. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00726">Descriptors.hpp:726</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_descriptor_xhtml_a865dc4f43cb0ff01a1dcf78036912fd1"><div class="ttname"><a href="structarmnn_1_1_comparison_descriptor.xhtml#a865dc4f43cb0ff01a1dcf78036912fd1">armnn::ComparisonDescriptor::m_Operation</a></div><div class="ttdeci">ComparisonOperation m_Operation</div><div class="ttdoc">Specifies the comparison operation to execute. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00105">Descriptors.hpp:105</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_aa68194dd6258ab5b04123005a066ea25"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">armnn::StridedSliceDescriptor::m_End</a></div><div class="ttdeci">std::vector&lt; int &gt; m_End</div><div class="ttdoc">End values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01284">Descriptors.hpp:1284</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a></div><div class="ttdoc">A SpaceToBatchNdDescriptor for the SpaceToBatchNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00983">Descriptors.hpp:983</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Convolution3dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NDHWC, NCDHW). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00616">Descriptors.hpp:616</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml_afe1f0f09d49ad2befc01f8789187b7dd"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#afe1f0f09d49ad2befc01f8789187b7dd">armnn::NormalizationDescriptor::m_NormChannelType</a></div><div class="ttdeci">NormalizationAlgorithmChannel m_NormChannelType</div><div class="ttdoc">Normalization channel algorithm to use (Across, Within). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00754">Descriptors.hpp:754</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml_a3c1ab47a0a319413b3a4b5757ed5b80b"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml#a3c1ab47a0a319413b3a4b5757ed5b80b">armnn::ViewsDescriptor::GetViewSizes</a></div><div class="ttdeci">const uint32_t * GetViewSizes(uint32_t idx) const</div><div class="ttdoc">Get the view sizes at the int value idx. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00340">Descriptors.cpp:340</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaaed67cf7d54c570e4c4891800f085f41d"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaed67cf7d54c570e4c4891800f085f41d">armnn::ActivationFunction::Elu</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_ac81fb0e66dc623dc37c77f219f53a6d3"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#ac81fb0e66dc623dc37c77f219f53a6d3">armnn::QLstmDescriptor::m_CellClip</a></div><div class="ttdeci">float m_CellClip</div><div class="ttdoc">Clipping threshold value for the cell state. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01354">Descriptors.hpp:1354</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a017b2990003a014234f13e999dc7c689"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">armnn::ActivationDescriptor::m_A</a></div><div class="ttdeci">float m_A</div><div class="ttdoc">Alpha upper bound value used by the activation functions. (BoundedReLu, Linear, TanH, Elu). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00061">Descriptors.hpp:61</a></div></div>
<div class="ttc" id="structarmnn_1_1_fill_descriptor_xhtml_ab3ebc5cf4a617d43371a4cb7fecdeb32"><div class="ttname"><a href="structarmnn_1_1_fill_descriptor.xhtml#ab3ebc5cf4a617d43371a4cb7fecdeb32">armnn::FillDescriptor::m_Value</a></div><div class="ttdeci">float m_Value</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00901">Descriptors.hpp:901</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_aa3c6a77a963a98ccb8ea7b8fd008a8c1"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">armnn::Convolution2dDescriptor::m_DilationX</a></div><div class="ttdeci">uint32_t m_DilationX</div><div class="ttdoc">Dilation along x axis. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00539">Descriptors.hpp:539</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::SpaceToDepthDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01035">Descriptors.hpp:1035</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml_af22094b802160f09f7c89ad9eee10084"><div class="ttname"><a href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a></div><div class="ttdeci">arm::pipe::ProfilingGuid LayerGuid</div><div class="ttdoc">Define LayerGuid type. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00026">Types.hpp:26</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::LstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable cifg (coupled input &amp; forget gate). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01086">Descriptors.hpp:1086</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a550a83250b3ddebf15d5c13c224e3609"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a550a83250b3ddebf15d5c13c224e3609">armnnSerializer::ISerializerPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ISerializer, void(*)(ISerializer *serializer)&gt; ISerializerPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_serializer_8hpp_source.xhtml#l00015">ISerializer.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">armnn::LayerType::Rank</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::TransposeConvolution2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01409">Descriptors.hpp:1409</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a1c88cccaeb232c6fe8022c7006bb21bc"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a1c88cccaeb232c6fe8022c7006bb21bc">armnnSerializer::GetFlatBufferComparisonOperation</a></div><div class="ttdeci">armnnSerializer::ComparisonOperation GetFlatBufferComparisonOperation(armnn::ComparisonOperation comparisonOperation)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00011">SerializerUtils.cpp:11</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a93bca63ecbb003649425dd0e4ba79a99"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a93bca63ecbb003649425dd0e4ba79a99">armnn::LayerType::StandIn</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_ae1a4b3b6c60552509b89747cebb900a2"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#ae1a4b3b6c60552509b89747cebb900a2">armnn::ResizeDescriptor::m_AlignCorners</a></div><div class="ttdeci">bool m_AlignCorners</div><div class="ttdoc">Aligned corners. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00956">Descriptors.hpp:956</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4">armnn::LayerType::GatherNd</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::LayerType::Splitter</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::TransposeConvolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01417">Descriptors.hpp:1417</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_descriptor_xhtml_a35d11c7d509d1adbae1ae01c58394a7f"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml#a35d11c7d509d1adbae1ae01c58394a7f">armnn::GatherDescriptor::m_Axis</a></div><div class="ttdeci">int32_t m_Axis</div><div class="ttdoc">The axis in params to gather indices from. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00921">Descriptors.hpp:921</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a></div><div class="ttdoc">A ElementwiseUnaryDescriptor for the ElementwiseUnaryLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00109">Descriptors.hpp:109</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a0031997bf43bd2747656c31e4977793a"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">armnn::Pooling2dDescriptor::m_PoolType</a></div><div class="ttdeci">PoolingAlgorithm m_PoolType</div><div class="ttdoc">The pooling algorithm to use (Max. Average, L2). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00366">Descriptors.hpp:366</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::DepthwiseConvolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00663">Descriptors.hpp:663</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">armnn::LayerType::Shape</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4abbc155fb2b111bf61c4f5ff892915e6b"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abbc155fb2b111bf61c4f5ff892915e6b">armnn::LayerType::Switch</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::TransposeConvolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01419">Descriptors.hpp:1419</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Pooling3dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00436">Descriptors.hpp:436</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml_a3941f674c071c9503e00d2b59e92e454"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a3941f674c071c9503e00d2b59e92e454">armnn::BatchToSpaceNdDescriptor::m_Crops</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; m_Crops</div><div class="ttdoc">The values to crop from the input dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00861">Descriptors.hpp:861</a></div></div>
<div class="ttc" id="_descriptors_8hpp_xhtml"><div class="ttname"><a href="_descriptors_8hpp.xhtml">Descriptors.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Convolution3dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00594">Descriptors.hpp:594</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Pooling3dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00440">Descriptors.hpp:440</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::QLstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01362">Descriptors.hpp:1362</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae7e8cbf71db6a490789ca6dcaa8deeae"><div class="ttname"><a href="namespacearmnn.xhtml#ae7e8cbf71db6a490789ca6dcaa8deeae">armnn::ArgMinMaxFunction</a></div><div class="ttdeci">ArgMinMaxFunction</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00102">Types.hpp:102</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_affb5b68b3eba3ed45a06c7cde7781962"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#affb5b68b3eba3ed45a06c7cde7781962">armnn::Pooling2dDescriptor::m_OutputShapeRounding</a></div><div class="ttdeci">OutputShapeRounding m_OutputShapeRounding</div><div class="ttdoc">The rounding method for the output shape. (Floor, Ceiling). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00384">Descriptors.hpp:384</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a255a85366167a060a9e33ce2378f28a0"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a255a85366167a060a9e33ce2378f28a0">armnnSerializer::GetFlatBufferResizeMethod</a></div><div class="ttdeci">armnnSerializer::ResizeMethod GetFlatBufferResizeMethod(armnn::ResizeMethod method)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00214">SerializerUtils.cpp:214</a></div></div>
<div class="ttc" id="structarmnn_1_1_stand_in_descriptor_xhtml_aed6086070440ceb94129bef06f70173f"><div class="ttname"><a href="structarmnn_1_1_stand_in_descriptor.xhtml#aed6086070440ceb94129bef06f70173f">armnn::StandInDescriptor::m_NumInputs</a></div><div class="ttdeci">uint32_t m_NumInputs</div><div class="ttdoc">Number of input tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01237">Descriptors.hpp:1237</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">armnn::LayerType::QuantizedLstm</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::LayerType::ArgMinMax</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_a78e8266be865fdd92cadd04d6e25ae1f"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">armnn::OriginsDescriptor::GetNumDimensions</a></div><div class="ttdeci">uint32_t GetNumDimensions() const</div><div class="ttdoc">Get the number of dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00192">Descriptors.cpp:192</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="structarmnn_1_1_mean_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a></div><div class="ttdoc">A MeanDescriptor for the MeanLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01112">Descriptors.hpp:1112</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::LayerType::Lstm</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_input_slot_xhtml_a81fbf6103761e55061b62ba989b00f10"><div class="ttname"><a href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">armnn::IInputSlot::GetConnection</a></div><div class="ttdeci">virtual const IOutputSlot * GetConnection() const =0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a30eb1e8d2a9b090243c4ededa17746b7"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a30eb1e8d2a9b090243c4ededa17746b7">armnnSerializer::GetFlatBufferPaddingMethod</a></div><div class="ttdeci">armnnSerializer::PaddingMethod GetFlatBufferPaddingMethod(armnn::PaddingMethod paddingMethod)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00161">SerializerUtils.cpp:161</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a4a8ec49f130084445d44297549254780"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">armnn::LstmDescriptor::m_LayerNormEnabled</a></div><div class="ttdeci">bool m_LayerNormEnabled</div><div class="ttdoc">Enable/disable layer normalization. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01092">Descriptors.hpp:1092</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaaceb46ca115d05c51aa5a16a8867c3304"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaceb46ca115d05c51aa5a16a8867c3304">armnn::ActivationFunction::Square</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::TransposeConvolution2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01411">Descriptors.hpp:1411</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a></div><div class="ttdoc">A TransposeDescriptor for the TransposeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01430">Descriptors.hpp:1430</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a></div><div class="ttdoc">A StridedSliceDescriptor for the StridedSliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01243">Descriptors.hpp:1243</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a9943775a364fc4ab53b85ac88f311886"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">armnn::IOutputSlot::GetTensorInfo</a></div><div class="ttdeci">virtual const TensorInfo &amp; GetTensorInfo() const =0</div></div>
<div class="ttc" id="structarmnn_1_1_channel_shuffle_descriptor_xhtml_ab218de7805899c8412d75d1fd1d846d2"><div class="ttname"><a href="structarmnn_1_1_channel_shuffle_descriptor.xhtml#ab218de7805899c8412d75d1fd1d846d2">armnn::ChannelShuffleDescriptor::m_Axis</a></div><div class="ttdeci">uint32_t m_Axis</div><div class="ttdoc">Axis to apply channel shuffle operation on. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01513">Descriptors.hpp:1513</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LayerType::LogSoftmax</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_descriptor_xhtml_a214c3636fdf0ea5bac8edb42d0e6c7f0"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">armnn::ArgMinMaxDescriptor::m_Axis</a></div><div class="ttdeci">int m_Axis</div><div class="ttdoc">Axis to reduce across the input tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00083">Descriptors.hpp:83</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_afcc1c3a20bd2860e0ddd21674389246f"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#afcc1c3a20bd2860e0ddd21674389246f">armnn::IConnectableLayer::GetName</a></div><div class="ttdeci">virtual const char * GetName() const =0</div><div class="ttdoc">Returns the name of the layer. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::DataType::QSymmS8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::LayerType::DepthToSpace</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7a2156ec7d9c012ce00bbcc6afcb9028"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">armnn::DetectionPostProcessDescriptor::m_ScaleY</a></div><div class="ttdeci">float m_ScaleY</div><div class="ttdoc">Center size encoding scale y. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00722">Descriptors.hpp:722</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_a35546e7b56e6e972a495b48748478ede"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a35546e7b56e6e972a495b48748478ede">armnn::OriginsDescriptor::GetNumViews</a></div><div class="ttdeci">uint32_t GetNumViews() const</div><div class="ttdoc">Get the number of views. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00187">Descriptors.cpp:187</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a4392dd6b4862cc9cf95ae8f1001ba592"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">armnn::DetectionPostProcessDescriptor::m_NmsScoreThreshold</a></div><div class="ttdeci">float m_NmsScoreThreshold</div><div class="ttdoc">NMS score threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00712">Descriptors.hpp:712</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::LayerType::Minimum</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">armnn::LayerType::Fill</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ad0c3555b126975ad6b3e250fe2a59534"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ad0c3555b126975ad6b3e250fe2a59534">armnn::IOutputSlot::GetOwningLayerGuid</a></div><div class="ttdeci">virtual LayerGuid GetOwningLayerGuid() const =0</div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00332">Descriptors.hpp:332</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a></div><div class="ttdoc">A NormalizationDescriptor for the NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00730">Descriptors.hpp:730</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::LayerType::Transpose</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Pooling3dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00454">Descriptors.hpp:454</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::ResizeDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00954">Descriptors.hpp:954</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00674">Descriptors.hpp:674</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a></div><div class="ttdoc">An InstanceNormalizationDescriptor for InstanceNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00808">Descriptors.hpp:808</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml_a8c29d6ea9b4186d69aad5961c910939c"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">armnn::Pooling3dDescriptor::m_PaddingMethod</a></div><div class="ttdeci">PaddingMethod m_PaddingMethod</div><div class="ttdoc">The padding method to be used. (Exclude, IgnoreValue). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00462">Descriptors.hpp:462</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_a379929e3b277f1ef94f3ce645870589d"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a379929e3b277f1ef94f3ce645870589d">armnn::OriginsDescriptor::GetConcatAxis</a></div><div class="ttdeci">unsigned int GetConcatAxis() const</div><div class="ttdoc">Get the concatenation axis value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00162">Descriptors.cpp:162</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::PaddingMode::Constant</a></div></div>
<div class="ttc" id="structarmnn_1_1_channel_shuffle_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">armnn::ChannelShuffleDescriptor</a></div><div class="ttdoc">A ChannelShuffleDescriptor for the ChannelShuffle operator. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01495">Descriptors.hpp:1495</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">armnn::ActivationFunction::Linear</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa0877e5b3fbe9d7569df6399609ed0186"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa0877e5b3fbe9d7569df6399609ed0186">armnn::ActivationFunction::HardSwish</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a0477ee1b44ace6090119178eea78cb0b"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a0477ee1b44ace6090119178eea78cb0b">armnn::QLstmDescriptor::m_CellIntermediateScale</a></div><div class="ttdeci">float m_CellIntermediateScale</div><div class="ttdoc">Cell intermediate quantization scale. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01370">Descriptors.hpp:1370</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_a16543bce17aa2e4d6e81c88f74227192"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#a16543bce17aa2e4d6e81c88f74227192">armnn::Convolution3dDescriptor::m_DilationZ</a></div><div class="ttdeci">uint32_t m_DilationZ</div><div class="ttdoc">Dilation along z axis. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00612">Descriptors.hpp:612</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::LayerType::Slice</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::LayerType::Division</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a28c4c9cb15f6be3499abbc46b356060b"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">armnn::ActivationDescriptor::m_B</a></div><div class="ttdeci">float m_B</div><div class="ttdoc">Beta lower bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00063">Descriptors.hpp:63</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a></div><div class="ttdoc">A SoftmaxDescriptor for the SoftmaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00150">Descriptors.hpp:150</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml_a8275d51ef9a584feb95726ea0522f6e5"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">armnn::NormalizationDescriptor::m_Beta</a></div><div class="ttdeci">float m_Beta</div><div class="ttdoc">Beta value for the normalization equation. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00762">Descriptors.hpp:762</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_a5164336f6a1b15be0d434a6bbf7289da"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#a5164336f6a1b15be0d434a6bbf7289da">armnn::Convolution3dDescriptor::m_StrideZ</a></div><div class="ttdeci">uint32_t m_StrideZ</div><div class="ttdoc">Stride value when proceeding through input for the depth dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00606">Descriptors.hpp:606</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml_a88d7c8ef4baba3690a4d25eec350ecb3"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml#a88d7c8ef4baba3690a4d25eec350ecb3">armnn::ViewsDescriptor::GetOrigins</a></div><div class="ttdeci">const OriginsDescriptor &amp; GetOrigins() const</div><div class="ttdoc">Get the View Origins. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00345">Descriptors.cpp:345</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::QLstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable CIFG (coupled input &amp; forget gate). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01358">Descriptors.hpp:1358</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_descriptor_xhtml_a14433af2b223695b40d8c8f8ba2ebb8f"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">armnn::TransposeDescriptor::m_DimMappings</a></div><div class="ttdeci">PermutationVector m_DimMappings</div><div class="ttdoc">Indicates how to translate tensor elements from a given source into the target destination, when source and target potentially have different memory layouts e.g. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01447">Descriptors.hpp:1447</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml_aa70c05f1aad12fbd9d9ec43ea4557b03"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#aa70c05f1aad12fbd9d9ec43ea4557b03">armnn::NormalizationDescriptor::m_NormSize</a></div><div class="ttdeci">uint32_t m_NormSize</div><div class="ttdoc">Depth radius value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00758">Descriptors.hpp:758</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square, Elu). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00059">Descriptors.hpp:59</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_input_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_input_slot.xhtml">armnn::IInputSlot</a></div><div class="ttdoc">An input connection slot for a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00025">INetwork.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_ac2eceb2274af867d713fe44720fc2d4e"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#ac2eceb2274af867d713fe44720fc2d4e">armnnSerializer::GetFlatBufferPoolingAlgorithm</a></div><div class="ttdeci">armnnSerializer::PoolingAlgorithm GetFlatBufferPoolingAlgorithm(armnn::PoolingAlgorithm poolingAlgorithm)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_utils_8cpp_source.xhtml#l00135">SerializerUtils.cpp:135</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Pooling2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00382">Descriptors.hpp:382</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00620">Descriptors.hpp:620</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml_a302b688d88dd73cde0fb1faef6679907"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">armnn::Convolution3dDescriptor::m_DilationY</a></div><div class="ttdeci">uint32_t m_DilationY</div><div class="ttdoc">Dilation along y axis. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00610">Descriptors.hpp:610</a></div></div>
<div class="ttc" id="structarmnn_1_1_fill_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fill_descriptor.xhtml">armnn::FillDescriptor</a></div><div class="ttdoc">A FillDescriptor for the FillLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00886">Descriptors.hpp:886</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a></div><div class="ttdoc">A BatchNormalizationDescriptor for the BatchNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00789">Descriptors.hpp:789</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Convolution2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00527">Descriptors.hpp:527</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::BaseTensor::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00302">Tensor.hpp:302</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9ea"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9ea">armnn::ActivationFunction</a></div><div class="ttdeci">ActivationFunction</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00086">Types.hpp:86</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae7e8cbf71db6a490789ca6dcaa8deeaea78d811e98514cd165dda532286610fd2"><div class="ttname"><a href="namespacearmnn.xhtml#ae7e8cbf71db6a490789ca6dcaa8deeaea78d811e98514cd165dda532286610fd2">armnn::ArgMinMaxFunction::Min</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a></div><div class="ttdoc">A PermuteDescriptor for the PermuteLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00129">Descriptors.hpp:129</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">armnn::LayerType</a></div><div class="ttdeci">LayerType</div><div class="ttdoc">When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below...</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00468">Types.hpp:468</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::DepthwiseConvolution2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00655">Descriptors.hpp:655</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a4556cbd764d4848d8ad0637a9eed580d"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4556cbd764d4848d8ad0637a9eed580d">armnn::QLstmDescriptor::m_HiddenStateZeroPoint</a></div><div class="ttdeci">int32_t m_HiddenStateZeroPoint</div><div class="ttdoc">Hidden State zero point. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01374">Descriptors.hpp:1374</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">armnn::ActivationFunction::TanH</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::LayerType::QLstm</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml_a2d3dcfc10f90adedc995b64211dab6e9"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#a2d3dcfc10f90adedc995b64211dab6e9">armnn::FullyConnectedDescriptor::m_ConstantWeights</a></div><div class="ttdeci">bool m_ConstantWeights</div><div class="ttdoc">Enable/disable constant weights and biases. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00491">Descriptors.hpp:491</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bff0d59bec81fb3d13742442d8f4421d.xhtml">armnnSerializer</a></li><li class="navelem"><a class="el" href="_serializer_8cpp.xhtml">Serializer.cpp</a></li>
    <li class="footer">Generated on Wed Nov 23 2022 10:57:37 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
