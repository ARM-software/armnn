<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: YoloTestCase&lt; Model &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('class_yolo_test_case.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_yolo_test_case-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">YoloTestCase&lt; Model &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_yolo_inference_test_8hpp_source.xhtml">YoloInferenceTest.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for YoloTestCase&lt; Model &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_yolo_test_case.png" usemap="#YoloTestCase_3C_20Model_20_3E_map" alt=""/>
  <map id="YoloTestCase_3C_20Model_20_3E_map" name="YoloTestCase_3C_20Model_20_3E_map">
<area href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml" alt="InferenceModelTestCase&lt; Model &gt;" shape="rect" coords="0,56,212,80"/>
<area href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml" alt="IInferenceTestCase" shape="rect" coords="0,0,212,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa09e1baeedec8ca7cb0bc74a29b6c73e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_yolo_test_case.xhtml#aa09e1baeedec8ca7cb0bc74a29b6c73e">YoloTestCase</a> (Model &amp;model, unsigned int testCaseId, <a class="el" href="class_yolo_test_case_data.xhtml">YoloTestCaseData</a> &amp;testCaseData)</td></tr>
<tr class="separator:aa09e1baeedec8ca7cb0bc74a29b6c73e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cbd09fbd9175f9101a7b43bb9c48e68"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">TestCaseResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_yolo_test_case.xhtml#a5cbd09fbd9175f9101a7b43bb9c48e68">ProcessResult</a> (const <a class="el" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a> &amp;options) override</td></tr>
<tr class="separator:a5cbd09fbd9175f9101a7b43bb9c48e68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1test_1_1_inference_model_test_case"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1test_1_1_inference_model_test_case')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">InferenceModelTestCase&lt; Model &gt;</a></td></tr>
<tr class="memitem:a998ab91a5a2470d078896ac32229eff8 inherit pub_methods_classarmnn_1_1test_1_1_inference_model_test_case"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a998ab91a5a2470d078896ac32229eff8">InferenceModelTestCase</a> (Model &amp;model, unsigned int testCaseId, const std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;inputs, const std::vector&lt; unsigned int &gt; &amp;outputSizes)</td></tr>
<tr class="separator:a998ab91a5a2470d078896ac32229eff8 inherit pub_methods_classarmnn_1_1test_1_1_inference_model_test_case"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa257380f53ef27922dda47c7e41bba88 inherit pub_methods_classarmnn_1_1test_1_1_inference_model_test_case"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#aa257380f53ef27922dda47c7e41bba88">Run</a> () override</td></tr>
<tr class="separator:aa257380f53ef27922dda47c7e41bba88 inherit pub_methods_classarmnn_1_1test_1_1_inference_model_test_case"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1test_1_1_i_inference_test_case"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1test_1_1_i_inference_test_case')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml">IInferenceTestCase</a></td></tr>
<tr class="memitem:a99e369e14a0ce3322d3fd5520b819ab3 inherit pub_methods_classarmnn_1_1test_1_1_i_inference_test_case"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml#a99e369e14a0ce3322d3fd5520b819ab3">~IInferenceTestCase</a> ()</td></tr>
<tr class="separator:a99e369e14a0ce3322d3fd5520b819ab3 inherit pub_methods_classarmnn_1_1test_1_1_i_inference_test_case"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1test_1_1_inference_model_test_case"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1test_1_1_inference_model_test_case')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">InferenceModelTestCase&lt; Model &gt;</a></td></tr>
<tr class="memitem:a4ab19ef735b92c4d4f688f0659e5565e inherit pro_methods_classarmnn_1_1test_1_1_inference_model_test_case"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a4ab19ef735b92c4d4f688f0659e5565e">GetTestCaseId</a> () const</td></tr>
<tr class="separator:a4ab19ef735b92c4d4f688f0659e5565e inherit pro_methods_classarmnn_1_1test_1_1_inference_model_test_case"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0e1b0a762f51bb13f98060927214629 inherit pro_methods_classarmnn_1_1test_1_1_inference_model_test_case"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#ab0e1b0a762f51bb13f98060927214629">GetOutputs</a> () const</td></tr>
<tr class="separator:ab0e1b0a762f51bb13f98060927214629 inherit pro_methods_classarmnn_1_1test_1_1_inference_model_test_case"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename Model&gt;<br />
class YoloTestCase&lt; Model &gt;</h3>


<p class="definition">Definition at line <a class="el" href="_yolo_inference_test_8hpp_source.xhtml#l00021">21</a> of file <a class="el" href="_yolo_inference_test_8hpp_source.xhtml">YoloInferenceTest.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aa09e1baeedec8ca7cb0bc74a29b6c73e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa09e1baeedec8ca7cb0bc74a29b6c73e">&#9670;&nbsp;</a></span>YoloTestCase()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_yolo_test_case.xhtml">YoloTestCase</a> </td>
          <td>(</td>
          <td class="paramtype">Model &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>testCaseId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_yolo_test_case_data.xhtml">YoloTestCaseData</a> &amp;&#160;</td>
          <td class="paramname"><em>testCaseData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_yolo_inference_test_8hpp_source.xhtml#l00024">24</a> of file <a class="el" href="_yolo_inference_test_8hpp_source.xhtml">YoloInferenceTest.hpp</a>.</p>

<p class="reference">References <a class="el" href="_yolo_database_8hpp_source.xhtml#l00046">YoloTestCaseData::m_InputImage</a>, and <a class="el" href="_yolo_inference_test_8hpp_source.xhtml#l00018">YoloOutputSize</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;     : <a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">InferenceModelTestCase&lt;Model&gt;</a>(model, testCaseId, { std::move(testCaseData.<a class="code" href="class_yolo_test_case_data.xhtml#a8a846d71b79227a5eb6baf5c9bc7d074">m_InputImage</a>) }, { <a class="code" href="_yolo_inference_test_8hpp.xhtml#a754a9eb5465f7cb3e1de27b4ce10123d">YoloOutputSize</a> })</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;     , m_TopObjectDetections(std::move(testCaseData.<a class="code" href="class_yolo_test_case_data.xhtml#aa212bca38289ebfb131f1af81b604b50">m_TopObjectDetections</a>))</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div><div class="ttc" id="_yolo_inference_test_8hpp_xhtml_a754a9eb5465f7cb3e1de27b4ce10123d"><div class="ttname"><a href="_yolo_inference_test_8hpp.xhtml#a754a9eb5465f7cb3e1de27b4ce10123d">YoloOutputSize</a></div><div class="ttdeci">constexpr size_t YoloOutputSize</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_inference_test_8hpp_source.xhtml#l00018">YoloInferenceTest.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_inference_model_test_case_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">armnn::test::InferenceModelTestCase&lt; Model &gt;</a></div></div>
<div class="ttc" id="class_yolo_test_case_data_xhtml_a8a846d71b79227a5eb6baf5c9bc7d074"><div class="ttname"><a href="class_yolo_test_case_data.xhtml#a8a846d71b79227a5eb6baf5c9bc7d074">YoloTestCaseData::m_InputImage</a></div><div class="ttdeci">std::vector&lt; float &gt; m_InputImage</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00046">YoloDatabase.hpp:46</a></div></div>
<div class="ttc" id="class_yolo_test_case_data_xhtml_aa212bca38289ebfb131f1af81b604b50"><div class="ttname"><a href="class_yolo_test_case_data.xhtml#aa212bca38289ebfb131f1af81b604b50">YoloTestCaseData::m_TopObjectDetections</a></div><div class="ttdeci">std::vector&lt; YoloDetectedObject &gt; m_TopObjectDetections</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00047">YoloDatabase.hpp:47</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a5cbd09fbd9175f9101a7b43bb9c48e68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5cbd09fbd9175f9101a7b43bb9c48e68">&#9670;&nbsp;</a></span>ProcessResult()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">TestCaseResult</a> ProcessResult </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>options</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml#a1b6e7a22d06d146f1da514a186dcdc02">IInferenceTestCase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_yolo_inference_test_8hpp_source.xhtml#l00032">32</a> of file <a class="el" href="_yolo_inference_test_8hpp_source.xhtml">YoloInferenceTest.hpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_inference_test_8hpp_source.xhtml#l00141">InferenceModelTestCase&lt; Model &gt;::GetOutputs()</a>, <a class="el" href="_inference_test_8hpp_source.xhtml#l00140">InferenceModelTestCase&lt; Model &gt;::GetTestCaseId()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_yolo_database_8hpp_source.xhtml#l00032">YoloDetectedObject::m_Box</a>, <a class="el" href="_yolo_database_8hpp_source.xhtml#l00031">YoloDetectedObject::m_Class</a>, <a class="el" href="_yolo_database_8hpp_source.xhtml#l00033">YoloDetectedObject::m_Confidence</a>, <a class="el" href="_yolo_database_8hpp_source.xhtml#l00018">YoloBoundingBox::m_H</a>, <a class="el" href="_yolo_database_8hpp_source.xhtml#l00017">YoloBoundingBox::m_W</a>, <a class="el" href="_yolo_database_8hpp_source.xhtml#l00015">YoloBoundingBox::m_X</a>, <a class="el" href="_yolo_database_8hpp_source.xhtml#l00016">YoloBoundingBox::m_Y</a>, <a class="el" href="_floating_point_comparison_8hpp_source.xhtml#l00020">armnnUtils::within_percentage_tolerance()</a>, <a class="el" href="_yolo_database_8hpp_source.xhtml#l00051">YoloImageHeight</a>, <a class="el" href="_yolo_database_8hpp_source.xhtml#l00050">YoloImageWidth</a>, and <a class="el" href="_yolo_inference_test_8hpp_source.xhtml#l00018">YoloOutputSize</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(options);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keyword">const</span> std::vector&lt;float&gt;&amp; output = mapbox::util::get&lt;std::vector&lt;float&gt;&gt;(this-&gt;<a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#ab0e1b0a762f51bb13f98060927214629">GetOutputs</a>()[0]);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(output.size() == <a class="code" href="_yolo_inference_test_8hpp.xhtml#a754a9eb5465f7cb3e1de27b4ce10123d">YoloOutputSize</a>);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> gridSize = 7;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numClasses = 20;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numScales = 2;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span>* outputPtr =  output.data();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="comment">// Range 0-980. Class probabilities. 7x7x20</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        vector&lt;vector&lt;vector&lt;float&gt;&gt;&gt; classProbabilities(gridSize, vector&lt;vector&lt;float&gt;&gt;(gridSize,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                                         vector&lt;float&gt;(numClasses)));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y = 0; y &lt; gridSize; ++y)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x = 0; x &lt; gridSize; ++x)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; numClasses; ++c)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                    classProbabilities[y][x][c] = *outputPtr++;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="comment">// Range 980-1078. Scales. 7x7x2</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        vector&lt;vector&lt;vector&lt;float&gt;&gt;&gt; scales(gridSize, vector&lt;vector&lt;float&gt;&gt;(gridSize, vector&lt;float&gt;(numScales)));</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y = 0; y &lt; gridSize; ++y)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x = 0; x &lt; gridSize; ++x)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> s = 0; s &lt; numScales; ++s)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                    scales[y][x][s] = *outputPtr++;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="comment">// Range 1078-1469. Bounding boxes. 7x7x2x4</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        constexpr <span class="keywordtype">float</span> imageWidthAsFloat = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(<a class="code" href="_yolo_database_8hpp.xhtml#a88c3339d57718f167a374ab572610ba8">YoloImageWidth</a>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        constexpr <span class="keywordtype">float</span> imageHeightAsFloat = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(<a class="code" href="_yolo_database_8hpp.xhtml#af74f4ad1b33fe68237cb97c9345e9e87">YoloImageHeight</a>);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        vector&lt;vector&lt;vector&lt;vector&lt;float&gt;&gt;&gt;&gt; boxes(gridSize, vector&lt;vector&lt;vector&lt;float&gt;&gt;&gt;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            (gridSize, vector&lt;vector&lt;float&gt;&gt;(numScales, vector&lt;float&gt;(4))));</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y = 0; y &lt; gridSize; ++y)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x = 0; x &lt; gridSize; ++x)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> s = 0; s &lt; numScales; ++s)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    <span class="keywordtype">float</span> bx = *outputPtr++;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <span class="keywordtype">float</span> by = *outputPtr++;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keywordtype">float</span> bw = *outputPtr++;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    <span class="keywordtype">float</span> bh = *outputPtr++;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    boxes[y][x][s][0] = ((bx + <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(x)) / 7.0f) * imageWidthAsFloat;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    boxes[y][x][s][1] = ((by + <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(y)) / 7.0f) * imageHeightAsFloat;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    boxes[y][x][s][2] = bw * bw * <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(imageWidthAsFloat);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    boxes[y][x][s][3] = bh * bh * <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(imageHeightAsFloat);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(output.data() + <a class="code" href="_yolo_inference_test_8hpp.xhtml#a754a9eb5465f7cb3e1de27b4ce10123d">YoloOutputSize</a> == outputPtr);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        std::vector&lt;YoloDetectedObject&gt; detectedObjects;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        detectedObjects.reserve(gridSize * gridSize * numScales * numClasses);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y = 0; y &lt; gridSize; ++y)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x = 0; x &lt; gridSize; ++x)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> s = 0; s &lt; numScales; ++s)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; numClasses; ++c)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        <span class="comment">// Resolved confidence: class probabilities * scales.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> confidence = classProbabilities[y][x][c] * scales[y][x][s];</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                        <span class="comment">// Resolves bounding box and stores.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                        <a class="code" href="struct_yolo_bounding_box.xhtml">YoloBoundingBox</a> box;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        box.<a class="code" href="struct_yolo_bounding_box.xhtml#ad89841ac3480fc147a3b4c97343eadfc">m_X</a> = boxes[y][x][s][0];</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                        box.<a class="code" href="struct_yolo_bounding_box.xhtml#a6360e12f495c81e6390fca7c39983676">m_Y</a> = boxes[y][x][s][1];</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                        box.<a class="code" href="struct_yolo_bounding_box.xhtml#ac669fea3ed7b049e3e696f509d71c910">m_W</a> = boxes[y][x][s][2];</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                        box.<a class="code" href="struct_yolo_bounding_box.xhtml#a314839b30ea12b6fa351ebf4be5d8221">m_H</a> = boxes[y][x][s][3];</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                        detectedObjects.emplace_back(c, box, confidence);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="comment">// Sorts detected objects by confidence.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        std::sort(detectedObjects.begin(), detectedObjects.end(),</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            [](<span class="keyword">const</span> <a class="code" href="struct_yolo_detected_object.xhtml">YoloDetectedObject</a>&amp; a, <span class="keyword">const</span> <a class="code" href="struct_yolo_detected_object.xhtml">YoloDetectedObject</a>&amp; b)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="comment">// Sorts by largest confidence first, then by class.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keywordflow">return</span> a.<a class="code" href="struct_yolo_detected_object.xhtml#a2eb9b5a8cccfba5e0db706d9d9631375">m_Confidence</a> &gt; b.m_Confidence</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    || (a.<a class="code" href="struct_yolo_detected_object.xhtml#a2eb9b5a8cccfba5e0db706d9d9631375">m_Confidence</a> == b.m_Confidence &amp;&amp; a.<a class="code" href="struct_yolo_detected_object.xhtml#a80722ddbfd9312e7abb6a707df0798f2">m_Class</a> &gt; b.m_Class);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            });</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">// Checks the top N detections.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keyword">auto</span> outputIt  = detectedObjects.begin();</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keyword">auto</span> outputEnd = detectedObjects.end();</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="struct_yolo_detected_object.xhtml">YoloDetectedObject</a>&amp; expectedDetection : m_TopObjectDetections)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordflow">if</span> (outputIt == outputEnd)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="comment">// Somehow expected more things to check than detections found by the model.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keywordflow">return</span> TestCaseResult::Abort;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keyword">const</span> <a class="code" href="struct_yolo_detected_object.xhtml">YoloDetectedObject</a>&amp; detectedObject = *outputIt;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">if</span> (detectedObject.<a class="code" href="struct_yolo_detected_object.xhtml#a80722ddbfd9312e7abb6a707df0798f2">m_Class</a> != expectedDetection.m_Class)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Prediction for test case &quot;</span> &lt;&lt; this-&gt;<a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a4ab19ef735b92c4d4f688f0659e5565e">GetTestCaseId</a>() &lt;&lt;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="stringliteral">&quot; is incorrect: Expected (&quot;</span> &lt;&lt; expectedDetection.m_Class &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    <span class="stringliteral">&quot; but predicted (&quot;</span> &lt;&lt; detectedObject.<a class="code" href="struct_yolo_detected_object.xhtml#a80722ddbfd9312e7abb6a707df0798f2">m_Class</a> &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keywordflow">return</span> TestCaseResult::Failed;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_utils.xhtml#a56b0e17341e000fa1d4561890294520c">armnnUtils::within_percentage_tolerance</a>(detectedObject.<a class="code" href="struct_yolo_detected_object.xhtml#a16c213c3cb6176f80486425a4b2ab758">m_Box</a>.<a class="code" href="struct_yolo_bounding_box.xhtml#ad89841ac3480fc147a3b4c97343eadfc">m_X</a>, expectedDetection.m_Box.m_X) ||</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                !<a class="code" href="namespacearmnn_utils.xhtml#a56b0e17341e000fa1d4561890294520c">armnnUtils::within_percentage_tolerance</a>(detectedObject.<a class="code" href="struct_yolo_detected_object.xhtml#a16c213c3cb6176f80486425a4b2ab758">m_Box</a>.<a class="code" href="struct_yolo_bounding_box.xhtml#a6360e12f495c81e6390fca7c39983676">m_Y</a>, expectedDetection.m_Box.m_Y) ||</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                !<a class="code" href="namespacearmnn_utils.xhtml#a56b0e17341e000fa1d4561890294520c">armnnUtils::within_percentage_tolerance</a>(detectedObject.<a class="code" href="struct_yolo_detected_object.xhtml#a16c213c3cb6176f80486425a4b2ab758">m_Box</a>.<a class="code" href="struct_yolo_bounding_box.xhtml#ac669fea3ed7b049e3e696f509d71c910">m_W</a>, expectedDetection.m_Box.m_W) ||</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                !<a class="code" href="namespacearmnn_utils.xhtml#a56b0e17341e000fa1d4561890294520c">armnnUtils::within_percentage_tolerance</a>(detectedObject.<a class="code" href="struct_yolo_detected_object.xhtml#a16c213c3cb6176f80486425a4b2ab758">m_Box</a>.<a class="code" href="struct_yolo_bounding_box.xhtml#a314839b30ea12b6fa351ebf4be5d8221">m_H</a>, expectedDetection.m_Box.m_H) ||</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                !<a class="code" href="namespacearmnn_utils.xhtml#a56b0e17341e000fa1d4561890294520c">armnnUtils::within_percentage_tolerance</a>(detectedObject.<a class="code" href="struct_yolo_detected_object.xhtml#a2eb9b5a8cccfba5e0db706d9d9631375">m_Confidence</a>, expectedDetection.m_Confidence))</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Detected bounding box for test case &quot;</span> &lt;&lt; this-&gt;<a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a4ab19ef735b92c4d4f688f0659e5565e">GetTestCaseId</a>() &lt;&lt;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    <span class="stringliteral">&quot; is incorrect&quot;</span>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keywordflow">return</span> TestCaseResult::Failed;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            ++outputIt;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">return</span> TestCaseResult::Ok;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="ttc" id="_yolo_database_8hpp_xhtml_af74f4ad1b33fe68237cb97c9345e9e87"><div class="ttname"><a href="_yolo_database_8hpp.xhtml#af74f4ad1b33fe68237cb97c9345e9e87">YoloImageHeight</a></div><div class="ttdeci">constexpr unsigned int YoloImageHeight</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00051">YoloDatabase.hpp:51</a></div></div>
<div class="ttc" id="struct_yolo_bounding_box_xhtml"><div class="ttname"><a href="struct_yolo_bounding_box.xhtml">YoloBoundingBox</a></div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00013">YoloDatabase.hpp:13</a></div></div>
<div class="ttc" id="struct_yolo_detected_object_xhtml"><div class="ttname"><a href="struct_yolo_detected_object.xhtml">YoloDetectedObject</a></div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00021">YoloDatabase.hpp:21</a></div></div>
<div class="ttc" id="struct_yolo_bounding_box_xhtml_a314839b30ea12b6fa351ebf4be5d8221"><div class="ttname"><a href="struct_yolo_bounding_box.xhtml#a314839b30ea12b6fa351ebf4be5d8221">YoloBoundingBox::m_H</a></div><div class="ttdeci">float m_H</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00018">YoloDatabase.hpp:18</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="struct_yolo_detected_object_xhtml_a16c213c3cb6176f80486425a4b2ab758"><div class="ttname"><a href="struct_yolo_detected_object.xhtml#a16c213c3cb6176f80486425a4b2ab758">YoloDetectedObject::m_Box</a></div><div class="ttdeci">YoloBoundingBox m_Box</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00032">YoloDatabase.hpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_inference_model_test_case_xhtml_ab0e1b0a762f51bb13f98060927214629"><div class="ttname"><a href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#ab0e1b0a762f51bb13f98060927214629">armnn::test::InferenceModelTestCase&lt; Model &gt;::GetOutputs</a></div><div class="ttdeci">const std::vector&lt; armnnUtils::TContainer &gt; &amp; GetOutputs() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00141">InferenceTest.hpp:141</a></div></div>
<div class="ttc" id="struct_yolo_bounding_box_xhtml_a6360e12f495c81e6390fca7c39983676"><div class="ttname"><a href="struct_yolo_bounding_box.xhtml#a6360e12f495c81e6390fca7c39983676">YoloBoundingBox::m_Y</a></div><div class="ttdeci">float m_Y</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00016">YoloDatabase.hpp:16</a></div></div>
<div class="ttc" id="struct_yolo_bounding_box_xhtml_ad89841ac3480fc147a3b4c97343eadfc"><div class="ttname"><a href="struct_yolo_bounding_box.xhtml#ad89841ac3480fc147a3b4c97343eadfc">YoloBoundingBox::m_X</a></div><div class="ttdeci">float m_X</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00015">YoloDatabase.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_inference_model_test_case_xhtml_a4ab19ef735b92c4d4f688f0659e5565e"><div class="ttname"><a href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a4ab19ef735b92c4d4f688f0659e5565e">armnn::test::InferenceModelTestCase&lt; Model &gt;::GetTestCaseId</a></div><div class="ttdeci">unsigned int GetTestCaseId() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00140">InferenceTest.hpp:140</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="struct_yolo_detected_object_xhtml_a2eb9b5a8cccfba5e0db706d9d9631375"><div class="ttname"><a href="struct_yolo_detected_object.xhtml#a2eb9b5a8cccfba5e0db706d9d9631375">YoloDetectedObject::m_Confidence</a></div><div class="ttdeci">float m_Confidence</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00033">YoloDatabase.hpp:33</a></div></div>
<div class="ttc" id="_yolo_inference_test_8hpp_xhtml_a754a9eb5465f7cb3e1de27b4ce10123d"><div class="ttname"><a href="_yolo_inference_test_8hpp.xhtml#a754a9eb5465f7cb3e1de27b4ce10123d">YoloOutputSize</a></div><div class="ttdeci">constexpr size_t YoloOutputSize</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_inference_test_8hpp_source.xhtml#l00018">YoloInferenceTest.hpp:18</a></div></div>
<div class="ttc" id="_yolo_database_8hpp_xhtml_a88c3339d57718f167a374ab572610ba8"><div class="ttname"><a href="_yolo_database_8hpp.xhtml#a88c3339d57718f167a374ab572610ba8">YoloImageWidth</a></div><div class="ttdeci">constexpr unsigned int YoloImageWidth</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00050">YoloDatabase.hpp:50</a></div></div>
<div class="ttc" id="struct_yolo_detected_object_xhtml_a80722ddbfd9312e7abb6a707df0798f2"><div class="ttname"><a href="struct_yolo_detected_object.xhtml#a80722ddbfd9312e7abb6a707df0798f2">YoloDetectedObject::m_Class</a></div><div class="ttdeci">unsigned int m_Class</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00031">YoloDatabase.hpp:31</a></div></div>
<div class="ttc" id="struct_yolo_bounding_box_xhtml_ac669fea3ed7b049e3e696f509d71c910"><div class="ttname"><a href="struct_yolo_bounding_box.xhtml#ac669fea3ed7b049e3e696f509d71c910">YoloBoundingBox::m_W</a></div><div class="ttdeci">float m_W</div><div class="ttdef"><b>Definition:</b> <a href="_yolo_database_8hpp_source.xhtml#l00017">YoloDatabase.hpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a56b0e17341e000fa1d4561890294520c"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a56b0e17341e000fa1d4561890294520c">armnnUtils::within_percentage_tolerance</a></div><div class="ttdeci">bool within_percentage_tolerance(float a, float b, float tolerancePercent=1.0f)</div><div class="ttdoc">Compare two floats and return true if their values are within a specified tolerance of each other...</div><div class="ttdef"><b>Definition:</b> <a href="_floating_point_comparison_8hpp_source.xhtml#l00020">FloatingPointComparison.hpp:20</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>tests/<a class="el" href="_yolo_inference_test_8hpp_source.xhtml">YoloInferenceTest.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="class_yolo_test_case.xhtml">YoloTestCase</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:13 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
