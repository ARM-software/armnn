<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/UtilsTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_utils_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">UtilsTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;doctest/doctest.h&gt;</code><br />
<code>#include &lt;<a class="el" href="_backend_helper_8hpp_source.xhtml">armnn/BackendHelper.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_utils_8hpp_source.xhtml">armnn/Utils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_types_8hpp_source.xhtml">armnn/Types.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_types_utils_8hpp_source.xhtml">armnn/TypesUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_descriptors_8hpp_source.xhtml">armnn/Descriptors.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_permute_8hpp_source.xhtml">armnnUtils/Permute.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_graph_topological_sort_8hpp_source.xhtml">GraphTopologicalSort.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_graph_8hpp_source.xhtml">Graph.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&gt;</code><br />
</div>
<p><a href="_utils_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a53c5c5dfdb0e92ee0df604cf26ded36b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_utils_tests_8cpp.xhtml#a53c5c5dfdb0e92ee0df604cf26ded36b">TEST_SUITE</a> (&quot;Utils&quot;)</td></tr>
<tr class="separator:a53c5c5dfdb0e92ee0df604cf26ded36b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a53c5c5dfdb0e92ee0df604cf26ded36b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53c5c5dfdb0e92ee0df604cf26ded36b">&#9670;&nbsp;</a></span>TEST_SUITE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TEST_SUITE </td>
          <td>(</td>
          <td class="paramtype">&quot;Utils&quot;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_utils_tests_8cpp_source.xhtml#l00018">18</a> of file <a class="el" href="_utils_tests_8cpp_source.xhtml">UtilsTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_types_8hpp_source.xhtml#l00327">PermutationVector::begin()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::BFloat16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::Boolean</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::Float16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_b_float16_8hpp_source.xhtml#l00051">BFloat16::Float32ToBFloat16()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00202">armnn::GetDataTypeName()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00151">armnn::GetDataTypeSize()</a>, <a class="el" href="_backend_helper_8cpp_source.xhtml#l00016">armnn::GetILayerSupportByBackendId()</a>, <a class="el" href="_b_float16_8hpp_source.xhtml#l00112">BFloat16::Inf()</a>, <a class="el" href="_b_float16_8hpp_source.xhtml#l00106">BFloat16::Nan()</a>, <a class="el" href="_permute_8cpp_source.xhtml#l00098">armnnUtils::Permuted()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, <a class="el" href="_b_float16_8hpp_source.xhtml#l00086">BFloat16::ToFloat32()</a>, and <a class="el" href="_b_float16_8hpp_source.xhtml#l00095">BFloat16::Val()</a>.</p>
<div class="fragment"><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;TEST_CASE(<span class="stringliteral">&quot;DataTypeSize&quot;</span>)</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    CHECK(<a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">armnn::GetDataTypeSize</a>(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>) == 4);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    CHECK(<a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">armnn::GetDataTypeSize</a>(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>) == 1);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    CHECK(<a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">armnn::GetDataTypeSize</a>(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>) == 4);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    CHECK(<a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">armnn::GetDataTypeSize</a>(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a>) == 1);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;}</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PermuteDescriptorWithTooManyMappings&quot;</span>)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    CHECK_THROWS_AS(<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a>({ 0u, 1u, 2u, 3u, 4u, 5u }), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PermuteDescriptorWithInvalidMappings1d&quot;</span>)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    CHECK_THROWS_AS(<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a>({ 1u }), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PermuteDescriptorWithInvalidMappings2d&quot;</span>)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    CHECK_THROWS_AS(<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a>({ 2u, 0u }), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PermuteDescriptorWithInvalidMappings3d&quot;</span>)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    CHECK_THROWS_AS(<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a>({ 0u, 3u, 1u }), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PermuteDescriptorWithInvalidMappings4d&quot;</span>)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    CHECK_THROWS_AS(<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a>({ 0u, 1u, 2u, 4u }), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PermuteDescriptorWithInvalidMappings5d&quot;</span>)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    CHECK_THROWS_AS(<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a>({ 0u, 1u, 2u, 3u, 5u }), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PermuteDescriptorWithDuplicatedMappings&quot;</span>)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    CHECK_THROWS_AS(<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a>({ 1u, 1u, 0u }), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;TEST_CASE(<span class="stringliteral">&quot;HalfType&quot;</span>)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">using namespace </span>half_float::literal;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a> a = 1.0_h;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">float</span> b = 1.0f;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a> c(b);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// Test half type</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    CHECK_EQ(a, b);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    CHECK_EQ(<span class="keyword">sizeof</span>(c), 2);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// Test half type is floating point type</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    CHECK(std::is_floating_point&lt;armnn::Half&gt;::value);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// Test utility function returns correct type.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">using</span> ResolvedType = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnn::DataType::Float16&gt;</a>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    constexpr <span class="keywordtype">bool</span> isHalfType = std::is_same&lt;armnn::Half, ResolvedType&gt;::value;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    CHECK(isHalfType);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">//Test utility functions return correct size</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    CHECK(<a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">GetDataTypeSize</a>(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>) == 2);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">//Test utility functions return correct name</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    CHECK((<a class="code" href="namespacearmnn.xhtml#a81b5ff8545adad19a1c9d4ca076d552c">GetDataTypeName</a>(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>) == std::string(<span class="stringliteral">&quot;Float16&quot;</span>)));</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;TEST_CASE(<span class="stringliteral">&quot;BFloatType&quot;</span>)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    uint16_t v = 16256;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> a(v);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> b(1.0f);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> zero;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Test BFloat16 type</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    CHECK_EQ(<span class="keyword">sizeof</span>(a), 2);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    CHECK_EQ(a, b);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    CHECK_EQ(a.Val(), v);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    CHECK_EQ(a, 1.0f);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    CHECK_EQ(zero, 0.0f);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">// Infinity</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">float</span> infFloat = std::numeric_limits&lt;float&gt;::infinity();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> infBF(infFloat);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    CHECK_EQ(infBF, <a class="code" href="classarmnn_1_1_b_float16.xhtml#ae5b250d59f169e00a39ad3ec787db22a">armnn::BFloat16::Inf</a>());</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// NaN</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">float</span> nan = std::numeric_limits&lt;float&gt;::quiet_NaN();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> nanBF(nan);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    CHECK_EQ(nanBF, <a class="code" href="classarmnn_1_1_b_float16.xhtml#ae80b11dd8875fbf6e76cb054764ca6fb">armnn::BFloat16::Nan</a>());</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Test utility function returns correct type.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">using</span> ResolvedType = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnn::DataType::BFloat16&gt;</a>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    constexpr <span class="keywordtype">bool</span> isBFloat16Type = std::is_same&lt;armnn::BFloat16, ResolvedType&gt;::value;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    CHECK(isBFloat16Type);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">//Test utility functions return correct size</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    CHECK(<a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">GetDataTypeSize</a>(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::DataType::BFloat16</a>) == 2);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">//Test utility functions return correct name</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    CHECK((<a class="code" href="namespacearmnn.xhtml#a81b5ff8545adad19a1c9d4ca076d552c">GetDataTypeName</a>(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::DataType::BFloat16</a>) == std::string(<span class="stringliteral">&quot;BFloat16&quot;</span>)));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;TEST_CASE(<span class="stringliteral">&quot;Float32ToBFloat16Test&quot;</span>)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// LSB = 0, R = 0 -&gt; round down</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> roundDown0 = <a class="code" href="classarmnn_1_1_b_float16.xhtml#a3ff08d61c8f7403c9f790e2b96d91a9d">armnn::BFloat16::Float32ToBFloat16</a>(1.704735E38f); <span class="comment">// 0x7F004000</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    CHECK_EQ(roundDown0.<a class="code" href="classarmnn_1_1_b_float16.xhtml#afbd0d2d6540777e3898d125b79f6a5bc">Val</a>(), 0x7F00);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">// LSB = 1, R = 0 -&gt; round down</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> roundDown1 = <a class="code" href="classarmnn_1_1_b_float16.xhtml#a3ff08d61c8f7403c9f790e2b96d91a9d">armnn::BFloat16::Float32ToBFloat16</a>(9.18355E-41f); <span class="comment">// 0x00010000</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    CHECK_EQ(roundDown1.Val(), 0x0001);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="comment">// LSB = 0, R = 1 all 0 -&gt; round down</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> roundDown2 = <a class="code" href="classarmnn_1_1_b_float16.xhtml#a3ff08d61c8f7403c9f790e2b96d91a9d">armnn::BFloat16::Float32ToBFloat16</a>(1.14794E-40f); <span class="comment">// 0x00014000</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    CHECK_EQ(roundDown2.Val(), 0x0001);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// LSB = 1, R = 1 -&gt; round up</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> roundUp = <a class="code" href="classarmnn_1_1_b_float16.xhtml#a3ff08d61c8f7403c9f790e2b96d91a9d">armnn::BFloat16::Float32ToBFloat16</a>(-2.0234377f); <span class="comment">// 0xC0018001</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    CHECK_EQ(roundUp.Val(), 0xC002);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// LSB = 0, R = 1 -&gt; round up</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> roundUp1 = <a class="code" href="classarmnn_1_1_b_float16.xhtml#a3ff08d61c8f7403c9f790e2b96d91a9d">armnn::BFloat16::Float32ToBFloat16</a>(4.843037E-35f); <span class="comment">// 0x0680C000</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    CHECK_EQ(roundUp1.Val(), 0x0681);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// Max positive value -&gt; infinity</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> maxPositive = <a class="code" href="classarmnn_1_1_b_float16.xhtml#a3ff08d61c8f7403c9f790e2b96d91a9d">armnn::BFloat16::Float32ToBFloat16</a>(std::numeric_limits&lt;float&gt;::max()); <span class="comment">// 0x7F7FFFFF</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    CHECK_EQ(maxPositive, <a class="code" href="classarmnn_1_1_b_float16.xhtml#ae5b250d59f169e00a39ad3ec787db22a">armnn::BFloat16::Inf</a>());</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// Max negative value -&gt; -infinity</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> maxNeg = <a class="code" href="classarmnn_1_1_b_float16.xhtml#a3ff08d61c8f7403c9f790e2b96d91a9d">armnn::BFloat16::Float32ToBFloat16</a>(std::numeric_limits&lt;float&gt;::lowest()); <span class="comment">// 0xFF7FFFFF</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    CHECK_EQ(maxNeg.<a class="code" href="classarmnn_1_1_b_float16.xhtml#afbd0d2d6540777e3898d125b79f6a5bc">Val</a>(), 0xFF80);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Min positive value</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> minPositive = <a class="code" href="classarmnn_1_1_b_float16.xhtml#a3ff08d61c8f7403c9f790e2b96d91a9d">armnn::BFloat16::Float32ToBFloat16</a>(1.1754942E-38f); <span class="comment">// 0x007FFFFF</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    CHECK_EQ(minPositive.Val(), 0x0080);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// Min negative value</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> minNeg = <a class="code" href="classarmnn_1_1_b_float16.xhtml#a3ff08d61c8f7403c9f790e2b96d91a9d">armnn::BFloat16::Float32ToBFloat16</a>(-1.1754942E-38f); <span class="comment">// 0x807FFFFF</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    CHECK_EQ(minNeg.Val(), 0x8080);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;TEST_CASE(<span class="stringliteral">&quot;BFloat16ToFloat32Test&quot;</span>)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> bf0(1.5f);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    CHECK_EQ(bf0.ToFloat32(), 1.5f);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> bf1(-5.525308E-25f);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    CHECK_EQ(bf1.ToFloat32(), -5.525308E-25f);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> bf2(-2.0625f);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    CHECK_EQ(bf2.ToFloat32(), -2.0625f);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    uint16_t v = 32639;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a> bf3(v);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    CHECK_EQ(bf3.ToFloat32(), 3.3895314E38f);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Infinity</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    CHECK_EQ(<a class="code" href="classarmnn_1_1_b_float16.xhtml#ae5b250d59f169e00a39ad3ec787db22a">armnn::BFloat16::Inf</a>().ToFloat32(), std::numeric_limits&lt;float&gt;::infinity());</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// NaN</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    CHECK(std::isnan(<a class="code" href="classarmnn_1_1_b_float16.xhtml#ae80b11dd8875fbf6e76cb054764ca6fb">armnn::BFloat16::Nan</a>().ToFloat32()));</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;TEST_CASE(<span class="stringliteral">&quot;GraphTopologicalSortSimpleTest&quot;</span>)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    std::map&lt;int, std::vector&lt;int&gt;&gt; graph;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    graph[0] = {2};</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    graph[1] = {3};</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    graph[2] = {4};</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    graph[3] = {4};</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    graph[4] = {5};</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    graph[5] = {};</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">auto</span> getNodeInputs = [graph](<span class="keywordtype">int</span> node) -&gt; std::vector&lt;int&gt;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">return</span> graph.find(node)-&gt;second;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    };</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    std::vector&lt;int&gt; targetNodes = {0, 1};</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    std::vector&lt;int&gt; output;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordtype">bool</span> sortCompleted = armnnUtils::GraphTopologicalSort&lt;int&gt;(targetNodes, getNodeInputs, output);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    CHECK(sortCompleted);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    std::vector&lt;int&gt; correctResult = {5, 4, 2, 0, 3, 1};</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    CHECK(std::equal(output.begin(), output.end(), correctResult.begin(), correctResult.end()));</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;TEST_CASE(<span class="stringliteral">&quot;GraphTopologicalSortVariantTest&quot;</span>)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    std::map&lt;int, std::vector&lt;int&gt;&gt; graph;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    graph[0] = {2};</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    graph[1] = {2};</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    graph[2] = {3, 4};</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    graph[3] = {5};</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    graph[4] = {5};</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    graph[5] = {6};</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    graph[6] = {};</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">auto</span> getNodeInputs = [graph](<span class="keywordtype">int</span> node) -&gt; std::vector&lt;int&gt;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">return</span> graph.find(node)-&gt;second;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    };</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    std::vector&lt;int&gt; targetNodes = {0, 1};</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    std::vector&lt;int&gt; output;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">bool</span> sortCompleted = armnnUtils::GraphTopologicalSort&lt;int&gt;(targetNodes, getNodeInputs, output);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    CHECK(sortCompleted);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    std::vector&lt;int&gt; correctResult = {6, 5, 3, 4, 2, 0, 1};</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    CHECK(std::equal(output.begin(), output.end(), correctResult.begin(), correctResult.end()));</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CyclicalGraphTopologicalSortTest&quot;</span>)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;{</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    std::map&lt;int, std::vector&lt;int&gt;&gt; graph;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    graph[0] = {1};</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    graph[1] = {2};</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    graph[2] = {0};</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">auto</span> getNodeInputs = [graph](<span class="keywordtype">int</span> node) -&gt; std::vector&lt;int&gt;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordflow">return</span> graph.find(node)-&gt;second;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    };</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    std::vector&lt;int&gt; targetNodes = {0};</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    std::vector&lt;int&gt; output;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordtype">bool</span> sortCompleted = armnnUtils::GraphTopologicalSort&lt;int&gt;(targetNodes, getNodeInputs, output);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    CHECK(!sortCompleted);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PermuteQuantizationDim&quot;</span>)</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    std::vector&lt;float&gt; scales {1.0f, 1.0f};</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// Set QuantizationDim to be index 1</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> perChannelInfo({ 1, 2, 3, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>, scales, 1U);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    CHECK(perChannelInfo.GetQuantizationDim().value() == 1U);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// Permute so that index 1 moves to final index i.e. index 3</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> mappings({ 0, 3, 2, 1 });</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">auto</span> permutedPerChannel = <a class="code" href="namespacearmnn_utils.xhtml#abeaf4f6785039866fd075f4569ba8e84">armnnUtils::Permuted</a>(perChannelInfo, mappings);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// Check that QuantizationDim is in index 3</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    CHECK(permutedPerChannel.GetQuantizationDim().value() == 3U);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="comment">// Even if there is only a single scale the quantization dim still exists and needs to be permuted</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    std::vector&lt;float&gt; scale {1.0f};</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> perChannelInfo1({ 1, 2, 3, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>, scale, 1U);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keyword">auto</span> permuted = <a class="code" href="namespacearmnn_utils.xhtml#abeaf4f6785039866fd075f4569ba8e84">armnnUtils::Permuted</a>(perChannelInfo1, mappings);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    CHECK(permuted.GetQuantizationDim().value() == 3U);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;TEST_CASE(<span class="stringliteral">&quot;EmptyPermuteVectorIndexOutOfBounds&quot;</span>)</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;{</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> pv = <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a>({});</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    CHECK_THROWS_AS(pv[0], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;}</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PermuteDescriptorIndexOutOfBounds&quot;</span>)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> pv = <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a>({ 1u, 2u, 0u });</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a> desc = <a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a>(pv);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    CHECK_THROWS_AS(desc.m_DimMappings[3], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    CHECK(desc.m_DimMappings[0] == 1u);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;TEST_CASE(<span class="stringliteral">&quot;TransposeDescriptorIndexOutOfBounds&quot;</span>)</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> pv = <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a>({ 2u, 1u, 0u });</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a> desc = <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a>(pv);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    CHECK_THROWS_AS(desc.m_DimMappings[3], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    CHECK(desc.m_DimMappings[2] == 0u);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PermuteVectorIterator&quot;</span>)</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;{</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="comment">// We&#39;re slightly breaking the spirit of std::array.end() because we&#39;re using it as a</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="comment">// variable length rather than fixed length. This test is to use a couple of iterators and</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// make sure it still mostly makes sense.</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="comment">// Create zero length.</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> zeroPVector({});</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="comment">// Begin should be equal to end.</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    CHECK(zeroPVector.begin() == zeroPVector.end());</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">// Create length 4. Summing the 4 values should be 6.</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> fourPVector({ 0, 3, 2, 1 });</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> sum = 0;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> it : fourPVector)</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        sum += it;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    CHECK(sum == 6);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="comment">// Directly use begin and end, make sure there are 4 iterations.</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> iterations = 0;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">auto</span> itr = fourPVector.begin();</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordflow">while</span>(itr != fourPVector.end())</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    {</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        ++iterations;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        itr++;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    CHECK(iterations == 4);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="comment">// Do the same with 2 elements.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> twoPVector({ 0, 1 });</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    iterations = 0;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    itr = twoPVector.<a class="code" href="classarmnn_1_1_permutation_vector.xhtml#ad5fee900c7aee90671038c79225bf8ec">begin</a>();</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">while</span>(itr != twoPVector.end())</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        ++iterations;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        itr++;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    CHECK(iterations == 2);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;}</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="preprocessor">#if defined(ARMNNREF_ENABLED)</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;TEST_CASE(<span class="stringliteral">&quot;LayerSupportHandle&quot;</span>)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;{</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">auto</span> layerSupportObject = <a class="code" href="namespacearmnn.xhtml#a6d9d90e2ace1cd49789835b0073196a3">armnn::GetILayerSupportByBackendId</a>(<span class="stringliteral">&quot;CpuRef&quot;</span>);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> input;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    std::string reasonIfUnsupported;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="comment">// InputLayer always supported for CpuRef</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    CHECK_EQ(layerSupportObject.IsInputSupported(input, reasonIfUnsupported), <span class="keyword">true</span>);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    CHECK(layerSupportObject.IsBackendRegistered());</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="classarmnn_1_1_b_float16_xhtml"><div class="ttname"><a href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a></div><div class="ttdef"><b>Definition:</b> <a href="_b_float16_8hpp_source.xhtml#l00015">BFloat16.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0743ed5e860c316a20b68ca96301b411"><div class="ttname"><a href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a></div><div class="ttdeci">typename ResolveTypeImpl&lt; DT &gt;::Type ResolveType</div><div class="ttdef"><b>Definition:</b> <a href="_resolve_type_8hpp_source.xhtml#l00079">ResolveType.hpp:79</a></div></div>
<div class="ttc" id="classarmnn_1_1_b_float16_xhtml_ae5b250d59f169e00a39ad3ec787db22a"><div class="ttname"><a href="classarmnn_1_1_b_float16.xhtml#ae5b250d59f169e00a39ad3ec787db22a">armnn::BFloat16::Inf</a></div><div class="ttdeci">static BFloat16 Inf()</div><div class="ttdef"><b>Definition:</b> <a href="_b_float16_8hpp_source.xhtml#l00112">BFloat16.hpp:112</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a81b5ff8545adad19a1c9d4ca076d552c"><div class="ttname"><a href="namespacearmnn.xhtml#a81b5ff8545adad19a1c9d4ca076d552c">armnn::GetDataTypeName</a></div><div class="ttdeci">constexpr const char * GetDataTypeName(DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00202">TypesUtils.hpp:202</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a></div></div>
<div class="ttc" id="classarmnn_1_1_b_float16_xhtml_afbd0d2d6540777e3898d125b79f6a5bc"><div class="ttname"><a href="classarmnn_1_1_b_float16.xhtml#afbd0d2d6540777e3898d125b79f6a5bc">armnn::BFloat16::Val</a></div><div class="ttdeci">uint16_t Val() const</div><div class="ttdef"><b>Definition:</b> <a href="_b_float16_8hpp_source.xhtml#l00095">BFloat16.hpp:95</a></div></div>
<div class="ttc" id="classarmnn_1_1_b_float16_xhtml_a3ff08d61c8f7403c9f790e2b96d91a9d"><div class="ttname"><a href="classarmnn_1_1_b_float16.xhtml#a3ff08d61c8f7403c9f790e2b96d91a9d">armnn::BFloat16::Float32ToBFloat16</a></div><div class="ttdeci">static BFloat16 Float32ToBFloat16(const float v)</div><div class="ttdef"><b>Definition:</b> <a href="_b_float16_8hpp_source.xhtml#l00051">BFloat16.hpp:51</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::DataType::BFloat16</a></div></div>
<div class="ttc" id="classarmnn_1_1_permutation_vector_xhtml"><div class="ttname"><a href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a></div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00282">Types.hpp:282</a></div></div>
<div class="ttc" id="classarmnn_1_1_permutation_vector_xhtml_ad5fee900c7aee90671038c79225bf8ec"><div class="ttname"><a href="classarmnn_1_1_permutation_vector.xhtml#ad5fee900c7aee90671038c79225bf8ec">armnn::PermutationVector::begin</a></div><div class="ttdeci">ConstIterator begin() const</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00327">Types.hpp:327</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a></div><div class="ttdoc">A TransposeDescriptor for the TransposeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01442">Descriptors.hpp:1442</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_b_float16_xhtml_ae80b11dd8875fbf6e76cb054764ca6fb"><div class="ttname"><a href="classarmnn_1_1_b_float16.xhtml#ae80b11dd8875fbf6e76cb054764ca6fb">armnn::BFloat16::Nan</a></div><div class="ttdeci">static BFloat16 Nan()</div><div class="ttdef"><b>Definition:</b> <a href="_b_float16_8hpp_source.xhtml#l00106">BFloat16.hpp:106</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a6d9d90e2ace1cd49789835b0073196a3"><div class="ttname"><a href="namespacearmnn.xhtml#a6d9d90e2ace1cd49789835b0073196a3">armnn::GetILayerSupportByBackendId</a></div><div class="ttdeci">LayerSupportHandle GetILayerSupportByBackendId(const armnn::BackendId &amp;backend)</div><div class="ttdoc">Convenience function to retrieve the ILayerSupportHandle for a backend. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_helper_8cpp_source.xhtml#l00016">BackendHelper.cpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0f38fa92b2468d5378258a2b074c1a31"><div class="ttname"><a href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn::Half</a></div><div class="ttdeci">half_float::half Half</div><div class="ttdef"><b>Definition:</b> <a href="_half_8hpp_source.xhtml#l00018">Half.hpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_abeaf4f6785039866fd075f4569ba8e84"><div class="ttname"><a href="namespacearmnn_utils.xhtml#abeaf4f6785039866fd075f4569ba8e84">armnnUtils::Permuted</a></div><div class="ttdeci">armnn::TensorShape Permuted(const armnn::TensorShape &amp;srcShape, const armnn::PermutationVector &amp;mappings)</div><div class="ttdef"><b>Definition:</b> <a href="_permute_8cpp_source.xhtml#l00098">Permute.cpp:98</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa02b9e06fb20fa3c13da0427e6ee5ab2"><div class="ttname"><a href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">armnn::GetDataTypeSize</a></div><div class="ttdeci">constexpr unsigned int GetDataTypeSize(DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00151">TypesUtils.hpp:151</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a></div><div class="ttdoc">A PermuteDescriptor for the PermuteLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00129">Descriptors.hpp:129</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="_utils_tests_8cpp.xhtml">UtilsTests.cpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:02 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
