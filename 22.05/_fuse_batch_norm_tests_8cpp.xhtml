<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/optimizations/FuseBatchNormTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_fuse_batch_norm_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">FuseBatchNormTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_layers_fwd_8hpp_source.xhtml">LayersFwd.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_network_8hpp_source.xhtml">Network.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_i_network_8hpp_source.xhtml">armnn/INetwork.hpp</a>&gt;</code><br />
<code>#include &lt;TestUtils.hpp&gt;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
</div>
<p><a href="_fuse_batch_norm_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a77a062dba8ec73047ae4e734519f5ef8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_fuse_batch_norm_tests_8cpp.xhtml#a77a062dba8ec73047ae4e734519f5ef8">TEST_SUITE</a> (&quot;Optimizer&quot;)</td></tr>
<tr class="separator:a77a062dba8ec73047ae4e734519f5ef8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a77a062dba8ec73047ae4e734519f5ef8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77a062dba8ec73047ae4e734519f5ef8">&#9670;&nbsp;</a></span>TEST_SUITE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TEST_SUITE </td>
          <td>(</td>
          <td class="paramtype">&quot;Optimizer&quot;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fuse_batch_norm_tests_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_fuse_batch_norm_tests_8cpp_source.xhtml">FuseBatchNormTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_network_8cpp_source.xhtml#l00292">INetwork::AddConstantLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00085">INetwork::AddConvolution2dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00118">INetwork::AddDepthwiseConvolution2dLayer()</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00476">INetwork::Create()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00295">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00673">DepthwiseConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00808">BatchNormalizationDescriptor::m_DataLayout</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">class </span>Conv2dTest</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">using</span> ConvDescriptorType            = <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a>;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">using</span> ConvLayerType                 = <a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">armnn::Convolution2dLayer</a>;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *AddConvolution(<a class="code" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *network,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;descriptor,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a> &amp;biases,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                             <span class="keyword">const</span> <span class="keywordtype">char</span> *name)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">return</span> network-&gt;<a class="code" href="classarmnn_1_1_i_network.xhtml#a383e74ef080d4a81b8b371be4b840248">AddConvolution2dLayer</a>(descriptor, weights, biases, name);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">static</span> std::vector&lt;IConnectableLayer*&gt; AddConstantLayers(<a class="code" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *network,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;descriptor,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a> &amp;biases)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(network);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(weights);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(biases);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;};</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">class </span>DepthwiseConv2dTest</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">using</span> ConvDescriptorType            = <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">using</span> ConvLayerType                 = <a class="code" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml">armnn::DepthwiseConvolution2dLayer</a>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* AddConvolution(<a class="code" href="classarmnn_1_1_i_network.xhtml">INetwork</a>* network,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; weights,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; biases,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                             <span class="keyword">const</span> <span class="keywordtype">char</span>* name)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(weights);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(biases);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">return</span> network-&gt;<a class="code" href="classarmnn_1_1_i_network.xhtml#ac6771c8752811fcfa91b3f0dee748144">AddDepthwiseConvolution2dLayer</a>(descriptor, name);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">static</span> std::vector&lt;IConnectableLayer*&gt; AddConstantLayers(<a class="code" href="classarmnn_1_1_i_network.xhtml">INetwork</a> *network,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;descriptor,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a> &amp;biases)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">auto</span> weightsLayer = network-&gt;<a class="code" href="classarmnn_1_1_i_network.xhtml#a1aa567f46c30960851c02847dc7b4215">AddConstantLayer</a>(weights, <span class="stringliteral">&quot;Weights&quot;</span>);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        weightsLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(weights.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        std::vector&lt;IConnectableLayer*&gt; layers = {weightsLayer};</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a>)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keyword">auto</span> biasLayer = network-&gt;<a class="code" href="classarmnn_1_1_i_network.xhtml#a1aa567f46c30960851c02847dc7b4215">AddConstantLayer</a>(biases.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>(), <span class="stringliteral">&quot;Bias&quot;</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            biasLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(biases.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>().<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            layers.emplace_back(biasLayer);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">return</span> layers;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;};</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;std::vector&lt;T&gt; GetVector(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size, <span class="keywordtype">float</span> initial, <span class="keywordtype">float</span> increment)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::vector&lt;float&gt; typeVector(size, initial);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    std::vector&lt;T&gt; vector(size);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">if</span> (size &gt; 1)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; size; ++i)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            vector[i] = T(initial + (increment * static_cast&lt;float&gt;(i)));</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> vector;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Conv2dTest,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;          <span class="keyword">typename</span> ConvDescriptorType = <span class="keyword">typename</span> Conv2dTest::ConvDescriptorType,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;          <span class="keyword">typename</span> T = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType&gt;</a>&gt;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetwork(<span class="keywordtype">bool</span> depthwise, <span class="keywordtype">bool</span> preventFusing)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">// Define layers information</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    ConvDescriptorType convolution2dDescriptor;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    convolution2dDescriptor.m_BiasEnabled = <span class="keyword">false</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    convolution2dDescriptor.m_DataLayout = DataLayout::NHWC;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    convolution2dDescriptor.m_StrideX = 1;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    convolution2dDescriptor.m_StrideY = 1;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> batchNormDescriptor;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    batchNormDescriptor.<a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = DataLayout::NHWC;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputDimensionSizes[] = {1, 4, 4, 3};  <span class="comment">// NHWCin</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsDimensionSizes[]     = {4, 2, 2, 3};  <span class="comment">// CoutHWCin</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputDimensionSizes[]      = {1, 3, 3, 4};  <span class="comment">// NHWCout</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span> (depthwise)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="comment">// [1, H, W, Cout]</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        weightsDimensionSizes[0] = 1;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        weightsDimensionSizes[1] = 2;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        weightsDimensionSizes[2] = 2;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        weightsDimensionSizes[3] = 12;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        outputDimensionSizes[3]  = weightsDimensionSizes[3];</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannelSize[]   = {outputDimensionSizes[3]};  <span class="comment">// Cout</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo(4, inputDimensionSizes, ArmnnType);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputInfo(4, outputDimensionSizes, ArmnnType);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::vector&lt;int&gt; weightsIntVector = { 1,  2,  3,  4,   5,  6,  7,  8,   9, 10, 11, 12,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                         11, 12, 13, 14,  15, 16, 17, 18,  19, 20, 21, 22,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                         21, 22, 23, 24,  25, 26, 27, 28,  29, 30, 31, 32,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                         31, 32, 33, 34,  35, 36, 37, 38,  39, 40, 41, 42};</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    std::vector&lt;T&gt; weightsVector(begin(weightsIntVector), end(weightsIntVector));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> weightsInfo(4, weightsDimensionSizes, ArmnnType, 0.0f, 0, <span class="keyword">true</span>);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> weights(weightsInfo, weightsVector);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    std::vector&lt;T&gt; betaVector     = GetVector&lt;T&gt;(outputDimensionSizes[3], 0.0f, 0.2f);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    std::vector&lt;T&gt; gammaVector    = GetVector&lt;T&gt;(outputDimensionSizes[3], 0.5f, 0.1f);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    std::vector&lt;T&gt; meanVector     = GetVector&lt;T&gt;(outputDimensionSizes[3], 0.1f, 0.1f);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    std::vector&lt;T&gt; varianceVector = GetVector&lt;T&gt;(outputDimensionSizes[3], 1.0f, 0.1f);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> beta    (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, ArmnnType, 0.0f, 0, <span class="keyword">true</span>), betaVector);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> gamma   (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, ArmnnType, 0.0f, 0, <span class="keyword">true</span>), gammaVector);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> mean    (<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, ArmnnType, 0.0f, 0, <span class="keyword">true</span>), meanVector);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> variance(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, ArmnnType, 0.0f, 0, <span class="keyword">true</span>), varianceVector);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Create a network</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> network = INetwork::Create();</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* inputLayer     = network-&gt;AddInputLayer(0);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* convLayer      = Conv2dTest::AddConvolution(network.get(),</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                                                   convolution2dDescriptor,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                                                   weights,</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>(),</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                                                   <span class="stringliteral">&quot;convolution&quot;</span>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* batchNormLayer = network-&gt;AddBatchNormalizationLayer(batchNormDescriptor,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                                                            mean,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                                                            variance,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                                                            beta,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                                                            gamma,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                                                            <span class="stringliteral">&quot;batchNorm&quot;</span>);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* outputLayer    = network-&gt;AddOutputLayer(0);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output2Layer   = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">if</span> (preventFusing)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        output2Layer                  = network-&gt;AddOutputLayer(1);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    std::vector&lt;IConnectableLayer*&gt; constantLayers = Conv2dTest::AddConstantLayers(network.get(),</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                                                                   convolution2dDescriptor,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                                                                   weights,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                                                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>());</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// Connect constant layers to receiverLayer.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; constantLayers.size(); ++i)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        constantLayers[i]-&gt;GetOutputSlot(0).Connect(convLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(i + 1));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="comment">// Set layer information</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    inputLayer    -&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    convLayer     -&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    batchNormLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// Connect layers</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    inputLayer    -&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(convLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    convLayer     -&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(batchNormLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    batchNormLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(outputLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">if</span> (preventFusing)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        convLayer -&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output2Layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">return</span> network;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;}</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Conv2dTest,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;          <span class="keyword">typename</span> ConvDescriptorType = <span class="keyword">typename</span> Conv2dTest::ConvDescriptorType,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;          <span class="keyword">typename</span> ConvLayerType = <span class="keyword">typename</span> Conv2dTest::ConvLayerType,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;          <span class="keyword">typename</span> T = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType&gt;</a>&gt;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keywordtype">void</span> FuseBatchNormIntoConvTest(<span class="keywordtype">bool</span> depthwise, <span class="keywordtype">float</span> tolerance, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">armnn::Compute</a> backendId)</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="comment">// FIRST NETWORK: Fused</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="comment">// Construct ArmNN network</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> networkFused = CreateNetwork&lt;Conv2dTest, ArmnnType&gt;(depthwise, <span class="keyword">false</span>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="comment">// Create ArmNN runtime</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> run = IRuntime::Create(<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a>()); <span class="comment">// default options</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="comment">// Optimise ArmNN network</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNetFused = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*networkFused, {backendId}, run-&gt;GetDeviceSpec());</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graphFused = <a class="code" href="namespacearmnn.xhtml#a6a2659750d6161b693d0e51616791959">GetGraphForTesting</a>(optNetFused.get());</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">auto</span> checkFusedConv2d = [ ](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer) -&gt; <span class="keywordtype">bool</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordflow">return</span> IsLayerOfType&lt;ConvLayerType&gt;(layer) &amp;&amp;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;               (layer-&gt;GetNameStr() == <span class="stringliteral">&quot;fused-batchNorm-into-convolution&quot;</span>);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    };</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    CHECK(5 == graphFused.GetNumLayers());</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graphFused.cbegin(),</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        graphFused.cend(),</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        &amp;IsLayerOfType&lt;InputLayer&gt;,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                        &amp;IsLayerOfType&lt;ConstantLayer&gt;,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        &amp;IsLayerOfType&lt;ConstantLayer&gt;,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        checkFusedConv2d,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                        &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// Load network into runtime</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkIdentifier;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    CHECK(run-&gt;LoadNetwork(networkIdentifier, std::move(optNetFused)) == Status::Success);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">//Creates structures for inputs and outputs.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    std::vector&lt;T&gt; inputDataFused = GetVector&lt;T&gt;(48, 1.0f, 0.1f);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    std::vector&lt;T&gt; outputDataFused(36);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">if</span> (depthwise)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        outputDataFused.resize(108);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo = run-&gt;GetInputTensorInfo(networkIdentifier, 0);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensorsFused {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            {0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>(inputTensorInfo, inputDataFused.data())}};</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensorsFused{</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            {0, <a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a>(run-&gt;GetOutputTensorInfo(networkIdentifier, 0), outputDataFused.data())}};</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="comment">// Execute network</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    run-&gt;EnqueueWorkload(networkIdentifier, inputTensorsFused, outputTensorsFused);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="comment">// SECOND NETWORK: NotFused</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="comment">// Construct ArmNN network</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> networkNotFused = CreateNetwork&lt;Conv2dTest, ArmnnType&gt;(depthwise, <span class="keyword">true</span>);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="comment">// Create ArmNN runtime</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runNotFused = IRuntime::Create(<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a>()); <span class="comment">// default options</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="comment">// Optimise ArmNN network</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNetNotFused = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*networkNotFused, { backendId }, runNotFused-&gt;GetDeviceSpec());</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graphNotFused = <a class="code" href="namespacearmnn.xhtml#a6a2659750d6161b693d0e51616791959">GetGraphForTesting</a>(optNetNotFused.get());</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    CHECK(6 == graphNotFused.GetNumLayers());</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graphNotFused.cbegin(),</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                        graphNotFused.cend(),</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                        &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        &amp;IsLayerOfType&lt;armnn::ConstantLayer&gt;,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                        &amp;IsLayerOfType&lt;ConvLayerType&gt;,</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                        &amp;IsLayerOfType&lt;armnn::BatchNormalizationLayer&gt;,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                        &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;,</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                        &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// Load network into runtime</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkIdentifierNotFused;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    CHECK(runNotFused-&gt;LoadNetwork(networkIdentifierNotFused, std::move(optNetNotFused)) == Status::Success);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="comment">//Creates structures for inputs and outputs.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    std::vector&lt;T&gt; inputDataNotFused = GetVector&lt;T&gt;(48, 1.0f, 0.1f);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    std::vector&lt;T&gt; outputDataNotFused(36);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    std::vector&lt;T&gt; outputData2NotFused(36);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">if</span> (depthwise)</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        outputDataNotFused.resize(108);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        outputData2NotFused.resize(108);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo2 = runNotFused-&gt;GetInputTensorInfo(networkIdentifierNotFused, 0);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    inputTensorInfo2.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensorsNotFused{</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        { 0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>(inputTensorInfo2, inputDataNotFused.data()) } };</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensorsNotFused{</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        { 0, <a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a>(runNotFused-&gt;GetOutputTensorInfo(networkIdentifierNotFused, 0), outputDataNotFused.data()) },</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        { 1, <a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a>(runNotFused-&gt;GetOutputTensorInfo(networkIdentifierNotFused, 1), outputData2NotFused.data()) } };</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="comment">// Execute network</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    runNotFused-&gt;EnqueueWorkload(networkIdentifierNotFused, inputTensorsNotFused, outputTensorsNotFused);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">// Check the output of the fused-convolution matches with the output of the batchNormm in the &quot;NotFused&quot; network</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">auto</span> epsilon = T(tolerance);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = 0; n &lt; outputDataFused.size(); ++n)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        CHECK_EQ(outputDataFused[n], doctest::Approx(outputDataNotFused[n]).epsilon(epsilon));</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;}</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">// This unit test needs the reference backend, it&#39;s not available if the reference backend is not built</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="preprocessor">#if defined(ARMNNREF_ENABLED)</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;TEST_CASE(<span class="stringliteral">&quot;FuseBatchNormIntoConv2DFloat32Test&quot;</span>)</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    FuseBatchNormIntoConvTest&lt;Conv2dTest, DataType::Float32&gt;(<span class="keyword">false</span>, 0.0001f, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a>);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;TEST_CASE(<span class="stringliteral">&quot;FuseBatchNormIntoConv2DFloat16Test&quot;</span>)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;{</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    FuseBatchNormIntoConvTest&lt;Conv2dTest, DataType::Float16&gt;(<span class="keyword">false</span>, 0.1f, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a>);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;TEST_CASE(<span class="stringliteral">&quot;FuseBatchNormIntoDepthwiseConv2DFloat32Test&quot;</span>)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    FuseBatchNormIntoConvTest&lt;DepthwiseConv2dTest, DataType::Float32&gt;(<span class="keyword">true</span>, 0.0001f,<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a>);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;TEST_CASE(<span class="stringliteral">&quot;FuseBatchNormIntoDepthwiseConv2DFloat16Test&quot;</span>)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;{</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    FuseBatchNormIntoConvTest&lt;DepthwiseConv2dTest, DataType::Float16&gt;(<span class="keyword">true</span>, 0.2f,<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a>);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;}</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00066">INetwork.hpp:66</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::DepthwiseConvolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00673">Descriptors.hpp:673</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="est_utils_2_test_utils_8hpp_xhtml_a0eedb278f57355b47fa983450d4e378c"><div class="ttname"><a href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a></div><div class="ttdeci">bool CheckSequence(const armnn::Graph::ConstIterator first, const armnn::Graph::ConstIterator last)</div><div class="ttdef"><b>Definition:</b> <a href="est_utils_2_test_utils_8hpp_source.xhtml#l00021">TestUtils.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a1aa567f46c30960851c02847dc7b4215"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a1aa567f46c30960851c02847dc7b4215">armnn::INetwork::AddConstantLayer</a></div><div class="ttdeci">IConnectableLayer * AddConstantLayer(const ConstTensor &amp;input, const char *name=nullptr)</div><div class="ttdoc">Adds a layer with no inputs and a single output, which always corresponds to the passed in constant t...</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00292">Network.cpp:292</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_ac6771c8752811fcfa91b3f0dee748144"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#ac6771c8752811fcfa91b3f0dee748144">armnn::INetwork::AddDepthwiseConvolution2dLayer</a></div><div class="ttdeci">IConnectableLayer * AddDepthwiseConvolution2dLayer(const DepthwiseConvolution2dDescriptor &amp;convolution2dDescriptor, const char *name=nullptr)</div><div class="ttdoc">Adds a 2D depthwise convolution layer to the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00118">Network.cpp:118</a></div></div>
<div class="ttc" id="classarmnn_1_1_depthwise_convolution2d_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml">armnn::DepthwiseConvolution2dLayer</a></div><div class="ttdoc">This layer represents a depthwise convolution 2d operation. </div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution2d_layer_8hpp_source.xhtml#l00015">DepthwiseConvolution2dLayer.hpp:15</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00499">Descriptors.hpp:499</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00033">IRuntime.hpp:33</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::BatchNormalizationDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00808">Descriptors.hpp:808</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0743ed5e860c316a20b68ca96301b411"><div class="ttname"><a href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a></div><div class="ttdeci">typename ResolveTypeImpl&lt; DT &gt;::Type ResolveType</div><div class="ttdef"><b>Definition:</b> <a href="_resolve_type_8hpp_source.xhtml#l00079">ResolveType.hpp:79</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a></div><div class="ttdoc">Main network class which provides the interface for building up a neural network. ...</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00249">INetwork.hpp:249</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456ae"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">armnn::Compute</a></div><div class="ttdeci">Compute</div><div class="ttdoc">The Compute enum is now deprecated and it is now being replaced by BackendId. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00021">BackendId.hpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01847">Network.cpp:1847</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00242">INetwork.hpp:242</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8aeddebdcf02e1832b22203c08a6b678"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">armnn::BaseTensor::GetInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00295">Tensor.hpp:295</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00077">IRuntime.hpp:77</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a6a2659750d6161b693d0e51616791959"><div class="ttname"><a href="namespacearmnn.xhtml#a6a2659750d6161b693d0e51616791959">armnn::GetGraphForTesting</a></div><div class="ttdeci">Graph &amp; GetGraphForTesting(IOptimizedNetwork *optNet)</div><div class="ttdef"><b>Definition:</b> <a href="_test_utils_8cpp_source.xhtml#l00049">TestUtils.cpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a383e74ef080d4a81b8b371be4b840248"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a383e74ef080d4a81b8b371be4b840248">armnn::INetwork::AddConvolution2dLayer</a></div><div class="ttdeci">IConnectableLayer * AddConvolution2dLayer(const Convolution2dDescriptor &amp;convolution2dDescriptor, const char *name=nullptr)</div><div class="ttdoc">Adds a 2D convolution layer to the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00085">Network.cpp:85</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8ffca1e21bdfa7f945617acd606aac91"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">armnn::TensorInfo::SetConstant</a></div><div class="ttdeci">void SetConstant(const bool IsConstant=true)</div><div class="ttdoc">Marks the data corresponding to this tensor info as constant. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00514">Tensor.cpp:514</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_convolution2d_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_convolution2d_layer.xhtml">armnn::Convolution2dLayer</a></div><div class="ttdoc">This layer represents a convolution 2d operation. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution2d_layer_8hpp_source.xhtml#l00015">Convolution2dLayer.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00624">Descriptors.hpp:624</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00215">Layer.hpp:215</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a></div><div class="ttdoc">A BatchNormalizationDescriptor for the BatchNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00793">Descriptors.hpp:793</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_f1cd0e6da811a659c139424442adfb5f.xhtml">optimizations</a></li><li class="navelem"><a class="el" href="_fuse_batch_norm_tests_8cpp.xhtml">FuseBatchNormTests.cpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:15 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
