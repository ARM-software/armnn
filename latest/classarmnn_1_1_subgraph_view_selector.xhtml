<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: SubgraphViewSelector Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarmnn_1_1_subgraph_view_selector.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_1_1_subgraph_view_selector-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SubgraphViewSelector Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Algorithm that splits a <a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> into Subgraphs based on a filtering of layers (e.g.  
 <a href="classarmnn_1_1_subgraph_view_selector.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_subgraph_view_selector_8hpp_source.xhtml">SubgraphViewSelector.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ab9e8c2ce720efe33c8a20b8f74bb9d5f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#ab9e8c2ce720efe33c8a20b8f74bb9d5f">Subgraphs</a> = std::vector&lt; <a class="el" href="classarmnn_1_1_subgraph_view.xhtml#ad5fc1b5213dcb72c0d4ac9dfb46ef677">SubgraphView::SubgraphViewPtr</a> &gt;</td></tr>
<tr class="separator:ab9e8c2ce720efe33c8a20b8f74bb9d5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a341a1b47a5f71edaebf81f3a5f0f4c55"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#a341a1b47a5f71edaebf81f3a5f0f4c55">LayerSelectorFunction</a> = std::function&lt; bool(const <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> &amp;)&gt;</td></tr>
<tr class="separator:a341a1b47a5f71edaebf81f3a5f0f4c55"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a3730b0a6006f0d87f894a44e01869d90"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#ab9e8c2ce720efe33c8a20b8f74bb9d5f">Subgraphs</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">SelectSubgraphs</a> (<a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph, const <a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#a341a1b47a5f71edaebf81f3a5f0f4c55">LayerSelectorFunction</a> &amp;selector)</td></tr>
<tr class="memdesc:a3730b0a6006f0d87f894a44e01869d90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Selects subgraphs from a graph based on the selector function and the algorithm.  <a href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">More...</a><br /></td></tr>
<tr class="separator:a3730b0a6006f0d87f894a44e01869d90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad28bb1b624cde39578cfefa8b7809aef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#ab9e8c2ce720efe33c8a20b8f74bb9d5f">Subgraphs</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#ad28bb1b624cde39578cfefa8b7809aef">SelectSubgraphs</a> (<a class="el" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> &amp;subgraph, const <a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#a341a1b47a5f71edaebf81f3a5f0f4c55">LayerSelectorFunction</a> &amp;selector)</td></tr>
<tr class="separator:ad28bb1b624cde39578cfefa8b7809aef"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Algorithm that splits a <a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> into Subgraphs based on a filtering of layers (e.g. </p>
<p>which layers are appropriate for a certain backend). The resulting subgraphs are guaranteed to be form a DAG (i.e. there are no dependency loops).</p>
<p>The algorithm aims to produce as few subgraphs as possible. </p>

<p class="definition">Definition at line <a class="el" href="_subgraph_view_selector_8hpp_source.xhtml#l00021">21</a> of file <a class="el" href="_subgraph_view_selector_8hpp_source.xhtml">SubgraphViewSelector.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a341a1b47a5f71edaebf81f3a5f0f4c55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a341a1b47a5f71edaebf81f3a5f0f4c55">&#9670;&nbsp;</a></span>LayerSelectorFunction</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#a341a1b47a5f71edaebf81f3a5f0f4c55">LayerSelectorFunction</a> =  std::function&lt;bool(const <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp;)&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_subgraph_view_selector_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="_subgraph_view_selector_8hpp_source.xhtml">SubgraphViewSelector.hpp</a>.</p>

</div>
</div>
<a id="ab9e8c2ce720efe33c8a20b8f74bb9d5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9e8c2ce720efe33c8a20b8f74bb9d5f">&#9670;&nbsp;</a></span>Subgraphs</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#ab9e8c2ce720efe33c8a20b8f74bb9d5f">Subgraphs</a> =  std::vector&lt;<a class="el" href="classarmnn_1_1_subgraph_view.xhtml#ad5fc1b5213dcb72c0d4ac9dfb46ef677">SubgraphView::SubgraphViewPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_subgraph_view_selector_8hpp_source.xhtml#l00024">24</a> of file <a class="el" href="_subgraph_view_selector_8hpp_source.xhtml">SubgraphViewSelector.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a3730b0a6006f0d87f894a44e01869d90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3730b0a6006f0d87f894a44e01869d90">&#9670;&nbsp;</a></span>SelectSubgraphs() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#ab9e8c2ce720efe33c8a20b8f74bb9d5f">SubgraphViewSelector::Subgraphs</a> SelectSubgraphs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#a341a1b47a5f71edaebf81f3a5f0f4c55">LayerSelectorFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>selector</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Selects subgraphs from a graph based on the selector function and the algorithm. </p>
<p>Since the Subgraphs object returns modifiable pointers to the input and output slots of the graph: 1) the graph/sub-graph cannot be const 2) the caller needs to make sure that the Subgraphs lifetime is shorter than the parent graph's </p>

<p class="definition">Definition at line <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00259">259</a> of file <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml">SubgraphViewSelector.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;{</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    SubgraphView subgraph(graph);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">SubgraphViewSelector::SelectSubgraphs</a>(subgraph, selector);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l01040">armnn::ApplyBackendOptimizations()</a>.</p>

</div>
</div>
<a id="ad28bb1b624cde39578cfefa8b7809aef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad28bb1b624cde39578cfefa8b7809aef">&#9670;&nbsp;</a></span>SelectSubgraphs() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#ab9e8c2ce720efe33c8a20b8f74bb9d5f">SubgraphViewSelector::Subgraphs</a> SelectSubgraphs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> &amp;&#160;</td>
          <td class="paramname"><em>subgraph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml#a341a1b47a5f71edaebf81f3a5f0f4c55">LayerSelectorFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>selector</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00389">389</a> of file <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml">SubgraphViewSelector.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;{</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    LayerSelectionInfo::LayerInfoContainer layerInfos;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    LayerSelectionInfo::LayerInfoQueue processQueue;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#ad7c7687cd3542e5cbb45e56f9a9456e7">SubgraphView::IConnectableLayers</a>&amp; subgraphLayers = subgraph.GetIConnectableLayers();</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; layer : subgraphLayers)</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    {</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="keyword">auto</span> emplaced = layerInfos.emplace(layer, LayerSelectionInfo{PolymorphicDowncast&lt;Layer*&gt;(layer), selector});</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        LayerSelectionInfo&amp; layerInfo = emplaced.first-&gt;second;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="comment">// Start with Input type layers</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordflow">if</span> (layerInfo.IsInputLayer())</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        {</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            processQueue.push(&amp;layerInfo);</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        }</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a4ad949634fd697549da161eb09d8b7fd">SubgraphView::IInputSlots</a>&amp; subgraphInputSlots = subgraph.GetIInputSlots();</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; inputSlot : subgraphInputSlots)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    {</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        Layer&amp; layer = PolymorphicDowncast&lt;InputSlot*&gt;(inputSlot)-&gt;GetOwningLayer();</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keyword">auto</span> emplaced = layerInfos.emplace(&amp;layer, LayerSelectionInfo{&amp;layer, selector});</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        LayerSelectionInfo&amp; layerInfo = emplaced.first-&gt;second;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        processQueue.push(&amp;layerInfo);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">while</span> (!processQueue.empty())</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    {</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        LayerSelectionInfo&amp; layerInfo = *processQueue.front();</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        processQueue.pop(); <span class="comment">// remove front from queue</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160; </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="comment">// This layerInfo may have been added to the queue multiple times, so skip if we have already processed it</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <span class="keywordflow">if</span> (!layerInfo.m_IsProcessed)</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        {</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <span class="comment">// Only process this layerInfo if all inputs have been processed</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn.xhtml#a6b10dc0d12c7f4a52ad01b9975dbe908">IsReadyForSplitAssignment</a>(layerInfos, layerInfo))</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                <span class="comment">// Put back of the process queue if we can&#39;t process it just yet</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                processQueue.push(&amp;layerInfo);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                <span class="keywordflow">continue</span>; <span class="comment">// Skip to next iteration</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            }</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <span class="comment">// Now we do the processing</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a09ff1f6670d27d3b41e5b5d35a6c9f37">AssignSplitId</a>(layerInfos, layerInfo);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160; </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            <span class="comment">// Queue any child nodes for processing</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a49538fa883b70c944e437d65d6628eec">ForEachLayerOutput</a>(layerInfos, layerInfo, [&amp;processQueue](LayerSelectionInfo&amp; childInfo)</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                {</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                    processQueue.push(&amp;childInfo);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                });</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160; </div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="comment">// We don&#39;t need to process this node again</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            layerInfo.m_IsProcessed = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        }</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    }</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160; </div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="comment">// Collect all selected layers keyed by subgraph representative into a map</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">using</span> SelectionInfoPtrs = std::vector&lt;LayerSelectionInfo*&gt;;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    std::map&lt;PartialSubgraph*, SelectionInfoPtrs&gt; splitMap;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; info : layerInfos)</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    {</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.second.m_IsSelected)</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        {</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <span class="keyword">auto</span> it = splitMap.find(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.second.m_Subgraph-&gt;GetRepresentative());</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            <span class="keywordflow">if</span> (it == splitMap.end())</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            {</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                splitMap.insert(</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    std::make_pair(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.second.m_Subgraph-&gt;GetRepresentative(), SelectionInfoPtrs{&amp;info.second}));</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            }</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            {</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                it-&gt;second.push_back(&amp;<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.second);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            }</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        }</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    }</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="comment">// Now each entry in splitMap represents a subgraph</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#ab9e8c2ce720efe33c8a20b8f74bb9d5f">Subgraphs</a> result;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; splitGraph : splitMap)</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    {</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a4ad949634fd697549da161eb09d8b7fd">SubgraphView::IInputSlots</a> inputs;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a3f717693851810942d3ae0180a97fb4c">SubgraphView::IOutputSlots</a> outputs;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#ad7c7687cd3542e5cbb45e56f9a9456e7">SubgraphView::IConnectableLayers</a> layers;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; infoPtr : splitGraph.second)</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        {</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            infoPtr-&gt;CollectNonSelectedInputs(layerInfos, inputs);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            infoPtr-&gt;CollectNonSelectedOutputSlots(layerInfos, outputs);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            layers.push_back(infoPtr-&gt;m_Layer);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        }</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160; </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="comment">// Sort lists into deterministic order, not relying on pointer values which may be different on each execution.</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="comment">// This makes debugging the optimised graph much easier as subsequent stages can also be deterministic.</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        std::sort(inputs.begin(), inputs.end(), [](<span class="keyword">const</span> IInputSlot* a, <span class="keyword">const</span> IInputSlot* b)</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        {</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            auto* castA = PolymorphicDowncast&lt;const InputSlot*&gt;(a);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            auto* castB = PolymorphicDowncast&lt;const InputSlot*&gt;(b);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            const LayerGuid guidA = castA-&gt;GetOwningLayer().GetGuid();</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            const LayerGuid guidB = castB-&gt;GetOwningLayer().GetGuid();</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            if (guidA &lt; guidB)</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            {</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                return true;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            }</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="keywordflow">else</span> if (guidA == guidB)</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            {</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                <span class="keywordflow">return</span> (castA-&gt;GetSlotIndex() &lt; castB-&gt;GetSlotIndex());</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            }</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        });</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        std::sort(outputs.begin(), outputs.end(), [](<span class="keyword">const</span> IOutputSlot* a, <span class="keyword">const</span> IOutputSlot* b)</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        {</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            auto* castA = PolymorphicDowncast&lt;const OutputSlot*&gt;(a);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            auto* castB = PolymorphicDowncast&lt;const OutputSlot*&gt;(b);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            const LayerGuid guidA = castA-&gt;GetOwningLayer().GetGuid();</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            const LayerGuid guidB = castB-&gt;GetOwningLayer().GetGuid();</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            if (guidA &lt; guidB)</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                return true;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            }</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="keywordflow">else</span> if (guidA == guidB)</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            {</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                <span class="keywordflow">return</span> (a-&gt;CalculateIndexOnOwner() &lt; b-&gt;CalculateIndexOnOwner());</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            }</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        });</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        layers.sort([](<span class="keyword">const</span> IConnectableLayer* a, <span class="keyword">const</span> IConnectableLayer* b) { <span class="keywordflow">return</span> a-&gt;GetGuid() &lt; b-&gt;GetGuid(); });</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160; </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="comment">// Create a new sub-graph with the new lists of input/output slots and layer</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        result.emplace_back(std::make_unique&lt;SubgraphView&gt;(std::move(layers),</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                                           std::move(inputs),</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                                                           std::move(outputs)));</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    }</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160; </div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="comment">// Sort subgraphs list into deterministic order, not relying on pointer values which may be different on each </span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="comment">// execution. This makes debugging the optimised graph much easier as subsequent stages can also be </span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// deterministic.</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    std::sort(result.begin(), result.end(), [](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#ad5fc1b5213dcb72c0d4ac9dfb46ef677">SubgraphView::SubgraphViewPtr</a>&amp; a,</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#ad5fc1b5213dcb72c0d4ac9dfb46ef677">SubgraphView::SubgraphViewPtr</a>&amp; b)</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    {</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        return a-&gt;GetIConnectableLayers().front()-&gt;GetGuid() &lt; b-&gt;GetIConnectableLayers().front()-&gt;GetGuid();</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    });</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160; </div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00309">armnn::AssignSplitId()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a41d30a9cd272e05986d71a69d6ad618b">IOutputSlot::CalculateIndexOnOwner()</a>, <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00288">armnn::ForEachLayerOutput()</a>, <a class="el" href="_subgraph_view_8cpp_source.xhtml#l00308">SubgraphView::GetIConnectableLayers()</a>, <a class="el" href="_subgraph_view_8cpp_source.xhtml#l00238">SubgraphView::GetIInputSlots()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00374">armnn::IsReadyForSplitAssignment()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_subgraph_view_selector_8hpp_source.xhtml">SubgraphViewSelector.hpp</a></li>
<li>src/armnn/<a class="el" href="_subgraph_view_selector_8cpp_source.xhtml">SubgraphViewSelector.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarmnn_1_1_subgraph_view_selector_xhtml_ab9e8c2ce720efe33c8a20b8f74bb9d5f"><div class="ttname"><a href="classarmnn_1_1_subgraph_view_selector.xhtml#ab9e8c2ce720efe33c8a20b8f74bb9d5f">armnn::SubgraphViewSelector::Subgraphs</a></div><div class="ttdeci">std::vector&lt; SubgraphView::SubgraphViewPtr &gt; Subgraphs</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8hpp_source.xhtml#l00024">SubgraphViewSelector.hpp:24</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_subgraph_view_selector_xhtml_a3730b0a6006f0d87f894a44e01869d90"><div class="ttname"><a href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">armnn::SubgraphViewSelector::SelectSubgraphs</a></div><div class="ttdeci">static Subgraphs SelectSubgraphs(Graph &amp;graph, const LayerSelectorFunction &amp;selector)</div><div class="ttdoc">Selects subgraphs from a graph based on the selector function and the algorithm.</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00259">SubgraphViewSelector.cpp:259</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_subgraph_view_xhtml_ad7c7687cd3542e5cbb45e56f9a9456e7"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#ad7c7687cd3542e5cbb45e56f9a9456e7">armnn::SubgraphView::IConnectableLayers</a></div><div class="ttdeci">std::list&lt; IConnectableLayer * &gt; IConnectableLayers</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_8hpp_source.xhtml#l00062">SubgraphView.hpp:62</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_subgraph_view_xhtml_a4ad949634fd697549da161eb09d8b7fd"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a4ad949634fd697549da161eb09d8b7fd">armnn::SubgraphView::IInputSlots</a></div><div class="ttdeci">std::vector&lt; IInputSlot * &gt; IInputSlots</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_8hpp_source.xhtml#l00058">SubgraphView.hpp:58</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a6b10dc0d12c7f4a52ad01b9975dbe908"><div class="ttname"><a href="namespacearmnn.xhtml#a6b10dc0d12c7f4a52ad01b9975dbe908">armnn::IsReadyForSplitAssignment</a></div><div class="ttdeci">bool IsReadyForSplitAssignment(LayerSelectionInfo::LayerInfoContainer &amp;layerInfos, LayerSelectionInfo &amp;layerInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00374">SubgraphViewSelector.cpp:374</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_subgraph_view_xhtml_a3f717693851810942d3ae0180a97fb4c"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a3f717693851810942d3ae0180a97fb4c">armnn::SubgraphView::IOutputSlots</a></div><div class="ttdeci">std::vector&lt; IOutputSlot * &gt; IOutputSlots</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_8hpp_source.xhtml#l00060">SubgraphView.hpp:60</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a49538fa883b70c944e437d65d6628eec"><div class="ttname"><a href="namespacearmnn.xhtml#a49538fa883b70c944e437d65d6628eec">armnn::ForEachLayerOutput</a></div><div class="ttdeci">void ForEachLayerOutput(LayerSelectionInfo::LayerInfoContainer &amp;layerInfos, LayerSelectionInfo &amp;layerInfo, Delegate function)</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00288">SubgraphViewSelector.cpp:288</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_subgraph_view_xhtml_ad5fc1b5213dcb72c0d4ac9dfb46ef677"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#ad5fc1b5213dcb72c0d4ac9dfb46ef677">armnn::SubgraphView::SubgraphViewPtr</a></div><div class="ttdeci">std::shared_ptr&lt; SubgraphView &gt; SubgraphViewPtr</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_8hpp_source.xhtml#l00056">SubgraphView.hpp:56</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a09ff1f6670d27d3b41e5b5d35a6c9f37"><div class="ttname"><a href="namespacearmnn.xhtml#a09ff1f6670d27d3b41e5b5d35a6c9f37">armnn::AssignSplitId</a></div><div class="ttdeci">void AssignSplitId(LayerSelectionInfo::LayerInfoContainer &amp;layerInfos, LayerSelectionInfo &amp;layerInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00309">SubgraphViewSelector.cpp:309</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div><div class="ttdeci">@ info</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_subgraph_view_selector.xhtml">SubgraphViewSelector</a></li>
    <li class="footer">Generated on Wed Mar 22 2023 15:53:09 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
