<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/DynamicBackendTests.hpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_dynamic_backend_tests_8hpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">DynamicBackendTests.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="_backend_registry_8hpp_source.xhtml">armnn/BackendRegistry.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml">armnn/backends/DynamicBackend.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_i_layer_support_8hpp_source.xhtml">armnn/backends/ILayerSupport.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_polymorphic_downcast_8hpp_source.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_dynamic_backend_utils_8hpp_source.xhtml">backendsCommon/DynamicBackendUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_filesystem_8hpp_source.xhtml">armnnUtils/Filesystem.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_ref_convolution2d_workload_8hpp_source.xhtml">reference/workloads/RefConvolution2dWorkload.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_runtime_8hpp_source.xhtml">Runtime.hpp</a>&gt;</code><br />
<code>#include &lt;string&gt;</code><br />
<code>#include &lt;memory&gt;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
</div>
<p><a href="_dynamic_backend_tests_8hpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_test_dynamic_backend_utils.xhtml">TestDynamicBackendUtils</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_test_backend_registry.xhtml">TestBackendRegistry</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:a5f525e18ac7373a2250d958dd6cdf94e"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a5f525e18ac7373a2250d958dd6cdf94e">DYNAMIC_BACKEND_BUILD_DIR</a>&#160;&#160;&#160;fs::path(&quot;./&quot;)</td></tr>
<tr class="separator:a5f525e18ac7373a2250d958dd6cdf94e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a955d46e3d52e4a84137de39b574efbc1"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a955d46e3d52e4a84137de39b574efbc1">GetUnitTestExecutablePath</a> ()</td></tr>
<tr class="separator:a955d46e3d52e4a84137de39b574efbc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ccc02805f5cdcbc45c6c548b5e4c29a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a1ccc02805f5cdcbc45c6c548b5e4c29a">GetBasePath</a> (const std::string &amp;basePath)</td></tr>
<tr class="separator:a1ccc02805f5cdcbc45c6c548b5e4c29a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa09188eec988bf3318fbcff3d07dd97"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#aaa09188eec988bf3318fbcff3d07dd97">GetTestDirectoryBasePath</a> ()</td></tr>
<tr class="separator:aaa09188eec988bf3318fbcff3d07dd97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a232b6171adb0f163b616059ba9ddab07"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a232b6171adb0f163b616059ba9ddab07">GetDynamicBackendsBasePath</a> ()</td></tr>
<tr class="separator:a232b6171adb0f163b616059ba9ddab07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa21b882f38be6940c5c0515db9b69508"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a> (const std::string &amp;subdir)</td></tr>
<tr class="separator:aa21b882f38be6940c5c0515db9b69508"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1851a4032b9e6fa980ecaf990960c9b1"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a1851a4032b9e6fa980ecaf990960c9b1">GetTestSubDirectory</a> (const std::string &amp;basePath, const std::string &amp;subdir)</td></tr>
<tr class="separator:a1851a4032b9e6fa980ecaf990960c9b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad01ee94919c8ecfba3b9e4fe89ed6bbe"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a> (const std::string &amp;directory, const std::string &amp;fileName)</td></tr>
<tr class="separator:ad01ee94919c8ecfba3b9e4fe89ed6bbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c082270ab18262a66e97eb1d6922991"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a3c082270ab18262a66e97eb1d6922991">OpenCloseHandleTestImpl</a> ()</td></tr>
<tr class="separator:a3c082270ab18262a66e97eb1d6922991"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec7460101cf2fd4f798d287654783143"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#aec7460101cf2fd4f798d287654783143">CloseInvalidHandleTestImpl</a> ()</td></tr>
<tr class="separator:aec7460101cf2fd4f798d287654783143"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22f4f05aa4404afeca52237617335373"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a22f4f05aa4404afeca52237617335373">OpenEmptyFileNameTestImpl</a> ()</td></tr>
<tr class="separator:a22f4f05aa4404afeca52237617335373"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cf371447a3219bacc62c0f343c174c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a9cf371447a3219bacc62c0f343c174c0">OpenNotExistingFileTestImpl</a> ()</td></tr>
<tr class="separator:a9cf371447a3219bacc62c0f343c174c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f750fea35638f0442885edb837b5d16"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a6f750fea35638f0442885edb837b5d16">OpenNotSharedObjectTestImpl</a> ()</td></tr>
<tr class="separator:a6f750fea35638f0442885edb837b5d16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2384b592a8946dc96a1ea116d86993bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a2384b592a8946dc96a1ea116d86993bf">GetValidEntryPointTestImpl</a> ()</td></tr>
<tr class="separator:a2384b592a8946dc96a1ea116d86993bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d05c0a2fbb1faaeb5d98aa10bfa5cbf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a7d05c0a2fbb1faaeb5d98aa10bfa5cbf">GetNameMangledEntryPointTestImpl</a> ()</td></tr>
<tr class="separator:a7d05c0a2fbb1faaeb5d98aa10bfa5cbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ea23607d9c0b55b90744e9e5f74e7f2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a2ea23607d9c0b55b90744e9e5f74e7f2">GetNoExternEntryPointTestImpl</a> ()</td></tr>
<tr class="separator:a2ea23607d9c0b55b90744e9e5f74e7f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4a311ecf0fe6057c01ed11b2df4ed15"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#ad4a311ecf0fe6057c01ed11b2df4ed15">GetNotExistingEntryPointTestImpl</a> ()</td></tr>
<tr class="separator:ad4a311ecf0fe6057c01ed11b2df4ed15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bafc3a98143bd2cef2748edb409aa54"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a8bafc3a98143bd2cef2748edb409aa54">BackendVersioningTestImpl</a> ()</td></tr>
<tr class="separator:a8bafc3a98143bd2cef2748edb409aa54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac98b3660d8c88c80c02fdcdab25a534f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#ac98b3660d8c88c80c02fdcdab25a534f">CreateDynamicBackendObjectInvalidHandleTestImpl</a> ()</td></tr>
<tr class="separator:ac98b3660d8c88c80c02fdcdab25a534f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfd92844ff506a69381848c62b5f396d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#acfd92844ff506a69381848c62b5f396d">CreateDynamicBackendObjectInvalidInterface1TestImpl</a> ()</td></tr>
<tr class="separator:acfd92844ff506a69381848c62b5f396d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2733fc49ff574659904cbc558c6b2bac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a2733fc49ff574659904cbc558c6b2bac">CreateDynamicBackendObjectInvalidInterface2TestImpl</a> ()</td></tr>
<tr class="separator:a2733fc49ff574659904cbc558c6b2bac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47d1d68ab62ac387a9d8253d08260fc4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a47d1d68ab62ac387a9d8253d08260fc4">CreateDynamicBackendObjectInvalidInterface3TestImpl</a> ()</td></tr>
<tr class="separator:a47d1d68ab62ac387a9d8253d08260fc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a307ee2e89a7a9dd574674a69da91addd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a307ee2e89a7a9dd574674a69da91addd">CreateDynamicBackendObjectInvalidInterface4TestImpl</a> ()</td></tr>
<tr class="separator:a307ee2e89a7a9dd574674a69da91addd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a925a53b0f85afbe661c251b858b01601"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a925a53b0f85afbe661c251b858b01601">CreateDynamicBackendObjectInvalidInterface5TestImpl</a> ()</td></tr>
<tr class="separator:a925a53b0f85afbe661c251b858b01601"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f879660cb144117a50465429197ce0c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a8f879660cb144117a50465429197ce0c">CreateDynamicBackendObjectInvalidInterface6TestImpl</a> ()</td></tr>
<tr class="separator:a8f879660cb144117a50465429197ce0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab831071920946c5e8562471793882ac4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#ab831071920946c5e8562471793882ac4">CreateDynamicBackendObjectInvalidInterface7TestImpl</a> ()</td></tr>
<tr class="separator:ab831071920946c5e8562471793882ac4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48a0ac943ae30935f6d32625bee457f8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a48a0ac943ae30935f6d32625bee457f8">GetBackendPathsTestImpl</a> ()</td></tr>
<tr class="separator:a48a0ac943ae30935f6d32625bee457f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9633d2df7bd3d53a0d6e4d763ec8baf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#ab9633d2df7bd3d53a0d6e4d763ec8baf">GetBackendPathsOverrideTestImpl</a> ()</td></tr>
<tr class="separator:ab9633d2df7bd3d53a0d6e4d763ec8baf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a736bd70a8662a4f3679054a2b2cfaa11"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a736bd70a8662a4f3679054a2b2cfaa11">GetSharedObjectsTestImpl</a> ()</td></tr>
<tr class="separator:a736bd70a8662a4f3679054a2b2cfaa11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76c94b7ce857689477dcac09aba1858f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a76c94b7ce857689477dcac09aba1858f">CreateDynamicBackendsTestImpl</a> ()</td></tr>
<tr class="separator:a76c94b7ce857689477dcac09aba1858f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40efe1578a402125bd0efbc29eecb225"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a40efe1578a402125bd0efbc29eecb225">CreateDynamicBackendsNoPathsTestImpl</a> ()</td></tr>
<tr class="separator:a40efe1578a402125bd0efbc29eecb225"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6308c78a8fdab82f4929b07dc439cd9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#ae6308c78a8fdab82f4929b07dc439cd9">CreateDynamicBackendsAllInvalidTestImpl</a> ()</td></tr>
<tr class="separator:ae6308c78a8fdab82f4929b07dc439cd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f89ff6d66212524954282edcda4082b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a1f89ff6d66212524954282edcda4082b">CreateDynamicBackendsMixedTypesTestImpl</a> ()</td></tr>
<tr class="separator:a1f89ff6d66212524954282edcda4082b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98bdeaf1b8289ba5fa6ac2b0e45a13d0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a98bdeaf1b8289ba5fa6ac2b0e45a13d0">RegisterMultipleInvalidDynamicBackendsTestImpl</a> ()</td></tr>
<tr class="separator:a98bdeaf1b8289ba5fa6ac2b0e45a13d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4967976a2407f1e67482235953328fba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a4967976a2407f1e67482235953328fba">RuntimeEmptyTestImpl</a> ()</td></tr>
<tr class="separator:a4967976a2407f1e67482235953328fba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a3715f6c83f6dd0c62035ecd2dbb386"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a2a3715f6c83f6dd0c62035ecd2dbb386">RuntimeDynamicBackendsTestImpl</a> ()</td></tr>
<tr class="separator:a2a3715f6c83f6dd0c62035ecd2dbb386"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a805c0fe55cb42d8507a081c7c7659408"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a805c0fe55cb42d8507a081c7c7659408">RuntimeDuplicateDynamicBackendsTestImpl</a> ()</td></tr>
<tr class="separator:a805c0fe55cb42d8507a081c7c7659408"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe972850015352cf8ae3e073ac31abcd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#afe972850015352cf8ae3e073ac31abcd">RuntimeInvalidDynamicBackendsTestImpl</a> ()</td></tr>
<tr class="separator:afe972850015352cf8ae3e073ac31abcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05f580df8c6c039d41d42c838cd97014"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml#a05f580df8c6c039d41d42c838cd97014">RuntimeInvalidOverridePathTestImpl</a> ()</td></tr>
<tr class="separator:a05f580df8c6c039d41d42c838cd97014"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="a5f525e18ac7373a2250d958dd6cdf94e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f525e18ac7373a2250d958dd6cdf94e">&#9670;&nbsp;</a></span>DYNAMIC_BACKEND_BUILD_DIR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DYNAMIC_BACKEND_BUILD_DIR&#160;&#160;&#160;fs::path(&quot;./&quot;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00028">28</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00135">GetBasePath()</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a8bafc3a98143bd2cef2748edb409aa54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8bafc3a98143bd2cef2748edb409aa54">&#9670;&nbsp;</a></span>BackendVersioningTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void BackendVersioningTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00333">333</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>, and <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00076">TestDynamicBackendUtils::IsBackendCompatibleTest()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;{</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="comment">// The backend API version used for the tests</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> backendApiVersion{ 2, 4 };</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="comment">// Same backend and backend API versions are compatible with the backend API</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> sameBackendVersion{ 2, 4 };</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    CHECK(sameBackendVersion == backendApiVersion);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    CHECK(sameBackendVersion &lt;= backendApiVersion);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    CHECK(<a class="code" href="class_test_dynamic_backend_utils.xhtml#a8e34f3a7d4d581864eb93474b8446405">TestDynamicBackendUtils::IsBackendCompatibleTest</a>(backendApiVersion, sameBackendVersion) == <span class="keyword">true</span>);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">// Backend versions that differ from the backend API version by major revision are not compatible</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">// with the backend API</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> laterMajorBackendVersion{ 3, 4 };</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    CHECK(!(laterMajorBackendVersion == backendApiVersion));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    CHECK(!(laterMajorBackendVersion &lt;= backendApiVersion));</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    CHECK(<a class="code" href="class_test_dynamic_backend_utils.xhtml#a8e34f3a7d4d581864eb93474b8446405">TestDynamicBackendUtils::IsBackendCompatibleTest</a>(backendApiVersion, laterMajorBackendVersion) == <span class="keyword">false</span>);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> earlierMajorBackendVersion{ 1, 4 };</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    CHECK(!(earlierMajorBackendVersion == backendApiVersion));</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    CHECK(earlierMajorBackendVersion &lt;= backendApiVersion);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    CHECK(<a class="code" href="class_test_dynamic_backend_utils.xhtml#a8e34f3a7d4d581864eb93474b8446405">TestDynamicBackendUtils::IsBackendCompatibleTest</a>(backendApiVersion,</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                                                earlierMajorBackendVersion) == <span class="keyword">false</span>);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="comment">// Backend versions with the same major revision but later minor revision than</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="comment">// the backend API version are not compatible with the backend API</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> laterMinorBackendVersion{ 2, 5 };</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    CHECK(!(laterMinorBackendVersion == backendApiVersion));</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    CHECK(!(laterMinorBackendVersion &lt;= backendApiVersion));</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    CHECK(<a class="code" href="class_test_dynamic_backend_utils.xhtml#a8e34f3a7d4d581864eb93474b8446405">TestDynamicBackendUtils::IsBackendCompatibleTest</a>(backendApiVersion, laterMinorBackendVersion) == <span class="keyword">false</span>);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="comment">// Backend versions with the same major revision but earlier minor revision than</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="comment">// the backend API version are compatible with the backend API</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> earlierMinorBackendVersion{ 2, 3 };</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    CHECK(!(earlierMinorBackendVersion == backendApiVersion));</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    CHECK(earlierMinorBackendVersion &lt;= backendApiVersion);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    CHECK(<a class="code" href="class_test_dynamic_backend_utils.xhtml#a8e34f3a7d4d581864eb93474b8446405">TestDynamicBackendUtils::IsBackendCompatibleTest</a>(backendApiVersion, earlierMinorBackendVersion) == <span class="keyword">true</span>);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_version_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_version.xhtml">armnn::BackendVersion</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00031">IBackendInternal.hpp:31</a></div></div>
<div class="ttc" id="class_test_dynamic_backend_utils_xhtml_a8e34f3a7d4d581864eb93474b8446405"><div class="ttname"><a href="class_test_dynamic_backend_utils.xhtml#a8e34f3a7d4d581864eb93474b8446405">TestDynamicBackendUtils::IsBackendCompatibleTest</a></div><div class="ttdeci">static bool IsBackendCompatibleTest(const armnn::BackendVersion &amp;backendApiVersion, const armnn::BackendVersion &amp;backendVersion)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00076">DynamicBackendTests.hpp:76</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aec7460101cf2fd4f798d287654783143"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec7460101cf2fd4f798d287654783143">&#9670;&nbsp;</a></span>CloseInvalidHandleTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CloseInvalidHandleTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00211">211</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;{</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">// This calls must silently handle invalid handles and complete successfully (no segfaults, etc.)</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">DynamicBackendUtils::CloseHandle</a>(<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aebd30d283660a07b4123fdb0245e8426"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">armnn::DynamicBackendUtils::CloseHandle</a></div><div class="ttdeci">static void CloseHandle(const void *sharedObjectHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00036">DynamicBackendUtils.cpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac98b3660d8c88c80c02fdcdab25a534f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac98b3660d8c88c80c02fdcdab25a534f">&#9670;&nbsp;</a></span>CreateDynamicBackendObjectInvalidHandleTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendObjectInvalidHandleTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00425">425</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;{</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="comment">// Invalid (null) shared object handle</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> dynamicBackend;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    CHECK_THROWS_AS(dynamicBackend.reset(<span class="keyword">new</span> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml">DynamicBackend</a>(sharedObjectHandle)), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    CHECK((dynamicBackend == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml">armnn::DynamicBackend</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00018">DynamicBackend.hpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a754d43dc24a0fe36ecb3044d8f13a413"><div class="ttname"><a href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">armnn::DynamicBackendPtr</a></div><div class="ttdeci">std::unique_ptr&lt; DynamicBackend &gt; DynamicBackendPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00052">DynamicBackend.hpp:52</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acfd92844ff506a69381848c62b5f396d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfd92844ff506a69381848c62b5f396d">&#9670;&nbsp;</a></span>CreateDynamicBackendObjectInvalidInterface1TestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendObjectInvalidInterface1TestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00437">437</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;{</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="comment">// Valid shared object handle</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="comment">// Wrong (not C-style) name mangling</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendSubDir);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestInvalidTestDynamicBackend1FileName);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> dynamicBackend;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    CHECK_THROWS_AS(dynamicBackend.reset(<span class="keyword">new</span> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml">DynamicBackend</a>(sharedObjectHandle)), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    CHECK((dynamicBackend == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml">armnn::DynamicBackend</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00018">DynamicBackend.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a754d43dc24a0fe36ecb3044d8f13a413"><div class="ttname"><a href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">armnn::DynamicBackendPtr</a></div><div class="ttdeci">std::unique_ptr&lt; DynamicBackend &gt; DynamicBackendPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00052">DynamicBackend.hpp:52</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2733fc49ff574659904cbc558c6b2bac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2733fc49ff574659904cbc558c6b2bac">&#9670;&nbsp;</a></span>CreateDynamicBackendObjectInvalidInterface2TestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendObjectInvalidInterface2TestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00456">456</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;{</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="comment">// Valid shared object handle</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="comment">// Correct name mangling</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="comment">// Wrong interface (missing GetBackendId())</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendSubDir);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestInvalidTestDynamicBackend2FileName);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> dynamicBackend;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    CHECK_THROWS_AS(dynamicBackend.reset(<span class="keyword">new</span> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml">DynamicBackend</a>(sharedObjectHandle)), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    CHECK((dynamicBackend == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml">armnn::DynamicBackend</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00018">DynamicBackend.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a754d43dc24a0fe36ecb3044d8f13a413"><div class="ttname"><a href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">armnn::DynamicBackendPtr</a></div><div class="ttdeci">std::unique_ptr&lt; DynamicBackend &gt; DynamicBackendPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00052">DynamicBackend.hpp:52</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a47d1d68ab62ac387a9d8253d08260fc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47d1d68ab62ac387a9d8253d08260fc4">&#9670;&nbsp;</a></span>CreateDynamicBackendObjectInvalidInterface3TestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendObjectInvalidInterface3TestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00476">476</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;{</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="comment">// Valid shared object handle</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="comment">// Correct name mangling</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="comment">// Wrong interface (missing GetVersion())</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendSubDir);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestInvalidTestDynamicBackend3FileName);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> dynamicBackend;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    CHECK_THROWS_AS(dynamicBackend.reset(<span class="keyword">new</span> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml">DynamicBackend</a>(sharedObjectHandle)), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    CHECK((dynamicBackend == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml">armnn::DynamicBackend</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00018">DynamicBackend.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a754d43dc24a0fe36ecb3044d8f13a413"><div class="ttname"><a href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">armnn::DynamicBackendPtr</a></div><div class="ttdeci">std::unique_ptr&lt; DynamicBackend &gt; DynamicBackendPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00052">DynamicBackend.hpp:52</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a307ee2e89a7a9dd574674a69da91addd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a307ee2e89a7a9dd574674a69da91addd">&#9670;&nbsp;</a></span>CreateDynamicBackendObjectInvalidInterface4TestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendObjectInvalidInterface4TestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00496">496</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="comment">// Valid shared object handle</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="comment">// Correct name mangling</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="comment">// Wrong interface (missing BackendFactory())</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendSubDir);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestInvalidTestDynamicBackend4FileName);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> dynamicBackend;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    CHECK_THROWS_AS(dynamicBackend.reset(<span class="keyword">new</span> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml">DynamicBackend</a>(sharedObjectHandle)), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    CHECK((dynamicBackend == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml">armnn::DynamicBackend</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00018">DynamicBackend.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a754d43dc24a0fe36ecb3044d8f13a413"><div class="ttname"><a href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">armnn::DynamicBackendPtr</a></div><div class="ttdeci">std::unique_ptr&lt; DynamicBackend &gt; DynamicBackendPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00052">DynamicBackend.hpp:52</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a925a53b0f85afbe661c251b858b01601"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a925a53b0f85afbe661c251b858b01601">&#9670;&nbsp;</a></span>CreateDynamicBackendObjectInvalidInterface5TestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendObjectInvalidInterface5TestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00516">516</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;{</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="comment">// Valid shared object handle</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="comment">// Correct name mangling</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="comment">// Correct interface</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="comment">// Invalid (null) backend id returned by GetBackendId()</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendSubDir);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestInvalidTestDynamicBackend5FileName);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> dynamicBackend;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    CHECK_THROWS_AS(dynamicBackend.reset(<span class="keyword">new</span> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml">DynamicBackend</a>(sharedObjectHandle)), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    CHECK((dynamicBackend == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml">armnn::DynamicBackend</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00018">DynamicBackend.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a754d43dc24a0fe36ecb3044d8f13a413"><div class="ttname"><a href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">armnn::DynamicBackendPtr</a></div><div class="ttdeci">std::unique_ptr&lt; DynamicBackend &gt; DynamicBackendPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00052">DynamicBackend.hpp:52</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8f879660cb144117a50465429197ce0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f879660cb144117a50465429197ce0c">&#9670;&nbsp;</a></span>CreateDynamicBackendObjectInvalidInterface6TestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendObjectInvalidInterface6TestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00537">537</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;{</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="comment">// Valid shared object handle</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="comment">// Correct name mangling</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="comment">// Correct interface</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="comment">// Invalid (null) backend instance returned by BackendFactory()</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendSubDir);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestInvalidTestDynamicBackend6FileName);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> dynamicBackend;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    CHECK_NOTHROW(dynamicBackend.reset(<span class="keyword">new</span> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml">DynamicBackend</a>(sharedObjectHandle)));</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    CHECK((dynamicBackend != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> dynamicBackendId;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    CHECK_NOTHROW(dynamicBackendId = dynamicBackend-&gt;GetBackendId());</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    CHECK((dynamicBackendId == <span class="stringliteral">&quot;InvalidTestDynamicBackend&quot;</span>));</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> dynamicBackendVersion;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    CHECK_NOTHROW(dynamicBackendVersion = dynamicBackend-&gt;GetBackendVersion());</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    CHECK((dynamicBackendVersion &gt;= <a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a>({ 1, 0 })));</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ade0af9dacaa52cafdd701bef2e901c77">IBackendInternalUniquePtr</a> dynamicBackendInstance1;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    CHECK_THROWS_AS(dynamicBackendInstance1 = dynamicBackend-&gt;GetBackend(), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    CHECK((dynamicBackendInstance1 == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <a class="code" href="classarmnn_1_1_backend_registry.xhtml#aa33ac375677ee8436456a585dd6f68d9">BackendRegistry::FactoryFunction</a> dynamicBackendFactoryFunction = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    CHECK_NOTHROW(dynamicBackendFactoryFunction = dynamicBackend-&gt;GetFactoryFunction());</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    CHECK((dynamicBackendFactoryFunction != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ade0af9dacaa52cafdd701bef2e901c77">IBackendInternalUniquePtr</a> dynamicBackendInstance2;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    CHECK_THROWS_AS(dynamicBackendInstance2 = dynamicBackendFactoryFunction(), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    CHECK((dynamicBackendInstance2 == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_aa33ac375677ee8436456a585dd6f68d9"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#aa33ac375677ee8436456a585dd6f68d9">armnn::BackendRegistry::FactoryFunction</a></div><div class="ttdeci">std::function&lt; PointerType()&gt; FactoryFunction</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00033">BackendRegistry.hpp:33</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml">armnn::DynamicBackend</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00018">DynamicBackend.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a754d43dc24a0fe36ecb3044d8f13a413"><div class="ttname"><a href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">armnn::DynamicBackendPtr</a></div><div class="ttdeci">std::unique_ptr&lt; DynamicBackend &gt; DynamicBackendPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00052">DynamicBackend.hpp:52</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_version_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_version.xhtml">armnn::BackendVersion</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00031">IBackendInternal.hpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ade0af9dacaa52cafdd701bef2e901c77"><div class="ttname"><a href="namespacearmnn.xhtml#ade0af9dacaa52cafdd701bef2e901c77">armnn::IBackendInternalUniquePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IBackendInternal &gt; IBackendInternalUniquePtr</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00026">BackendRegistry.hpp:26</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab831071920946c5e8562471793882ac4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab831071920946c5e8562471793882ac4">&#9670;&nbsp;</a></span>CreateDynamicBackendObjectInvalidInterface7TestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendObjectInvalidInterface7TestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00578">578</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;{</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="comment">// Valid shared object handle</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="comment">// Correct name mangling</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="comment">// Correct interface</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="comment">// Invalid (incompatible backend API version) backend instance returned by BackendFactory()</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendSubDir);</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestInvalidTestDynamicBackend7FileName);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> dynamicBackend;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    CHECK_THROWS_AS(dynamicBackend.reset(<span class="keyword">new</span> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml">DynamicBackend</a>(sharedObjectHandle)), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    CHECK((dynamicBackend == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml">armnn::DynamicBackend</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00018">DynamicBackend.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a754d43dc24a0fe36ecb3044d8f13a413"><div class="ttname"><a href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">armnn::DynamicBackendPtr</a></div><div class="ttdeci">std::unique_ptr&lt; DynamicBackend &gt; DynamicBackendPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00052">DynamicBackend.hpp:52</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae6308c78a8fdab82f4929b07dc439cd9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6308c78a8fdab82f4929b07dc439cd9">&#9670;&nbsp;</a></span>CreateDynamicBackendsAllInvalidTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendsAllInvalidTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00863">863</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;{</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    std::vector&lt;std::string&gt; sharedObjects</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    {</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        <span class="stringliteral">&quot;InvalidSharedObject1&quot;</span>,</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        <span class="stringliteral">&quot;InvalidSharedObject2&quot;</span>,</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        <span class="stringliteral">&quot;InvalidSharedObject3&quot;</span>,</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    };</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    std::vector&lt;DynamicBackendPtr&gt; dynamicBackends = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a42e250dfa19b9df3abdb273e1d35fa5b">DynamicBackendUtils::CreateDynamicBackends</a>(sharedObjects);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    CHECK(dynamicBackends.empty());</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_a42e250dfa19b9df3abdb273e1d35fa5b"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a42e250dfa19b9df3abdb273e1d35fa5b">armnn::DynamicBackendUtils::CreateDynamicBackends</a></div><div class="ttdeci">static std::vector&lt; DynamicBackendPtr &gt; CreateDynamicBackends(const std::vector&lt; std::string &gt; &amp;sharedObjects)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00261">DynamicBackendUtils.cpp:261</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1f89ff6d66212524954282edcda4082b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f89ff6d66212524954282edcda4082b">&#9670;&nbsp;</a></span>CreateDynamicBackendsMixedTypesTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendsMixedTypesTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00878">878</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;{</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    std::string testDynamicBackendsSubDir5 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir5);</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    std::string testDynamicBackendsSubDir6 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir6);</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    CHECK(exists(testDynamicBackendsSubDir5));</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    CHECK(exists(testDynamicBackendsSubDir6));</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    std::string testValidBackend2FilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testDynamicBackendsSubDir5,</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                                                            g_TestValidBackend2FileName);</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    std::string testInvalidBackend8FilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testDynamicBackendsSubDir5,</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                                                              g_TestInvalidBackend8FileName);</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    std::string testInvalidBackend9FilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testDynamicBackendsSubDir6,</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                                                              g_TestInvalidBackend9FileName);</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    CHECK(exists(testValidBackend2FilePath));</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    CHECK(exists(testInvalidBackend8FilePath));</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    CHECK(exists(testInvalidBackend9FilePath));</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    std::vector&lt;std::string&gt; sharedObjects</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    {</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;        testValidBackend2FilePath,   <span class="comment">// Arm_TestValid2_backend.so     -&gt; valid (basic backend name)</span></div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;        testInvalidBackend8FilePath, <span class="comment">// Arm_TestInvalid8_backend.so   -&gt; not valid (invalid backend id)</span></div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;        testInvalidBackend9FilePath, <span class="comment">// Arm_TestInvalid9_backend.so   -&gt; not valid (incompatible version)</span></div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;        <span class="stringliteral">&quot;InvalidSharedObject&quot;</span>,       <span class="comment">// The file does not exist</span></div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    };</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    std::vector&lt;DynamicBackendPtr&gt; dynamicBackends = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a42e250dfa19b9df3abdb273e1d35fa5b">DynamicBackendUtils::CreateDynamicBackends</a>(sharedObjects);</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    CHECK(dynamicBackends.size() == 1);</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    CHECK((dynamicBackends[0] != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    CHECK((dynamicBackends[0]-&gt;<a class="code" href="_test_dynamic_backend_8cpp.xhtml#adaff295134ed2825ae43a8e9281b6f2a">GetBackendId</a>() == <span class="stringliteral">&quot;TestValid2&quot;</span>));</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_a42e250dfa19b9df3abdb273e1d35fa5b"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a42e250dfa19b9df3abdb273e1d35fa5b">armnn::DynamicBackendUtils::CreateDynamicBackends</a></div><div class="ttdeci">static std::vector&lt; DynamicBackendPtr &gt; CreateDynamicBackends(const std::vector&lt; std::string &gt; &amp;sharedObjects)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00261">DynamicBackendUtils.cpp:261</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="_test_dynamic_backend_8cpp_xhtml_adaff295134ed2825ae43a8e9281b6f2a"><div class="ttname"><a href="_test_dynamic_backend_8cpp.xhtml#adaff295134ed2825ae43a8e9281b6f2a">GetBackendId</a></div><div class="ttdeci">const char * GetBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_test_dynamic_backend_8cpp_source.xhtml#l00080">TestDynamicBackend.cpp:80</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a40efe1578a402125bd0efbc29eecb225"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40efe1578a402125bd0efbc29eecb225">&#9670;&nbsp;</a></span>CreateDynamicBackendsNoPathsTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendsNoPathsTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00854">854</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;{</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    std::vector&lt;DynamicBackendPtr&gt; dynamicBackends = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a42e250dfa19b9df3abdb273e1d35fa5b">DynamicBackendUtils::CreateDynamicBackends</a>({});</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    CHECK(dynamicBackends.empty());</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_a42e250dfa19b9df3abdb273e1d35fa5b"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a42e250dfa19b9df3abdb273e1d35fa5b">armnn::DynamicBackendUtils::CreateDynamicBackends</a></div><div class="ttdeci">static std::vector&lt; DynamicBackendPtr &gt; CreateDynamicBackends(const std::vector&lt; std::string &gt; &amp;sharedObjects)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00261">DynamicBackendUtils.cpp:261</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a76c94b7ce857689477dcac09aba1858f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76c94b7ce857689477dcac09aba1858f">&#9670;&nbsp;</a></span>CreateDynamicBackendsTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CreateDynamicBackendsTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00791">791</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;{</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <span class="comment">// The test covers four directories:</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <span class="comment">// &lt;unit test path&gt;/src/backends/backendsCommon/test/</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="comment">//                                                ├─ backendsTestPath5/   -&gt; exists, contains files</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <span class="comment">//                                                ├─ backendsTestPath6/   -&gt; exists, contains files</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    <span class="comment">//                                                ├─ backendsTestPath7/   -&gt; exists, but empty</span></div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <span class="comment">//                                                └─ backendsTestPath8/   -&gt; does not exist</span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="comment">// The test sub-directory backendsTestPath5/ contains the following test files:</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    <span class="comment">// Arm_TestValid2_backend.so   -&gt; valid (basic backend name)</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="comment">// Arm_TestValid3_backend.so   -&gt; valid (basic backend name)</span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    <span class="comment">// Arm_TestInvalid8_backend.so -&gt; not valid (invalid backend id)</span></div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    <span class="comment">// The test sub-directory backendsTestPath6/ contains the following test files:</span></div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    <span class="comment">// Arm_TestValid2_backend.so   -&gt; valid (but duplicated from backendsTestPath5/)</span></div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <span class="comment">// Arm_TestValid4_backend.so   -&gt; valid (it has a different filename,</span></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="comment">//                                       but it has the same backend id of Arm_TestValid2_backend.so</span></div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="comment">//                                       and the same version)</span></div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    <span class="comment">// Arm_TestValid5_backend.so   -&gt; valid (basic backend name)</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    <span class="comment">// Arm_TestInvalid9_backend.so -&gt; not valid (it has a different filename,</span></div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="comment">//                                           but it has the same backend id of Arm_TestValid2_backend.so</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <span class="comment">//                                           and a version incompatible with the Backend API)</span></div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    std::string testDynamicBackendsSubDir5 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir5);</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    std::string testDynamicBackendsSubDir6 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir6);</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    std::string testDynamicBackendsSubDir7 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir7);</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    std::string testDynamicBackendsSubDir8 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir8);</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    CHECK(exists(testDynamicBackendsSubDir5));</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    CHECK(exists(testDynamicBackendsSubDir6));</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    CHECK(exists(testDynamicBackendsSubDir7));</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    CHECK(!exists(testDynamicBackendsSubDir8));</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    std::vector&lt;std::string&gt; backendPaths</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    {</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        testDynamicBackendsSubDir5,</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        testDynamicBackendsSubDir6,</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        testDynamicBackendsSubDir7,</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        testDynamicBackendsSubDir8</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    };</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    std::vector&lt;std::string&gt; sharedObjects = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a48e1fb944c3ef4086365aedcadb4c311">DynamicBackendUtils::GetSharedObjects</a>(backendPaths);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    std::vector&lt;DynamicBackendPtr&gt; dynamicBackends = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a42e250dfa19b9df3abdb273e1d35fa5b">DynamicBackendUtils::CreateDynamicBackends</a>(sharedObjects);</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    CHECK(dynamicBackends.size() == 5);</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    CHECK((dynamicBackends[0] != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    CHECK((dynamicBackends[1] != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    CHECK((dynamicBackends[2] != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    CHECK((dynamicBackends[3] != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    CHECK((dynamicBackends[4] != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    <span class="comment">// Duplicates are allowed here, they will be skipped later during the backend registration</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    CHECK((dynamicBackends[0]-&gt;<a class="code" href="_test_dynamic_backend_8cpp.xhtml#adaff295134ed2825ae43a8e9281b6f2a">GetBackendId</a>() == <span class="stringliteral">&quot;TestValid2&quot;</span>));</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    CHECK((dynamicBackends[1]-&gt;<a class="code" href="_test_dynamic_backend_8cpp.xhtml#adaff295134ed2825ae43a8e9281b6f2a">GetBackendId</a>() == <span class="stringliteral">&quot;TestValid3&quot;</span>));</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    CHECK((dynamicBackends[2]-&gt;<a class="code" href="_test_dynamic_backend_8cpp.xhtml#adaff295134ed2825ae43a8e9281b6f2a">GetBackendId</a>() == <span class="stringliteral">&quot;TestValid2&quot;</span>)); <span class="comment">// From duplicate Arm_TestValid2_backend.so</span></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    CHECK((dynamicBackends[3]-&gt;<a class="code" href="_test_dynamic_backend_8cpp.xhtml#adaff295134ed2825ae43a8e9281b6f2a">GetBackendId</a>() == <span class="stringliteral">&quot;TestValid2&quot;</span>)); <span class="comment">// From Arm_TestValid4_backend.so</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    CHECK((dynamicBackends[4]-&gt;<a class="code" href="_test_dynamic_backend_8cpp.xhtml#adaff295134ed2825ae43a8e9281b6f2a">GetBackendId</a>() == <span class="stringliteral">&quot;TestValid5&quot;</span>));</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_a42e250dfa19b9df3abdb273e1d35fa5b"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a42e250dfa19b9df3abdb273e1d35fa5b">armnn::DynamicBackendUtils::CreateDynamicBackends</a></div><div class="ttdeci">static std::vector&lt; DynamicBackendPtr &gt; CreateDynamicBackends(const std::vector&lt; std::string &gt; &amp;sharedObjects)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00261">DynamicBackendUtils.cpp:261</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="_test_dynamic_backend_8cpp_xhtml_adaff295134ed2825ae43a8e9281b6f2a"><div class="ttname"><a href="_test_dynamic_backend_8cpp.xhtml#adaff295134ed2825ae43a8e9281b6f2a">GetBackendId</a></div><div class="ttdeci">const char * GetBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_test_dynamic_backend_8cpp_source.xhtml#l00080">TestDynamicBackend.cpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_a48e1fb944c3ef4086365aedcadb4c311"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a48e1fb944c3ef4086365aedcadb4c311">armnn::DynamicBackendUtils::GetSharedObjects</a></div><div class="ttdeci">static std::vector&lt; std::string &gt; GetSharedObjects(const std::vector&lt; std::string &gt; &amp;backendPaths)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00174">DynamicBackendUtils.cpp:174</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab9633d2df7bd3d53a0d6e4d763ec8baf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9633d2df7bd3d53a0d6e4d763ec8baf">&#9670;&nbsp;</a></span>GetBackendPathsOverrideTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetBackendPathsOverrideTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00679">679</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;{</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    std::string subDir1 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir1);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    std::string subDir4 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir4);</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    CHECK(exists(subDir1));</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    CHECK(!exists(subDir4));</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="comment">// Override with valid path</span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    std::vector&lt;std::string&gt; validResult = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a6d47980f97dd4d3aab24d818f8474dce">DynamicBackendUtils::GetBackendPaths</a>(subDir1);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    CHECK(validResult.size() == 1);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    CHECK(validResult[0] == subDir1);</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="comment">// Override with invalid path</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    std::vector&lt;std::string&gt; invalidResult = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a6d47980f97dd4d3aab24d818f8474dce">DynamicBackendUtils::GetBackendPaths</a>(subDir4);</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    CHECK(invalidResult.empty());</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_a6d47980f97dd4d3aab24d818f8474dce"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a6d47980f97dd4d3aab24d818f8474dce">armnn::DynamicBackendUtils::GetBackendPaths</a></div><div class="ttdeci">static std::vector&lt; std::string &gt; GetBackendPaths(const std::string &amp;overrideBackendPath=&quot;&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00079">DynamicBackendUtils.cpp:79</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a48a0ac943ae30935f6d32625bee457f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48a0ac943ae30935f6d32625bee457f8">&#9670;&nbsp;</a></span>GetBackendPathsTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetBackendPathsTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00599">599</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;{</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="comment">// The test covers four directories:</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="comment">// &lt;unit test path&gt;/src/backends/backendsCommon/test/</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="comment">//                                                ├─ backendsTestPath1/   -&gt; exists, contains files</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="comment">//                                                ├─ backendsTestPath2/   -&gt; exists, contains files</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="comment">//                                                ├─ backendsTestPath3/   -&gt; exists, but empty</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="comment">//                                                └─ backendsTestPath4/   -&gt; does not exist</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    std::string subDir1 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir1);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    std::string subDir2 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir2);</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    std::string subDir3 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir3);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    std::string subDir4 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir4);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    CHECK(exists(subDir1));</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    CHECK(exists(subDir2));</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    CHECK(exists(subDir3));</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    CHECK(!exists(subDir4));</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="comment">// No path</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    CHECK(<a class="code" href="class_test_dynamic_backend_utils.xhtml#ae905a2c700ca7d4b71fd64fe01e5580d">TestDynamicBackendUtils::GetBackendPathsImplTest</a>(<span class="stringliteral">&quot;&quot;</span>).empty());</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="comment">// Malformed path</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    std::string malformedDir(subDir1 + <span class="stringliteral">&quot;/&quot;</span> + subDir1);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    CHECK(<a class="code" href="class_test_dynamic_backend_utils.xhtml#ae905a2c700ca7d4b71fd64fe01e5580d">TestDynamicBackendUtils::GetBackendPathsImplTest</a>(malformedDir).size()==0);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="comment">// Single valid path</span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    std::vector&lt;std::string&gt; DynamicBackendPaths2 = <a class="code" href="class_test_dynamic_backend_utils.xhtml#ae905a2c700ca7d4b71fd64fe01e5580d">TestDynamicBackendUtils::GetBackendPathsImplTest</a>(subDir1);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    CHECK(DynamicBackendPaths2.size() == 1);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    CHECK(DynamicBackendPaths2[0] == subDir1);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="comment">// Multiple equal and valid paths</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    std::string multipleEqualDirs(subDir1 + <span class="stringliteral">&quot;:&quot;</span> + subDir1);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    std::vector&lt;std::string&gt; DynamicBackendPaths3 = <a class="code" href="class_test_dynamic_backend_utils.xhtml#ae905a2c700ca7d4b71fd64fe01e5580d">TestDynamicBackendUtils::GetBackendPathsImplTest</a>(multipleEqualDirs);</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    CHECK(DynamicBackendPaths3.size() == 1);</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    CHECK(DynamicBackendPaths3[0] == subDir1);</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <span class="comment">// Multiple empty paths</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    CHECK(<a class="code" href="class_test_dynamic_backend_utils.xhtml#ae905a2c700ca7d4b71fd64fe01e5580d">TestDynamicBackendUtils::GetBackendPathsImplTest</a>(<span class="stringliteral">&quot;:::&quot;</span>).empty());</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <span class="comment">// Multiple valid paths</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    std::string multipleValidPaths(subDir1 + <span class="stringliteral">&quot;:&quot;</span> + subDir2 + <span class="stringliteral">&quot;:&quot;</span> + subDir3);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    std::vector&lt;std::string&gt; DynamicBackendPaths5 =</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <a class="code" href="class_test_dynamic_backend_utils.xhtml#ae905a2c700ca7d4b71fd64fe01e5580d">TestDynamicBackendUtils::GetBackendPathsImplTest</a>(multipleValidPaths);</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    CHECK(DynamicBackendPaths5.size() == 3);</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    CHECK(DynamicBackendPaths5[0] == subDir1);</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    CHECK(DynamicBackendPaths5[1] == subDir2);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    CHECK(DynamicBackendPaths5[2] == subDir3);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="comment">// Valid among empty paths</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    std::string validAmongEmptyDirs(<span class="stringliteral">&quot;::&quot;</span> + subDir1 + <span class="stringliteral">&quot;:&quot;</span>);</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    std::vector&lt;std::string&gt; DynamicBackendPaths6 =</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        <a class="code" href="class_test_dynamic_backend_utils.xhtml#ae905a2c700ca7d4b71fd64fe01e5580d">TestDynamicBackendUtils::GetBackendPathsImplTest</a>(validAmongEmptyDirs);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    CHECK(DynamicBackendPaths6.size() == 1);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    CHECK(DynamicBackendPaths6[0] == subDir1);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="comment">// Invalid among empty paths</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    std::string invalidAmongEmptyDirs(<span class="stringliteral">&quot;:&quot;</span> + subDir4 + <span class="stringliteral">&quot;::&quot;</span>);</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    CHECK(<a class="code" href="class_test_dynamic_backend_utils.xhtml#ae905a2c700ca7d4b71fd64fe01e5580d">TestDynamicBackendUtils::GetBackendPathsImplTest</a>(invalidAmongEmptyDirs).empty());</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="comment">// Valid, invalid and empty paths</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    std::string validInvalidEmptyDirs(subDir1 + <span class="stringliteral">&quot;:&quot;</span> + subDir4 + <span class="stringliteral">&quot;:&quot;</span>);</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    std::vector&lt;std::string&gt; DynamicBackendPaths8 =</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <a class="code" href="class_test_dynamic_backend_utils.xhtml#ae905a2c700ca7d4b71fd64fe01e5580d">TestDynamicBackendUtils::GetBackendPathsImplTest</a>(validInvalidEmptyDirs);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    CHECK(DynamicBackendPaths8.size() == 1);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    CHECK(DynamicBackendPaths8[0] == subDir1);</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="comment">// Mix of duplicates of valid, invalid and empty paths</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    std::string duplicateValidInvalidEmptyDirs(validInvalidEmptyDirs + <span class="stringliteral">&quot;:&quot;</span> + validInvalidEmptyDirs + <span class="stringliteral">&quot;:&quot;</span> +</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                                               subDir2 + <span class="stringliteral">&quot;:&quot;</span> + subDir2);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    std::vector&lt;std::string&gt; DynamicBackendPaths9 =</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <a class="code" href="class_test_dynamic_backend_utils.xhtml#ae905a2c700ca7d4b71fd64fe01e5580d">TestDynamicBackendUtils::GetBackendPathsImplTest</a>(duplicateValidInvalidEmptyDirs);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    CHECK(DynamicBackendPaths9.size() == 2);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    CHECK(DynamicBackendPaths9[0] == subDir1);</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    CHECK(DynamicBackendPaths9[1] == subDir2);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="class_test_dynamic_backend_utils_xhtml_ae905a2c700ca7d4b71fd64fe01e5580d"><div class="ttname"><a href="class_test_dynamic_backend_utils.xhtml#ae905a2c700ca7d4b71fd64fe01e5580d">TestDynamicBackendUtils::GetBackendPathsImplTest</a></div><div class="ttdeci">static std::vector&lt; std::string &gt; GetBackendPathsImplTest(const std::string &amp;path)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00082">DynamicBackendTests.hpp:82</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1ccc02805f5cdcbc45c6c548b5e4c29a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ccc02805f5cdcbc45c6c548b5e4c29a">&#9670;&nbsp;</a></span>GetBasePath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetBasePath </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>basePath</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00135">135</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00028">DYNAMIC_BACKEND_BUILD_DIR</a>, and <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00123">GetUnitTestExecutablePath()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00158">GetDynamicBackendsBasePath()</a>, and <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00153">GetTestDirectoryBasePath()</a>.</p>
<div class="fragment"><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;{</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// What we&#39;re looking for here is the location of the UnitTests executable.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// Fall back value of current directory.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    path programLocation = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#a955d46e3d52e4a84137de39b574efbc1">GetUnitTestExecutablePath</a>();</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">if</span> (!exists(programLocation))</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        programLocation = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#a5f525e18ac7373a2250d958dd6cdf94e">DYNAMIC_BACKEND_BUILD_DIR</a>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// This is the base path from the build where the test libraries were built.</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    path sharedObjectPath = programLocation.append(basePath);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    REQUIRE_MESSAGE(exists(sharedObjectPath),</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    (<span class="stringliteral">&quot;Base path for shared objects does not exist: &quot;</span> + sharedObjectPath.string()));</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> sharedObjectPath.string();</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_a955d46e3d52e4a84137de39b574efbc1"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#a955d46e3d52e4a84137de39b574efbc1">GetUnitTestExecutablePath</a></div><div class="ttdeci">std::string GetUnitTestExecutablePath()</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00123">DynamicBackendTests.hpp:123</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_a5f525e18ac7373a2250d958dd6cdf94e"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#a5f525e18ac7373a2250d958dd6cdf94e">DYNAMIC_BACKEND_BUILD_DIR</a></div><div class="ttdeci">#define DYNAMIC_BACKEND_BUILD_DIR</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00028">DynamicBackendTests.hpp:28</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a232b6171adb0f163b616059ba9ddab07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a232b6171adb0f163b616059ba9ddab07">&#9670;&nbsp;</a></span>GetDynamicBackendsBasePath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetDynamicBackendsBasePath </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00158">158</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00135">GetBasePath()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01374">RuntimeInvalidOverridePathTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#a1ccc02805f5cdcbc45c6c548b5e4c29a">GetBasePath</a>(g_DynamicBackendsBaseDir);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_a1ccc02805f5cdcbc45c6c548b5e4c29a"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#a1ccc02805f5cdcbc45c6c548b5e4c29a">GetBasePath</a></div><div class="ttdeci">std::string GetBasePath(const std::string &amp;basePath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00135">DynamicBackendTests.hpp:135</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7d05c0a2fbb1faaeb5d98aa10bfa5cbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d05c0a2fbb1faaeb5d98aa10bfa5cbf">&#9670;&nbsp;</a></span>GetNameMangledEntryPointTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetNameMangledEntryPointTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00270">270</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestSharedObjectSubDir);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestSharedObjectFileName);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">using</span> TestFunctionType = int(*)(int);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    TestFunctionType testFunctionPointer = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    CHECK_THROWS_AS(testFunctionPointer = DynamicBackendUtils::GetEntryPoint&lt;TestFunctionType&gt;(sharedObjectHandle,</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                                                                                 <span class="stringliteral">&quot;TestFunction2&quot;</span>),</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                      <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    CHECK((testFunctionPointer == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">DynamicBackendUtils::CloseHandle</a>(sharedObjectHandle);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aebd30d283660a07b4123fdb0245e8426"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">armnn::DynamicBackendUtils::CloseHandle</a></div><div class="ttdeci">static void CloseHandle(const void *sharedObjectHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00036">DynamicBackendUtils.cpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2ea23607d9c0b55b90744e9e5f74e7f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ea23607d9c0b55b90744e9e5f74e7f2">&#9670;&nbsp;</a></span>GetNoExternEntryPointTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetNoExternEntryPointTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00291">291</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestSharedObjectSubDir);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestSharedObjectFileName);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">using</span> TestFunctionType = int(*)(int);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    TestFunctionType testFunctionPointer = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    CHECK_THROWS_AS(testFunctionPointer = DynamicBackendUtils::GetEntryPoint&lt;TestFunctionType&gt;(sharedObjectHandle,</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                                                                                 <span class="stringliteral">&quot;TestFunction3&quot;</span>),</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                      <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    CHECK((testFunctionPointer == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">DynamicBackendUtils::CloseHandle</a>(sharedObjectHandle);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aebd30d283660a07b4123fdb0245e8426"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">armnn::DynamicBackendUtils::CloseHandle</a></div><div class="ttdeci">static void CloseHandle(const void *sharedObjectHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00036">DynamicBackendUtils.cpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad4a311ecf0fe6057c01ed11b2df4ed15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4a311ecf0fe6057c01ed11b2df4ed15">&#9670;&nbsp;</a></span>GetNotExistingEntryPointTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetNotExistingEntryPointTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00312">312</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;{</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestSharedObjectSubDir);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestSharedObjectFileName);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">using</span> TestFunctionType = int(*)(int);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    TestFunctionType testFunctionPointer = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    CHECK_THROWS_AS(testFunctionPointer = DynamicBackendUtils::GetEntryPoint&lt;TestFunctionType&gt;(sharedObjectHandle,</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                                                                                                 <span class="stringliteral">&quot;TestFunction4&quot;</span>),</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                      <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    CHECK((testFunctionPointer == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">DynamicBackendUtils::CloseHandle</a>(sharedObjectHandle);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aebd30d283660a07b4123fdb0245e8426"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">armnn::DynamicBackendUtils::CloseHandle</a></div><div class="ttdeci">static void CloseHandle(const void *sharedObjectHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00036">DynamicBackendUtils.cpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a736bd70a8662a4f3679054a2b2cfaa11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a736bd70a8662a4f3679054a2b2cfaa11">&#9670;&nbsp;</a></span>GetSharedObjectsTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetSharedObjectsTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00700">700</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;{</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="comment">// The test covers four directories:</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="comment">// &lt;unit test path&gt;/src/backends/backendsCommon/test/</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="comment">//                                                ├─ backendsTestPath1/   -&gt; exists, contains files</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="comment">//                                                ├─ backendsTestPath2/   -&gt; exists, contains files</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="comment">//                                                ├─ backendsTestPath3/   -&gt; exists, but empty</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="comment">//                                                └─ backendsTestPath4/   -&gt; does not exist</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="comment">// The test sub-directory backendsTestPath1/ contains the following test files:</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="comment">// Arm_GpuAcc_backend.so                                       -&gt; valid (basic backend name)</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="comment">// Arm_GpuAcc_backend.so.1                                     -&gt; valid (single field version number)</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="comment">// Arm_GpuAcc_backend.so.1.2                                   -&gt; valid (multiple field version number)</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="comment">// Arm_GpuAcc_backend.so.1.2.3                                 -&gt; valid (multiple field version number)</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="comment">// Arm_GpuAcc_backend.so.10.1.27                               -&gt; valid (Multiple digit version)</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="comment">// Arm_GpuAcc_backend.so.10.1.33.                              -&gt; not valid (dot not followed by version number)</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="comment">// Arm_GpuAcc_backend.so.3.4..5                                -&gt; not valid (dot not followed by version number)</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="comment">// Arm_GpuAcc_backend.so.1,1.1                                 -&gt; not valid (comma instead of dot in the version)</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="comment">// Arm123_GpuAcc_backend.so                                    -&gt; valid (digits in vendor name are allowed)</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="comment">// Arm_GpuAcc456_backend.so                                    -&gt; valid (digits in backend id are allowed)</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="comment">// Arm%Co_GpuAcc_backend.so                                    -&gt; not valid (invalid character in vendor name)</span></div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="comment">// Arm_Gpu.Acc_backend.so                                      -&gt; not valid (invalid character in backend id)</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="comment">// GpuAcc_backend.so                                           -&gt; not valid (missing vendor name)</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="comment">// _GpuAcc_backend.so                                          -&gt; not valid (missing vendor name)</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="comment">// Arm__backend.so                                             -&gt; not valid (missing backend id)</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="comment">// Arm_GpuAcc.so                                               -&gt; not valid (missing &quot;backend&quot; at the end)</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="comment">// __backend.so                                                -&gt; not valid (missing vendor name and backend id)</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="comment">// __.so                                                       -&gt; not valid (missing all fields)</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="comment">// Arm_GpuAcc_backend                                          -&gt; not valid (missing at least &quot;.so&quot; at the end)</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <span class="comment">// Arm_GpuAcc_backend_v1.2.so                                  -&gt; not valid (extra version info at the end)</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="comment">// The test sub-directory backendsTestPath1/ contains the following test files:</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <span class="comment">// Arm_CpuAcc_backend.so                                       -&gt; valid (basic backend name)</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <span class="comment">// Arm_CpuAcc_backend.so.1 -&gt; Arm_CpuAcc_backend.so            -&gt; valid (symlink to valid backend file)</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="comment">// Arm_CpuAcc_backend.so.1.2 -&gt; Arm_CpuAcc_backend.so.1        -&gt; valid (symlink to valid symlink)</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="comment">// Arm_CpuAcc_backend.so.1.2.3 -&gt; Arm_CpuAcc_backend.so.1.2    -&gt; valid (symlink to valid symlink)</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="comment">// Arm_no_backend.so -&gt; nothing                                -&gt; not valid (symlink resolves to non-existent file)</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <span class="comment">// Arm_GpuAcc_backend.so                                       -&gt; valid (but duplicated from backendsTestPath1/)</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    std::string testDynamicBackendsSubDir1 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir1);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    std::string testDynamicBackendsSubDir2 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir2);</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    std::string testDynamicBackendsSubDir3 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir3);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    std::string testDynamicBackendsSubDir4 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir4);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    CHECK(exists(testDynamicBackendsSubDir1));</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    CHECK(exists(testDynamicBackendsSubDir2));</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    CHECK(exists(testDynamicBackendsSubDir3));</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    CHECK(!exists(testDynamicBackendsSubDir4));</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    std::vector&lt;std::string&gt; backendPaths</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    {</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        testDynamicBackendsSubDir1,</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        testDynamicBackendsSubDir2,</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        testDynamicBackendsSubDir3,</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        testDynamicBackendsSubDir4</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    };</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    std::vector&lt;std::string&gt; sharedObjects = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a48e1fb944c3ef4086365aedcadb4c311">DynamicBackendUtils::GetSharedObjects</a>(backendPaths);</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    std::vector&lt;fs::path&gt; expectedSharedObjects</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    {</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        path(testDynamicBackendsSubDir1 + <span class="stringliteral">&quot;Arm123_GpuAcc_backend.so&quot;</span>),      <span class="comment">// Digits in vendor name are allowed</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        path(testDynamicBackendsSubDir1 + <span class="stringliteral">&quot;Arm_GpuAcc456_backend.so&quot;</span>),      <span class="comment">// Digits in backend id are allowed</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        path(testDynamicBackendsSubDir1 + <span class="stringliteral">&quot;Arm_GpuAcc_backend.so&quot;</span>),         <span class="comment">// Basic backend name</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        path(testDynamicBackendsSubDir1 + <span class="stringliteral">&quot;Arm_GpuAcc_backend.so.1&quot;</span>),       <span class="comment">// Single field version number</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        path(testDynamicBackendsSubDir1 + <span class="stringliteral">&quot;Arm_GpuAcc_backend.so.1.2&quot;</span>),     <span class="comment">// Multiple field version number</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        path(testDynamicBackendsSubDir1 + <span class="stringliteral">&quot;Arm_GpuAcc_backend.so.1.2.3&quot;</span>),   <span class="comment">// Multiple field version number</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        path(testDynamicBackendsSubDir1 + <span class="stringliteral">&quot;Arm_GpuAcc_backend.so.10.1.27&quot;</span>), <span class="comment">// Multiple digit version</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        path(testDynamicBackendsSubDir2 + <span class="stringliteral">&quot;Arm_CpuAcc_backend.so&quot;</span>),         <span class="comment">// Duplicate symlinks removed</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        path(testDynamicBackendsSubDir2 + <span class="stringliteral">&quot;Arm_GpuAcc_backend.so&quot;</span>)          <span class="comment">// Duplicates on different paths are allowed</span></div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    };</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    CHECK(sharedObjects.size() == expectedSharedObjects.size());</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    CHECK(fs::equivalent(path(sharedObjects[0]), expectedSharedObjects[0]));</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    CHECK(fs::equivalent(path(sharedObjects[1]), expectedSharedObjects[1]));</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    CHECK(fs::equivalent(path(sharedObjects[2]), expectedSharedObjects[2]));</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    CHECK(fs::equivalent(path(sharedObjects[3]), expectedSharedObjects[3]));</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    CHECK(fs::equivalent(path(sharedObjects[4]), expectedSharedObjects[4]));</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    CHECK(fs::equivalent(path(sharedObjects[5]), expectedSharedObjects[5]));</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    CHECK(fs::equivalent(path(sharedObjects[6]), expectedSharedObjects[6]));</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    CHECK(fs::equivalent(path(sharedObjects[7]), expectedSharedObjects[7]));</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    CHECK(fs::equivalent(path(sharedObjects[8]), expectedSharedObjects[8]));</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_a48e1fb944c3ef4086365aedcadb4c311"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a48e1fb944c3ef4086365aedcadb4c311">armnn::DynamicBackendUtils::GetSharedObjects</a></div><div class="ttdeci">static std::vector&lt; std::string &gt; GetSharedObjects(const std::vector&lt; std::string &gt; &amp;backendPaths)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00174">DynamicBackendUtils.cpp:174</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaa09188eec988bf3318fbcff3d07dd97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa09188eec988bf3318fbcff3d07dd97">&#9670;&nbsp;</a></span>GetTestDirectoryBasePath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetTestDirectoryBasePath </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00153">153</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00135">GetBasePath()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#a1ccc02805f5cdcbc45c6c548b5e4c29a">GetBasePath</a>(g_TestBaseDir);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_a1ccc02805f5cdcbc45c6c548b5e4c29a"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#a1ccc02805f5cdcbc45c6c548b5e4c29a">GetBasePath</a></div><div class="ttdeci">std::string GetBasePath(const std::string &amp;basePath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00135">DynamicBackendTests.hpp:135</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad01ee94919c8ecfba3b9e4fe89ed6bbe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad01ee94919c8ecfba3b9e4fe89ed6bbe">&#9670;&nbsp;</a></span>GetTestFilePath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetTestFilePath </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>directory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>fileName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">186</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    path directoryPath(directory);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    path fileNamePath = directoryPath.append(fileName);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    CHECK(exists(fileNamePath));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">return</span> fileNamePath.string();</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa21b882f38be6940c5c0515db9b69508"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa21b882f38be6940c5c0515db9b69508">&#9670;&nbsp;</a></span>GetTestSubDirectory() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetTestSubDirectory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>subdir</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">163</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00153">GetTestDirectoryBasePath()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00333">BackendVersioningTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00437">CreateDynamicBackendObjectInvalidInterface1TestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00456">CreateDynamicBackendObjectInvalidInterface2TestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00476">CreateDynamicBackendObjectInvalidInterface3TestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00496">CreateDynamicBackendObjectInvalidInterface4TestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00516">CreateDynamicBackendObjectInvalidInterface5TestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00537">CreateDynamicBackendObjectInvalidInterface6TestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00578">CreateDynamicBackendObjectInvalidInterface7TestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00878">CreateDynamicBackendsMixedTypesTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00791">CreateDynamicBackendsTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00679">GetBackendPathsOverrideTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00599">GetBackendPathsTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00270">GetNameMangledEntryPointTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00291">GetNoExternEntryPointTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00312">GetNotExistingEntryPointTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00700">GetSharedObjectsTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00249">GetValidEntryPointTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00197">OpenCloseHandleTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00237">OpenNotSharedObjectTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01183">RegisterMultipleInvalidDynamicBackendsTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01308">RuntimeDuplicateDynamicBackendsTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01267">RuntimeDynamicBackendsTestImpl()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01349">RuntimeInvalidDynamicBackendsTestImpl()</a>, and <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01374">RuntimeInvalidOverridePathTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    std::string testDynamicBackendsBaseDir = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aaa09188eec988bf3318fbcff3d07dd97">GetTestDirectoryBasePath</a>();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    path testDynamicBackendsBasePath(testDynamicBackendsBaseDir);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    path testDynamicBackendsSubDir = testDynamicBackendsBasePath.append(subdir);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// Do not check that the sub-directory exists because for testing reasons we may use non-existing paths</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> testDynamicBackendsSubDir.string();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aaa09188eec988bf3318fbcff3d07dd97"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aaa09188eec988bf3318fbcff3d07dd97">GetTestDirectoryBasePath</a></div><div class="ttdeci">std::string GetTestDirectoryBasePath()</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00153">DynamicBackendTests.hpp:153</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1851a4032b9e6fa980ecaf990960c9b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1851a4032b9e6fa980ecaf990960c9b1">&#9670;&nbsp;</a></span>GetTestSubDirectory() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetTestSubDirectory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>basePath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>subdir</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00175">175</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    path testDynamicBackendsBasePath(basePath);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    path testDynamicBackendsSubDir = testDynamicBackendsBasePath.append(subdir);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// Do not check that the sub-directory exists because for testing reasons we may use non-existing paths</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> testDynamicBackendsSubDir.string();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a955d46e3d52e4a84137de39b574efbc1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a955d46e3d52e4a84137de39b574efbc1">&#9670;&nbsp;</a></span>GetUnitTestExecutablePath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetUnitTestExecutablePath </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00123">123</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00135">GetBasePath()</a>, and <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00104">TestBackendRegistry::~TestBackendRegistry()</a>.</p>
<div class="fragment"><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">char</span> buffer[PATH_MAX] = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">if</span> (readlink(<span class="stringliteral">&quot;/proc/self/exe&quot;</span>, buffer, PATH_MAX) != -1)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        fs::path executablePath(buffer);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">return</span> executablePath.parent_path();</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2384b592a8946dc96a1ea116d86993bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2384b592a8946dc96a1ea116d86993bf">&#9670;&nbsp;</a></span>GetValidEntryPointTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetValidEntryPointTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00249">249</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;{</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestSharedObjectSubDir);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestSharedObjectFileName);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">using</span> TestFunctionType = int(*)(int);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    TestFunctionType testFunctionPointer = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    CHECK_NOTHROW(testFunctionPointer = DynamicBackendUtils::GetEntryPoint&lt;TestFunctionType&gt;(sharedObjectHandle,</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                                                                                    <span class="stringliteral">&quot;TestFunction1&quot;</span>));</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    CHECK((testFunctionPointer != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    CHECK(testFunctionPointer(7) == 7);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">DynamicBackendUtils::CloseHandle</a>(sharedObjectHandle);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aebd30d283660a07b4123fdb0245e8426"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">armnn::DynamicBackendUtils::CloseHandle</a></div><div class="ttdeci">static void CloseHandle(const void *sharedObjectHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00036">DynamicBackendUtils.cpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3c082270ab18262a66e97eb1d6922991"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c082270ab18262a66e97eb1d6922991">&#9670;&nbsp;</a></span>OpenCloseHandleTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenCloseHandleTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00197">197</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestSharedObjectSubDir);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    std::string sharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestSharedObjectFileName);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    CHECK_NOTHROW(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObjectFilePath));</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    CHECK((sharedObjectHandle != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">DynamicBackendUtils::CloseHandle</a>(sharedObjectHandle);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aebd30d283660a07b4123fdb0245e8426"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">armnn::DynamicBackendUtils::CloseHandle</a></div><div class="ttdeci">static void CloseHandle(const void *sharedObjectHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00036">DynamicBackendUtils.cpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a22f4f05aa4404afeca52237617335373"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22f4f05aa4404afeca52237617335373">&#9670;&nbsp;</a></span>OpenEmptyFileNameTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenEmptyFileNameTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00219">219</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;{</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    CHECK_THROWS_AS(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(<span class="stringliteral">&quot;&quot;</span>), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    CHECK((sharedObjectHandle == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9cf371447a3219bacc62c0f343c174c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9cf371447a3219bacc62c0f343c174c0">&#9670;&nbsp;</a></span>OpenNotExistingFileTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenNotExistingFileTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00228">228</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    CHECK_THROWS_AS(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(<span class="stringliteral">&quot;NotExistingFileName&quot;</span>), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    CHECK((sharedObjectHandle == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6f750fea35638f0442885edb837b5d16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f750fea35638f0442885edb837b5d16">&#9670;&nbsp;</a></span>OpenNotSharedObjectTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenNotSharedObjectTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00237">237</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    std::string testSubDirectory = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestSharedObjectSubDir);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    std::string notSharedObjectFilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testSubDirectory, g_TestNoSharedObjectFileName);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    CHECK_THROWS_AS(sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(notSharedObjectFilePath), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    CHECK((sharedObjectHandle == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div><div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a98bdeaf1b8289ba5fa6ac2b0e45a13d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98bdeaf1b8289ba5fa6ac2b0e45a13d0">&#9670;&nbsp;</a></span>RegisterMultipleInvalidDynamicBackendsTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RegisterMultipleInvalidDynamicBackendsTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01183">1183</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;{</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    <span class="comment">// Try to register many invalid dynamic backends</span></div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    <span class="comment">// The test covers one directory:</span></div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    <span class="comment">// &lt;unit test path&gt;/src/backends/backendsCommon/test/</span></div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    <span class="comment">//                                                └─ backendsTestPath9/   -&gt; exists, contains files</span></div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    <span class="comment">// The test sub-directory backendsTestPath9/ contains the following test files:</span></div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    <span class="comment">// Arm_TestInvalid10_backend.so -&gt; not valid (invalid backend id)</span></div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    <span class="comment">// Arm_TestInvalid11_backend.so -&gt; not valid (invalid backend id)</span></div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    std::string testDynamicBackendsSubDir9 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir9);</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    CHECK(exists(testDynamicBackendsSubDir9));</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    std::string testInvalidBackend10FilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testDynamicBackendsSubDir9,</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;                                                               g_TestInvalidBackend10FileName);</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    std::string testInvalidBackend11FilePath = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a>(testDynamicBackendsSubDir9,</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;                                                               g_TestInvalidBackend11FileName);</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    CHECK(exists(testInvalidBackend10FilePath));</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    CHECK(exists(testInvalidBackend11FilePath));</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    std::vector&lt;std::string&gt; sharedObjects</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;    {</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;        testInvalidBackend10FilePath,</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;        testInvalidBackend11FilePath,</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;        <span class="stringliteral">&quot;InvalidSharedObject&quot;</span></div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    };</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;    std::vector&lt;DynamicBackendPtr&gt; dynamicBackends = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a42e250dfa19b9df3abdb273e1d35fa5b">TestDynamicBackendUtils::CreateDynamicBackends</a>(sharedObjects);</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    CHECK(dynamicBackends.size() == 2);</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    CHECK((dynamicBackends[0] != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    CHECK((dynamicBackends[1] != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> dynamicBackendId1 = dynamicBackends[0]-&gt;GetBackendId();</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> dynamicBackendId2 = dynamicBackends[1]-&gt;GetBackendId();</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    CHECK((dynamicBackendId1 == <span class="stringliteral">&quot;&quot;</span>));</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    CHECK((dynamicBackendId2 == <span class="stringliteral">&quot;Unknown&quot;</span>));</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; dynamicBackends.size(); i++)</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    {</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;        <a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> dynamicBackendVersion = dynamicBackends[i]-&gt;GetBackendVersion();</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;        CHECK(<a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a6789076aa25c6a10faeff1043359bda8">TestDynamicBackendUtils::IsBackendCompatible</a>(dynamicBackendVersion));</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    }</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    <span class="comment">// Dummy registry used for testing</span></div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    <a class="code" href="classarmnn_1_1_backend_registry.xhtml">BackendRegistry</a> backendRegistry;</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    CHECK(backendRegistry.<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">Size</a>() == 0);</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    <span class="comment">// Check that no dynamic backend got registered</span></div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> registeredBackendIds = <a class="code" href="class_test_dynamic_backend_utils.xhtml#a304e5c5c5afc70590df8927e144fbaa5">TestDynamicBackendUtils::RegisterDynamicBackendsImplTest</a>(backendRegistry,</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;                                                                                                 dynamicBackends);</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    CHECK(backendRegistry.<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">Size</a>() == 0);</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    CHECK(registeredBackendIds.empty());</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;}</div><div class="ttc" id="class_test_dynamic_backend_utils_xhtml_a304e5c5c5afc70590df8927e144fbaa5"><div class="ttname"><a href="class_test_dynamic_backend_utils.xhtml#a304e5c5c5afc70590df8927e144fbaa5">TestDynamicBackendUtils::RegisterDynamicBackendsImplTest</a></div><div class="ttdeci">static armnn::BackendIdSet RegisterDynamicBackendsImplTest(armnn::BackendRegistry &amp;backendRegistry, const std::vector&lt; armnn::DynamicBackendPtr &gt; &amp;dynamicBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00087">DynamicBackendTests.hpp:87</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00193">BackendId.hpp:193</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_a6789076aa25c6a10faeff1043359bda8"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a6789076aa25c6a10faeff1043359bda8">armnn::DynamicBackendUtils::IsBackendCompatible</a></div><div class="ttdeci">static bool IsBackendCompatible(const BackendVersion &amp;backendVersion)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00050">DynamicBackendUtils.cpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_a42e250dfa19b9df3abdb273e1d35fa5b"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a42e250dfa19b9df3abdb273e1d35fa5b">armnn::DynamicBackendUtils::CreateDynamicBackends</a></div><div class="ttdeci">static std::vector&lt; DynamicBackendPtr &gt; CreateDynamicBackends(const std::vector&lt; std::string &gt; &amp;sharedObjects)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00261">DynamicBackendUtils.cpp:261</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_ad01ee94919c8ecfba3b9e4fe89ed6bbe"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#ad01ee94919c8ecfba3b9e4fe89ed6bbe">GetTestFilePath</a></div><div class="ttdeci">std::string GetTestFilePath(const std::string &amp;directory, const std::string &amp;fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00186">DynamicBackendTests.hpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml">armnn::BackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00029">BackendRegistry.hpp:29</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_version_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_version.xhtml">armnn::BackendVersion</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00031">IBackendInternal.hpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a58f4b9e873b7c1c7d512bd9f7d1489d8"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">armnn::BackendRegistry::Size</a></div><div class="ttdeci">size_t Size() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00068">BackendRegistry.cpp:68</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a805c0fe55cb42d8507a081c7c7659408"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a805c0fe55cb42d8507a081c7c7659408">&#9670;&nbsp;</a></span>RuntimeDuplicateDynamicBackendsTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RuntimeDuplicateDynamicBackendsTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01308">1308</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;{</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    <span class="comment">// Swapping the backend registry storage for testing</span></div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;    <a class="code" href="class_test_backend_registry.xhtml">TestBackendRegistry</a> testBackendRegistry;</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    <span class="comment">// This directory contains valid, invalid and duplicate backends</span></div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    std::string testDynamicBackendsSubDir6 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir6);</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    CHECK(exists(testDynamicBackendsSubDir6));</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    <span class="comment">// Using the path override in CreationOptions to load some test dynamic backends</span></div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> creationOptions;</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    creationOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a> = testDynamicBackendsSubDir6;</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(creationOptions);</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    std::vector&lt;BackendId&gt; expectedRegisteredbackendIds</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    {</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;        <span class="stringliteral">&quot;TestValid2&quot;</span>,</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;        <span class="stringliteral">&quot;TestValid5&quot;</span></div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    };</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_registry.xhtml">BackendRegistry</a>&amp; backendRegistry = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>();</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    CHECK(backendRegistry.<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">Size</a>() == expectedRegisteredbackendIds.size());</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> backendIds = backendRegistry.<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">GetBackendIds</a>();</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; expectedRegisteredbackendId : expectedRegisteredbackendIds)</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;    {</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;        CHECK((backendIds.find(expectedRegisteredbackendId) != backendIds.end()));</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    }</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_device_spec.xhtml">DeviceSpec</a>&amp; deviceSpec = *PolymorphicDowncast&lt;const DeviceSpec*&gt;(&amp;runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> supportedBackendIds = deviceSpec.<a class="code" href="classarmnn_1_1_device_spec.xhtml#a89d4c29e22db837f787e2171b8a71892">GetSupportedBackends</a>();</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    CHECK(supportedBackendIds.size() == expectedRegisteredbackendIds.size());</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; expectedRegisteredbackendId : expectedRegisteredbackendIds)</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    {</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;        CHECK((supportedBackendIds.find(expectedRegisteredbackendId) != supportedBackendIds.end()));</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    }</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00040">Runtime.cpp:40</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a570cb1835ec73000a7954ba75257904f"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">armnn::BackendRegistry::GetBackendIds</a></div><div class="ttdeci">BackendIdSet GetBackendIds() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00073">BackendRegistry.cpp:73</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00193">BackendId.hpp:193</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml">armnn::DeviceSpec</a></div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00014">DeviceSpec.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00031">IRuntime.hpp:31</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml">armnn::BackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00029">BackendRegistry.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a58f4b9e873b7c1c7d512bd9f7d1489d8"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">armnn::BackendRegistry::Size</a></div><div class="ttdeci">size_t Size() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00068">BackendRegistry.cpp:68</a></div></div>
<div class="ttc" id="class_test_backend_registry_xhtml"><div class="ttname"><a href="class_test_backend_registry.xhtml">TestBackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00096">DynamicBackendTests.hpp:96</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">armnn::IRuntime::CreationOptions::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdoc">Setting this value will override the paths set by the DYNAMIC_BACKEND_PATHS compiler directive Only a...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00096">IRuntime.hpp:96</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml_a89d4c29e22db837f787e2171b8a71892"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml#a89d4c29e22db837f787e2171b8a71892">armnn::DeviceSpec::GetSupportedBackends</a></div><div class="ttdeci">virtual const BackendIdSet &amp; GetSupportedBackends() const override</div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00025">DeviceSpec.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2a3715f6c83f6dd0c62035ecd2dbb386"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a3715f6c83f6dd0c62035ecd2dbb386">&#9670;&nbsp;</a></span>RuntimeDynamicBackendsTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RuntimeDynamicBackendsTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01267">1267</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;{</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <span class="comment">// Swapping the backend registry storage for testing</span></div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    <a class="code" href="class_test_backend_registry.xhtml">TestBackendRegistry</a> testBackendRegistry;</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    <span class="comment">// This directory contains valid and invalid backends</span></div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    std::string testDynamicBackendsSubDir5 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir5);</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    CHECK(exists(testDynamicBackendsSubDir5));</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    <span class="comment">// Using the path override in CreationOptions to load some test dynamic backends</span></div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> creationOptions;</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    creationOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a> = testDynamicBackendsSubDir5;</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(creationOptions);</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    std::vector&lt;BackendId&gt; expectedRegisteredbackendIds</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    {</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;        <span class="stringliteral">&quot;TestValid2&quot;</span>,</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;        <span class="stringliteral">&quot;TestValid3&quot;</span></div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;    };</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_registry.xhtml">BackendRegistry</a>&amp; backendRegistry = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>();</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;    CHECK(backendRegistry.<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">Size</a>() == expectedRegisteredbackendIds.size());</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> backendIds = backendRegistry.<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">GetBackendIds</a>();</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; expectedRegisteredbackendId : expectedRegisteredbackendIds)</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;    {</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;        CHECK((backendIds.find(expectedRegisteredbackendId) != backendIds.end()));</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;    }</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_device_spec.xhtml">DeviceSpec</a>&amp; deviceSpec = *PolymorphicDowncast&lt;const DeviceSpec*&gt;(&amp;runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> supportedBackendIds = deviceSpec.<a class="code" href="classarmnn_1_1_device_spec.xhtml#a89d4c29e22db837f787e2171b8a71892">GetSupportedBackends</a>();</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;    CHECK(supportedBackendIds.size() == expectedRegisteredbackendIds.size());</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; expectedRegisteredbackendId : expectedRegisteredbackendIds)</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    {</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;        CHECK((supportedBackendIds.find(expectedRegisteredbackendId) != supportedBackendIds.end()));</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    }</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00040">Runtime.cpp:40</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a570cb1835ec73000a7954ba75257904f"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">armnn::BackendRegistry::GetBackendIds</a></div><div class="ttdeci">BackendIdSet GetBackendIds() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00073">BackendRegistry.cpp:73</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00193">BackendId.hpp:193</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml">armnn::DeviceSpec</a></div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00014">DeviceSpec.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00031">IRuntime.hpp:31</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml">armnn::BackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00029">BackendRegistry.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a58f4b9e873b7c1c7d512bd9f7d1489d8"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">armnn::BackendRegistry::Size</a></div><div class="ttdeci">size_t Size() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00068">BackendRegistry.cpp:68</a></div></div>
<div class="ttc" id="class_test_backend_registry_xhtml"><div class="ttname"><a href="class_test_backend_registry.xhtml">TestBackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00096">DynamicBackendTests.hpp:96</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">armnn::IRuntime::CreationOptions::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdoc">Setting this value will override the paths set by the DYNAMIC_BACKEND_PATHS compiler directive Only a...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00096">IRuntime.hpp:96</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml_a89d4c29e22db837f787e2171b8a71892"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml#a89d4c29e22db837f787e2171b8a71892">armnn::DeviceSpec::GetSupportedBackends</a></div><div class="ttdeci">virtual const BackendIdSet &amp; GetSupportedBackends() const override</div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00025">DeviceSpec.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4967976a2407f1e67482235953328fba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4967976a2407f1e67482235953328fba">&#9670;&nbsp;</a></span>RuntimeEmptyTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RuntimeEmptyTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01245">1245</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="_device_spec_8hpp_source.xhtml#l00025">DeviceSpec::GetSupportedBackends()</a>, and <a class="el" href="_backend_registry_8cpp_source.xhtml#l00068">BackendRegistry::Size()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;{</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    <span class="comment">// Swapping the backend registry storage for testing</span></div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    <a class="code" href="class_test_backend_registry.xhtml">TestBackendRegistry</a> testBackendRegistry;</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_registry.xhtml">BackendRegistry</a>&amp; backendRegistry = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>();</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    CHECK(backendRegistry.<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">Size</a>() == 0);</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> creationOptions;</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(creationOptions);</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_device_spec.xhtml">DeviceSpec</a>&amp; deviceSpec = *PolymorphicDowncast&lt;const DeviceSpec*&gt;(&amp;runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> supportedBackendIds = deviceSpec.<a class="code" href="classarmnn_1_1_device_spec.xhtml#a89d4c29e22db837f787e2171b8a71892">GetSupportedBackends</a>();</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    CHECK(supportedBackendIds.empty());</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;    CHECK(backendRegistry.<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">Size</a>() == 0);</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00040">Runtime.cpp:40</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00193">BackendId.hpp:193</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml">armnn::DeviceSpec</a></div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00014">DeviceSpec.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00031">IRuntime.hpp:31</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml">armnn::BackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00029">BackendRegistry.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a58f4b9e873b7c1c7d512bd9f7d1489d8"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">armnn::BackendRegistry::Size</a></div><div class="ttdeci">size_t Size() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00068">BackendRegistry.cpp:68</a></div></div>
<div class="ttc" id="class_test_backend_registry_xhtml"><div class="ttname"><a href="class_test_backend_registry.xhtml">TestBackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00096">DynamicBackendTests.hpp:96</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml_a89d4c29e22db837f787e2171b8a71892"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml#a89d4c29e22db837f787e2171b8a71892">armnn::DeviceSpec::GetSupportedBackends</a></div><div class="ttdeci">virtual const BackendIdSet &amp; GetSupportedBackends() const override</div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00025">DeviceSpec.hpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe972850015352cf8ae3e073ac31abcd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe972850015352cf8ae3e073ac31abcd">&#9670;&nbsp;</a></span>RuntimeInvalidDynamicBackendsTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RuntimeInvalidDynamicBackendsTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01349">1349</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;{</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    <span class="keyword">using namespace </span>fs;</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    <span class="comment">// Swapping the backend registry storage for testing</span></div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    <a class="code" href="class_test_backend_registry.xhtml">TestBackendRegistry</a> testBackendRegistry;</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;    <span class="comment">// This directory contains only invalid backends</span></div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    std::string testDynamicBackendsSubDir9 = <a class="code" href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a>(g_TestDynamicBackendsSubDir9);</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    CHECK(exists(testDynamicBackendsSubDir9));</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;    <span class="comment">// Using the path override in CreationOptions to load some test dynamic backends</span></div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> creationOptions;</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    creationOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a> = testDynamicBackendsSubDir9;</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(creationOptions);</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_registry.xhtml">BackendRegistry</a>&amp; backendRegistry = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>();</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    CHECK(backendRegistry.<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">Size</a>() == 0);</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_device_spec.xhtml">DeviceSpec</a>&amp; deviceSpec = *PolymorphicDowncast&lt;const DeviceSpec*&gt;(&amp;runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> supportedBackendIds = deviceSpec.<a class="code" href="classarmnn_1_1_device_spec.xhtml#a89d4c29e22db837f787e2171b8a71892">GetSupportedBackends</a>();</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    CHECK(supportedBackendIds.empty());</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00040">Runtime.cpp:40</a></div></div>
<div class="ttc" id="_dynamic_backend_tests_8hpp_xhtml_aa21b882f38be6940c5c0515db9b69508"><div class="ttname"><a href="_dynamic_backend_tests_8hpp.xhtml#aa21b882f38be6940c5c0515db9b69508">GetTestSubDirectory</a></div><div class="ttdeci">std::string GetTestSubDirectory(const std::string &amp;subdir)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">DynamicBackendTests.hpp:163</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00193">BackendId.hpp:193</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml">armnn::DeviceSpec</a></div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00014">DeviceSpec.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00031">IRuntime.hpp:31</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml">armnn::BackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00029">BackendRegistry.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a58f4b9e873b7c1c7d512bd9f7d1489d8"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">armnn::BackendRegistry::Size</a></div><div class="ttdeci">size_t Size() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00068">BackendRegistry.cpp:68</a></div></div>
<div class="ttc" id="class_test_backend_registry_xhtml"><div class="ttname"><a href="class_test_backend_registry.xhtml">TestBackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00096">DynamicBackendTests.hpp:96</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">armnn::IRuntime::CreationOptions::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdoc">Setting this value will override the paths set by the DYNAMIC_BACKEND_PATHS compiler directive Only a...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00096">IRuntime.hpp:96</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml_a89d4c29e22db837f787e2171b8a71892"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml#a89d4c29e22db837f787e2171b8a71892">armnn::DeviceSpec::GetSupportedBackends</a></div><div class="ttdeci">virtual const BackendIdSet &amp; GetSupportedBackends() const override</div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00025">DeviceSpec.hpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a05f580df8c6c039d41d42c838cd97014"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05f580df8c6c039d41d42c838cd97014">&#9670;&nbsp;</a></span>RuntimeInvalidOverridePathTestImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RuntimeInvalidOverridePathTestImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l01374">1374</a> of file <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml">DynamicBackendTests.hpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00158">GetDynamicBackendsBasePath()</a>, <a class="el" href="_device_spec_8hpp_source.xhtml#l00025">DeviceSpec::GetSupportedBackends()</a>, <a class="el" href="_dynamic_backend_tests_8hpp_source.xhtml#l00163">GetTestSubDirectory()</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00096">IRuntime::CreationOptions::m_DynamicBackendsPath</a>, and <a class="el" href="_backend_registry_8cpp_source.xhtml#l00068">BackendRegistry::Size()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;{</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    <span class="comment">// Swapping the backend registry storage for testing</span></div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    <a class="code" href="class_test_backend_registry.xhtml">TestBackendRegistry</a> testBackendRegistry;</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;    <span class="comment">// Using the path override in CreationOptions to load some test dynamic backends</span></div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> creationOptions;</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;    creationOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a> = <span class="stringliteral">&quot;InvalidPath&quot;</span>;</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(creationOptions);</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_registry.xhtml">BackendRegistry</a>&amp; backendRegistry = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>();</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    CHECK(backendRegistry.<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">Size</a>() == 0);</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_device_spec.xhtml">DeviceSpec</a>&amp; deviceSpec = *PolymorphicDowncast&lt;const DeviceSpec*&gt;(&amp;runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> supportedBackendIds = deviceSpec.<a class="code" href="classarmnn_1_1_device_spec.xhtml#a89d4c29e22db837f787e2171b8a71892">GetSupportedBackends</a>();</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;    CHECK(supportedBackendIds.empty());</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00040">Runtime.cpp:40</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00193">BackendId.hpp:193</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml">armnn::DeviceSpec</a></div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00014">DeviceSpec.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00031">IRuntime.hpp:31</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml">armnn::BackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00029">BackendRegistry.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a58f4b9e873b7c1c7d512bd9f7d1489d8"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">armnn::BackendRegistry::Size</a></div><div class="ttdeci">size_t Size() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00068">BackendRegistry.cpp:68</a></div></div>
<div class="ttc" id="class_test_backend_registry_xhtml"><div class="ttname"><a href="class_test_backend_registry.xhtml">TestBackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_tests_8hpp_source.xhtml#l00096">DynamicBackendTests.hpp:96</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">armnn::IRuntime::CreationOptions::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdoc">Setting this value will override the paths set by the DYNAMIC_BACKEND_PATHS compiler directive Only a...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00096">IRuntime.hpp:96</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml_a89d4c29e22db837f787e2171b8a71892"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml#a89d4c29e22db837f787e2171b8a71892">armnn::DeviceSpec::GetSupportedBackends</a></div><div class="ttdeci">virtual const BackendIdSet &amp; GetSupportedBackends() const override</div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00025">DeviceSpec.hpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="_dynamic_backend_tests_8hpp.xhtml">DynamicBackendTests.hpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:04 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
