<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: PeriodicCounterSelectionCommandHandler Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1profiling_1_1_periodic_counter_selection_command_handler.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1profiling_1_1_periodic_counter_selection_command_handler-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">PeriodicCounterSelectionCommandHandler Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_periodic_counter_selection_command_handler_8hpp_source.xhtml">PeriodicCounterSelectionCommandHandler.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for PeriodicCounterSelectionCommandHandler:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1profiling_1_1_periodic_counter_selection_command_handler.png" usemap="#PeriodicCounterSelectionCommandHandler_map" alt=""/>
  <map id="PeriodicCounterSelectionCommandHandler_map" name="PeriodicCounterSelectionCommandHandler_map">
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7f7b022b128982f2d77bf5d00d0128d8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_periodic_counter_selection_command_handler.xhtml#a7f7b022b128982f2d77bf5d00d0128d8">PeriodicCounterSelectionCommandHandler</a> (uint32_t familyId, uint32_t packetId, uint32_t version, const std::unordered_map&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>, std::shared_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_i_backend_profiling_context.xhtml">armnn::profiling::IBackendProfilingContext</a> &gt;&gt; &amp;backendProfilingContexts, const <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_mappings.xhtml">ICounterMappings</a> &amp;counterIdMap, <a class="el" href="classarmnn_1_1profiling_1_1_holder.xhtml">Holder</a> &amp;captureDataHolder, const uint16_t maxArmnnCounterId, <a class="el" href="classarmnn_1_1profiling_1_1_i_periodic_counter_capture.xhtml">IPeriodicCounterCapture</a> &amp;periodicCounterCapture, const <a class="el" href="classarmnn_1_1profiling_1_1_i_read_counter_values.xhtml">IReadCounterValues</a> &amp;readCounterValue, <a class="el" href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml">ISendCounterPacket</a> &amp;sendCounterPacket, const <a class="el" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml">ProfilingStateMachine</a> &amp;profilingStateMachine)</td></tr>
<tr class="separator:a7f7b022b128982f2d77bf5d00d0128d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f194544050d3b16f7363a93a234b89c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_periodic_counter_selection_command_handler.xhtml#a7f194544050d3b16f7363a93a234b89c">operator()</a> (const arm::pipe::Packet &amp;packet) override</td></tr>
<tr class="separator:a7f194544050d3b16f7363a93a234b89c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_periodic_counter_selection_command_handler_8hpp_source.xhtml#l00031">31</a> of file <a class="el" href="_periodic_counter_selection_command_handler_8hpp_source.xhtml">PeriodicCounterSelectionCommandHandler.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a7f7b022b128982f2d77bf5d00d0128d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f7b022b128982f2d77bf5d00d0128d8">&#9670;&nbsp;</a></span>PeriodicCounterSelectionCommandHandler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1profiling_1_1_periodic_counter_selection_command_handler.xhtml">PeriodicCounterSelectionCommandHandler</a> </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>familyId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>packetId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>version</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::unordered_map&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>, std::shared_ptr&lt; <a class="el" href="classarmnn_1_1profiling_1_1_i_backend_profiling_context.xhtml">armnn::profiling::IBackendProfilingContext</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>backendProfilingContexts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_mappings.xhtml">ICounterMappings</a> &amp;&#160;</td>
          <td class="paramname"><em>counterIdMap</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1profiling_1_1_holder.xhtml">Holder</a> &amp;&#160;</td>
          <td class="paramname"><em>captureDataHolder</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>maxArmnnCounterId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1profiling_1_1_i_periodic_counter_capture.xhtml">IPeriodicCounterCapture</a> &amp;&#160;</td>
          <td class="paramname"><em>periodicCounterCapture</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1profiling_1_1_i_read_counter_values.xhtml">IReadCounterValues</a> &amp;&#160;</td>
          <td class="paramname"><em>readCounterValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml">ISendCounterPacket</a> &amp;&#160;</td>
          <td class="paramname"><em>sendCounterPacket</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml">ProfilingStateMachine</a> &amp;&#160;</td>
          <td class="paramname"><em>profilingStateMachine</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_periodic_counter_selection_command_handler_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_periodic_counter_selection_command_handler_8hpp_source.xhtml">PeriodicCounterSelectionCommandHandler.hpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_periodic_counter_selection_command_handler_8cpp_source.xhtml#l00060">PeriodicCounterSelectionCommandHandler::operator()()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::warning</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        : CommandHandlerFunctor(familyId, packetId, version)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        , m_BackendProfilingContexts(backendProfilingContexts)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        , m_CounterIdMap(counterIdMap)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        , m_CaptureDataHolder(captureDataHolder)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        , m_MaxArmCounterId(maxArmnnCounterId)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        , m_PeriodicCounterCapture(periodicCounterCapture)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        , m_PrevCapturePeriod(0)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        , m_ReadCounterValues(readCounterValue)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        , m_SendCounterPacket(sendCounterPacket)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        , m_StateMachine(profilingStateMachine)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a7f194544050d3b16f7363a93a234b89c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f194544050d3b16f7363a93a234b89c">&#9670;&nbsp;</a></span>operator()()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void operator() </td>
          <td>(</td>
          <td class="paramtype">const arm::pipe::Packet &amp;&#160;</td>
          <td class="paramname"><em>packet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_periodic_counter_selection_command_handler_8cpp_source.xhtml#l00060">60</a> of file <a class="el" href="_periodic_counter_selection_command_handler_8cpp_source.xhtml">PeriodicCounterSelectionCommandHandler.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d">armnn::profiling::Active</a>, <a class="el" href="_holder_8cpp_source.xhtml#l00039">CaptureData::GetActiveBackends()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_mappings.xhtml#a8c03a58ac20b34e541bad78df16859e8">ICounterMappings::GetBackendId()</a>, <a class="el" href="_holder_8cpp_source.xhtml#l00054">Holder::GetCaptureData()</a>, <a class="el" href="_holder_8cpp_source.xhtml#l00044">CaptureData::GetCapturePeriod()</a>, <a class="el" href="_holder_8cpp_source.xhtml#l00049">CaptureData::GetCounterIds()</a>, <a class="el" href="_profiling_state_machine_8cpp_source.xhtml#l00031">ProfilingStateMachine::GetCurrentState()</a>, <a class="el" href="_profiling_state_machine_8hpp_source.xhtml#l00059">armnn::profiling::GetProfilingStateName()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_read_counter_values.xhtml#a0e2c96a05cefc72d60f5a35692a4a928">IReadCounterValues::IsCounterRegistered()</a>, <a class="el" href="_types_8hpp_source.xhtml#l00021">armnn::LOWEST_CAPTURE_PERIOD</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">armnn::profiling::NotConnected</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml#a6435f063192414c6dc68ef2f31628a5c">ISendCounterPacket::SendPeriodicCounterSelectionPacket()</a>, <a class="el" href="_holder_8cpp_source.xhtml#l00074">Holder::SetCaptureData()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_periodic_counter_capture.xhtml#a63ce9b9c6710c0dae98f88d6c602313a">IPeriodicCounterCapture::Start()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_periodic_counter_capture.xhtml#a4d7bebcc22c1b09cf961b83bf84033b6">IPeriodicCounterCapture::Stop()</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">armnn::profiling::Uninitialised</a>, and <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">armnn::profiling::WaitingForAck</a>.</p>

<p class="reference">Referenced by <a class="el" href="_periodic_counter_selection_command_handler_8hpp_source.xhtml#l00035">PeriodicCounterSelectionCommandHandler::PeriodicCounterSelectionCommandHandler()</a>.</p>
<div class="fragment"><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">ProfilingState</a> currentState = m_StateMachine.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">GetCurrentState</a>();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">switch</span> (currentState)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">ProfilingState::Uninitialised</a>:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">ProfilingState::NotConnected</a>:</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">ProfilingState::WaitingForAck</a>:</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">throw</span> RuntimeException(fmt::format(<span class="stringliteral">&quot;Periodic Counter Selection Command Handler invoked while in &quot;</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                           <span class="stringliteral">&quot;an wrong state: {}&quot;</span>,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                           <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa6851e58c103f77fcf83b722b4b81e9d">GetProfilingStateName</a>(currentState)));</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d">ProfilingState::Active</a>:</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="comment">// Process the packet</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">if</span> (!(packet.GetPacketFamily() == 0u &amp;&amp; packet.GetPacketId() == 4u))</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Expected Packet family = 0, id = 4 but &quot;</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                                              <span class="stringliteral">&quot;received family = {}, id = {}&quot;</span>,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                                              packet.GetPacketFamily(),</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                                              packet.GetPacketId()));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="comment">// Parse the packet to get the capture period and counter UIDs</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        CaptureData captureData;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        ParseData(packet, captureData);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="comment">// Get the capture data</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        uint32_t capturePeriod = captureData.GetCapturePeriod();</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment">// Validate that the capture period is within the acceptable range.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">if</span> (capturePeriod &gt; 0  &amp;&amp; capturePeriod &lt; <a class="code" href="namespacearmnn.xhtml#a602ddc6408c3347ba4c1eba623003984">LOWEST_CAPTURE_PERIOD</a>)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            capturePeriod = <a class="code" href="namespacearmnn.xhtml#a602ddc6408c3347ba4c1eba623003984">LOWEST_CAPTURE_PERIOD</a>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keyword">const</span> std::vector&lt;uint16_t&gt;&amp; counterIds = captureData.GetCounterIds();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment">// Check whether the selected counter UIDs are valid</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        std::vector&lt;uint16_t&gt; validCounterIds;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">for</span> (uint16_t counterId : counterIds)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="comment">// Check whether the counter is registered</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">if</span> (!m_ReadCounterValues.<a class="code" href="classarmnn_1_1profiling_1_1_i_read_counter_values.xhtml#a0e2c96a05cefc72d60f5a35692a4a928">IsCounterRegistered</a>(counterId))</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="comment">// Invalid counter UID, ignore it and continue</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="comment">// The counter is valid</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            validCounterIds.emplace_back(counterId);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        std::sort(validCounterIds.begin(), validCounterIds.end());</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">auto</span> backendIdStart = std::find_if(validCounterIds.begin(), validCounterIds.end(), [&amp;](uint16_t&amp; counterId)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">return</span> counterId &gt; m_MaxArmCounterId;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        });</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        std::set&lt;armnn::BackendId&gt; activeBackends;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        std::set&lt;uint16_t&gt; backendCounterIds = std::set&lt;uint16_t&gt;(backendIdStart, validCounterIds.end());</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">if</span> (m_BackendCounterMap.size() != 0)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            std::set&lt;uint16_t&gt; newCounterIds;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            std::set&lt;uint16_t&gt; unusedCounterIds;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="comment">// Get any backend counter ids that is in backendCounterIds but not in m_PrevBackendCounterIds</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            std::set_difference(backendCounterIds.begin(), backendCounterIds.end(),</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                                m_PrevBackendCounterIds.begin(), m_PrevBackendCounterIds.end(),</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                                std::inserter(newCounterIds, newCounterIds.begin()));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="comment">// Get any backend counter ids that is in m_PrevBackendCounterIds but not in backendCounterIds</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            std::set_difference(m_PrevBackendCounterIds.begin(), m_PrevBackendCounterIds.end(),</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                                backendCounterIds.begin(), backendCounterIds.end(),</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                std::inserter(unusedCounterIds, unusedCounterIds.begin()));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            activeBackends = ProcessBackendCounterIds(capturePeriod, newCounterIds, unusedCounterIds);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            activeBackends = ProcessBackendCounterIds(capturePeriod, backendCounterIds, {});</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="comment">// save the new backend counter ids for next time</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        m_PrevBackendCounterIds = backendCounterIds;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="comment">// Set the capture data with only the valid armnn counter UIDs</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        m_CaptureDataHolder.<a class="code" href="classarmnn_1_1profiling_1_1_holder.xhtml#ae904af7c6336ceeeb95ab8435047c7cb">SetCaptureData</a>(capturePeriod, {validCounterIds.begin(), backendIdStart}, activeBackends);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="comment">// Echo back the Periodic Counter Selection packet to the Counter Stream Buffer</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        m_SendCounterPacket.<a class="code" href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml#a6435f063192414c6dc68ef2f31628a5c">SendPeriodicCounterSelectionPacket</a>(capturePeriod, validCounterIds);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">if</span> (capturePeriod == 0 || validCounterIds.empty())</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="comment">// No data capture stop the thread</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            m_PeriodicCounterCapture.<a class="code" href="classarmnn_1_1profiling_1_1_i_periodic_counter_capture.xhtml#a4d7bebcc22c1b09cf961b83bf84033b6">Stop</a>();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="comment">// Start the Period Counter Capture thread (if not running already)</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            m_PeriodicCounterCapture.<a class="code" href="classarmnn_1_1profiling_1_1_i_periodic_counter_capture.xhtml#a63ce9b9c6710c0dae98f88d6c602313a">Start</a>();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">throw</span> RuntimeException(fmt::format(<span class="stringliteral">&quot;Unknown profiling service state: {}&quot;</span>,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                           static_cast&lt;int&gt;(currentState)));</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_state_machine_xhtml_ad8d263669817cf577760710ff6c96bb9"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml#ad8d263669817cf577760710ff6c96bb9">armnn::profiling::ProfilingStateMachine::GetCurrentState</a></div><div class="ttdeci">ProfilingState GetCurrentState() const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_state_machine_8cpp_source.xhtml#l00031">ProfilingStateMachine.cpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_periodic_counter_capture_xhtml_a63ce9b9c6710c0dae98f88d6c602313a"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_periodic_counter_capture.xhtml#a63ce9b9c6710c0dae98f88d6c602313a">armnn::profiling::IPeriodicCounterCapture::Start</a></div><div class="ttdeci">virtual void Start()=0</div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_send_counter_packet_xhtml_a6435f063192414c6dc68ef2f31628a5c"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml#a6435f063192414c6dc68ef2f31628a5c">armnn::profiling::ISendCounterPacket::SendPeriodicCounterSelectionPacket</a></div><div class="ttdeci">virtual void SendPeriodicCounterSelectionPacket(uint32_t capturePeriod, const std::vector&lt; uint16_t &gt; &amp;selectedCounterIds)=0</div><div class="ttdoc">Create and write a PeriodicCounterSelectionPacket from the parameters to the buffer. </div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">armnn::profiling::ProfilingState::NotConnected</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d">armnn::profiling::ProfilingState::Active</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_holder_xhtml_ae904af7c6336ceeeb95ab8435047c7cb"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_holder.xhtml#ae904af7c6336ceeeb95ab8435047c7cb">armnn::profiling::Holder::SetCaptureData</a></div><div class="ttdeci">void SetCaptureData(uint32_t capturePeriod, const std::vector&lt; uint16_t &gt; &amp;counterIds, const std::set&lt; armnn::BackendId &gt; &amp;activeBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_holder_8cpp_source.xhtml#l00074">Holder.cpp:74</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_periodic_counter_capture_xhtml_a4d7bebcc22c1b09cf961b83bf84033b6"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_periodic_counter_capture.xhtml#a4d7bebcc22c1b09cf961b83bf84033b6">armnn::profiling::IPeriodicCounterCapture::Stop</a></div><div class="ttdeci">virtual void Stop()=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a602ddc6408c3347ba4c1eba623003984"><div class="ttname"><a href="namespacearmnn.xhtml#a602ddc6408c3347ba4c1eba623003984">armnn::LOWEST_CAPTURE_PERIOD</a></div><div class="ttdeci">constexpr unsigned int LOWEST_CAPTURE_PERIOD</div><div class="ttdoc">The lowest performance data capture interval we support is 10 miliseconds. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00021">Types.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_read_counter_values_xhtml_a0e2c96a05cefc72d60f5a35692a4a928"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_read_counter_values.xhtml#a0e2c96a05cefc72d60f5a35692a4a928">armnn::profiling::IReadCounterValues::IsCounterRegistered</a></div><div class="ttdeci">virtual bool IsCounterRegistered(uint16_t counterUid) const =0</div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">armnn::profiling::ProfilingState::WaitingForAck</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">armnn::profiling::ProfilingState::Uninitialised</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_acb0c054138599582d5a5f537e9798806"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806">armnn::profiling::ProfilingState</a></div><div class="ttdeci">ProfilingState</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_state_machine_8hpp_source.xhtml#l00018">ProfilingStateMachine.hpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aa6851e58c103f77fcf83b722b4b81e9d"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aa6851e58c103f77fcf83b722b4b81e9d">armnn::profiling::GetProfilingStateName</a></div><div class="ttdeci">constexpr char const  * GetProfilingStateName(ProfilingState state)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_state_machine_8hpp_source.xhtml#l00059">ProfilingStateMachine.hpp:59</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/profiling/<a class="el" href="_periodic_counter_selection_command_handler_8hpp_source.xhtml">PeriodicCounterSelectionCommandHandler.hpp</a></li>
<li>src/profiling/<a class="el" href="_periodic_counter_selection_command_handler_8cpp_source.xhtml">PeriodicCounterSelectionCommandHandler.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1profiling.xhtml">profiling</a></li><li class="navelem"><a class="el" href="classarmnn_1_1profiling_1_1_periodic_counter_selection_command_handler.xhtml">PeriodicCounterSelectionCommandHandler</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:52 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
