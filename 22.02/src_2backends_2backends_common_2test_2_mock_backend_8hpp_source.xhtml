<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/MockBackend.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">MockBackend.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_mock_backend_id_8hpp.xhtml">MockBackendId.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_backend_profiling_8hpp.xhtml">armnn/backends/profiling/IBackendProfiling.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_backend_profiling_context_8hpp.xhtml">armnn/backends/profiling/IBackendProfilingContext.hpp</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_layer_support_common_8hpp.xhtml">LayerSupportCommon.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_backend_internal_8hpp.xhtml">armnn/backends/IBackendInternal.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_optimization_views_8hpp.xhtml">armnn/backends/OptimizationViews.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_backend_profiling_8hpp.xhtml">armnn/backends/profiling/IBackendProfiling.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_profiling_8hpp.xhtml">backends/BackendProfiling.hpp</a>&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_layer_support_base_8hpp.xhtml">backendsCommon/LayerSupportBase.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_initialiser.xhtml">   22</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_mock_backend_initialiser.xhtml">MockBackendInitialiser</a></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_initialiser.xhtml#a844886db133bb7190b48f9af35bc6d58">MockBackendInitialiser</a>();</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_initialiser.xhtml#a196b5c64c6b7d52b16a9073d91302f71">~MockBackendInitialiser</a>();</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;};</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_context.xhtml">   29</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml">MockBackendProfilingContext</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1profiling_1_1_i_backend_profiling_context.xhtml">profiling::IBackendProfilingContext</a></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#aadbea1ff4262aeb6eda84517253a5958">   32</a></span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#aadbea1ff4262aeb6eda84517253a5958">MockBackendProfilingContext</a>(<a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a34ab83489d1c5043b2b9b4a2ec13c481">IBackendInternal::IBackendProfilingPtr</a>&amp; backendProfiling)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        : m_BackendProfiling(<a class="code" href="namespacestd.xhtml">std</a>::move(backendProfiling))</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        , m_CapturePeriod(0)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        , m_IsTimelineEnabled(true)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    {}</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    ~<a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml">MockBackendProfilingContext</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a5d24e91b1e41268d821891ced802b811">   40</a></span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a34ab83489d1c5043b2b9b4a2ec13c481">IBackendInternal::IBackendProfilingPtr</a>&amp; <a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a5d24e91b1e41268d821891ced802b811">GetBackendProfiling</a>()</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">return</span> m_BackendProfiling;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a6f2834ca8b2c5f299a02b4a98c91b4d6">   45</a></span>&#160;    uint16_t <a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a6f2834ca8b2c5f299a02b4a98c91b4d6">RegisterCounters</a>(uint16_t currentMaxGlobalCounterId)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        std::unique_ptr&lt;profiling::IRegisterBackendCounters&gt; counterRegistrar =</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            m_BackendProfiling-&gt;GetCounterRegistrationInterface(static_cast&lt;uint16_t&gt;(currentMaxGlobalCounterId));</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        std::string categoryName(<span class="stringliteral">&quot;MockCounters&quot;</span>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        counterRegistrar-&gt;RegisterCategory(categoryName);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        counterRegistrar-&gt;RegisterCounter(0, categoryName, 0, 0, 1.f, <span class="stringliteral">&quot;Mock Counter One&quot;</span>, <span class="stringliteral">&quot;Some notional counter&quot;</span>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        counterRegistrar-&gt;RegisterCounter(1, categoryName, 0, 0, 1.f, <span class="stringliteral">&quot;Mock Counter Two&quot;</span>,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                                                   <span class="stringliteral">&quot;Another notional counter&quot;</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        std::string units(<span class="stringliteral">&quot;microseconds&quot;</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        uint16_t nextMaxGlobalCounterId =</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                counterRegistrar-&gt;RegisterCounter(2, categoryName, 0, 0, 1.f, <span class="stringliteral">&quot;Mock MultiCore Counter&quot;</span>,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                                                   <span class="stringliteral">&quot;A dummy four core counter&quot;</span>, units, 4);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">return</span> nextMaxGlobalCounterId;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a85f69fcb2bf44c2689f5678a8261ba84">   65</a></span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&gt;</a> <a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a85f69fcb2bf44c2689f5678a8261ba84">ActivateCounters</a>(uint32_t capturePeriod, <span class="keyword">const</span> std::vector&lt;uint16_t&gt;&amp; counterIds)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">if</span> (capturePeriod == 0 || counterIds.size() == 0)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            m_ActiveCounters.clear();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (capturePeriod == 15939u)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a>(<span class="stringliteral">&quot;ActivateCounters example test error&quot;</span>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        m_CapturePeriod  = capturePeriod;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        m_ActiveCounters = counterIds;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a>();</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a564b1c7251d4e994ff81994157ae6ffe">   80</a></span>&#160;    std::vector&lt;profiling::Timestamp&gt; <a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a564b1c7251d4e994ff81994157ae6ffe">ReportCounterValues</a>()</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        std::vector&lt;profiling::CounterValue&gt; counterValues;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> counterId : m_ActiveCounters)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            counterValues.emplace_back(<a class="code" href="structarmnn_1_1profiling_1_1_counter_value.xhtml">profiling::CounterValue</a>{ counterId, counterId + 1u });</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        uint64_t timestamp = m_CapturePeriod;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">return</span> { <a class="code" href="structarmnn_1_1profiling_1_1_timestamp.xhtml">profiling::Timestamp</a>{ timestamp, counterValues } };</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a77892a6690e47dcfd4be01bf3de9b1c5">   93</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a77892a6690e47dcfd4be01bf3de9b1c5">EnableProfiling</a>(<span class="keywordtype">bool</span>)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keyword">auto</span> sendTimelinePacket = m_BackendProfiling-&gt;GetSendTimelinePacket();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        sendTimelinePacket-&gt;SendTimelineEntityBinaryPacket(4256);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        sendTimelinePacket-&gt;Commit();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a054886fdb648e19cd083d169cf2136e7">  101</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a054886fdb648e19cd083d169cf2136e7">EnableTimelineReporting</a>(<span class="keywordtype">bool</span> isEnabled)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        m_IsTimelineEnabled = isEnabled;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">return</span> isEnabled;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#af2c108bdd805535a58a13553b5848f31">  107</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#af2c108bdd805535a58a13553b5848f31">TimelineReportingEnabled</a>()</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">return</span> m_IsTimelineEnabled;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a34ab83489d1c5043b2b9b4a2ec13c481">IBackendInternal::IBackendProfilingPtr</a> m_BackendProfiling;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    uint32_t m_CapturePeriod;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    std::vector&lt;uint16_t&gt; m_ActiveCounters;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    std::atomic&lt;bool&gt; m_IsTimelineEnabled;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;};</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_service.xhtml">  119</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml">MockBackendProfilingService</a></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// Getter for the singleton instance</span></div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a15a5e913e48840d7b767a4453d83f361">  123</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml">MockBackendProfilingService</a>&amp; <a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a15a5e913e48840d7b767a4453d83f361">Instance</a>()</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml">MockBackendProfilingService</a> instance;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">return</span> instance;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#ae0e8de63fb5fb93f646543e89a0e1386">  129</a></span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml">MockBackendProfilingContext</a>* <a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#ae0e8de63fb5fb93f646543e89a0e1386">GetContext</a>()</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">return</span> m_sharedContext.get();</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a3458b64cd6375e3842160a28ad6e2301">  134</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a3458b64cd6375e3842160a28ad6e2301">SetProfilingContextPtr</a>(std::shared_ptr&lt;MockBackendProfilingContext&gt; shared)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        m_sharedContext = shared;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    std::shared_ptr&lt;MockBackendProfilingContext&gt; m_sharedContext;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;};</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_mock_backend.xhtml">MockBackend</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend.xhtml">MockBackend</a>()  = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    ~<a class="code" href="classarmnn_1_1_mock_backend.xhtml">MockBackend</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetIdStatic();</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_backend.xhtml#a6c6c3d137a7792e264a89cc40ea94bb0">  150</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; <a class="code" href="classarmnn_1_1_mock_backend.xhtml#a6c6c3d137a7792e264a89cc40ea94bb0">GetId</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">return</span> GetIdStatic();</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IBackendInternal::IMemoryManagerUniquePtr</a> CreateMemoryManager() <span class="keyword">const override</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        CreateWorkloadFactory(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager = <span class="keyword">nullptr</span>) <span class="keyword">const override</span>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendInternal::IBackendContextPtr</a> CreateBackendContext(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a>&amp;) <span class="keyword">const override</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#aaece3a614f6691da8de8c7295cb1b07f">IBackendInternal::IBackendProfilingContextPtr</a></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        CreateBackendProfilingContext(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a>&amp; creationOptions,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                      <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a34ab83489d1c5043b2b9b4a2ec13c481">IBackendProfilingPtr</a>&amp; backendProfiling) <span class="keyword">override</span>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a> GetLayerSupport() <span class="keyword">const override</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a> OptimizeSubgraphView(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a>&amp; subgraph) <span class="keyword">const override</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    std::unique_ptr&lt;ICustomAllocator&gt; GetDefaultAllocator() <span class="keyword">const override</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;};</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_layer_support.xhtml">  172</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_mock_layer_support.xhtml">MockLayerSupport</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_layer_support.xhtml#a6794a744b7dae92b85d875045435a968">  175</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_mock_layer_support.xhtml#a6794a744b7dae92b85d875045435a968">IsLayerSupported</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>&amp; type,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                          <span class="keyword">const</span> std::vector&lt;TensorInfo&gt;&amp; infos,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;LstmInputParamsInfo&gt;</a>&amp; <span class="comment">/*lstmParamsInfo*/</span>,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;QuantizedLstmInputParamsInfo&gt;</a>&amp; <span class="comment">/*quantizedLstmParamsInfo*/</span>,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const override</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">switch</span>(type)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a>:</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a3512b2f24950886288c5d01df1488f15">IsInputSupported</a>(infos[0], reasonIfUnsupported);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>:</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a60699e7f86e142739ccddd43c20c4fc0">IsOutputSupported</a>(infos[0], reasonIfUnsupported);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>:</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ab5569e5b664498e011e8bd92cc3cc5b2">IsAdditionSupported</a>(infos[0], infos[1], infos[2], reasonIfUnsupported);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">LayerType::Convolution2d</a>:</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keywordflow">if</span> (infos.size() != 4)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Invalid number of TransposeConvolution2d &quot;</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                                   <span class="stringliteral">&quot;TensorInfos. TensorInfos should be of format: &quot;</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                                   <span class="stringliteral">&quot;{input, output, weights, biases}.&quot;</span>);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const Convolution2dDescriptor*&gt;(&amp;descriptor));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="keywordflow">if</span> (infos[3] == <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>())</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#aff785aa7c076b1d2f51f76fa0f0647e4">IsConvolution2dSupported</a>(infos[0],</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                                    infos[1],</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                                    desc,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                                    infos[2],</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                                    <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                                    reasonIfUnsupported);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#aff785aa7c076b1d2f51f76fa0f0647e4">IsConvolution2dSupported</a>(infos[0],</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                                    infos[1],</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                                    desc,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                                                    infos[2],</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                                    infos[3],</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                    reasonIfUnsupported);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_layer_support.xhtml#a005f361b64a45d4e3fe6bff24697048c">  224</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_mock_layer_support.xhtml#a005f361b64a45d4e3fe6bff24697048c">IsInputSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*input*/</span>,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> <span class="comment">/*reasonIfUnsupported = EmptyOptional()*/</span>)<span class="keyword"> const override</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_layer_support.xhtml#ad407693360ac4e742adb5ec76f84a948">  230</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_mock_layer_support.xhtml#ad407693360ac4e742adb5ec76f84a948">IsOutputSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*input*/</span>,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> <span class="comment">/*reasonIfUnsupported = EmptyOptional()*/</span>)<span class="keyword"> const override</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_layer_support.xhtml#a7eff21a4ed5128387ad7683ba89b61ad">  236</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_mock_layer_support.xhtml#a7eff21a4ed5128387ad7683ba89b61ad">IsAdditionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*input0*/</span>,</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*input1*/</span>,</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*output*/</span>,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> <span class="comment">/*reasonIfUnsupported = EmptyOptional()*/</span>)<span class="keyword"> const override</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_layer_support.xhtml#ad2e357f943588b241aaa34c9436e716e">  244</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_mock_layer_support.xhtml#ad2e357f943588b241aaa34c9436e716e">IsConvolution2dSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*input*/</span>,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*output*/</span>,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a>&amp; <span class="comment">/*descriptor*/</span>,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <span class="comment">/*weights*/</span>,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; <span class="comment">/*biases*/</span>,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> <span class="comment">/*reasonIfUnsupported = EmptyOptional()*/</span>)<span class="keyword"> const override</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;};</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}    <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml">armnn::LayerSupportBase</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8hpp_source.xhtml#l00013">LayerSupportBase.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_backend.xhtml">armnn::MockBackend</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_test_utils_2_mock_backend_8hpp_source.xhtml#l00015">MockBackend.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_context_xhtml_aadbea1ff4262aeb6eda84517253a5958"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_context.xhtml#aadbea1ff4262aeb6eda84517253a5958">armnn::MockBackendProfilingContext::MockBackendProfilingContext</a></div><div class="ttdeci">MockBackendProfilingContext(IBackendInternal::IBackendProfilingPtr &amp;backendProfiling)</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00032">MockBackend.hpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a60699e7f86e142739ccddd43c20c4fc0"><div class="ttname"><a href="namespacearmnn.xhtml#a60699e7f86e142739ccddd43c20c4fc0">armnn::IsOutputSupported</a></div><div class="ttdeci">bool IsOutputSupported(const BackendId &amp;backend, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_backend_profiling_context_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_backend_profiling_context.xhtml">armnn::profiling::IBackendProfilingContext</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_profiling_context_8hpp_source.xhtml#l00016">IBackendProfilingContext.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a72ca1cf423bda4b0a9ffb789627126de"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">armnn::IBackendInternal::IWorkloadFactoryPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkloadFactory &gt; IWorkloadFactoryPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00086">IBackendInternal.hpp:86</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_service_xhtml_a3458b64cd6375e3842160a28ad6e2301"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a3458b64cd6375e3842160a28ad6e2301">armnn::MockBackendProfilingService::SetProfilingContextPtr</a></div><div class="ttdeci">void SetProfilingContextPtr(std::shared_ptr&lt; MockBackendProfilingContext &gt; shared)</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00134">MockBackend.hpp:134</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_layer_support_xhtml_ad407693360ac4e742adb5ec76f84a948"><div class="ttname"><a href="classarmnn_1_1_mock_layer_support.xhtml#ad407693360ac4e742adb5ec76f84a948">armnn::MockLayerSupport::IsOutputSupported</a></div><div class="ttdeci">bool IsOutputSupported(const TensorInfo &amp;, Optional&lt; std::string &amp;&gt;) const override</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00230">MockBackend.hpp:230</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt; std::string &gt;</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml">armnn::IBackendInternal</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00074">IBackendInternal.hpp:74</a></div></div>
<div class="ttc" id="structarmnn_1_1profiling_1_1_counter_value_xhtml"><div class="ttname"><a href="structarmnn_1_1profiling_1_1_counter_value.xhtml">armnn::profiling::CounterValue</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_profiling_8hpp_source.xhtml#l00021">IBackendProfiling.hpp:21</a></div></div>
<div class="ttc" id="_i_backend_internal_8hpp_xhtml"><div class="ttname"><a href="_i_backend_internal_8hpp.xhtml">IBackendInternal.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_layer_support_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_layer_support.xhtml">armnn::MockLayerSupport</a></div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00172">MockBackend.hpp:172</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_initialiser_xhtml_a196b5c64c6b7d52b16a9073d91302f71"><div class="ttname"><a href="classarmnn_1_1_mock_backend_initialiser.xhtml#a196b5c64c6b7d52b16a9073d91302f71">armnn::MockBackendInitialiser::~MockBackendInitialiser</a></div><div class="ttdeci">~MockBackendInitialiser()</div><div class="ttdef"><b>Definition:</b> <a href="backends_2backends_common_2test_2_mock_backend_8cpp_source.xhtml#l00077">MockBackend.cpp:77</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_service_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_service.xhtml">armnn::MockBackendProfilingService</a></div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00119">MockBackend.hpp:119</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00499">Descriptors.hpp:499</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_initialiser_xhtml_a844886db133bb7190b48f9af35bc6d58"><div class="ttname"><a href="classarmnn_1_1_mock_backend_initialiser.xhtml#a844886db133bb7190b48f9af35bc6d58">armnn::MockBackendInitialiser::MockBackendInitialiser</a></div><div class="ttdeci">MockBackendInitialiser()</div><div class="ttdef"><b>Definition:</b> <a href="backends_2backends_common_2test_2_mock_backend_8cpp_source.xhtml#l00068">MockBackend.cpp:68</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_layer_support_xhtml_a005f361b64a45d4e3fe6bff24697048c"><div class="ttname"><a href="classarmnn_1_1_mock_layer_support.xhtml#a005f361b64a45d4e3fe6bff24697048c">armnn::MockLayerSupport::IsInputSupported</a></div><div class="ttdeci">bool IsInputSupported(const TensorInfo &amp;, Optional&lt; std::string &amp;&gt;) const override</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00224">MockBackend.hpp:224</a></div></div>
<div class="ttc" id="structarmnn_1_1profiling_1_1_timestamp_xhtml"><div class="ttname"><a href="structarmnn_1_1profiling_1_1_timestamp.xhtml">armnn::profiling::Timestamp</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_profiling_8hpp_source.xhtml#l00029">IBackendProfiling.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimization_views_xhtml"><div class="ttname"><a href="classarmnn_1_1_optimization_views.xhtml">armnn::OptimizationViews</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00013">OptimizationViews.hpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a12bff6d51d63dac1375c89bc8415dc46"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">armnn::IBackendInternal::IMemoryManagerUniquePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IMemoryManager &gt; IMemoryManagerUniquePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00095">IBackendInternal.hpp:95</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_context_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_context.xhtml">armnn::MockBackendProfilingContext</a></div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00029">MockBackend.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_initialiser_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_backend_initialiser.xhtml">armnn::MockBackendInitialiser</a></div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00022">MockBackend.hpp:22</a></div></div>
<div class="ttc" id="_layer_support_base_8hpp_xhtml"><div class="ttname"><a href="_layer_support_base_8hpp.xhtml">LayerSupportBase.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_xhtml_a6c6c3d137a7792e264a89cc40ea94bb0"><div class="ttname"><a href="classarmnn_1_1_mock_backend.xhtml#a6c6c3d137a7792e264a89cc40ea94bb0">armnn::MockBackend::GetId</a></div><div class="ttdeci">const BackendId &amp; GetId() const override</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00150">MockBackend.hpp:150</a></div></div>
<div class="ttc" id="structarmnn_1_1_base_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a></div><div class="ttdoc">Base class for all descriptors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00022">Descriptors.hpp:22</a></div></div>
<div class="ttc" id="_layer_support_common_8hpp_xhtml"><div class="ttname"><a href="_layer_support_common_8hpp.xhtml">LayerSupportCommon.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml">armnn::SubgraphView</a></div><div class="ttdoc">The SubgraphView class represents a subgraph of a Graph. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00023">SubgraphView.hpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_context_xhtml_a85f69fcb2bf44c2689f5678a8261ba84"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a85f69fcb2bf44c2689f5678a8261ba84">armnn::MockBackendProfilingContext::ActivateCounters</a></div><div class="ttdeci">Optional&lt; std::string &gt; ActivateCounters(uint32_t capturePeriod, const std::vector&lt; uint16_t &gt; &amp;counterIds)</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00065">MockBackend.hpp:65</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00149">BackendId.hpp:149</a></div></div>
<div class="ttc" id="_backend_profiling_8hpp_xhtml"><div class="ttname"><a href="_backend_profiling_8hpp.xhtml">BackendProfiling.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a34ab83489d1c5043b2b9b4a2ec13c481"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a34ab83489d1c5043b2b9b4a2ec13c481">armnn::IBackendInternal::IBackendProfilingPtr</a></div><div class="ttdeci">std::unique_ptr&lt; armnn::profiling::IBackendProfiling &gt; IBackendProfilingPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00090">IBackendInternal.hpp:90</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a693b40e6b94e958836aeb0410ca186bd"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; IMemoryManagerSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00096">IBackendInternal.hpp:96</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::LayerType::Convolution2d</a></div></div>
<div class="ttc" id="_i_backend_profiling_context_8hpp_xhtml"><div class="ttname"><a href="_i_backend_profiling_context_8hpp.xhtml">IBackendProfilingContext.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_layer_support_xhtml_ad2e357f943588b241aaa34c9436e716e"><div class="ttname"><a href="classarmnn_1_1_mock_layer_support.xhtml#ad2e357f943588b241aaa34c9436e716e">armnn::MockLayerSupport::IsConvolution2dSupported</a></div><div class="ttdeci">bool IsConvolution2dSupported(const TensorInfo &amp;, const TensorInfo &amp;, const Convolution2dDescriptor &amp;, const TensorInfo &amp;, const Optional&lt; TensorInfo &gt; &amp;, Optional&lt; std::string &amp;&gt;) const override</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00244">MockBackend.hpp:244</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_service_xhtml_a15a5e913e48840d7b767a4453d83f361"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a15a5e913e48840d7b767a4453d83f361">armnn::MockBackendProfilingService::Instance</a></div><div class="ttdeci">static MockBackendProfilingService &amp; Instance()</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00123">MockBackend.hpp:123</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_optimization_views_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_optimization_views_8hpp.xhtml">OptimizationViews.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aff785aa7c076b1d2f51f76fa0f0647e4"><div class="ttname"><a href="namespacearmnn.xhtml#aff785aa7c076b1d2f51f76fa0f0647e4">armnn::IsConvolution2dSupported</a></div><div class="ttdeci">bool IsConvolution2dSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div></div>
<div class="ttc" id="classarmnn_1_1_mock_layer_support_xhtml_a7eff21a4ed5128387ad7683ba89b61ad"><div class="ttname"><a href="classarmnn_1_1_mock_layer_support.xhtml#a7eff21a4ed5128387ad7683ba89b61ad">armnn::MockLayerSupport::IsAdditionSupported</a></div><div class="ttdeci">bool IsAdditionSupported(const TensorInfo &amp;, const TensorInfo &amp;, const TensorInfo &amp;, Optional&lt; std::string &amp;&gt;) const override</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00236">MockBackend.hpp:236</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a11fa919c11fe46aad613b2e960fcfe90"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">armnn::IBackendInternal::ILayerSupportSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; ILayerSupport &gt; ILayerSupportSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00091">IBackendInternal.hpp:91</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_context_xhtml_a77892a6690e47dcfd4be01bf3de9b1c5"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a77892a6690e47dcfd4be01bf3de9b1c5">armnn::MockBackendProfilingContext::EnableProfiling</a></div><div class="ttdeci">bool EnableProfiling(bool)</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00093">MockBackend.hpp:93</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3512b2f24950886288c5d01df1488f15"><div class="ttname"><a href="namespacearmnn.xhtml#a3512b2f24950886288c5d01df1488f15">armnn::IsInputSupported</a></div><div class="ttdeci">bool IsInputSupported(const BackendId &amp;backend, const TensorInfo &amp;input, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_service_xhtml_ae0e8de63fb5fb93f646543e89a0e1386"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_service.xhtml#ae0e8de63fb5fb93f646543e89a0e1386">armnn::MockBackendProfilingService::GetContext</a></div><div class="ttdeci">MockBackendProfilingContext * GetContext()</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00129">MockBackend.hpp:129</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="_i_backend_profiling_8hpp_xhtml"><div class="ttname"><a href="_i_backend_profiling_8hpp.xhtml">IBackendProfiling.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_context_xhtml_af2c108bdd805535a58a13553b5848f31"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_context.xhtml#af2c108bdd805535a58a13553b5848f31">armnn::MockBackendProfilingContext::TimelineReportingEnabled</a></div><div class="ttdeci">bool TimelineReportingEnabled()</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00107">MockBackend.hpp:107</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_context_xhtml_a564b1c7251d4e994ff81994157ae6ffe"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a564b1c7251d4e994ff81994157ae6ffe">armnn::MockBackendProfilingContext::ReportCounterValues</a></div><div class="ttdeci">std::vector&lt; profiling::Timestamp &gt; ReportCounterValues()</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00080">MockBackend.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_context_xhtml_a5d24e91b1e41268d821891ced802b811"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a5d24e91b1e41268d821891ced802b811">armnn::MockBackendProfilingContext::GetBackendProfiling</a></div><div class="ttdeci">IBackendInternal::IBackendProfilingPtr &amp; GetBackendProfiling()</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00040">MockBackend.hpp:40</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab5569e5b664498e011e8bd92cc3cc5b2"><div class="ttname"><a href="namespacearmnn.xhtml#ab5569e5b664498e011e8bd92cc3cc5b2">armnn::IsAdditionSupported</a></div><div class="ttdeci">bool IsAdditionSupported(const BackendId &amp;backend, const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_context_xhtml_a054886fdb648e19cd083d169cf2136e7"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a054886fdb648e19cd083d169cf2136e7">armnn::MockBackendProfilingContext::EnableTimelineReporting</a></div><div class="ttdeci">bool EnableTimelineReporting(bool isEnabled)</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00101">MockBackend.hpp:101</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_layer_support_xhtml_a6794a744b7dae92b85d875045435a968"><div class="ttname"><a href="classarmnn_1_1_mock_layer_support.xhtml#a6794a744b7dae92b85d875045435a968">armnn::MockLayerSupport::IsLayerSupported</a></div><div class="ttdeci">bool IsLayerSupported(const LayerType &amp;type, const std::vector&lt; TensorInfo &gt; &amp;infos, const BaseDescriptor &amp;descriptor, const Optional&lt; LstmInputParamsInfo &gt; &amp;, const Optional&lt; QuantizedLstmInputParamsInfo &gt; &amp;, Optional&lt; std::string &amp;&gt; reasonIfUnsupported) const override</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00175">MockBackend.hpp:175</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_aaece3a614f6691da8de8c7295cb1b07f"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#aaece3a614f6691da8de8c7295cb1b07f">armnn::IBackendInternal::IBackendProfilingContextPtr</a></div><div class="ttdeci">std::shared_ptr&lt; armnn::profiling::IBackendProfilingContext &gt; IBackendProfilingContextPtr</div><div class="ttdoc">This is the bridge between backend and backend profiling we&amp;#39;ll keep it in the backend namespace...</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00089">IBackendInternal.hpp:89</a></div></div>
<div class="ttc" id="_mock_backend_id_8hpp_xhtml"><div class="ttname"><a href="_mock_backend_id_8hpp.xhtml">MockBackendId.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">armnn::LayerType</a></div><div class="ttdeci">LayerType</div><div class="ttdoc">When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below...</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00458">Types.hpp:458</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_context_xhtml_a6f2834ca8b2c5f299a02b4a98c91b4d6"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a6f2834ca8b2c5f299a02b4a98c91b4d6">armnn::MockBackendProfilingContext::RegisterCounters</a></div><div class="ttdeci">uint16_t RegisterCounters(uint16_t currentMaxGlobalCounterId)</div><div class="ttdef"><b>Definition:</b> <a href="src_2backends_2backends_common_2test_2_mock_backend_8hpp_source.xhtml#l00045">MockBackend.hpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_ada6d56575c0fe53cf23c7ae4610c6367"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">armnn::IBackendInternal::IBackendContextPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IBackendContext &gt; IBackendContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00087">IBackendInternal.hpp:87</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="src_2backends_2backends_common_2test_2_mock_backend_8hpp.xhtml">MockBackend.hpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:00:05 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
