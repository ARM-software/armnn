<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/TensorHandle.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_tensor_handle_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TensorHandle.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_tensor_handle_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_exceptions_8hpp.xhtml">armnn/Exceptions.hpp</a>&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a36e8f52330a21eeab3cc7c4e030f3583">   15</a></span>&#160;<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearmnn.xhtml#a36e8f52330a21eeab3cc7c4e030f3583">GetUnpaddedTensorStrides</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> shape(tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="keyword">auto</span> size = <a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">GetDataTypeSize</a>(tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>());</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keyword">auto</span> runningSize = size;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    std::vector&lt;unsigned int&gt; strides(shape.GetNumDimensions());</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keyword">auto</span> lastIdx = shape.GetNumDimensions()-1;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i &lt; lastIdx ; i++)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        strides[lastIdx-i] = runningSize;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        runningSize *= shape[lastIdx-i];</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    }</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    strides[0] = runningSize;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(shape.GetNumDimensions(), strides.data());</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_tensor_handle.xhtml#a08bd4bf32ba8d09c21de0457e78b1a93">   31</a></span>&#160;<a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml#a08bd4bf32ba8d09c21de0457e78b1a93">ConstTensorHandle::ConstTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;: m_TensorInfo(tensorInfo)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;, m_Memory(nullptr)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_tensor_handle.xhtml#a8faf443b026b17e61779734bd2b45d12">   38</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">void</span>* ConstTensorHandle::GetConstTensor&lt;void&gt;() <span class="keyword">const</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> m_Memory;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_handle.xhtml#adb815c65867e3125bfcdf545502e491a">   43</a></span>&#160;<a class="code" href="classarmnn_1_1_tensor_handle.xhtml#adb815c65867e3125bfcdf545502e491a">TensorHandle::TensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;: <a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml">ConstTensorHandle</a>(tensorInfo)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;, m_MutableMemory(nullptr)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_handle.xhtml#ac1e740b316dcd4f95d2031bc811f8e77">   50</a></span>&#160;<span class="keywordtype">void</span>* TensorHandle::GetTensor&lt;void&gt;() <span class="keyword">const</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> m_MutableMemory;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_tensor_handle.xhtml#aa70cd67dc8679c1b1f532fc05cb85f36">   55</a></span>&#160;<a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml#aa70cd67dc8679c1b1f532fc05cb85f36">ScopedTensorHandle::ScopedTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;: <a class="code" href="classarmnn_1_1_tensor_handle.xhtml">TensorHandle</a>(tensorInfo)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_tensor_handle.xhtml#afad050f38a14f02af79e6703d4fe7175">   60</a></span>&#160;<a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml#aa70cd67dc8679c1b1f532fc05cb85f36">ScopedTensorHandle::ScopedTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; tensor)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;: <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">ScopedTensorHandle</a>(tensor.GetInfo())</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    CopyFrom(tensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>(), tensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_tensor_handle.xhtml#a43dd3ce58fc8e07a46d179fabcadff42">   66</a></span>&#160;<a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml#aa70cd67dc8679c1b1f532fc05cb85f36">ScopedTensorHandle::ScopedTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml">ConstTensorHandle</a>&amp; tensorHandle)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;: <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">ScopedTensorHandle</a>(tensorHandle.<a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>())</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    CopyFrom(tensorHandle.<a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">GetConstTensor</a>&lt;<span class="keywordtype">void</span>&gt;(), tensorHandle.<a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_tensor_handle.xhtml#adae1153cc6727c4d5d7346a33d12a659">   72</a></span>&#160;<a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml#aa70cd67dc8679c1b1f532fc05cb85f36">ScopedTensorHandle::ScopedTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">ScopedTensorHandle</a>&amp; other)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;: <a class="code" href="classarmnn_1_1_tensor_handle.xhtml">TensorHandle</a>(other.<a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>())</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    CopyFrom(other);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_tensor_handle.xhtml#abb0bce07a52fa77c268595260af2073f">   78</a></span>&#160;<a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">ScopedTensorHandle</a>&amp; <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml#abb0bce07a52fa77c268595260af2073f">ScopedTensorHandle::operator=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">ScopedTensorHandle</a>&amp; other)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    ::operator <span class="keyword">delete</span>(GetTensor&lt;void&gt;());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_handle.xhtml#a0feac8591ac1a88993aa3278b24dcb57">SetMemory</a>(<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    CopyFrom(other);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_tensor_handle.xhtml#ae24cd57521cafb0474021168114c67e7">   86</a></span>&#160;<a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml#ae24cd57521cafb0474021168114c67e7">ScopedTensorHandle::~ScopedTensorHandle</a>()</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    ::operator <span class="keyword">delete</span>(GetTensor&lt;void&gt;());</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">   91</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">ScopedTensorHandle::Allocate</a>()</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">if</span> (GetTensor&lt;void&gt;() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_handle.xhtml#a0feac8591ac1a88993aa3278b24dcb57">SetMemory</a>(::<span class="keyword">operator</span> <span class="keyword">new</span>(<a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>().GetNumBytes()));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;TensorHandle::Allocate Trying to allocate a TensorHandle&quot;</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="stringliteral">&quot;that already has allocated memory.&quot;</span>);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keywordtype">void</span> ScopedTensorHandle::CopyOutTo(<span class="keywordtype">void</span>* memory)<span class="keyword"> const</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    memcpy(memory, GetTensor&lt;void&gt;(), <a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>().GetNumBytes());</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keywordtype">void</span> ScopedTensorHandle::CopyInFrom(<span class="keyword">const</span> <span class="keywordtype">void</span>* memory)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    memcpy(GetTensor&lt;void&gt;(), memory, <a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>().GetNumBytes());</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="keywordtype">void</span> ScopedTensorHandle::CopyFrom(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">ScopedTensorHandle</a>&amp; other)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    CopyFrom(other.<a class="code" href="classarmnn_1_1_tensor_handle.xhtml#aabedf69ab42fd7a0b0f751dd8534e2ab">GetTensor</a>&lt;<span class="keywordtype">void</span>&gt;(), other.<a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keywordtype">void</span> ScopedTensorHandle::CopyFrom(<span class="keyword">const</span> <span class="keywordtype">void</span>* srcMemory, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numBytes)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(GetTensor&lt;void&gt;() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(<a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">GetTensorInfo</a>().GetNumBytes() == numBytes);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span> (srcMemory)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">Allocate</a>();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        memcpy(GetTensor&lt;void&gt;(), srcMemory, numBytes);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classarmnn_1_1_passthrough_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">  131</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_passthrough_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">PassthroughTensorHandle::Allocate</a>()</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;PassthroughTensorHandle::Allocate() should never be called&quot;</span>);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_passthrough_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">  136</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_const_passthrough_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">ConstPassthroughTensorHandle::Allocate</a>()</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;ConstPassthroughTensorHandle::Allocate() should never be called&quot;</span>);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_handle.xhtml">armnn::TensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00079">TensorHandle.hpp:79</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_tensor_handle_xhtml_abb0bce07a52fa77c268595260af2073f"><div class="ttname"><a href="classarmnn_1_1_scoped_tensor_handle.xhtml#abb0bce07a52fa77c268595260af2073f">armnn::ScopedTensorHandle::operator=</a></div><div class="ttdeci">ScopedTensorHandle &amp; operator=(const ScopedTensorHandle &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_8cpp_source.xhtml#l00078">TensorHandle.cpp:78</a></div></div>
<div class="ttc" id="classarmnn_1_1_passthrough_tensor_handle_xhtml_a8518772c5d692e334a76617582b10b92"><div class="ttname"><a href="classarmnn_1_1_passthrough_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">armnn::PassthroughTensorHandle::Allocate</a></div><div class="ttdeci">virtual void Allocate() override</div><div class="ttdoc">Indicate to the memory manager that this resource is no longer active. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_8cpp_source.xhtml#l00131">TensorHandle.cpp:131</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_handle_xhtml_a0feac8591ac1a88993aa3278b24dcb57"><div class="ttname"><a href="classarmnn_1_1_tensor_handle.xhtml#a0feac8591ac1a88993aa3278b24dcb57">armnn::TensorHandle::SetMemory</a></div><div class="ttdeci">void SetMemory(void *mem)</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00098">TensorHandle.hpp:98</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_handle_xhtml_adb815c65867e3125bfcdf545502e491a"><div class="ttname"><a href="classarmnn_1_1_tensor_handle.xhtml#adb815c65867e3125bfcdf545502e491a">armnn::TensorHandle::TensorHandle</a></div><div class="ttdeci">TensorHandle(const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_8cpp_source.xhtml#l00043">TensorHandle.cpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::TensorInfo::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00427">Tensor.cpp:427</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_passthrough_tensor_handle_xhtml_a8518772c5d692e334a76617582b10b92"><div class="ttname"><a href="classarmnn_1_1_const_passthrough_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">armnn::ConstPassthroughTensorHandle::Allocate</a></div><div class="ttdeci">virtual void Allocate() override</div><div class="ttdoc">Indicate to the memory manager that this resource is no longer active. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_8cpp_source.xhtml#l00136">TensorHandle.cpp:136</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_aa81f67ac64f0c249e26499600c45d996"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">armnn::BaseTensor::GetMemoryArea</a></div><div class="ttdeci">MemoryType GetMemoryArea() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00305">Tensor.hpp:305</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_tensor_handle_xhtml_aa70cd67dc8679c1b1f532fc05cb85f36"><div class="ttname"><a href="classarmnn_1_1_scoped_tensor_handle.xhtml#aa70cd67dc8679c1b1f532fc05cb85f36">armnn::ScopedTensorHandle::ScopedTensorHandle</a></div><div class="ttdeci">ScopedTensorHandle(const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_8cpp_source.xhtml#l00055">TensorHandle.cpp:55</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor_handle.xhtml">armnn::ConstTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00024">TensorHandle.hpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_tensor_handle_xhtml_ae24cd57521cafb0474021168114c67e7"><div class="ttname"><a href="classarmnn_1_1_scoped_tensor_handle.xhtml#ae24cd57521cafb0474021168114c67e7">armnn::ScopedTensorHandle::~ScopedTensorHandle</a></div><div class="ttdeci">~ScopedTensorHandle()</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_8cpp_source.xhtml#l00086">TensorHandle.cpp:86</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_handle_xhtml_a66e8f43a5b42b500871ed96e15419567"><div class="ttname"><a href="classarmnn_1_1_const_tensor_handle.xhtml#a66e8f43a5b42b500871ed96e15419567">armnn::ConstTensorHandle::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00040">TensorHandle.hpp:40</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_handle_xhtml_a08bd4bf32ba8d09c21de0457e78b1a93"><div class="ttname"><a href="classarmnn_1_1_const_tensor_handle.xhtml#a08bd4bf32ba8d09c21de0457e78b1a93">armnn::ConstTensorHandle::ConstTensorHandle</a></div><div class="ttdeci">ConstTensorHandle(const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_8cpp_source.xhtml#l00031">TensorHandle.cpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00115">TensorHandle.hpp:115</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">TensorHandle.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_handle_xhtml_aabedf69ab42fd7a0b0f751dd8534e2ab"><div class="ttname"><a href="classarmnn_1_1_tensor_handle.xhtml#aabedf69ab42fd7a0b0f751dd8534e2ab">armnn::TensorHandle::GetTensor</a></div><div class="ttdeci">T * GetTensor() const</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00083">TensorHandle.hpp:83</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a36e8f52330a21eeab3cc7c4e030f3583"><div class="ttname"><a href="namespacearmnn.xhtml#a36e8f52330a21eeab3cc7c4e030f3583">armnn::GetUnpaddedTensorStrides</a></div><div class="ttdeci">TensorShape GetUnpaddedTensorStrides(const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_8cpp_source.xhtml#l00015">TensorHandle.cpp:15</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml"><div class="ttname"><a href="_exceptions_8hpp.xhtml">Exceptions.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_tensor_handle_xhtml_a8518772c5d692e334a76617582b10b92"><div class="ttname"><a href="classarmnn_1_1_scoped_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">armnn::ScopedTensorHandle::Allocate</a></div><div class="ttdeci">virtual void Allocate() override</div><div class="ttdoc">Indicate to the memory manager that this resource is no longer active. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_8cpp_source.xhtml#l00091">TensorHandle.cpp:91</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_handle_xhtml_a3a76fc8b348e13d5a6ac1240c96ebef4"><div class="ttname"><a href="classarmnn_1_1_const_tensor_handle.xhtml#a3a76fc8b348e13d5a6ac1240c96ebef4">armnn::ConstTensorHandle::GetConstTensor</a></div><div class="ttdeci">const T * GetConstTensor() const</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00028">TensorHandle.hpp:28</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::BaseTensor::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00302">Tensor.hpp:302</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa02b9e06fb20fa3c13da0427e6ee5ab2"><div class="ttname"><a href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">armnn::GetDataTypeSize</a></div><div class="ttdeci">constexpr unsigned int GetDataTypeSize(DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00151">TypesUtils.hpp:151</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="_tensor_handle_8cpp.xhtml">TensorHandle.cpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:12 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
