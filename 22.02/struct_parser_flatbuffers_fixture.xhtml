<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ParserFlatbuffersFixture Struct Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('struct_parser_flatbuffers_fixture.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="struct_parser_flatbuffers_fixture-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ParserFlatbuffersFixture Struct Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad748cc696b0f92b478ba4f145e966754"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#ad748cc696b0f92b478ba4f145e966754">ParserFlatbuffersFixture</a> ()</td></tr>
<tr class="separator:ad748cc696b0f92b478ba4f145e966754"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30fe33b872259560a868fc9b94195ec0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a30fe33b872259560a868fc9b94195ec0">Setup</a> (bool testDynamic=true)</td></tr>
<tr class="separator:a30fe33b872259560a868fc9b94195ec0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4668d7897a0190f5a828eb8ee856b20"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; tflite::ModelT &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#ad4668d7897a0190f5a828eb8ee856b20">MakeModelDynamic</a> (std::vector&lt; uint8_t &gt; graphBinary)</td></tr>
<tr class="separator:ad4668d7897a0190f5a828eb8ee856b20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9a0f08c02f2b0f7e0b05908590b390c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#af9a0f08c02f2b0f7e0b05908590b390c">loadNetwork</a> (<a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> networkId, bool loadDynamic)</td></tr>
<tr class="separator:af9a0f08c02f2b0f7e0b05908590b390c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bb4ea256fbbf6d53068ca93bb4bc95c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a2bb4ea256fbbf6d53068ca93bb4bc95c">SetupSingleInputSingleOutput</a> (const std::string &amp;inputName, const std::string &amp;outputName)</td></tr>
<tr class="separator:a2bb4ea256fbbf6d53068ca93bb4bc95c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69fc8e7f42386fa67732cb8c98d8b024"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a69fc8e7f42386fa67732cb8c98d8b024">ReadStringToBinary</a> ()</td></tr>
<tr class="separator:a69fc8e7f42386fa67732cb8c98d8b024"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7406d5673bc2a8bc1efbdd4f4da140a"><td class="memTemplParams" colspan="2">template&lt;std::size_t NumOutputDimensions, armnn::DataType ArmnnType&gt; </td></tr>
<tr class="memitem:ad7406d5673bc2a8bc1efbdd4f4da140a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a">RunTest</a> (size_t subgraphId, const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; ArmnnType &gt;&gt; &amp;inputData, const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; ArmnnType &gt;&gt; &amp;expectedOutputData)</td></tr>
<tr class="memdesc:ad7406d5673bc2a8bc1efbdd4f4da140a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes the network with the given input tensor and checks the result against the given output tensor.  <a href="#ad7406d5673bc2a8bc1efbdd4f4da140a">More...</a><br /></td></tr>
<tr class="separator:ad7406d5673bc2a8bc1efbdd4f4da140a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a515ada4931d7b8d8f9c9b84d1090ada1"><td class="memTemplParams" colspan="2">template&lt;std::size_t NumOutputDimensions, armnn::DataType ArmnnType&gt; </td></tr>
<tr class="memitem:a515ada4931d7b8d8f9c9b84d1090ada1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a515ada4931d7b8d8f9c9b84d1090ada1">RunTest</a> (size_t subgraphId, const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; ArmnnType &gt;&gt;&gt; &amp;inputData, const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; ArmnnType &gt;&gt;&gt; &amp;expectedOutputData)</td></tr>
<tr class="memdesc:a515ada4931d7b8d8f9c9b84d1090ada1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes the network with the given input tensors and checks the results against the given output tensors.  <a href="#a515ada4931d7b8d8f9c9b84d1090ada1">More...</a><br /></td></tr>
<tr class="separator:a515ada4931d7b8d8f9c9b84d1090ada1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bd9d97856a0c52dc07afdea7e7831c9"><td class="memTemplParams" colspan="2">template&lt;std::size_t NumOutputDimensions, armnn::DataType ArmnnType1, armnn::DataType ArmnnType2&gt; </td></tr>
<tr class="memitem:a4bd9d97856a0c52dc07afdea7e7831c9"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a4bd9d97856a0c52dc07afdea7e7831c9">RunTest</a> (size_t subgraphId, const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; ArmnnType1 &gt;&gt;&gt; &amp;inputData, const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; ArmnnType2 &gt;&gt;&gt; &amp;expectedOutputData, bool isDynamic=false)</td></tr>
<tr class="memdesc:a4bd9d97856a0c52dc07afdea7e7831c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiple Inputs, Multiple Outputs w/ Variable Datatypes and different dimension sizes.  <a href="#a4bd9d97856a0c52dc07afdea7e7831c9">More...</a><br /></td></tr>
<tr class="separator:a4bd9d97856a0c52dc07afdea7e7831c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c5b6cc5f5d14210b60323913d2b8841"><td class="memTemplParams" colspan="2">template&lt;std::size_t NumOutputDimensions, armnn::DataType inputType1, armnn::DataType inputType2, armnn::DataType outputType&gt; </td></tr>
<tr class="memitem:a7c5b6cc5f5d14210b60323913d2b8841"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a7c5b6cc5f5d14210b60323913d2b8841">RunTest</a> (size_t subgraphId, const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; inputType1 &gt;&gt;&gt; &amp;input1Data, const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; inputType2 &gt;&gt;&gt; &amp;input2Data, const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; outputType &gt;&gt;&gt; &amp;expectedOutputData)</td></tr>
<tr class="memdesc:a7c5b6cc5f5d14210b60323913d2b8841"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiple Inputs with different DataTypes, Multiple Outputs w/ Variable DataTypes Executes the network with the given input tensors and checks the results against the given output tensors.  <a href="#a7c5b6cc5f5d14210b60323913d2b8841">More...</a><br /></td></tr>
<tr class="separator:a7c5b6cc5f5d14210b60323913d2b8841"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a603fc6ee4530690774de844a399dbc06"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType1, armnn::DataType ArmnnType2&gt; </td></tr>
<tr class="memitem:a603fc6ee4530690774de844a399dbc06"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a603fc6ee4530690774de844a399dbc06">RunTest</a> (std::size_t subgraphId, const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; ArmnnType1 &gt;&gt;&gt; &amp;inputData, const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; ArmnnType2 &gt;&gt;&gt; &amp;expectedOutputData)</td></tr>
<tr class="memdesc:a603fc6ee4530690774de844a399dbc06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiple Inputs, Multiple Outputs w/ Variable Datatypes and different dimension sizes.  <a href="#a603fc6ee4530690774de844a399dbc06">More...</a><br /></td></tr>
<tr class="separator:a603fc6ee4530690774de844a399dbc06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a131f9fe1b625ce21cfe4285136ecfa20"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a131f9fe1b625ce21cfe4285136ecfa20">CheckTensors</a> (const <a class="el" href="_parser_flatbuffers_serialize_fixture_8hpp.xhtml#a15c20a0693cd3fc4d85565e2f920d8ef">TensorRawPtr</a> &amp;tensors, size_t shapeSize, const std::vector&lt; int32_t &gt; &amp;shape, tflite::TensorType tensorType, uint32_t buffer, const std::string &amp;name, const std::vector&lt; float &gt; &amp;min, const std::vector&lt; float &gt; &amp;max, const std::vector&lt; float &gt; &amp;scale, const std::vector&lt; int64_t &gt; &amp;zeroPoint)</td></tr>
<tr class="separator:a131f9fe1b625ce21cfe4285136ecfa20"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ab77021b45ae36342092fac96ec3534b7"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#ab77021b45ae36342092fac96ec3534b7">GenerateDetectionPostProcessJsonString</a> (const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a> &amp;descriptor)</td></tr>
<tr class="separator:ab77021b45ae36342092fac96ec3534b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a9fbc789fd0aca759cb40737fdeb8ed63"><td class="memItemLeft" align="right" valign="top">std::vector&lt; uint8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">m_GraphBinary</a></td></tr>
<tr class="separator:a9fbc789fd0aca759cb40737fdeb8ed63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a803c86dca3acef653c1cc481a27be7a9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a803c86dca3acef653c1cc481a27be7a9">m_JsonString</a></td></tr>
<tr class="separator:a803c86dca3acef653c1cc481a27be7a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefd699eb0838261fbe9770d511f63f24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a></td></tr>
<tr class="separator:aefd699eb0838261fbe9770d511f63f24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b81fa34e5ca505b9880755f702fafe7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a></td></tr>
<tr class="separator:a0b81fa34e5ca505b9880755f702fafe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac700cfd8350264d86901d6546e2cdff5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#ac700cfd8350264d86901d6546e2cdff5">m_DynamicNetworkIdentifier</a></td></tr>
<tr class="separator:ac700cfd8350264d86901d6546e2cdff5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ed09d753729540cacd289e552699c0f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a3ed09d753729540cacd289e552699c0f">m_TestDynamic</a></td></tr>
<tr class="separator:a3ed09d753729540cacd289e552699c0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a506155425721752a265a1a2e31965a"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml">armnnTfLiteParser::TfLiteParserImpl</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">m_Parser</a></td></tr>
<tr class="separator:a1a506155425721752a265a1a2e31965a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f8365158b7c75e43897fbe804b7fc4f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a></td></tr>
<tr class="memdesc:a2f8365158b7c75e43897fbe804b7fc4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the single-input-single-output overload of <a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a30fe33b872259560a868fc9b94195ec0">Setup()</a> is called, these will store the input and output name so they don't need to be passed to the single-input-single-output overload of <a class="el" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a" title="Executes the network with the given input tensor and checks the result against the given output tenso...">RunTest()</a>.  <a href="#a2f8365158b7c75e43897fbe804b7fc4f">More...</a><br /></td></tr>
<tr class="separator:a2f8365158b7c75e43897fbe804b7fc4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add32b4d209a5b5d6ea6db94b9894ad75"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a></td></tr>
<tr class="separator:add32b4d209a5b5d6ea6db94b9894ad75"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad748cc696b0f92b478ba4f145e966754"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad748cc696b0f92b478ba4f145e966754">&#9670;&nbsp;</a></span>ParserFlatbuffersFixture()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml">ParserFlatbuffersFixture</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00037">37</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00056">m_Parser</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                               :</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a>())),</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>(0),</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ac700cfd8350264d86901d6546e2cdff5">m_DynamicNetworkIdentifier</a>(1)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        ITfLiteParser::TfLiteParserOptions options;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        options.m_StandInLayerForUnsupported = <span class="keyword">true</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        options.m_InferAndValidate = <span class="keyword">true</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">m_Parser</a> = std::make_unique&lt;armnnTfLiteParser::TfLiteParserImpl&gt;(</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                        <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;ITfLiteParser::TfLiteParserOptions&gt;</a>(options));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a0b81fa34e5ca505b9880755f702fafe7"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">ParserFlatbuffersFixture::m_NetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_NetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00053">ParserFlatbuffersFixture.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00040">Runtime.cpp:40</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a1a506155425721752a265a1a2e31965a"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">ParserFlatbuffersFixture::m_Parser</a></div><div class="ttdeci">std::unique_ptr&lt; armnnTfLiteParser::TfLiteParserImpl &gt; m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00056">ParserFlatbuffersFixture.hpp:56</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">ParserFlatbuffersFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00052">ParserFlatbuffersFixture.hpp:52</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_ac700cfd8350264d86901d6546e2cdff5"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#ac700cfd8350264d86901d6546e2cdff5">ParserFlatbuffersFixture::m_DynamicNetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_DynamicNetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00054">ParserFlatbuffersFixture.hpp:54</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a131f9fe1b625ce21cfe4285136ecfa20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a131f9fe1b625ce21cfe4285136ecfa20">&#9670;&nbsp;</a></span>CheckTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckTensors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="_parser_flatbuffers_serialize_fixture_8hpp.xhtml#a15c20a0693cd3fc4d85565e2f920d8ef">TensorRawPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>tensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>shapeSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">tflite::TensorType&#160;</td>
          <td class="paramname"><em>tensorType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int64_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>zeroPoint</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00259">259</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00056">m_Parser</a>, and <a class="el" href="_types_utils_8hpp_source.xhtml#l00337">armnn::VerifyTensorInfoDataType()</a>.</p>
<div class="fragment"><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        CHECK(tensors);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        CHECK_EQ(shapeSize, tensors-&gt;shape.size());</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        CHECK(std::equal(shape.begin(), shape.end(), tensors-&gt;shape.begin(), tensors-&gt;shape.end()));</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        CHECK_EQ(tensorType, tensors-&gt;type);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        CHECK_EQ(buffer, tensors-&gt;buffer);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        CHECK_EQ(name, tensors-&gt;name);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        CHECK(tensors-&gt;quantization);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        CHECK(std::equal(min.begin(), min.end(), tensors-&gt;quantization.get()-&gt;min.begin(),</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                      tensors-&gt;quantization.get()-&gt;min.end()));</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        CHECK(std::equal(max.begin(), max.end(), tensors-&gt;quantization.get()-&gt;max.begin(),</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                      tensors-&gt;quantization.get()-&gt;max.end()));</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        CHECK(std::equal(scale.begin(), scale.end(), tensors-&gt;quantization.get()-&gt;scale.begin(),</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                      tensors-&gt;quantization.get()-&gt;scale.end()));</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        CHECK(std::equal(zeroPoint.begin(), zeroPoint.end(),</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                                      tensors-&gt;quantization.get()-&gt;zero_point.begin(),</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                                      tensors-&gt;quantization.get()-&gt;zero_point.end()));</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ab77021b45ae36342092fac96ec3534b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab77021b45ae36342092fac96ec3534b7">&#9670;&nbsp;</a></span>GenerateDetectionPostProcessJsonString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::string GenerateDetectionPostProcessJsonString </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00232">232</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="_descriptors_8hpp_source.xhtml#l00709">DetectionPostProcessDescriptor::m_DetectionsPerClass</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00707">DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00705">DetectionPostProcessDescriptor::m_MaxDetections</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00713">DetectionPostProcessDescriptor::m_NmsIouThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00711">DetectionPostProcessDescriptor::m_NmsScoreThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00715">DetectionPostProcessDescriptor::m_NumClasses</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00725">DetectionPostProcessDescriptor::m_ScaleH</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00723">DetectionPostProcessDescriptor::m_ScaleW</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00719">DetectionPostProcessDescriptor::m_ScaleX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00721">DetectionPostProcessDescriptor::m_ScaleY</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00717">DetectionPostProcessDescriptor::m_UseRegularNms</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        flexbuffers::Builder detectPostProcess;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        detectPostProcess.Map([&amp;]() {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            detectPostProcess.Bool(<span class="stringliteral">&quot;use_regular_nms&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">m_UseRegularNms</a>);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            detectPostProcess.Int(<span class="stringliteral">&quot;max_detections&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">m_MaxDetections</a>);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            detectPostProcess.Int(<span class="stringliteral">&quot;max_classes_per_detection&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">m_MaxClassesPerDetection</a>);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            detectPostProcess.Int(<span class="stringliteral">&quot;detections_per_class&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">m_DetectionsPerClass</a>);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            detectPostProcess.Int(<span class="stringliteral">&quot;num_classes&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">m_NumClasses</a>);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;nms_score_threshold&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">m_NmsScoreThreshold</a>);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;nms_iou_threshold&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">m_NmsIouThreshold</a>);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;h_scale&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">m_ScaleH</a>);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;w_scale&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">m_ScaleW</a>);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;x_scale&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">m_ScaleX</a>);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            detectPostProcess.Float(<span class="stringliteral">&quot;y_scale&quot;</span>, descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">m_ScaleY</a>);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        });</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        detectPostProcess.Finish();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="comment">// Create JSON string</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        std::stringstream strStream;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        std::vector&lt;uint8_t&gt; buffer = detectPostProcess.GetBuffer();</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        std::copy(buffer.begin(), buffer.end(),std::ostream_iterator&lt;int&gt;(strStream,<span class="stringliteral">&quot;,&quot;</span>));</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">return</span> strStream.str();</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div><div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ab509802c659de19929f18bad14a35c58"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">armnn::DetectionPostProcessDescriptor::m_ScaleW</a></div><div class="ttdeci">float m_ScaleW</div><div class="ttdoc">Center size encoding scale weight. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00723">Descriptors.hpp:723</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae64523937ea910030ad66fee6fddd51f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">armnn::DetectionPostProcessDescriptor::m_ScaleX</a></div><div class="ttdeci">float m_ScaleX</div><div class="ttdoc">Center size encoding scale x. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00719">Descriptors.hpp:719</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7e2f87544b8bc7e497e1dec8d3ca4055"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">armnn::DetectionPostProcessDescriptor::m_DetectionsPerClass</a></div><div class="ttdeci">uint32_t m_DetectionsPerClass</div><div class="ttdoc">Detections per classes, used in Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00709">Descriptors.hpp:709</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a9ae2c9796692ebeafe19a4d3f09c8ea8"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">armnn::DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a></div><div class="ttdeci">uint32_t m_MaxClassesPerDetection</div><div class="ttdoc">Maximum numbers of classes per detection, used in Fast NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00707">Descriptors.hpp:707</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae72089bcab60ac175557f4241b16a014"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">armnn::DetectionPostProcessDescriptor::m_MaxDetections</a></div><div class="ttdeci">uint32_t m_MaxDetections</div><div class="ttdoc">Maximum numbers of detections. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00705">Descriptors.hpp:705</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a53c8a7f33a40e1e240256bcfcf41b101"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">armnn::DetectionPostProcessDescriptor::m_NmsIouThreshold</a></div><div class="ttdeci">float m_NmsIouThreshold</div><div class="ttdoc">Intersection over union threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00713">Descriptors.hpp:713</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a3a04b0ccee4bb2f21721ee5045e83df4"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">armnn::DetectionPostProcessDescriptor::m_NumClasses</a></div><div class="ttdeci">uint32_t m_NumClasses</div><div class="ttdoc">Number of classes. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00715">Descriptors.hpp:715</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7ed9bc7c26df67d274d5dd4cd83adf0f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">armnn::DetectionPostProcessDescriptor::m_UseRegularNms</a></div><div class="ttdeci">bool m_UseRegularNms</div><div class="ttdoc">Use Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00717">Descriptors.hpp:717</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_aa61510cbd529870182e918ac6e8b9d72"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">armnn::DetectionPostProcessDescriptor::m_ScaleH</a></div><div class="ttdeci">float m_ScaleH</div><div class="ttdoc">Center size encoding scale height. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00725">Descriptors.hpp:725</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7a2156ec7d9c012ce00bbcc6afcb9028"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">armnn::DetectionPostProcessDescriptor::m_ScaleY</a></div><div class="ttdeci">float m_ScaleY</div><div class="ttdoc">Center size encoding scale y. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00721">Descriptors.hpp:721</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a4392dd6b4862cc9cf95ae8f1001ba592"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">armnn::DetectionPostProcessDescriptor::m_NmsScoreThreshold</a></div><div class="ttdeci">float m_NmsScoreThreshold</div><div class="ttdoc">NMS score threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00711">Descriptors.hpp:711</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af9a0f08c02f2b0f7e0b05908590b390c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9a0f08c02f2b0f7e0b05908590b390c">&#9670;&nbsp;</a></span>loadNetwork()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void loadNetwork </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>loadDynamic</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00120">120</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::CpuRef</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00074">MakeModelDynamic()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01680">armnn::Optimize()</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00160">ReadStringToBinary()</a>, and <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Success</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00063">Setup()</a>.</p>
<div class="fragment"><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a69fc8e7f42386fa67732cb8c98d8b024">ReadStringToBinary</a>())</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;LoadNetwork failed while reading binary input&quot;</span>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network = loadDynamic ? <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">m_Parser</a>-&gt;LoadModel(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ad4668d7897a0190f5a828eb8ee856b20">MakeModelDynamic</a>(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">m_GraphBinary</a>))</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                                 : <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">m_Parser</a>-&gt;CreateNetworkFromBinary(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">m_GraphBinary</a>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">if</span> (!network) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;The parser failed to create an ArmNN network&quot;</span>);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keyword">auto</span> optimized = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, { <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a> },</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                  <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;GetDeviceSpec());</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        std::string errorMessage;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> ret = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;LoadNetwork(networkId, move(optimized), errorMessage);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">if</span> (ret != <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a>)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                fmt::format(<span class="stringliteral">&quot;The runtime failed to load the network. &quot;</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                            <span class="stringliteral">&quot;Error was: {}. in {} [{}:{}]&quot;</span>,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                            errorMessage,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                            __func__,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                            __FILE__,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                            __LINE__));</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a69fc8e7f42386fa67732cb8c98d8b024"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a69fc8e7f42386fa67732cb8c98d8b024">ParserFlatbuffersFixture::ReadStringToBinary</a></div><div class="ttdeci">bool ReadStringToBinary()</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00160">ParserFlatbuffersFixture.hpp:160</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a1a506155425721752a265a1a2e31965a"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">ParserFlatbuffersFixture::m_Parser</a></div><div class="ttdeci">std::unique_ptr&lt; armnnTfLiteParser::TfLiteParserImpl &gt; m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00056">ParserFlatbuffersFixture.hpp:56</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01680">Network.cpp:1680</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00029">Types.hpp:29</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a9fbc789fd0aca759cb40737fdeb8ed63"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">ParserFlatbuffersFixture::m_GraphBinary</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; m_GraphBinary</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00050">ParserFlatbuffersFixture.hpp:50</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">ParserFlatbuffersFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00052">ParserFlatbuffersFixture.hpp:52</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_ad4668d7897a0190f5a828eb8ee856b20"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#ad4668d7897a0190f5a828eb8ee856b20">ParserFlatbuffersFixture::MakeModelDynamic</a></div><div class="ttdeci">std::unique_ptr&lt; tflite::ModelT &gt; MakeModelDynamic(std::vector&lt; uint8_t &gt; graphBinary)</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00074">ParserFlatbuffersFixture.hpp:74</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad4668d7897a0190f5a828eb8ee856b20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4668d7897a0190f5a828eb8ee856b20">&#9670;&nbsp;</a></span>MakeModelDynamic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;tflite::ModelT&gt; MakeModelDynamic </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; uint8_t &gt;&#160;</td>
          <td class="paramname"><em>graphBinary</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00074">74</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00120">loadNetwork()</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">const</span> uint8_t* binaryContent = graphBinary.data();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> len = graphBinary.size();</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">if</span> (binaryContent == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Invalid (null) binary content {}&quot;</span>,</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                                               <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        flatbuffers::Verifier verifier(binaryContent, len);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">if</span> (verifier.VerifyBuffer&lt;tflite::Model&gt;() == <span class="keyword">false</span>)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>(fmt::format(<span class="stringliteral">&quot;Buffer doesn&#39;t conform to the expected Tensorflow Lite &quot;</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                                    <span class="stringliteral">&quot;flatbuffers format. size:{} {}&quot;</span>,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                                    len,</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                                    <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keyword">auto</span> model =  tflite::UnPackModel(binaryContent);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; subgraph : model-&gt;subgraphs)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            std::vector&lt;int32_t&gt; inputIds = subgraph-&gt;inputs;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> tensorIndex = 0; tensorIndex &lt; subgraph-&gt;tensors.size(); ++tensorIndex)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordflow">if</span> (std::find(inputIds.begin(), inputIds.end(), tensorIndex) != inputIds.end())</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; tensor : subgraph-&gt;tensors)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    <span class="keywordflow">if</span> (tensor-&gt;shape_signature.size() != 0)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; tensor-&gt;shape.size(); ++i)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        tensor-&gt;shape_signature.push_back(-1);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">return</span> model;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a69fc8e7f42386fa67732cb8c98d8b024"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69fc8e7f42386fa67732cb8c98d8b024">&#9670;&nbsp;</a></span>ReadStringToBinary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ReadStringToBinary </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00160">160</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="_schema_8hpp.xhtml#a6747d3548926a8130c42fb3398027acf">g_TfLiteSchemaText</a>, <a class="el" href="_schema_8hpp.xhtml#abe07dadc9cf942cbf847470102a8980e">g_TfLiteSchemaText_len</a>, and <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00311">RunTest()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00120">loadNetwork()</a>, and <a class="el" href="armnn_tf_lite_parser_2test_2_get_inputs_outputs_8cpp_source.xhtml#l00011">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        std::string schemafile(<a class="code" href="_schema_8hpp.xhtml#a6747d3548926a8130c42fb3398027acf">g_TfLiteSchemaText</a>, <a class="code" href="_schema_8hpp.xhtml#a6747d3548926a8130c42fb3398027acf">g_TfLiteSchemaText</a> + <a class="code" href="_schema_8hpp.xhtml#abe07dadc9cf942cbf847470102a8980e">g_TfLiteSchemaText_len</a>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="comment">// parse schema first, so we can use it to parse the data after</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        flatbuffers::Parser parser;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordtype">bool</span> ok = parser.Parse(schemafile.c_str());</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        CHECK_MESSAGE(ok, std::string(<span class="stringliteral">&quot;Failed to parse schema file. Error was: &quot;</span> + parser.error_).c_str());</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        ok = parser.Parse(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a803c86dca3acef653c1cc481a27be7a9">m_JsonString</a>.c_str());</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        CHECK_MESSAGE(ok, std::string(<span class="stringliteral">&quot;Failed to parse json input. Error was: &quot;</span> + parser.error_).c_str());</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keyword">const</span> uint8_t * bufferPtr = parser.builder_.GetBufferPointer();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordtype">size_t</span> size = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(parser.builder_.GetSize());</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">m_GraphBinary</a>.assign(bufferPtr, bufferPtr+size);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> ok;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a803c86dca3acef653c1cc481a27be7a9"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a803c86dca3acef653c1cc481a27be7a9">ParserFlatbuffersFixture::m_JsonString</a></div><div class="ttdeci">std::string m_JsonString</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00051">ParserFlatbuffersFixture.hpp:51</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a9fbc789fd0aca759cb40737fdeb8ed63"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">ParserFlatbuffersFixture::m_GraphBinary</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; m_GraphBinary</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00050">ParserFlatbuffersFixture.hpp:50</a></div></div>
<div class="ttc" id="_schema_8hpp_xhtml_a6747d3548926a8130c42fb3398027acf"><div class="ttname"><a href="_schema_8hpp.xhtml#a6747d3548926a8130c42fb3398027acf">g_TfLiteSchemaText</a></div><div class="ttdeci">unsigned char g_TfLiteSchemaText[]</div></div>
<div class="ttc" id="_schema_8hpp_xhtml_abe07dadc9cf942cbf847470102a8980e"><div class="ttname"><a href="_schema_8hpp.xhtml#abe07dadc9cf942cbf847470102a8980e">g_TfLiteSchemaText_len</a></div><div class="ttdeci">unsigned int g_TfLiteSchemaText_len</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad7406d5673bc2a8bc1efbdd4f4da140a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7406d5673bc2a8bc1efbdd4f4da140a">&#9670;&nbsp;</a></span>RunTest() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RunTest </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; armnnType &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; armnnType &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedOutputData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Executes the network with the given input tensor and checks the result against the given output tensor. </p>
<p>Single Input, Single Output Executes the network with the given input tensor and checks the result against the given output tensor.</p>
<p>This assumes the network has a single input and a single output.</p>
<p>This overload assumes the network has a single input and a single output. </p>

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00311">311</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00060">m_SingleInputName</a>, and <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00061">m_SingleOutputName</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00160">ReadStringToBinary()</a>.</p>
<div class="fragment"><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    RunTest&lt;NumOutputDimensions, armnnType&gt;(subgraphId,</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                                            { { <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a>, inputData } },</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                            { { <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a>, expectedOutputData } });</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;}</div><div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_add32b4d209a5b5d6ea6db94b9894ad75"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">ParserFlatbuffersFixture::m_SingleOutputName</a></div><div class="ttdeci">std::string m_SingleOutputName</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00061">ParserFlatbuffersFixture.hpp:61</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a2f8365158b7c75e43897fbe804b7fc4f"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">ParserFlatbuffersFixture::m_SingleInputName</a></div><div class="ttdeci">std::string m_SingleInputName</div><div class="ttdoc">If the single-input-single-output overload of Setup() is called, these will store the input and outpu...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00060">ParserFlatbuffersFixture.hpp:60</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a515ada4931d7b8d8f9c9b84d1090ada1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a515ada4931d7b8d8f9c9b84d1090ada1">&#9670;&nbsp;</a></span>RunTest() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RunTest </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; armnnType &gt;&gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; armnnType &gt;&gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedOutputData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Executes the network with the given input tensors and checks the results against the given output tensors. </p>
<p>Multiple Inputs, Multiple Outputs Executes the network with the given input tensors and checks the results against the given output tensors.</p>
<p>This overload supports multiple inputs and multiple outputs, identified by name. </p>

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00325">325</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;{</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    RunTest&lt;NumOutputDimensions, armnnType, armnnType&gt;(subgraphId, inputData, expectedOutputData);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4bd9d97856a0c52dc07afdea7e7831c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bd9d97856a0c52dc07afdea7e7831c9">&#9670;&nbsp;</a></span>RunTest() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RunTest </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; armnnType1 &gt;&gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; armnnType2 &gt;&gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedOutputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isDynamic</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiple Inputs, Multiple Outputs w/ Variable Datatypes and different dimension sizes. </p>
<p>Multiple Inputs, Multiple Outputs w/ Variable Datatypes Executes the network with the given input tensors and checks the results against the given output tensors.</p>
<p>Executes the network with the given input tensors and checks the results against the given output tensors. This overload supports multiple inputs and multiple outputs, identified by name along with the allowance for the input datatype to be different to the output</p>
<p>This overload supports multiple inputs and multiple outputs, identified by name along with the allowance for the input datatype to be different to the output </p>

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00339">339</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::Boolean</a>, <a class="el" href="include_2armnn_test_utils_2_tensor_helpers_8hpp_source.xhtml#l00073">CompareTensors()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00196">TensorInfo::GetNumElements()</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00054">m_DynamicNetworkIdentifier</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00053">m_NetworkIdentifier</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00056">m_Parser</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00052">m_Runtime</a>, and <a class="el" href="_types_utils_8hpp_source.xhtml#l00337">armnn::VerifyTensorInfoDataType()</a>.</p>
<div class="fragment"><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keyword">using</span> DataType2 = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType2&gt;</a>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">// Setup the armnn input tensors from the given vectors.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    FillInputTensors&lt;armnnType1&gt;(inputTensors, inputData, subgraphId);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="comment">// Allocate storage for the output tensors to be written to and setup the armnn output tensors.</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    std::map&lt;std::string, std::vector&lt;DataType2&gt;&gt; outputStorage;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> outputBindingId = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(subgraphId, it.first).first;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;GetOutputTensorInfo(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, outputBindingId);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="comment">// Check that output tensors have correct number of dimensions (NumOutputDimensions specified in test)</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keyword">auto</span> outputNumDimensions = outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        CHECK_MESSAGE((outputNumDimensions == NumOutputDimensions),</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            fmt::format(<span class="stringliteral">&quot;Number of dimensions expected {}, but got {} for output layer {}&quot;</span>,</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                        NumOutputDimensions,</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                        outputNumDimensions,</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                        it.first));</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a>(outputTensorInfo, armnnType2);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        outputStorage.emplace(it.first, std::vector&lt;DataType2&gt;(outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>()));</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        outputTensors.push_back(</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                { outputBindingId, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(outputTensorInfo, outputStorage.at(it.first).data()) });</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    }</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;EnqueueWorkload(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, inputTensors, outputTensors);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="comment">// Set flag so that the correct comparison function is called if the output is boolean.</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordtype">bool</span> isBoolean = armnnType2 == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a> ? true : <span class="keyword">false</span>;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="comment">// Compare each output tensor to the expected values</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    {</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(subgraphId, it.first);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keyword">auto</span> outputExpected = it.second;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keyword">auto</span> result = <a class="code" href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml#a5fea88a1c3398e303fb83b6db155ff2d">CompareTensors</a>(outputExpected, outputStorage[it.first],</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                                     bindingInfo.second.GetShape(), bindingInfo.second.GetShape(),</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                     isBoolean, isDynamic);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        CHECK_MESSAGE(result.m_Result, result.m_Message.str());</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    }</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordflow">if</span> (isDynamic)</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    {</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;EnqueueWorkload(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ac700cfd8350264d86901d6546e2cdff5">m_DynamicNetworkIdentifier</a>, inputTensors, outputTensors);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="comment">// Compare each output tensor to the expected values</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        {</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(subgraphId, it.first);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <span class="keyword">auto</span> outputExpected = it.second;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            <span class="keyword">auto</span> result = <a class="code" href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml#a5fea88a1c3398e303fb83b6db155ff2d">CompareTensors</a>(outputExpected, outputStorage[it.first],</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                         bindingInfo.second.GetShape(), bindingInfo.second.GetShape(),</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                         <span class="keyword">false</span>, isDynamic);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            CHECK_MESSAGE(result.m_Result, result.m_Message.str());</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    }</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div><div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a0b81fa34e5ca505b9880755f702fafe7"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">ParserFlatbuffersFixture::m_NetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_NetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00053">ParserFlatbuffersFixture.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0743ed5e860c316a20b68ca96301b411"><div class="ttname"><a href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a></div><div class="ttdeci">typename ResolveTypeImpl&lt; DT &gt;::Type ResolveType</div><div class="ttdef"><b>Definition:</b> <a href="_resolve_type_8hpp_source.xhtml#l00079">ResolveType.hpp:79</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00277">Types.hpp:277</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a1a506155425721752a265a1a2e31965a"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">ParserFlatbuffersFixture::m_Parser</a></div><div class="ttdeci">std::unique_ptr&lt; armnnTfLiteParser::TfLiteParserImpl &gt; m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00056">ParserFlatbuffersFixture.hpp:56</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_helpers_8hpp_xhtml_a5fea88a1c3398e303fb83b6db155ff2d"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml#a5fea88a1c3398e303fb83b6db155ff2d">CompareTensors</a></div><div class="ttdeci">armnn::PredicateResult CompareTensors(const std::vector&lt; T &gt; &amp;actualData, const std::vector&lt; T &gt; &amp;expectedData, const armnn::TensorShape &amp;actualShape, const armnn::TensorShape &amp;expectedShape, bool compareBoolean=false, bool isDynamic=false)</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_test_utils_2_tensor_helpers_8hpp_source.xhtml#l00073">TensorHelpers.hpp:73</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">ParserFlatbuffersFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00052">ParserFlatbuffersFixture.hpp:52</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_ac700cfd8350264d86901d6546e2cdff5"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#ac700cfd8350264d86901d6546e2cdff5">ParserFlatbuffersFixture::m_DynamicNetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_DynamicNetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00054">ParserFlatbuffersFixture.hpp:54</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9667bea652e3a5ef81fea59b71513ced"><div class="ttname"><a href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a></div><div class="ttdeci">void VerifyTensorInfoDataType(const armnn::TensorInfo &amp;info, armnn::DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00337">TypesUtils.hpp:337</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00196">Tensor.hpp:196</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7c5b6cc5f5d14210b60323913d2b8841"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c5b6cc5f5d14210b60323913d2b8841">&#9670;&nbsp;</a></span>RunTest() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RunTest </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; inputType1 &gt;&gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>input1Data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; inputType2 &gt;&gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>input2Data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; outputType &gt;&gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedOutputData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiple Inputs with different DataTypes, Multiple Outputs w/ Variable DataTypes Executes the network with the given input tensors and checks the results against the given output tensors. </p>
<p>This overload supports multiple inputs and multiple outputs, identified by name along with the allowance for the input datatype to be different to the output </p>

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00459">459</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::Boolean</a>, <a class="el" href="include_2armnn_test_utils_2_tensor_helpers_8hpp_source.xhtml#l00073">CompareTensors()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00196">TensorInfo::GetNumElements()</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00053">m_NetworkIdentifier</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00056">m_Parser</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00052">m_Runtime</a>, and <a class="el" href="_types_utils_8hpp_source.xhtml#l00337">armnn::VerifyTensorInfoDataType()</a>.</p>
<div class="fragment"><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keyword">using</span> DataType2 = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;outputType&gt;</a>;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="comment">// Setup the armnn input tensors from the given vectors.</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    FillInputTensors&lt;inputType1&gt;(inputTensors, input1Data, subgraphId);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    FillInputTensors&lt;inputType2&gt;(inputTensors, input2Data, subgraphId);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="comment">// Allocate storage for the output tensors to be written to and setup the armnn output tensors.</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    std::map&lt;std::string, std::vector&lt;DataType2&gt;&gt; outputStorage;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    {</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> outputBindingId = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(subgraphId, it.first).first;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;GetOutputTensorInfo(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, outputBindingId);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="comment">// Check that output tensors have correct number of dimensions (NumOutputDimensions specified in test)</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="keyword">auto</span> outputNumDimensions = outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        CHECK_MESSAGE((outputNumDimensions == NumOutputDimensions),</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            fmt::format(<span class="stringliteral">&quot;Number of dimensions expected {}, but got {} for output layer {}&quot;</span>,</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                        NumOutputDimensions,</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                        outputNumDimensions,</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                        it.first));</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a>(outputTensorInfo, outputType);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        outputStorage.emplace(it.first, std::vector&lt;DataType2&gt;(outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>()));</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        outputTensors.push_back(</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                { outputBindingId, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(outputTensorInfo, outputStorage.at(it.first).data()) });</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    }</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;EnqueueWorkload(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, inputTensors, outputTensors);</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="comment">// Set flag so that the correct comparison function is called if the output is boolean.</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keywordtype">bool</span> isBoolean = outputType == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a> ? true : <span class="keyword">false</span>;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="comment">// Compare each output tensor to the expected values</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    {</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(subgraphId, it.first);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keyword">auto</span> outputExpected = it.second;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <span class="keyword">auto</span> result = <a class="code" href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml#a5fea88a1c3398e303fb83b6db155ff2d">CompareTensors</a>(outputExpected, outputStorage[it.first],</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                     bindingInfo.second.GetShape(), bindingInfo.second.GetShape(),</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                     isBoolean);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        CHECK_MESSAGE(result.m_Result, result.m_Message.str());</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;}</div><div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a0b81fa34e5ca505b9880755f702fafe7"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">ParserFlatbuffersFixture::m_NetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_NetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00053">ParserFlatbuffersFixture.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0743ed5e860c316a20b68ca96301b411"><div class="ttname"><a href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a></div><div class="ttdeci">typename ResolveTypeImpl&lt; DT &gt;::Type ResolveType</div><div class="ttdef"><b>Definition:</b> <a href="_resolve_type_8hpp_source.xhtml#l00079">ResolveType.hpp:79</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00277">Types.hpp:277</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a1a506155425721752a265a1a2e31965a"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">ParserFlatbuffersFixture::m_Parser</a></div><div class="ttdeci">std::unique_ptr&lt; armnnTfLiteParser::TfLiteParserImpl &gt; m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00056">ParserFlatbuffersFixture.hpp:56</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_helpers_8hpp_xhtml_a5fea88a1c3398e303fb83b6db155ff2d"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml#a5fea88a1c3398e303fb83b6db155ff2d">CompareTensors</a></div><div class="ttdeci">armnn::PredicateResult CompareTensors(const std::vector&lt; T &gt; &amp;actualData, const std::vector&lt; T &gt; &amp;expectedData, const armnn::TensorShape &amp;actualShape, const armnn::TensorShape &amp;expectedShape, bool compareBoolean=false, bool isDynamic=false)</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_test_utils_2_tensor_helpers_8hpp_source.xhtml#l00073">TensorHelpers.hpp:73</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">ParserFlatbuffersFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00052">ParserFlatbuffersFixture.hpp:52</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9667bea652e3a5ef81fea59b71513ced"><div class="ttname"><a href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a></div><div class="ttdeci">void VerifyTensorInfoDataType(const armnn::TensorInfo &amp;info, armnn::DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00337">TypesUtils.hpp:337</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00196">Tensor.hpp:196</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a603fc6ee4530690774de844a399dbc06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a603fc6ee4530690774de844a399dbc06">&#9670;&nbsp;</a></span>RunTest() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RunTest </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; armnnType1 &gt;&gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a>&lt; armnnType2 &gt;&gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>expectedOutputData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiple Inputs, Multiple Outputs w/ Variable Datatypes and different dimension sizes. </p>
<p>Executes the network with the given input tensors and checks the results against the given output tensors. This overload supports multiple inputs and multiple outputs, identified by name along with the allowance for the input datatype to be different to the output</p>
<p>Executes the network with the given input tensors and checks the results against the given output tensors. This overload supports multiple inputs and multiple outputs, identified by name along with the allowance for the input datatype to be different to the output. </p>

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00411">411</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00053">m_NetworkIdentifier</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00056">m_Parser</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00052">m_Runtime</a>, and <a class="el" href="_types_utils_8hpp_source.xhtml#l00337">armnn::VerifyTensorInfoDataType()</a>.</p>
<div class="fragment"><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;{</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">using</span> DataType2 = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;armnnType2&gt;</a>;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="comment">// Setup the armnn input tensors from the given vectors.</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    FillInputTensors&lt;armnnType1&gt;(inputTensors, inputData, subgraphId);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    outputTensors.reserve(expectedOutputData.size());</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    std::map&lt;std::string, std::vector&lt;DataType2&gt;&gt; outputStorage;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    {</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(subgraphId, it.first);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a>(bindingInfo.second, armnnType2);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        std::vector&lt;DataType2&gt; out(it.second.size());</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        outputStorage.emplace(it.first, out);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        outputTensors.push_back({ bindingInfo.first,</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                  <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(bindingInfo.second,</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                  outputStorage.at(it.first).data()) });</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    }</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;EnqueueWorkload(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, inputTensors, outputTensors);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="comment">// Checks the results.</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        std::vector&lt;armnn::ResolveType&lt;armnnType2&gt;&gt; out = outputStorage.at(it.first);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        {</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; out.size(); ++i)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                CHECK(doctest::Approx(it.second[i]).epsilon(0.000001f) == out[i]);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            }</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        }</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    }</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;}</div><div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a0b81fa34e5ca505b9880755f702fafe7"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">ParserFlatbuffersFixture::m_NetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_NetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00053">ParserFlatbuffersFixture.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0743ed5e860c316a20b68ca96301b411"><div class="ttname"><a href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a></div><div class="ttdeci">typename ResolveTypeImpl&lt; DT &gt;::Type ResolveType</div><div class="ttdef"><b>Definition:</b> <a href="_resolve_type_8hpp_source.xhtml#l00079">ResolveType.hpp:79</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a1a506155425721752a265a1a2e31965a"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a1a506155425721752a265a1a2e31965a">ParserFlatbuffersFixture::m_Parser</a></div><div class="ttdeci">std::unique_ptr&lt; armnnTfLiteParser::TfLiteParserImpl &gt; m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00056">ParserFlatbuffersFixture.hpp:56</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">ParserFlatbuffersFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00052">ParserFlatbuffersFixture.hpp:52</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9667bea652e3a5ef81fea59b71513ced"><div class="ttname"><a href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a></div><div class="ttdeci">void VerifyTensorInfoDataType(const armnn::TensorInfo &amp;info, armnn::DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00337">TypesUtils.hpp:337</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a30fe33b872259560a868fc9b94195ec0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30fe33b872259560a868fc9b94195ec0">&#9670;&nbsp;</a></span>Setup()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Setup </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>testDynamic</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00063">63</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00120">loadNetwork()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00152">SetupSingleInputSingleOutput()</a>, and <a class="el" href="armnn_tf_lite_parser_2test_2_addition_8cpp_source.xhtml#l00011">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a3ed09d753729540cacd289e552699c0f">m_TestDynamic</a> = testDynamic;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#af9a0f08c02f2b0f7e0b05908590b390c">loadNetwork</a>(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, <span class="keyword">false</span>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a3ed09d753729540cacd289e552699c0f">m_TestDynamic</a>)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#af9a0f08c02f2b0f7e0b05908590b390c">loadNetwork</a>(<a class="code" href="struct_parser_flatbuffers_fixture.xhtml#ac700cfd8350264d86901d6546e2cdff5">m_DynamicNetworkIdentifier</a>, <span class="keyword">true</span>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a0b81fa34e5ca505b9880755f702fafe7"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">ParserFlatbuffersFixture::m_NetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_NetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00053">ParserFlatbuffersFixture.hpp:53</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_af9a0f08c02f2b0f7e0b05908590b390c"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#af9a0f08c02f2b0f7e0b05908590b390c">ParserFlatbuffersFixture::loadNetwork</a></div><div class="ttdeci">void loadNetwork(armnn::NetworkId networkId, bool loadDynamic)</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00120">ParserFlatbuffersFixture.hpp:120</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a3ed09d753729540cacd289e552699c0f"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a3ed09d753729540cacd289e552699c0f">ParserFlatbuffersFixture::m_TestDynamic</a></div><div class="ttdeci">bool m_TestDynamic</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00055">ParserFlatbuffersFixture.hpp:55</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_ac700cfd8350264d86901d6546e2cdff5"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#ac700cfd8350264d86901d6546e2cdff5">ParserFlatbuffersFixture::m_DynamicNetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_DynamicNetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00054">ParserFlatbuffersFixture.hpp:54</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2bb4ea256fbbf6d53068ca93bb4bc95c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bb4ea256fbbf6d53068ca93bb4bc95c">&#9670;&nbsp;</a></span>SetupSingleInputSingleOutput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetupSingleInputSingleOutput </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>outputName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00152">152</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">References <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00063">Setup()</a>.</p>

<p class="reference">Referenced by <a class="el" href="armnn_tf_lite_parser_2test_2_conv2_d_8cpp_source.xhtml#l00009">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">// Store the input and output name so they don&#39;t need to be passed to the single-input-single-output RunTest().</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a> = inputName;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a> = outputName;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="struct_parser_flatbuffers_fixture.xhtml#a30fe33b872259560a868fc9b94195ec0">Setup</a>();</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_add32b4d209a5b5d6ea6db94b9894ad75"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">ParserFlatbuffersFixture::m_SingleOutputName</a></div><div class="ttdeci">std::string m_SingleOutputName</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00061">ParserFlatbuffersFixture.hpp:61</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a30fe33b872259560a868fc9b94195ec0"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a30fe33b872259560a868fc9b94195ec0">ParserFlatbuffersFixture::Setup</a></div><div class="ttdeci">void Setup(bool testDynamic=true)</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00063">ParserFlatbuffersFixture.hpp:63</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_fixture_xhtml_a2f8365158b7c75e43897fbe804b7fc4f"><div class="ttname"><a href="struct_parser_flatbuffers_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">ParserFlatbuffersFixture::m_SingleInputName</a></div><div class="ttdeci">std::string m_SingleInputName</div><div class="ttdoc">If the single-input-single-output overload of Setup() is called, these will store the input and outpu...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00060">ParserFlatbuffersFixture.hpp:60</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="ac700cfd8350264d86901d6546e2cdff5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac700cfd8350264d86901d6546e2cdff5">&#9670;&nbsp;</a></span>m_DynamicNetworkIdentifier</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> m_DynamicNetworkIdentifier</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00054">54</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00339">RunTest()</a>.</p>

</div>
</div>
<a id="a9fbc789fd0aca759cb40737fdeb8ed63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fbc789fd0aca759cb40737fdeb8ed63">&#9670;&nbsp;</a></span>m_GraphBinary</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;uint8_t&gt; m_GraphBinary</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00050">50</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

</div>
</div>
<a id="a803c86dca3acef653c1cc481a27be7a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a803c86dca3acef653c1cc481a27be7a9">&#9670;&nbsp;</a></span>m_JsonString</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string m_JsonString</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00051">51</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

</div>
</div>
<a id="a0b81fa34e5ca505b9880755f702fafe7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b81fa34e5ca505b9880755f702fafe7">&#9670;&nbsp;</a></span>m_NetworkIdentifier</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> m_NetworkIdentifier</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00053">53</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00339">RunTest()</a>.</p>

</div>
</div>
<a id="a1a506155425721752a265a1a2e31965a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a506155425721752a265a1a2e31965a">&#9670;&nbsp;</a></span>m_Parser</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml">armnnTfLiteParser::TfLiteParserImpl</a>&gt; m_Parser</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00056">56</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00259">CheckTensors()</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00037">ParserFlatbuffersFixture()</a>, and <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00339">RunTest()</a>.</p>

</div>
</div>
<a id="aefd699eb0838261fbe9770d511f63f24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefd699eb0838261fbe9770d511f63f24">&#9670;&nbsp;</a></span>m_Runtime</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> m_Runtime</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00052">52</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00339">RunTest()</a>.</p>

</div>
</div>
<a id="a2f8365158b7c75e43897fbe804b7fc4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f8365158b7c75e43897fbe804b7fc4f">&#9670;&nbsp;</a></span>m_SingleInputName</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string m_SingleInputName</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>If the single-input-single-output overload of <a class="el" href="struct_parser_flatbuffers_fixture.xhtml#a30fe33b872259560a868fc9b94195ec0">Setup()</a> is called, these will store the input and output name so they don't need to be passed to the single-input-single-output overload of <a class="el" href="struct_parser_flatbuffers_fixture.xhtml#ad7406d5673bc2a8bc1efbdd4f4da140a" title="Executes the network with the given input tensor and checks the result against the given output tenso...">RunTest()</a>. </p>

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00060">60</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00311">RunTest()</a>.</p>

</div>
</div>
<a id="add32b4d209a5b5d6ea6db94b9894ad75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add32b4d209a5b5d6ea6db94b9894ad75">&#9670;&nbsp;</a></span>m_SingleOutputName</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string m_SingleOutputName</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00061">61</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00311">RunTest()</a>.</p>

</div>
</div>
<a id="a3ed09d753729540cacd289e552699c0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ed09d753729540cacd289e552699c0f">&#9670;&nbsp;</a></span>m_TestDynamic</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool m_TestDynamic</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00055">55</a> of file <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li>src/armnnTfLiteParser/test/<a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="struct_parser_flatbuffers_fixture.xhtml">ParserFlatbuffersFixture</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:13 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
