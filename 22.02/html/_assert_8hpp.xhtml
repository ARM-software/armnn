<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: include/armnn/utility/Assert.hpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_assert_8hpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#define-members">Macros</a>  </div>
  <div class="headertitle">
<div class="title">Assert.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;cassert&gt;</code><br />
</div>
<p><a href="_assert_8hpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearmnn"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn.xhtml">armnn</a></td></tr>
<tr class="memdesc:namespacearmnn"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2021 ARM Limited and Contributors. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:a5698be69cbd5dfe6c28fcd9867e8cbed"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(COND)&#160;&#160;&#160;assert(COND)</td></tr>
<tr class="separator:a5698be69cbd5dfe6c28fcd9867e8cbed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91c4dfde57907d7698c7531785690a7f"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(COND,  MSG)&#160;&#160;&#160;assert((COND) &amp;&amp; MSG)</td></tr>
<tr class="separator:a91c4dfde57907d7698c7531785690a7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="a5698be69cbd5dfe6c28fcd9867e8cbed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5698be69cbd5dfe6c28fcd9867e8cbed">&#9670;&nbsp;</a></span>ARMNN_ASSERT</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARMNN_ASSERT</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">COND</td><td>)</td>
          <td>&#160;&#160;&#160;assert(COND)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_assert_8hpp_source.xhtml#l00014">14</a> of file <a class="el" href="_assert_8hpp_source.xhtml">Assert.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_base_memory_manager_8cpp_source.xhtml#l00048">BaseMemoryManager::Acquire()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00214">ProfilingService::AddBackendProfilingContext()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00301">Graph::AddCompatibilityLayers()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00295">ProfilingService::AddCounterValue()</a>, <a class="el" href="_ref_memory_manager_8cpp_source.xhtml#l00036">RefMemoryManager::Allocate()</a>, <a class="el" href="_tensor_handle_8cpp_source.xhtml#l00091">ScopedTensorHandle::Allocate()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00179">Graph::AllocateDynamicBuffers()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01155">armnn::ApplyBackendOptimizations()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00162">ApplyBias()</a>, <a class="el" href="_strided_slice_async_end_to_end_test_8hpp_source.xhtml#l00123">armnn::experimental::AsyncEndToEndTestImpl()</a>, <a class="el" href="_base_memory_manager_8cpp_source.xhtml#l00018">BaseMemoryManager::BaseMemoryManager()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01277">armnn::CalculateSlotOptionForInput()</a>, <a class="el" href="_cl_import_tensor_handle_8hpp_source.xhtml#l00188">ClImportTensorHandle::CanBeImported()</a>, <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00326">armnn::ChainReduceLayers()</a>, <a class="el" href="_inference_test_8inl_source.xhtml#l00362">armnn::test::ClassifierInferenceTestMain()</a>, <a class="el" href="_cl_context_control_8cpp_source.xhtml#l00030">ClContextControl::ClContextControl()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00438">CounterDirectory::Clear()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01221">CompareActivationTestImpl()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00240">armnn::ComputeAclAxis()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00256">armnn::ComputePositiveAxis()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00201">armnn::ComputeSoftmaxAclAxis()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03309">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_concatenate_8cpp_source.xhtml#l00014">armnn::Concatenate()</a>, <a class="el" href="_test_utils_8cpp_source.xhtml#l00012">Connect()</a>, <a class="el" href="_floating_point_converter_8cpp_source.xhtml#l00061">FloatingPointConverter::ConvertBFloat16ToFloat32()</a>, <a class="el" href="_floating_point_converter_8cpp_source.xhtml#l00031">FloatingPointConverter::ConvertFloat16To32()</a>, <a class="el" href="_floating_point_converter_8cpp_source.xhtml#l00016">FloatingPointConverter::ConvertFloat32To16()</a>, <a class="el" href="_floating_point_converter_8cpp_source.xhtml#l00046">FloatingPointConverter::ConvertFloat32ToBFloat16()</a>, <a class="el" href="_workload_utils_8hpp_source.xhtml#l00046">armnn::CopyTensorContentsGeneric()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00146">CreateNetworkImpl&lt; IParser &gt;::Create()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00173">SendCounterPacket::CreateCategoryRecord()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00346">SendCounterPacket::CreateCounterSetRecord()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00296">SendCounterPacket::CreateDeviceRecord()</a>, <a class="el" href="_send_counter_packet_8cpp_source.xhtml#l00396">SendCounterPacket::CreateEventRecord()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00797">OnnxParserImpl::CreateNetworkFromString()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01136">armnn::CreateSupportedBackends()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00178">SplitterLayer::CreateTensorHandles()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00180">ConcatLayer::CreateTensorHandles()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00253">Layer::CreateTensorHandles()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01821">LoadedNetwork::CreateWorkingMemHandle()</a>, <a class="el" href="backends_2reference_2workloads_2_depth_to_space_8cpp_source.xhtml#l00018">armnn::DepthToSpace()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01645">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l02133">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_types_utils_8cpp_source.xhtml#l00046">armnn::Dequantize()</a>, <a class="el" href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00140">armnn::DetectionPostProcess()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00229">ProfilerImpl::EndEvent()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00475">Graph::EraseLayer()</a>, <a class="el" href="_neon_constant_workload_8cpp_source.xhtml#l00054">NeonConstantWorkload::Execute()</a>, <a class="el" href="_cl_constant_workload_8cpp_source.xhtml#l00052">ClConstantWorkload::Execute()</a>, <a class="el" href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00163">NeonDepthwiseConvolutionWorkload::Execute()</a>, <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00172">ClDepthwiseConvolutionWorkload::Execute()</a>, <a class="el" href="_ref_strided_slice_workload_8cpp_source.xhtml#l00023">RefStridedSliceWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_log_softmax_workload_8cpp_source.xhtml#l00025">RefLogSoftmaxWorkload::ExecuteAsync()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00303">armnn::ExtractJsonObjects()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00062">armnn::FindKernelMeasurements()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00043">armnn::FindMeasurement()</a>, <a class="el" href="backends_2reference_2workloads_2_fully_connected_8cpp_source.xhtml#l00015">armnn::FullyConnected()</a>, <a class="el" href="backends_2reference_2workloads_2_gather_8cpp_source.xhtml#l00017">armnn::Gather()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00090">Generate3dPermuteVectorForConcat()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00247">ProfilingService::GetAbsoluteCounterValue()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00329">CounterDirectory::GetCategory()</a>, <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00586">MockCounterDirectory::GetCategory()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00373">CounterDirectory::GetCounter()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00358">CounterDirectory::GetCounterSet()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00255">ProfilingService::GetDeltaCounterValue()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00343">CounterDirectory::GetDevice()</a>, <a class="el" href="_data_layout_indexed_8hpp_source.xhtml#l00028">DataLayoutIndexed::GetIndex()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00899">IDeserializer::DeserializerImpl::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00161">armnnUtils::GetNumElementsAfter()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00134">armnnUtils::GetNumElementsBetween()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04079">TfLiteParserImpl::GetOutputTensorIds()</a>, <a class="el" href="_inference_test_image_8cpp_source.xhtml#l00158">InferenceTestImage::GetPixelAs3Channels()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00412">Graph::GetPosInGraph()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00463">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00329">ProfilingService::GetSendTimelinePacket()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00079">WorkingMemHandle::GetWorkingMemDescriptor()</a>, <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00091">SampleTensorHandle::Import()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01306">LoadedNetwork::ImportInputs()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01439">LoadedNetwork::ImportOutputs()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00311">ProfilingService::IncrementCounterValue()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00023">ElementwiseBaseLayer::InferOutputShapes()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00037">ArgMinMaxLayer::InferOutputShapes()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00034">ElementwiseUnaryLayer::InferOutputShapes()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00047">StridedSliceLayer::InferOutputShapes()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00034">GatherLayer::InferOutputShapes()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00038">PreluLayer::InferOutputShapes()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00041">DepthToSpaceLayer::InferOutputShapes()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00043">SpaceToBatchNdLayer::InferOutputShapes()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00044">SpaceToDepthLayer::InferOutputShapes()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00036">ComparisonLayer::InferOutputShapes()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00034">LogicalBinaryLayer::InferOutputShapes()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00048">MergeLayer::InferOutputShapes()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00040">Pooling2dLayer::InferOutputShapes()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00040">Pooling3dLayer::InferOutputShapes()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00039">ResizeLayer::InferOutputShapes()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00052">ShapeLayer::InferOutputShapes()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00052">SliceLayer::InferOutputShapes()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00060">BatchToSpaceNdLayer::InferOutputShapes()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00035">StackLayer::InferOutputShapes()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00038">TransposeLayer::InferOutputShapes()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00042">PadLayer::InferOutputShapes()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00038">PermuteLayer::InferOutputShapes()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00062">Convolution3dLayer::InferOutputShapes()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00057">TransposeConvolution2dLayer::InferOutputShapes()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00085">DepthwiseConvolution2dLayer::InferOutputShapes()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00083">Convolution2dLayer::InferOutputShapes()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00202">SplitterLayer::InferOutputShapes()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00049">FullyConnectedLayer::InferOutputShapes()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00150">UnidirectionalSequenceLstmLayer::InferOutputShapes()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00204">ConcatLayer::InferOutputShapes()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00150">LstmLayer::InferOutputShapes()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00081">QuantizedLstmLayer::InferOutputShapes()</a>, <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00153">QLstmLayer::InferOutputShapes()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00371">Layer::InferOutputShapes()</a>, <a class="el" href="_cl_workload_utils_8hpp_source.xhtml#l00115">armnn::InitializeArmComputeClTensorData()</a>, <a class="el" href="_neon_workload_utils_8hpp_source.xhtml#l00060">armnn::InitializeArmComputeTensorData()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00023">InputSlot::Insert()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00234">armnn::InsertDebugLayerAfter()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00450">Graph::InsertNewLayer()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00874">RefLayerSupport::IsConcatSupported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l02564">RefLayerSupport::IsStackSupported()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00221">Layer::Layer()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00824">IDeserializer::DeserializerImpl::LoadGraphFromBinary()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00768">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00082">LoadedNetwork::MakeLoadedNetwork()</a>, <a class="el" href="_neon_tensor_handle_8hpp_source.xhtml#l00063">NeonTensorHandle::Manage()</a>, <a class="el" href="_mock_tensor_handle_8cpp_source.xhtml#l00079">MockTensorHandle::Map()</a>, <a class="el" href="_ref_tensor_handle_8cpp_source.xhtml#l00083">RefTensorHandle::Map()</a>, <a class="el" href="_conv_impl_8cpp_source.xhtml#l00041">QuantizedMultiplierSmallerThanOne::operator*()</a>, <a class="el" href="_base_iterator_8hpp_source.xhtml#l00082">TypedIterator&lt; const float, Decoder&lt; float &gt; &gt;::operator++()</a>, <a class="el" href="_base_iterator_8hpp_source.xhtml#l00089">TypedIterator&lt; const float, Decoder&lt; float &gt; &gt;::operator+=()</a>, <a class="el" href="_base_iterator_8hpp_source.xhtml#l00096">TypedIterator&lt; const float, Decoder&lt; float &gt; &gt;::operator-=()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00114">Graph::operator=()</a>, <a class="el" href="_base_iterator_8hpp_source.xhtml#l00103">TypedIterator&lt; const float, Decoder&lt; float &gt; &gt;::operator[]()</a>, <a class="el" href="backends_2backends_common_2test_2_mock_backend_8cpp_source.xhtml#l00127">MockBackend::OptimizeSubgraphView()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02575">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01861">TfLiteParserImpl::OutputShapeOfSqueeze()</a>, <a class="el" href="_optimizer_8cpp_source.xhtml#l00016">Optimizer::Pass()</a>, <a class="el" href="_ref_fully_connected_workload_8cpp_source.xhtml#l00021">RefFullyConnectedWorkload::PostAllocationConfigure()</a>, <a class="el" href="_yolo_inference_test_8hpp_source.xhtml#l00032">YoloTestCase&lt; Model &gt;::ProcessResult()</a>, <a class="el" href="_types_utils_8cpp_source.xhtml#l00030">armnn::Quantize()</a>, <a class="el" href="_conv_impl_8cpp_source.xhtml#l00016">QuantizedMultiplierSmallerThanOne::QuantizedMultiplierSmallerThanOne()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00167">armnn::profiling::ReadBytes()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00188">armnn::profiling::ReadUint16()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00181">armnn::profiling::ReadUint32()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00174">armnn::profiling::ReadUint64()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00195">armnn::profiling::ReadUint8()</a>, <a class="el" href="backends_2reference_2workloads_2_reduce_8cpp_source.xhtml#l00070">armnn::Reduce()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00023">CounterDirectory::RegisterCategory()</a>, <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00451">MockCounterDirectory::RegisterCategory()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00181">CounterDirectory::RegisterCounter()</a>, <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00508">MockCounterDirectory::RegisterCounter()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00114">CounterDirectory::RegisterCounterSet()</a>, <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00487">MockCounterDirectory::RegisterCounterSet()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00053">CounterDirectory::RegisterDevice()</a>, <a class="el" href="_profiling_mocks_8hpp_source.xhtml#l00467">MockCounterDirectory::RegisterDevice()</a>, <a class="el" href="_base_memory_manager_8cpp_source.xhtml#l00065">BaseMemoryManager::Release()</a>, <a class="el" href="_resize_8cpp_source.xhtml#l00065">armnn::Resize()</a>, <a class="el" href="_optimize_consecutive_reshapes_8hpp_source.xhtml#l00019">OptimizeConsecutiveReshapesImpl::Run()</a>, <a class="el" href="_optimize_inverse_conversions_8hpp_source.xhtml#l00021">OptimizeInverseConversionsImpl::Run()</a>, <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_fuse_batch_norm_8hpp_source.xhtml#l00027">FuseBatchNorm&lt; ConvLayer, ArmnnType, T &gt;::Run()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00297">RuntimeImpl::RuntimeImpl()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01611">armnn::SelectTensorHandleStrategy()</a>, <a class="el" href="_send_timeline_packet_8hpp_source.xhtml#l00025">SendTimelinePacket::SendTimelinePacket()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00287">ProfilingService::SetCounterValue()</a>, <a class="el" href="_base_iterator_8hpp_source.xhtml#l00810">PerAxisIterator&lt; const int8_t, Decoder&lt; float &gt; &gt;::SetIndexOnMem()</a>, <a class="el" href="_logging_8cpp_source.xhtml#l00073">armnn::SetLogFilter()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00194">SimpleConvolution2dTestImpl()</a>, <a class="el" href="_conv3d_test_impl_8cpp_source.xhtml#l00150">SimpleConvolution3dTestImpl()</a>, <a class="el" href="backends_2reference_2workloads_2_slice_8cpp_source.xhtml#l00014">armnn::Slice()</a>, <a class="el" href="_splitter_8cpp_source.xhtml#l00021">armnn::Split()</a>, <a class="el" href="_splitter_8hpp_source.xhtml#l00017">armnn::Splitter()</a>, <a class="el" href="_neon_timer_8cpp_source.xhtml#l00021">NeonTimer::Start()</a>, <a class="el" href="_command_handler_8cpp_source.xhtml#l00034">CommandHandler::Stop()</a>, <a class="el" href="_model_accuracy_checker_8cpp_source.xhtml#l00064">armnnUtils::Strip()</a>, <a class="el" href="_subgraph_view_8cpp_source.xhtml#l00543">SubgraphView::SubstituteSubgraph()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00433">Graph::SubstituteSubgraph()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00303">ProfilingService::SubtractCounterValue()</a>, <a class="el" href="_profiling_service_8hpp_source.xhtml#l00284">ProfilingService::SwapProfilingConnectionFactory()</a>, <a class="el" href="_tensor_buffer_array_view_8hpp_source.xhtml#l00022">TensorBufferArrayView&lt; DataType &gt;::TensorBufferArrayView()</a>, <a class="el" href="_optimizer_tests_8cpp_source.xhtml#l00306">TEST_SUITE()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00112">ProfilingService::Update()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00076">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00033">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00034">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00034">FillLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00105">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00045">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00034">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00034">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00035">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00109">Pooling3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00033">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00036">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unmap_layer_8cpp_source.xhtml#l00037">UnmapLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_map_layer_8cpp_source.xhtml#l00037">MapLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00063">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00036">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00037">ShapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00037">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00034">CastLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00034">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00034">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00034">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00063">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00037">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00039">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00037">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00034">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00061">PadLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00045">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00034">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00035">ChannelShuffleLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00045">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00041">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00107">Convolution3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00099">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00074">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00074">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00060">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00100">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00058">LogicalBinaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00070">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00090">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00062">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00064">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00125">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00121">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00062">FullyConnectedLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00216">SplitterLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00170">UnidirectionalSequenceLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00168">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00052">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00096">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00170">QLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00352">Layer::VerifyLayerConnections()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00269">VerifyTimelineEntityBinaryPacketData()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00303">VerifyTimelineEventBinaryPacket()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00147">VerifyTimelineEventClassBinaryPacketData()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00074">VerifyTimelineHeaderBinary()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00102">VerifyTimelineLabelBinaryPacketData()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00175">VerifyTimelineRelationshipBinaryPacketData()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00093">armnn::profiling::WriteBytes()</a>, <a class="el" href="_file_only_profiling_connection_8cpp_source.xhtml#l00109">FileOnlyProfilingConnection::WritePacket()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00128">armnn::profiling::WriteUint16()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00121">armnn::profiling::WriteUint32()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00114">armnn::profiling::WriteUint64()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00135">armnn::profiling::WriteUint8()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00378">Graph::LayerInGraph&lt; InputLayer &gt;::~LayerInGraph()</a>, and <a class="el" href="_graph_8hpp_source.xhtml#l00404">Graph::LayerInGraph&lt; OutputLayer &gt;::~LayerInGraph()</a>.</p>

</div>
</div>
<a id="a91c4dfde57907d7698c7531785690a7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91c4dfde57907d7698c7531785690a7f">&#9670;&nbsp;</a></span>ARMNN_ASSERT_MSG</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ARMNN_ASSERT_MSG</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">COND, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">MSG&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;assert((COND) &amp;&amp; MSG)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_assert_8hpp_source.xhtml#l00015">15</a> of file <a class="el" href="_assert_8hpp_source.xhtml">Assert.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_memory_manager_8cpp_source.xhtml#l00088">RefMemoryManager::Pool::Acquire()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00301">Graph::AddCompatibilityLayers()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00162">ApplyBias()</a>, <a class="el" href="_conv3d_test_impl_8cpp_source.xhtml#l00056">ApplyBiasToData()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00921">armnn::AssignBackendsIConnectable()</a>, <a class="el" href="backends_2reference_2workloads_2_batch_to_space_n_d_8cpp_source.xhtml#l00035">armnn::BatchToSpaceNd()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01522">armnn::CalculateEdgeStrategy()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00133">OutputSlot::CalculateIndexOnOwner()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01372">armnn::CalculateSlotOption()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01277">armnn::CalculateSlotOptionForInput()</a>, <a class="el" href="_inference_test_8inl_source.xhtml#l00033">ClassifierTestCase&lt; TTestCaseDatabase, TModel &gt;::ClassifierTestCase()</a>, <a class="el" href="_cl_backend_context_8cpp_source.xhtml#l00140">ClBackendContext::ClBackendContext()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00278">Concatenate()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00227">armnn::ConvertWeightTensorFromArmnnToAcl()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00566">armnnOnnxParser::CreateConstTensorImpl()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00025">TransposeConvolution2dLayer::CreateWorkload()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00051">DepthwiseConvolution2dLayer::CreateWorkload()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00049">Convolution2dLayer::CreateWorkload()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00021">BatchNormalizationLayer::CreateWorkload()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00737">LoadedNetwork::EnqueueWorkload()</a>, <a class="el" href="_cl_constant_workload_8cpp_source.xhtml#l00052">ClConstantWorkload::Execute()</a>, <a class="el" href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00168">FirstInputTypedWorkload&lt; QueueDescriptor, DataType &gt;::FirstInputTypedWorkload()</a>, <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00267">armnn::ForEachLayerInput()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01118">LoadedNetwork::FreeWorkingMemory()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00090">Generate3dPermuteVectorForConcat()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00027">armnn::GetBiasDataType()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00014">armnn::GetBiasTypeFromWeightsType()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00588">LoadedNetwork::GetInputTensorInfo()</a>, <a class="el" href="_internal_types_8cpp_source.xhtml#l00013">armnn::GetLayerTypeAsCString()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00026">armnn::optimizations::pad_fold::GetLowestElement()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00899">IDeserializer::DeserializerImpl::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02690">IDeserializer::DeserializerImpl::GetNormalizationDescriptor()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00602">LoadedNetwork::GetOutputTensorInfo()</a>, <a class="el" href="_ref_memory_manager_8cpp_source.xhtml#l00076">RefMemoryManager::Pool::GetPointer()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02136">IDeserializer::DeserializerImpl::GetPooling2dDescriptor()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02231">IDeserializer::DeserializerImpl::GetPooling3dDescriptor()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00148">armnnUtils::GetUnsignedAxis()</a>, <a class="el" href="_inference_test_8cpp_source.xhtml#l00112">armnn::test::InferenceTest()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00023">ElementwiseBaseLayer::InferOutputShapes()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00034">LogicalBinaryLayer::InferOutputShapes()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00036">ComparisonLayer::InferOutputShapes()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00038">PreluLayer::InferOutputShapes()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00040">Pooling3dLayer::InferOutputShapes()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00060">BatchToSpaceNdLayer::InferOutputShapes()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00040">Pooling2dLayer::InferOutputShapes()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00062">Convolution3dLayer::InferOutputShapes()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00057">TransposeConvolution2dLayer::InferOutputShapes()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00085">DepthwiseConvolution2dLayer::InferOutputShapes()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00083">Convolution2dLayer::InferOutputShapes()</a>, <a class="el" href="_neon_workload_utils_8hpp_source.xhtml#l00060">armnn::InitializeArmComputeTensorData()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00768">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_log_softmax_8cpp_source.xhtml#l00029">armnn::LogSoftmax()</a>, <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00049">main()</a>, <a class="el" href="_decoders_8hpp_source.xhtml#l00066">armnn::MakeDecoder()</a>, <a class="el" href="_encoders_8hpp_source.xhtml#l00021">armnn::MakeEncoder()</a>, <a class="el" href="_mock_tensor_handle_8cpp_source.xhtml#l00042">MockTensorHandle::Manage()</a>, <a class="el" href="_ref_tensor_handle_8cpp_source.xhtml#l00046">RefTensorHandle::Manage()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00119">OutputSlot::MoveAllConnections()</a>, <a class="el" href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00143">MultiTypedWorkload&lt; QueueDescriptor, InputDataType, OutputDataType &gt;::MultiTypedWorkload()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00046">NeedPermuteForConcat()</a>, <a class="el" href="_inference_test_8cpp_source.xhtml#l00028">armnn::test::ParseCommandLine()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00173">PermuteInputsForConcat()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00243">PermuteOutputForConcat()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00017">armnn::PermuteTensor()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00121">PermuteTensorData()</a>, <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00171">ProgramOptions::ProgramOptions()</a>, <a class="el" href="_ref_memory_manager_8cpp_source.xhtml#l00094">RefMemoryManager::Pool::Release()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00204">OriginsDescriptor::ReorderOrigins()</a>, <a class="el" href="_ref_memory_manager_8cpp_source.xhtml#l00082">RefMemoryManager::Pool::Reserve()</a>, <a class="el" href="_fuse_batch_norm_8hpp_source.xhtml#l00027">FuseBatchNorm&lt; ConvLayer, ArmnnType, T &gt;::Run()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00163">FoldPadIntoConvolution2dImpl::Run()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00192">FoldPadIntoDepthwiseConvolution2dImpl::Run()</a>, <a class="el" href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00061">ConstTensorHandle::SetConstMemory()</a>, <a class="el" href="backends_2reference_2workloads_2_softmax_8cpp_source.xhtml#l00017">armnn::Softmax()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00444">Graph::SubstituteSubgraph()</a>, <a class="el" href="_subgraph_view_tests_8cpp_source.xhtml#l01620">TEST_SUITE()</a>, <a class="el" href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00090">TypedWorkload&lt; DebugQueueDescriptor, DataType &gt;::TypedWorkload()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00080">OutputSlot::ValidateTensorShape()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00043">ReduceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00044">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00107">Convolution3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00039">DetectionPostProcessLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00090">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00125">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00121">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00170">UnidirectionalSequenceLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00168">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00096">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00170">QLstmLayer::ValidateTensorShapesFromInputs()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_2b72cc348e06937955e62ebdd8a13436.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_a8fc954923c193e6d993e59ec24545df.xhtml">utility</a></li><li class="navelem"><a class="el" href="_assert_8hpp.xhtml">Assert.hpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:36 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
