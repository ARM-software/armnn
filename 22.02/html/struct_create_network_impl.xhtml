<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: CreateNetworkImpl&lt; IParser &gt; Struct Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('struct_create_network_impl.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="struct_create_network_impl-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">CreateNetworkImpl&lt; IParser &gt; Struct Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a2e61c7404108440828ef7a45f310e229"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_create_network_impl.xhtml#a2e61c7404108440828ef7a45f310e229">Params</a> = <a class="el" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a></td></tr>
<tr class="separator:a2e61c7404108440828ef7a45f310e229"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a4cbece5e7793be85f9a1e8a0ab9e02f8"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_create_network_impl.xhtml#a4cbece5e7793be85f9a1e8a0ab9e02f8">Create</a> (const <a class="el" href="struct_create_network_impl.xhtml#a2e61c7404108440828ef7a45f310e229">Params</a> &amp;params, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;inputBindings, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;outputBindings)</td></tr>
<tr class="separator:a4cbece5e7793be85f9a1e8a0ab9e02f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename IParser&gt;<br />
struct CreateNetworkImpl&lt; IParser &gt;</h3>


<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00141">141</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a2e61c7404108440828ef7a45f310e229"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e61c7404108440828ef7a45f310e229">&#9670;&nbsp;</a></span>Params</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="struct_create_network_impl.xhtml#a2e61c7404108440828ef7a45f310e229">Params</a> =  <a class="el" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00144">144</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4cbece5e7793be85f9a1e8a0ab9e02f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cbece5e7793be85f9a1e8a0ab9e02f8">&#9670;&nbsp;</a></span>Create()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> Create </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="struct_create_network_impl.xhtml#a2e61c7404108440828ef7a45f310e229">Params</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputBindings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputBindings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00146">146</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_heap_profiling_8hpp_source.xhtml#l00045">ARMNN_SCOPED_HEAP_PROFILING</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_i_deserializer_8hpp_source.xhtml#l00020">BindingPointInfo::m_BindingId</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00104">Params::m_InferOutputShape</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00092">Params::m_InputBindings</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00093">Params::m_InputShapes</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00098">Params::m_IsModelBinary</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00091">Params::m_ModelPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_OutputBindings</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00103">Params::m_ParseUnsupported</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00097">Params::m_SubgraphId</a>, <a class="el" href="_i_deserializer_8hpp_source.xhtml#l00021">BindingPointInfo::m_TensorInfo</a>, and <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_model_8hpp_source.xhtml#l00436">InferenceModel&lt; IParser, TDataType &gt;::InferenceModel()</a>.</p>
<div class="fragment"><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keyword">const</span> std::string&amp; modelPath = params.m_ModelPath;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">// Create a network from a file on disk</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keyword">auto</span> parser(IParser::Create());</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        std::map&lt;std::string, armnn::TensorShape&gt; inputShapes;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">if</span> (!params.m_InputShapes.empty())</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputShapes   = params.m_InputShapes.size();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputBindings = params.m_InputBindings.size();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">if</span> (numInputShapes &lt; numInputBindings)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    <span class="stringliteral">&quot;Not every input has its tensor shape specified: expected={0}, got={1}&quot;</span>,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    numInputBindings, numInputShapes));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numInputShapes; i++)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                inputShapes[params.m_InputBindings[i]] = params.m_InputShapes[i];</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        std::vector&lt;std::string&gt; requestedOutputs = params.m_OutputBindings;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network{<span class="keyword">nullptr</span>, [](<a class="code" href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a> *){}};</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;Parsing&quot;</span>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="comment">// Handle text and binary input differently by calling the corresponding parser function</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            network = (params.m_IsModelBinary ?</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                parser-&gt;CreateNetworkFromBinaryFile(modelPath.c_str(), inputShapes, requestedOutputs) :</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                parser-&gt;CreateNetworkFromTextFile(modelPath.c_str(), inputShapes, requestedOutputs));</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; inputLayerName : params.m_InputBindings)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            inputBindings.push_back(parser-&gt;GetNetworkInputBindingInfo(inputLayerName));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; outputLayerName : params.m_OutputBindings)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            outputBindings.push_back(parser-&gt;GetNetworkOutputBindingInfo(outputLayerName));</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">return</span> network;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_i_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a></div><div class="ttdoc">Main network class which provides the interface for building up a neural network. ...</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00249">INetwork.hpp:249</a></div></div>
<div class="ttc" id="_heap_profiling_8hpp_xhtml_aeeb927880fc4ffc2eea754a67d884a53"><div class="ttname"><a href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a></div><div class="ttdeci">#define ARMNN_SCOPED_HEAP_PROFILING(TAG)</div><div class="ttdef"><b>Definition:</b> <a href="_heap_profiling_8hpp_source.xhtml#l00045">HeapProfiling.hpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li>tests/<a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="struct_create_network_impl.xhtml">CreateNetworkImpl</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:43 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
