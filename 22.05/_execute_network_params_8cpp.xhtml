<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/ExecuteNetwork/ExecuteNetworkParams.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_execute_network_params_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ExecuteNetworkParams.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_execute_network_params_8hpp_source.xhtml">ExecuteNetworkParams.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_network_execution_utils_8hpp_source.xhtml">NetworkExecutionUtils/NetworkExecutionUtils.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_logging_8hpp_source.xhtml">armnn/Logging.hpp</a>&gt;</code><br />
<code>#include &lt;fmt/format.h&gt;</code><br />
</div>
<p><a href="_execute_network_params_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a59c1f5f5c5c9fc85c284e0518d32cfad"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_params_8cpp.xhtml#a59c1f5f5c5c9fc85c284e0518d32cfad">IsModelBinary</a> (const std::string &amp;modelFormat)</td></tr>
<tr class="separator:a59c1f5f5c5c9fc85c284e0518d32cfad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4da63fa4fda7dbcd1f71f813fbd527eb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_params_8cpp.xhtml#a4da63fa4fda7dbcd1f71f813fbd527eb">CheckModelFormat</a> (const std::string &amp;modelFormat)</td></tr>
<tr class="separator:a4da63fa4fda7dbcd1f71f813fbd527eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1271e91c17f407e0f4912edffcd44942"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_params_8cpp.xhtml#a1271e91c17f407e0f4912edffcd44942">CheckClTuningParameter</a> (const int &amp;tuningLevel, const std::string &amp;tuningPath, const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; computeDevices)</td></tr>
<tr class="separator:a1271e91c17f407e0f4912edffcd44942"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a1271e91c17f407e0f4912edffcd44942"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1271e91c17f407e0f4912edffcd44942">&#9670;&nbsp;</a></span>CheckClTuningParameter()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CheckClTuningParameter </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>tuningLevel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>tuningPath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt;&#160;</td>
          <td class="paramname"><em>computeDevices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_params_8cpp_source.xhtml#l00075">75</a> of file <a class="el" href="_execute_network_params_8cpp_source.xhtml">ExecuteNetworkParams.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, and <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00300">ValidatePath()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_params_8cpp_source.xhtml#l00111">ExecuteNetworkParams::ValidateParams()</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span> (!tuningPath.empty())</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span> (tuningLevel == 0)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Using cl tuning file: &quot;</span> &lt;&lt; tuningPath &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="_network_execution_utils_8cpp.xhtml#a6506f23e2f4153a68c87ea03ae423b12">ValidatePath</a>(tuningPath, <span class="keyword">true</span>))</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;The tuning path is not valid&quot;</span>);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((1 &lt;= tuningLevel) &amp;&amp; (tuningLevel &lt;= 3))</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Starting execution to generate a cl tuning file: &quot;</span> &lt;&lt; tuningPath &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot;Tuning level in use: &quot;</span> &lt;&lt; tuningLevel &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((0 &lt; tuningLevel) || (tuningLevel &gt; 3))</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;The tuning level {} is not valid.&quot;</span>,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                                              tuningLevel));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="comment">// Ensure that a GpuAcc is enabled. Otherwise no tuning data are used or genereted</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment">// Only warn if it&#39;s not enabled</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keyword">auto</span> it = std::find(computeDevices.begin(), computeDevices.end(), <span class="stringliteral">&quot;GpuAcc&quot;</span>);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span> (it == computeDevices.end())</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;To use Cl Tuning the compute device GpuAcc needs to be active.&quot;</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_a6506f23e2f4153a68c87ea03ae423b12"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#a6506f23e2f4153a68c87ea03ae423b12">ValidatePath</a></div><div class="ttdeci">bool ValidatePath(const std::string &amp;file, const bool expectFile)</div><div class="ttdoc">Verifies if the given string is a valid path. </div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00300">NetworkExecutionUtils.cpp:300</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4da63fa4fda7dbcd1f71f813fbd527eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4da63fa4fda7dbcd1f71f813fbd527eb">&#9670;&nbsp;</a></span>CheckModelFormat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CheckModelFormat </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>modelFormat</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_params_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="_execute_network_params_8cpp_source.xhtml">ExecuteNetworkParams.cpp</a>.</p>

<p class="reference">References <a class="el" href="_execute_network_params_8cpp_source.xhtml#l00014">IsModelBinary()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_params_8cpp_source.xhtml#l00111">ExecuteNetworkParams::ValidateParams()</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="comment">// Forward to implementation based on the parser type</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;armnn&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#if defined(ARMNN_SERIALIZER)</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;Can&#39;t run model in armnn format without a &quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                              <span class="stringliteral">&quot;built with serialization support.&quot;</span>);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;onnx&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#if defined(ARMNN_ONNX_PARSER)</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;Can&#39;t run model in onnx format without a &quot;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                                              <span class="stringliteral">&quot;built with Onnx parser support.&quot;</span>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;tflite&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#if defined(ARMNN_TF_LITE_PARSER)</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="_execute_network_params_8cpp.xhtml#a59c1f5f5c5c9fc85c284e0518d32cfad">IsModelBinary</a>(modelFormat))</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Unknown model format: &#39;{}&#39;. Only &#39;binary&#39; &quot;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                                                              <span class="stringliteral">&quot;format supported for tflite files&quot;</span>,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                                              modelFormat));</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#elif defined(ARMNN_TFLITE_DELEGATE)</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;Can&#39;t run model in tflite format without a &quot;</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                              <span class="stringliteral">&quot;built with Tensorflow Lite parser support.&quot;</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Unknown model format: &#39;{}&#39;. &quot;</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                                          <span class="stringliteral">&quot;Please include &#39;tflite&#39; or &#39;onnx&#39;&quot;</span>,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                                          modelFormat));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_execute_network_params_8cpp_xhtml_a59c1f5f5c5c9fc85c284e0518d32cfad"><div class="ttname"><a href="_execute_network_params_8cpp.xhtml#a59c1f5f5c5c9fc85c284e0518d32cfad">IsModelBinary</a></div><div class="ttdeci">bool IsModelBinary(const std::string &amp;modelFormat)</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8cpp_source.xhtml#l00014">ExecuteNetworkParams.cpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a59c1f5f5c5c9fc85c284e0518d32cfad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59c1f5f5c5c9fc85c284e0518d32cfad">&#9670;&nbsp;</a></span>IsModelBinary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsModelBinary </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>modelFormat</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_params_8cpp_source.xhtml#l00014">14</a> of file <a class="el" href="_execute_network_params_8cpp_source.xhtml">ExecuteNetworkParams.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_params_8cpp_source.xhtml#l00033">CheckModelFormat()</a>, and <a class="el" href="_execute_network_params_8cpp_source.xhtml#l00111">ExecuteNetworkParams::ValidateParams()</a>.</p>
<div class="fragment"><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="comment">// Parse model binary flag from the model-format string we got from the command-line</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;binary&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    }</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;txt&quot;</span>) != std::string::npos || modelFormat.find(<span class="stringliteral">&quot;text&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    }</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Unknown model format: &#39;{}&#39;. &quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                                          <span class="stringliteral">&quot;Please include &#39;binary&#39; or &#39;text&#39;&quot;</span>,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                                          modelFormat));</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_3502d64799b714c597b8fa7662494b65.xhtml">ExecuteNetwork</a></li><li class="navelem"><a class="el" href="_execute_network_params_8cpp.xhtml">ExecuteNetworkParams.cpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:20 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
