<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: MinimumLayer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_minimum_layer.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classarmnn_1_1_minimum_layer-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">MinimumLayer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This layer represents a minimum operation.  
 <a href="classarmnn_1_1_minimum_layer.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_minimum_layer_8hpp_source.xhtml">MinimumLayer.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for MinimumLayer:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_minimum_layer.png" usemap="#MinimumLayer_map" alt=""/>
  <map id="MinimumLayer_map" name="MinimumLayer_map">
<area href="classarmnn_1_1_elementwise_base_layer.xhtml" title="NOTE: this is an abstract class to encapsulate the element wise operations, it does not implement: st..." alt="ElementwiseBaseLayer" shape="rect" coords="0,112,142,136"/>
<area href="classarmnn_1_1_layer.xhtml" alt="Layer" shape="rect" coords="0,56,142,80"/>
<area href="classarmnn_1_1_i_connectable_layer.xhtml" title="Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. " alt="IConnectableLayer" shape="rect" coords="0,0,142,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:adfa912d0c4c6c00f1af2cbfa799572b7"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_minimum_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">CreateWorkload</a> (const <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> &amp;factory) const override</td></tr>
<tr class="memdesc:adfa912d0c4c6c00f1af2cbfa799572b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Makes a workload for the Minimum type.  <a href="#adfa912d0c4c6c00f1af2cbfa799572b7">More...</a><br /></td></tr>
<tr class="separator:adfa912d0c4c6c00f1af2cbfa799572b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f18bd606ab297e5aa4178c704d25f7c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_minimum_layer.xhtml">MinimumLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_minimum_layer.xhtml#a3f18bd606ab297e5aa4178c704d25f7c">Clone</a> (<a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph) const override</td></tr>
<tr class="memdesc:a3f18bd606ab297e5aa4178c704d25f7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a dynamically-allocated copy of this layer.  <a href="#a3f18bd606ab297e5aa4178c704d25f7c">More...</a><br /></td></tr>
<tr class="separator:a3f18bd606ab297e5aa4178c704d25f7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46fc3fdd4b2a5dd6d184e57983cf20bc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_minimum_layer.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">ExecuteStrategy</a> (<a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a> &amp;strategy) const override</td></tr>
<tr class="memdesc:a46fc3fdd4b2a5dd6d184e57983cf20bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply a visitor to this layer.  <a href="#a46fc3fdd4b2a5dd6d184e57983cf20bc">More...</a><br /></td></tr>
<tr class="separator:a46fc3fdd4b2a5dd6d184e57983cf20bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_elementwise_base_layer"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_elementwise_base_layer')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_elementwise_base_layer.xhtml">ElementwiseBaseLayer</a></td></tr>
<tr class="memitem:a8c8f543d7e9729362c266d12ec169966 inherit pub_methods_classarmnn_1_1_elementwise_base_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_elementwise_base_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ValidateTensorShapesFromInputs</a> () override</td></tr>
<tr class="memdesc:a8c8f543d7e9729362c266d12ec169966 inherit pub_methods_classarmnn_1_1_elementwise_base_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the input tensor shape(s) will lead to a valid configuration of the element wise operation.  <a href="classarmnn_1_1_elementwise_base_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">More...</a><br /></td></tr>
<tr class="separator:a8c8f543d7e9729362c266d12ec169966 inherit pub_methods_classarmnn_1_1_elementwise_base_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65ca562c882ad619684445a1402f415a inherit pub_methods_classarmnn_1_1_elementwise_base_layer"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_elementwise_base_layer.xhtml#a65ca562c882ad619684445a1402f415a">InferOutputShapes</a> (const std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &gt; &amp;inputShapes) const override</td></tr>
<tr class="memdesc:a65ca562c882ad619684445a1402f415a inherit pub_methods_classarmnn_1_1_elementwise_base_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">By default returns inputShapes if the number of inputs are equal to number of outputs, otherwise infers the output shapes from given input shapes and layer properties.  <a href="classarmnn_1_1_elementwise_base_layer.xhtml#a65ca562c882ad619684445a1402f415a">More...</a><br /></td></tr>
<tr class="separator:a65ca562c882ad619684445a1402f415a inherit pub_methods_classarmnn_1_1_elementwise_base_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_layer"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_layer')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a></td></tr>
<tr class="memitem:a5e5ae420d199a0bccae5139d38c30205 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a5e5ae420d199a0bccae5139d38c30205">Layer</a> (unsigned int numInputSlots, unsigned int numOutputSlots, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> type, const char *name)</td></tr>
<tr class="separator:a5e5ae420d199a0bccae5139d38c30205 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a395d070748c18d903705799360088e80 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a395d070748c18d903705799360088e80">Layer</a> (unsigned int numInputSlots, unsigned int numOutputSlots, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> type, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> layout, const char *name)</td></tr>
<tr class="separator:a395d070748c18d903705799360088e80 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a97cb6d32661a57fc33bd29b8e41ff4 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a9a97cb6d32661a57fc33bd29b8e41ff4">GetNameStr</a> () const</td></tr>
<tr class="separator:a9a97cb6d32661a57fc33bd29b8e41ff4 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2c0edc7ea62a8baaec4d3d9b2b09256 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">GetOutputHandler</a> (unsigned int i=0) const</td></tr>
<tr class="separator:af2c0edc7ea62a8baaec4d3d9b2b09256 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d4e05c17647232c514cfe58ca80744a inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a1d4e05c17647232c514cfe58ca80744a">GetOutputHandler</a> (unsigned int i=0)</td></tr>
<tr class="separator:a1d4e05c17647232c514cfe58ca80744a inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3560e0733f829e5194887d014a133144 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a3560e0733f829e5194887d014a133144">GetShapeInferenceMethod</a> () const</td></tr>
<tr class="separator:a3560e0733f829e5194887d014a133144 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6f282c92535e2be398a9b350d4e2ee9 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#ad6f282c92535e2be398a9b350d4e2ee9">GetAllowExpandedDims</a> () const</td></tr>
<tr class="separator:ad6f282c92535e2be398a9b350d4e2ee9 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5f530544d09a44d726f24702b67b35b inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#af5f530544d09a44d726f24702b67b35b">GetInputSlots</a> () const</td></tr>
<tr class="separator:af5f530544d09a44d726f24702b67b35b inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98cdff4e0b45f4c80bfcedaf926e16e0 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a98cdff4e0b45f4c80bfcedaf926e16e0">GetOutputSlots</a> () const</td></tr>
<tr class="separator:a98cdff4e0b45f4c80bfcedaf926e16e0 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6cb8de21ef0da269ec9b67755ae92a0 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#af6cb8de21ef0da269ec9b67755ae92a0">BeginInputSlots</a> ()</td></tr>
<tr class="separator:af6cb8de21ef0da269ec9b67755ae92a0 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9752e12d6b79e18da1a25f76159d2a72 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a9752e12d6b79e18da1a25f76159d2a72">EndInputSlots</a> ()</td></tr>
<tr class="separator:a9752e12d6b79e18da1a25f76159d2a72 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a817d4be6dd88f532d36f51748ec14185 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a817d4be6dd88f532d36f51748ec14185">BeginOutputSlots</a> ()</td></tr>
<tr class="separator:a817d4be6dd88f532d36f51748ec14185 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55f76d98fcd2f5cdac3e2b14536cb7ab inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a55f76d98fcd2f5cdac3e2b14536cb7ab">EndOutputSlots</a> ()</td></tr>
<tr class="separator:a55f76d98fcd2f5cdac3e2b14536cb7ab inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22485f444124128940e798a42f0b76d9 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a22485f444124128940e798a42f0b76d9">IsOutputUnconnected</a> ()</td></tr>
<tr class="separator:a22485f444124128940e798a42f0b76d9 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac329cade047e952621b59a51a5d5f49 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aac329cade047e952621b59a51a5d5f49">ResetPriority</a> () const</td></tr>
<tr class="separator:aac329cade047e952621b59a51a5d5f49 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af97a07195a67a638605b3c325763c2dd inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a419086ecb4dc9d0f9e5d8933c87e2ea2">LayerPriority</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#af97a07195a67a638605b3c325763c2dd">GetPriority</a> () const</td></tr>
<tr class="separator:af97a07195a67a638605b3c325763c2dd inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8e15c530c929ab823d89ae9fd2d3f11 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a> () const override</td></tr>
<tr class="memdesc:ad8e15c530c929ab823d89ae9fd2d3f11 inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4" title="When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below...">armnn::LayerType</a> of this layer.  <a href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">More...</a><br /></td></tr>
<tr class="separator:ad8e15c530c929ab823d89ae9fd2d3f11 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea909c7327109228ef618d459015def3 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a> () const</td></tr>
<tr class="separator:aea909c7327109228ef618d459015def3 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdb1d37740e7a083b625d669588b6a0e inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#afdb1d37740e7a083b625d669588b6a0e">GetBackendId</a> () const</td></tr>
<tr class="separator:afdb1d37740e7a083b625d669588b6a0e inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a316670cb6b65902e017c32ca4bcb4b98 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a316670cb6b65902e017c32ca4bcb4b98">SetBackendId</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;id) override</td></tr>
<tr class="memdesc:a316670cb6b65902e017c32ca4bcb4b98 inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the backend of the <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml" title="Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. ">IConnectableLayer</a>.  <a href="classarmnn_1_1_layer.xhtml#a316670cb6b65902e017c32ca4bcb4b98">More...</a><br /></td></tr>
<tr class="separator:a316670cb6b65902e017c32ca4bcb4b98 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ff62126ec713a2708e5fbaa6146a7de inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a3ff62126ec713a2708e5fbaa6146a7de">CreateTensorHandles</a> (const <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;registry, const <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> &amp;factory, const bool IsMemoryManaged=true)</td></tr>
<tr class="separator:a3ff62126ec713a2708e5fbaa6146a7de inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0607e36e88f38c34c71c663164b76776 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a0607e36e88f38c34c71c663164b76776">VerifyLayerConnections</a> (unsigned int expectedConnections, const <a class="el" href="structarmnn_1_1_check_location.xhtml">CheckLocation</a> &amp;location) const</td></tr>
<tr class="separator:a0607e36e88f38c34c71c663164b76776 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac04cd8de9b9185756eb02463ffd432b1 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#ac04cd8de9b9185756eb02463ffd432b1">SerializeLayerParameters</a> (<a class="el" href="namespacearmnn.xhtml#a8c42c6647e31ebe525aeba878d133e45">ParameterStringifyFunction</a> &amp;fn) const</td></tr>
<tr class="memdesc:ac04cd8de9b9185756eb02463ffd432b1 inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to serialize the layer parameters to string.  <a href="classarmnn_1_1_layer.xhtml#ac04cd8de9b9185756eb02463ffd432b1">More...</a><br /></td></tr>
<tr class="separator:ac04cd8de9b9185756eb02463ffd432b1 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a339bef86bc340c3d1393ed83950fe8af inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a339bef86bc340c3d1393ed83950fe8af">ReleaseConstantData</a> ()</td></tr>
<tr class="separator:a339bef86bc340c3d1393ed83950fe8af inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a386acff5f8430245239ce58d00ba7576 inherit pub_methods_classarmnn_1_1_layer"><td class="memTemplParams" colspan="2">template&lt;typename Op &gt; </td></tr>
<tr class="memitem:a386acff5f8430245239ce58d00ba7576 inherit pub_methods_classarmnn_1_1_layer"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a386acff5f8430245239ce58d00ba7576">OperateOnConstantTensors</a> (Op op)</td></tr>
<tr class="separator:a386acff5f8430245239ce58d00ba7576 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ddf0cf6f620d59c10e63495ace795d0 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a> () const override</td></tr>
<tr class="memdesc:a7ddf0cf6f620d59c10e63495ace795d0 inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the name of the layer.  <a href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">More...</a><br /></td></tr>
<tr class="separator:a7ddf0cf6f620d59c10e63495ace795d0 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc0660dc440c8a285b456c9ef6383c26 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#abc0660dc440c8a285b456c9ef6383c26">GetNumInputSlots</a> () const override</td></tr>
<tr class="memdesc:abc0660dc440c8a285b456c9ef6383c26 inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of connectable input slots.  <a href="classarmnn_1_1_layer.xhtml#abc0660dc440c8a285b456c9ef6383c26">More...</a><br /></td></tr>
<tr class="separator:abc0660dc440c8a285b456c9ef6383c26 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1594bddc87d6477df300317658f566bb inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">GetNumOutputSlots</a> () const override</td></tr>
<tr class="memdesc:a1594bddc87d6477df300317658f566bb inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of connectable output slots.  <a href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">More...</a><br /></td></tr>
<tr class="separator:a1594bddc87d6477df300317658f566bb inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf8b8e23bf647836592982f97088d375 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a> (unsigned int index) const override</td></tr>
<tr class="memdesc:acf8b8e23bf647836592982f97088d375 inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a const input slot handle by slot index.  <a href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">More...</a><br /></td></tr>
<tr class="separator:acf8b8e23bf647836592982f97088d375 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b50eb1358cdf382f4bc3fc8849f8e8e inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a1b50eb1358cdf382f4bc3fc8849f8e8e">GetInputSlot</a> (unsigned int index) override</td></tr>
<tr class="memdesc:a1b50eb1358cdf382f4bc3fc8849f8e8e inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the input slot handle by slot index.  <a href="classarmnn_1_1_layer.xhtml#a1b50eb1358cdf382f4bc3fc8849f8e8e">More...</a><br /></td></tr>
<tr class="separator:a1b50eb1358cdf382f4bc3fc8849f8e8e inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e36688a43c35668d8db5257274c68fe inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a> (unsigned int index=0) const override</td></tr>
<tr class="memdesc:a0e36688a43c35668d8db5257274c68fe inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the const output slot handle by slot index.  <a href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">More...</a><br /></td></tr>
<tr class="separator:a0e36688a43c35668d8db5257274c68fe inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbd71844785bb2f00a81baca30ea5ff0 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#abbd71844785bb2f00a81baca30ea5ff0">GetOutputSlot</a> (unsigned int index=0) override</td></tr>
<tr class="memdesc:abbd71844785bb2f00a81baca30ea5ff0 inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the output slot handle by slot index.  <a href="classarmnn_1_1_layer.xhtml#abbd71844785bb2f00a81baca30ea5ff0">More...</a><br /></td></tr>
<tr class="separator:abbd71844785bb2f00a81baca30ea5ff0 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d1024208b672a87ef2c1bfaf93d2b9f inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a6d1024208b672a87ef2c1bfaf93d2b9f">SetGuid</a> (<a class="el" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid)</td></tr>
<tr class="separator:a6d1024208b672a87ef2c1bfaf93d2b9f inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dc12f0ee5b232d397bd18ced1a72a64 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">GetGuid</a> () const final</td></tr>
<tr class="memdesc:a8dc12f0ee5b232d397bd18ced1a72a64 inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the unique id of the layer.  <a href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">More...</a><br /></td></tr>
<tr class="separator:a8dc12f0ee5b232d397bd18ced1a72a64 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a339248d89d5e21534ecf74b4393ed4d2 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a339248d89d5e21534ecf74b4393ed4d2">AddRelatedLayerName</a> (const std::string layerName)</td></tr>
<tr class="separator:a339248d89d5e21534ecf74b4393ed4d2 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e5520194ea4042fe07b0bf53c28f634 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">const std::list&lt; std::string &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a5e5520194ea4042fe07b0bf53c28f634">GetRelatedLayerNames</a> ()</td></tr>
<tr class="separator:a5e5520194ea4042fe07b0bf53c28f634 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72b18e4c5a403bc3fe2fecf20135c8d6 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a72b18e4c5a403bc3fe2fecf20135c8d6">Reparent</a> (<a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;dest, std::list&lt; <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> *&gt;::const_iterator iterator)=0</td></tr>
<tr class="separator:a72b18e4c5a403bc3fe2fecf20135c8d6 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43a46eafee5c08787ab17b4342730c20 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a43a46eafee5c08787ab17b4342730c20">BackendSelectionHint</a> (<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; backend) final</td></tr>
<tr class="memdesc:a43a46eafee5c08787ab17b4342730c20 inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide a hint for the optimizer as to which backend to prefer for this layer.  <a href="classarmnn_1_1_layer.xhtml#a43a46eafee5c08787ab17b4342730c20">More...</a><br /></td></tr>
<tr class="separator:a43a46eafee5c08787ab17b4342730c20 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ff80e440308295056b57e2adaa42888 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a6ff80e440308295056b57e2adaa42888">GetBackendHint</a> () const</td></tr>
<tr class="separator:a6ff80e440308295056b57e2adaa42888 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a429abdfa769f4d48268938dcaea00904 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a429abdfa769f4d48268938dcaea00904">SetShapeInferenceMethod</a> (<a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a> shapeInferenceMethod)</td></tr>
<tr class="separator:a429abdfa769f4d48268938dcaea00904 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a328c9cf1c3abf2febcce4801ba706541 inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a328c9cf1c3abf2febcce4801ba706541">SetAllowExpandedDims</a> (bool allowExpandedDims)</td></tr>
<tr class="separator:a328c9cf1c3abf2febcce4801ba706541 inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefb14147290b6b928c5fc924ba035acc inherit pub_methods_classarmnn_1_1_layer"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aefb14147290b6b928c5fc924ba035acc inherit pub_methods_classarmnn_1_1_layer"><td class="memTemplItemLeft" align="right" valign="top">std::shared_ptr&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aefb14147290b6b928c5fc924ba035acc">GetAdditionalInformation</a> () const</td></tr>
<tr class="separator:aefb14147290b6b928c5fc924ba035acc inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea1c8483ebeabc0dcbd9090b4f648f1d inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aea1c8483ebeabc0dcbd9090b4f648f1d">SetAdditionalInfoForObject</a> (const <a class="el" href="namespacearmnn.xhtml#a2a5caf3721af872f43c7642fec9449bc">AdditionalInfoObjectPtr</a> &amp;additionalInfo)</td></tr>
<tr class="separator:aea1c8483ebeabc0dcbd9090b4f648f1d inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94a487f29157eeec10e2f9a372487bcc inherit pub_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a94a487f29157eeec10e2f9a372487bcc">GetParameters</a> () const override</td></tr>
<tr class="memdesc:a94a487f29157eeec10e2f9a372487bcc inherit pub_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the layer has a descriptor return it.  <a href="classarmnn_1_1_layer.xhtml#a94a487f29157eeec10e2f9a372487bcc">More...</a><br /></td></tr>
<tr class="separator:a94a487f29157eeec10e2f9a372487bcc inherit pub_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:af819f35acbadda1a4bcb3b262e27fe34"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_minimum_layer.xhtml#af819f35acbadda1a4bcb3b262e27fe34">MinimumLayer</a> (const char *name)</td></tr>
<tr class="memdesc:af819f35acbadda1a4bcb3b262e27fe34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor to create a <a class="el" href="classarmnn_1_1_minimum_layer.xhtml" title="This layer represents a minimum operation. ">MinimumLayer</a>.  <a href="#af819f35acbadda1a4bcb3b262e27fe34">More...</a><br /></td></tr>
<tr class="separator:af819f35acbadda1a4bcb3b262e27fe34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83f094d0687f9630958d5b8e496e8313"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_minimum_layer.xhtml#a83f094d0687f9630958d5b8e496e8313">~MinimumLayer</a> ()=default</td></tr>
<tr class="memdesc:a83f094d0687f9630958d5b8e496e8313"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="#a83f094d0687f9630958d5b8e496e8313">More...</a><br /></td></tr>
<tr class="separator:a83f094d0687f9630958d5b8e496e8313"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_elementwise_base_layer"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_elementwise_base_layer')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_elementwise_base_layer.xhtml">ElementwiseBaseLayer</a></td></tr>
<tr class="memitem:a6aa67447c0f7d3aa62124c535e5b550b inherit pro_methods_classarmnn_1_1_elementwise_base_layer"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_elementwise_base_layer.xhtml#a6aa67447c0f7d3aa62124c535e5b550b">ElementwiseBaseLayer</a> (unsigned int numInputSlots, unsigned int numOutputSlots, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> type, const char *name)</td></tr>
<tr class="separator:a6aa67447c0f7d3aa62124c535e5b550b inherit pro_methods_classarmnn_1_1_elementwise_base_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70745c21e09e36c3a83aff0c9848514c inherit pro_methods_classarmnn_1_1_elementwise_base_layer"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_elementwise_base_layer.xhtml#a70745c21e09e36c3a83aff0c9848514c">~ElementwiseBaseLayer</a> ()=default</td></tr>
<tr class="memdesc:a70745c21e09e36c3a83aff0c9848514c inherit pro_methods_classarmnn_1_1_elementwise_base_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="classarmnn_1_1_elementwise_base_layer.xhtml#a70745c21e09e36c3a83aff0c9848514c">More...</a><br /></td></tr>
<tr class="separator:a70745c21e09e36c3a83aff0c9848514c inherit pro_methods_classarmnn_1_1_elementwise_base_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_layer"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_layer')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a></td></tr>
<tr class="memitem:aacfb208d750bdfce1bbd423e5cac76e2 inherit pro_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aacfb208d750bdfce1bbd423e5cac76e2">~Layer</a> ()=default</td></tr>
<tr class="separator:aacfb208d750bdfce1bbd423e5cac76e2 inherit pro_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc3239f5fc116259bf5451964e803646 inherit pro_methods_classarmnn_1_1_layer"><td class="memTemplParams" colspan="2">template&lt;typename QueueDescriptor &gt; </td></tr>
<tr class="memitem:afc3239f5fc116259bf5451964e803646 inherit pro_methods_classarmnn_1_1_layer"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#afc3239f5fc116259bf5451964e803646">CollectQueueDescriptorInputs</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;descriptor, <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:afc3239f5fc116259bf5451964e803646 inherit pro_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a499ca5a94d0174ed21786b6994b2cd8c inherit pro_methods_classarmnn_1_1_layer"><td class="memTemplParams" colspan="2">template&lt;typename QueueDescriptor &gt; </td></tr>
<tr class="memitem:a499ca5a94d0174ed21786b6994b2cd8c inherit pro_methods_classarmnn_1_1_layer"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a499ca5a94d0174ed21786b6994b2cd8c">CollectQueueDescriptorOutputs</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;descriptor, <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a499ca5a94d0174ed21786b6994b2cd8c inherit pro_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb2d638cc0e02c10075e015100996f2d inherit pro_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aeb2d638cc0e02c10075e015100996f2d">ValidateAndCopyShape</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;outputShape, const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;inferredShape, const <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a> shapeInferenceMethod, const std::string &amp;layerName, const unsigned int outputSlotIndex=0)</td></tr>
<tr class="separator:aeb2d638cc0e02c10075e015100996f2d inherit pro_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a448afc716fda85394df1e8e5b7d530e8 inherit pro_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a448afc716fda85394df1e8e5b7d530e8">VerifyShapeInferenceType</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;outputShape, <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a> shapeInferenceMethod)</td></tr>
<tr class="separator:a448afc716fda85394df1e8e5b7d530e8 inherit pro_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30a858b2b26d651a066537e499fbf40d inherit pro_methods_classarmnn_1_1_layer"><td class="memTemplParams" colspan="2">template&lt;typename QueueDescriptor &gt; </td></tr>
<tr class="memitem:a30a858b2b26d651a066537e499fbf40d inherit pro_methods_classarmnn_1_1_layer"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a30a858b2b26d651a066537e499fbf40d">PrepInfoAndDesc</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;descriptor) const</td></tr>
<tr class="memdesc:a30a858b2b26d651a066537e499fbf40d inherit pro_methods_classarmnn_1_1_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to reduce duplication in *Layer::CreateWorkload.  <a href="classarmnn_1_1_layer.xhtml#a30a858b2b26d651a066537e499fbf40d">More...</a><br /></td></tr>
<tr class="separator:a30a858b2b26d651a066537e499fbf40d inherit pro_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa10fd205c3f5469a9ecb2aa2a3ffd101 inherit pro_methods_classarmnn_1_1_layer"><td class="memTemplParams" colspan="2">template&lt;typename LayerType , typename ... Params&gt; </td></tr>
<tr class="memitem:aa10fd205c3f5469a9ecb2aa2a3ffd101 inherit pro_methods_classarmnn_1_1_layer"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aa10fd205c3f5469a9ecb2aa2a3ffd101">CloneBase</a> (<a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph, Params &amp;&amp;... params) const</td></tr>
<tr class="separator:aa10fd205c3f5469a9ecb2aa2a3ffd101 inherit pro_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a160bcee27e0c160959073bea90c98092 inherit pro_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#af978f897fb7e115a901cb7ed95f8e532">ConstantTensors</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a160bcee27e0c160959073bea90c98092">GetConstantTensorsByRef</a> () override</td></tr>
<tr class="separator:a160bcee27e0c160959073bea90c98092 inherit pro_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7f0460d32511de0da525f1817d13e8c inherit pro_methods_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#af7f0460d32511de0da525f1817d13e8c">SetAdditionalInfo</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;descriptor) const</td></tr>
<tr class="separator:af7f0460d32511de0da525f1817d13e8c inherit pro_methods_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_connectable_layer"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_connectable_layer')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a></td></tr>
<tr class="memitem:a8c7faf37c1d965431aaa02ae934d67ee inherit pro_methods_classarmnn_1_1_i_connectable_layer"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a8c7faf37c1d965431aaa02ae934d67ee">~IConnectableLayer</a> ()</td></tr>
<tr class="memdesc:a8c7faf37c1d965431aaa02ae934d67ee inherit pro_methods_classarmnn_1_1_i_connectable_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Objects are not deletable via the handle.  <a href="classarmnn_1_1_i_connectable_layer.xhtml#a8c7faf37c1d965431aaa02ae934d67ee">More...</a><br /></td></tr>
<tr class="separator:a8c7faf37c1d965431aaa02ae934d67ee inherit pro_methods_classarmnn_1_1_i_connectable_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classarmnn_1_1_i_connectable_layer"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarmnn_1_1_i_connectable_layer')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a></td></tr>
<tr class="memitem:af978f897fb7e115a901cb7ed95f8e532 inherit pub_types_classarmnn_1_1_i_connectable_layer"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#af978f897fb7e115a901cb7ed95f8e532">ConstantTensors</a> = std::vector&lt; std::reference_wrapper&lt; std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_const_tensor_handle.xhtml">ConstTensorHandle</a> &gt; &gt;&gt;</td></tr>
<tr class="separator:af978f897fb7e115a901cb7ed95f8e532 inherit pub_types_classarmnn_1_1_i_connectable_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classarmnn_1_1_layer"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classarmnn_1_1_layer')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a></td></tr>
<tr class="memitem:ac7170f79bd0eadb1b6153e359c023cc0 inherit pro_attribs_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a2a5caf3721af872f43c7642fec9449bc">AdditionalInfoObjectPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#ac7170f79bd0eadb1b6153e359c023cc0">m_AdditionalInfoObject</a></td></tr>
<tr class="separator:ac7170f79bd0eadb1b6153e359c023cc0 inherit pro_attribs_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa44d91037bba52ba0dec6577509ade3b inherit pro_attribs_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aa44d91037bba52ba0dec6577509ade3b">m_OutputHandlers</a></td></tr>
<tr class="separator:aa44d91037bba52ba0dec6577509ade3b inherit pro_attribs_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe508761cc8318b15329ba4acf7fbfec inherit pro_attribs_classarmnn_1_1_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a></td></tr>
<tr class="separator:afe508761cc8318b15329ba4acf7fbfec inherit pro_attribs_classarmnn_1_1_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This layer represents a minimum operation. </p>

<p class="definition">Definition at line <a class="el" href="_minimum_layer_8hpp_source.xhtml#l00014">14</a> of file <a class="el" href="_minimum_layer_8hpp_source.xhtml">MinimumLayer.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="af819f35acbadda1a4bcb3b262e27fe34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af819f35acbadda1a4bcb3b262e27fe34">&#9670;&nbsp;</a></span>MinimumLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_minimum_layer.xhtml">MinimumLayer</a> </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor to create a <a class="el" href="classarmnn_1_1_minimum_layer.xhtml" title="This layer represents a minimum operation. ">MinimumLayer</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_minimum_layer_8cpp_source.xhtml">MinimumLayer.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::Minimum</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    : <a class="code" href="classarmnn_1_1_elementwise_base_layer.xhtml#a6aa67447c0f7d3aa62124c535e5b550b">ElementwiseBaseLayer</a>(2, 1, <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">LayerType::Minimum</a>, name)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_elementwise_base_layer_xhtml_a6aa67447c0f7d3aa62124c535e5b550b"><div class="ttname"><a href="classarmnn_1_1_elementwise_base_layer.xhtml#a6aa67447c0f7d3aa62124c535e5b550b">armnn::ElementwiseBaseLayer::ElementwiseBaseLayer</a></div><div class="ttdeci">ElementwiseBaseLayer(unsigned int numInputSlots, unsigned int numOutputSlots, LayerType type, const char *name)</div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_base_layer_8cpp_source.xhtml#l00016">ElementwiseBaseLayer.cpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::LayerType::Minimum</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a83f094d0687f9630958d5b8e496e8313"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83f094d0687f9630958d5b8e496e8313">&#9670;&nbsp;</a></span>~MinimumLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_minimum_layer.xhtml">MinimumLayer</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a3f18bd606ab297e5aa4178c704d25f7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f18bd606ab297e5aa4178c704d25f7c">&#9670;&nbsp;</a></span>Clone()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_minimum_layer.xhtml">MinimumLayer</a> * Clone </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a dynamically-allocated copy of this layer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">graph</td><td>The graph into which this layer is being cloned. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarmnn_1_1_layer.xhtml#ae89ff455503aa106d00bf34103d2f2e0">Layer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="_minimum_layer_8cpp_source.xhtml">MinimumLayer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00319">Layer::GetName()</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">return</span> CloneBase&lt;MinimumLayer&gt;(graph, <a class="code" href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a>());</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a7ddf0cf6f620d59c10e63495ace795d0"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">armnn::Layer::GetName</a></div><div class="ttdeci">const char * GetName() const override</div><div class="ttdoc">Returns the name of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00319">Layer.hpp:319</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adfa912d0c4c6c00f1af2cbfa799572b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfa912d0c4c6c00f1af2cbfa799572b7">&#9670;&nbsp;</a></span>CreateWorkload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateWorkload </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>factory</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Makes a workload for the Minimum type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">graph</td><td>The graph where this layer can be found. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">factory</td><td>The workload factory which will create the workload. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the created workload, or nullptr if not created. </dd></dl>

<p>Implements <a class="el" href="classarmnn_1_1_layer.xhtml#a08d1e10a45f15cd0bd02557be35a3864">Layer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00022">22</a> of file <a class="el" href="_minimum_layer_8cpp_source.xhtml">MinimumLayer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_workload_factory_8cpp_source.xhtml#l01561">IWorkloadFactory::CreateWorkload()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::Minimum</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00396">Layer::PrepInfoAndDesc()</a>, and <a class="el" href="_layer_8cpp_source.xhtml#l00274">Layer::SetAdditionalInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    MinimumQueueDescriptor descriptor;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#af7f0460d32511de0da525f1817d13e8c">SetAdditionalInfo</a>(descriptor);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">return</span> factory.CreateWorkload(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">LayerType::Minimum</a>, descriptor, <a class="code" href="classarmnn_1_1_layer.xhtml#a30a858b2b26d651a066537e499fbf40d">PrepInfoAndDesc</a>(descriptor));</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a30a858b2b26d651a066537e499fbf40d"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a30a858b2b26d651a066537e499fbf40d">armnn::Layer::PrepInfoAndDesc</a></div><div class="ttdeci">WorkloadInfo PrepInfoAndDesc(QueueDescriptor &amp;descriptor) const</div><div class="ttdoc">Helper function to reduce duplication in *Layer::CreateWorkload. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00396">Layer.hpp:396</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_af7f0460d32511de0da525f1817d13e8c"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#af7f0460d32511de0da525f1817d13e8c">armnn::Layer::SetAdditionalInfo</a></div><div class="ttdeci">void SetAdditionalInfo(QueueDescriptor &amp;descriptor) const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00274">Layer.cpp:274</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::LayerType::Minimum</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a46fc3fdd4b2a5dd6d184e57983cf20bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46fc3fdd4b2a5dd6d184e57983cf20bc">&#9670;&nbsp;</a></span>ExecuteStrategy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ExecuteStrategy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a> &amp;&#160;</td>
          <td class="paramname"><em>strategy</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply a visitor to this layer. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_elementwise_base_layer.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">ElementwiseBaseLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="_minimum_layer_8cpp_source.xhtml">MinimumLayer.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_strategy.xhtml#ad4f8c9ff973cf6a603d26b56c5b34967">IStrategy::ExecuteStrategy()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00319">Layer::GetName()</a>, and <a class="el" href="_layer_8hpp_source.xhtml#l00365">Layer::GetParameters()</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    strategy.ExecuteStrategy(<span class="keyword">this</span>, <a class="code" href="classarmnn_1_1_layer.xhtml#a94a487f29157eeec10e2f9a372487bcc">GetParameters</a>(), {}, <a class="code" href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a>());</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a94a487f29157eeec10e2f9a372487bcc"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a94a487f29157eeec10e2f9a372487bcc">armnn::Layer::GetParameters</a></div><div class="ttdeci">virtual const BaseDescriptor &amp; GetParameters() const override</div><div class="ttdoc">If the layer has a descriptor return it. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00365">Layer.hpp:365</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a7ddf0cf6f620d59c10e63495ace795d0"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">armnn::Layer::GetName</a></div><div class="ttdeci">const char * GetName() const override</div><div class="ttdoc">Returns the name of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00319">Layer.hpp:319</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/layers/<a class="el" href="_minimum_layer_8hpp_source.xhtml">MinimumLayer.hpp</a></li>
<li>src/armnn/layers/<a class="el" href="_minimum_layer_8cpp_source.xhtml">MinimumLayer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_minimum_layer.xhtml">MinimumLayer</a></li>
    <li class="footer">Generated on Fri Feb 24 2023 10:24:31 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
