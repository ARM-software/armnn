<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/profiling/gatordmock/PeriodicCounterCaptureCommandHandler.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_periodic_counter_capture_command_handler_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">PeriodicCounterCaptureCommandHandler.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_periodic_counter_capture_command_handler_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2019 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_periodic_counter_capture_command_handler_8hpp.xhtml">PeriodicCounterCaptureCommandHandler.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;common/include/CommonProfilingUtils.hpp&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_numeric_cast_8hpp.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span>gatordmock</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keywordtype">void</span> PeriodicCounterCaptureCommandHandler::ParseData(<span class="keyword">const</span> arm::pipe::Packet&amp; packet)</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    std::vector&lt;uint16_t&gt; counterIds;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    std::vector&lt;uint32_t&gt; counterValues;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    uint32_t sizeOfUint64 = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;uint32_t&gt;(<span class="keyword">sizeof</span>(uint64_t));</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    uint32_t sizeOfUint32 = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;uint32_t&gt;(<span class="keyword">sizeof</span>(uint32_t));</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    uint32_t sizeOfUint16 = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;uint32_t&gt;(<span class="keyword">sizeof</span>(uint16_t));</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    uint32_t offset = 0;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">if</span> (packet.GetLength() &gt;= 8)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        offset = 0;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        uint64_t timestamp = <a class="code" href="namespacearmnn_1_1profiling.xhtml#aa4de2b511faa41accc2c35cadf051124">arm::pipe::ReadUint64</a>(reinterpret_cast&lt;const unsigned char*&gt;(packet.GetData()), offset);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordflow">if</span> (m_FirstTimestamp == 0)    <span class="comment">// detect the first timestamp we receive.</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            m_FirstTimestamp = timestamp;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            m_SecondTimestamp    = timestamp;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <a class="code" href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#adf4c1e497ab037106ba8ae0ac077ac0f">m_CurrentPeriodValue</a> = m_SecondTimestamp - m_FirstTimestamp;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            m_FirstTimestamp     = m_SecondTimestamp;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="comment">// Length minus timestamp and header divided by the length of an indexPair</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counters = (packet.GetLength() - 8) / 6;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">if</span> (counters &gt; 0)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            counterIds.reserve(counters);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            counterValues.reserve(counters);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="comment">// Move offset over timestamp area</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            offset += sizeOfUint64;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pos = 0; pos &lt; counters; ++pos)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                counterIds.emplace_back(</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a0ffb94cb0085a54a92f1c4eeaa6cf772">arm::pipe::ReadUint16</a>(reinterpret_cast&lt;const unsigned char*&gt;(packet.GetData()), offset));</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                offset += sizeOfUint16;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                counterValues.emplace_back(</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                    <a class="code" href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">arm::pipe::ReadUint32</a>(reinterpret_cast&lt;const unsigned char*&gt;(packet.GetData()), offset));</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                offset += sizeOfUint32;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#a9626b6860f10b55ee178d0b340627a8d">m_CounterCaptureValues</a>.<a class="code" href="structarmnn_1_1gatordmock_1_1_counter_capture_values.xhtml#a595556c01c62177551f934f16c6616a1">m_Timestamp</a> = timestamp;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <a class="code" href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#a9626b6860f10b55ee178d0b340627a8d">m_CounterCaptureValues</a>.<a class="code" href="structarmnn_1_1gatordmock_1_1_counter_capture_values.xhtml#af697af5118a291003f6aaeb195fe67a4">m_Uids</a>      = counterIds;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#a9626b6860f10b55ee178d0b340627a8d">m_CounterCaptureValues</a>.<a class="code" href="structarmnn_1_1gatordmock_1_1_counter_capture_values.xhtml#a7cc61b58879de844c7917b87f09e308f">m_Values</a>    = counterValues;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#a7f194544050d3b16f7363a93a234b89c">   75</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#a7f194544050d3b16f7363a93a234b89c">PeriodicCounterCaptureCommandHandler::operator()</a>(<span class="keyword">const</span> arm::pipe::Packet&amp; packet)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    ParseData(packet);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span> (!m_QuietOperation)    <span class="comment">// Are we supposed to print to stdout?</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        std::string header, body, uidString, valueString;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">for</span> (uint16_t uid : <a class="code" href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#a9626b6860f10b55ee178d0b340627a8d">m_CounterCaptureValues</a>.<a class="code" href="structarmnn_1_1gatordmock_1_1_counter_capture_values.xhtml#af697af5118a291003f6aaeb195fe67a4">m_Uids</a>)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            uidString.append(std::to_string(uid));</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            uidString.append(<span class="stringliteral">&quot;, &quot;</span>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">for</span> (uint32_t val : <a class="code" href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#a9626b6860f10b55ee178d0b340627a8d">m_CounterCaptureValues</a>.<a class="code" href="structarmnn_1_1gatordmock_1_1_counter_capture_values.xhtml#a7cc61b58879de844c7917b87f09e308f">m_Values</a>)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            valueString.append(std::to_string(val));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            valueString.append(<span class="stringliteral">&quot;, &quot;</span>);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">arm::pipe::CentreAlignFormatting</a>(std::to_string(<a class="code" href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#a9626b6860f10b55ee178d0b340627a8d">m_CounterCaptureValues</a>.<a class="code" href="structarmnn_1_1gatordmock_1_1_counter_capture_values.xhtml#a595556c01c62177551f934f16c6616a1">m_Timestamp</a>), 10));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">arm::pipe::CentreAlignFormatting</a>(std::to_string(<a class="code" href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#adf4c1e497ab037106ba8ae0ac077ac0f">m_CurrentPeriodValue</a>), 13));</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">arm::pipe::CentreAlignFormatting</a>(uidString, 10));</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        body.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        body.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">arm::pipe::CentreAlignFormatting</a>(valueString, 10));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        body.append(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span> (!m_HeaderPrinted)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            header.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">arm::pipe::CentreAlignFormatting</a>(<span class="stringliteral">&quot; Timestamp&quot;</span>, 11));</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            header.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            header.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">arm::pipe::CentreAlignFormatting</a>(<span class="stringliteral">&quot;Period (us)&quot;</span>, 13));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            header.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            header.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">arm::pipe::CentreAlignFormatting</a>(<span class="stringliteral">&quot;UID&#39;s&quot;</span>, static_cast&lt;int&gt;(uidString.size())));</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            header.append(<span class="stringliteral">&quot; | &quot;</span>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            header.append(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">arm::pipe::CentreAlignFormatting</a>(<span class="stringliteral">&quot;Values&quot;</span>, 10));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            header.append(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            std::cout &lt;&lt; header;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            m_HeaderPrinted = <span class="keyword">true</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        std::cout &lt;&lt; std::string(body.size(), <span class="charliteral">&#39;-&#39;</span>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        std::cout &lt;&lt; body;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}    <span class="comment">// namespace gatordmock</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}    <span class="comment">// namespace armnn</span></div><div class="ttc" id="_periodic_counter_capture_command_handler_8hpp_xhtml"><div class="ttname"><a href="_periodic_counter_capture_command_handler_8hpp.xhtml">PeriodicCounterCaptureCommandHandler.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_aa4de2b511faa41accc2c35cadf051124"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#aa4de2b511faa41accc2c35cadf051124">armnn::profiling::ReadUint64</a></div><div class="ttdeci">uint64_t ReadUint64(const IPacketBufferPtr &amp;packetBuffer, unsigned int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00174">ProfilingUtils.cpp:174</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a0ffb94cb0085a54a92f1c4eeaa6cf772"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a0ffb94cb0085a54a92f1c4eeaa6cf772">armnn::profiling::ReadUint16</a></div><div class="ttdeci">uint16_t ReadUint16(const IPacketBufferPtr &amp;packetBuffer, unsigned int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00188">ProfilingUtils.cpp:188</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="_numeric_cast_8hpp_xhtml"><div class="ttname"><a href="_numeric_cast_8hpp.xhtml">NumericCast.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler_xhtml_adf4c1e497ab037106ba8ae0ac077ac0f"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#adf4c1e497ab037106ba8ae0ac077ac0f">armnn::gatordmock::PeriodicCounterCaptureCommandHandler::m_CurrentPeriodValue</a></div><div class="ttdeci">uint64_t m_CurrentPeriodValue</div><div class="ttdef"><b>Definition:</b> <a href="_periodic_counter_capture_command_handler_8hpp_source.xhtml#l00048">PeriodicCounterCaptureCommandHandler.hpp:48</a></div></div>
<div class="ttc" id="structarmnn_1_1gatordmock_1_1_counter_capture_values_xhtml_a7cc61b58879de844c7917b87f09e308f"><div class="ttname"><a href="structarmnn_1_1gatordmock_1_1_counter_capture_values.xhtml#a7cc61b58879de844c7917b87f09e308f">armnn::gatordmock::CounterCaptureValues::m_Values</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; m_Values</div><div class="ttdef"><b>Definition:</b> <a href="_periodic_counter_capture_command_handler_8hpp_source.xhtml#l00023">PeriodicCounterCaptureCommandHandler.hpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler_xhtml_a9626b6860f10b55ee178d0b340627a8d"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#a9626b6860f10b55ee178d0b340627a8d">armnn::gatordmock::PeriodicCounterCaptureCommandHandler::m_CounterCaptureValues</a></div><div class="ttdeci">CounterCaptureValues m_CounterCaptureValues</div><div class="ttdef"><b>Definition:</b> <a href="_periodic_counter_capture_command_handler_8hpp_source.xhtml#l00046">PeriodicCounterCaptureCommandHandler.hpp:46</a></div></div>
<div class="ttc" id="structarmnn_1_1gatordmock_1_1_counter_capture_values_xhtml_af697af5118a291003f6aaeb195fe67a4"><div class="ttname"><a href="structarmnn_1_1gatordmock_1_1_counter_capture_values.xhtml#af697af5118a291003f6aaeb195fe67a4">armnn::gatordmock::CounterCaptureValues::m_Uids</a></div><div class="ttdeci">std::vector&lt; uint16_t &gt; m_Uids</div><div class="ttdef"><b>Definition:</b> <a href="_periodic_counter_capture_command_handler_8hpp_source.xhtml#l00022">PeriodicCounterCaptureCommandHandler.hpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ad56f4c3ea5e88279bb6ef1f31d9dc6df"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ad56f4c3ea5e88279bb6ef1f31d9dc6df">armnn::profiling::ReadUint32</a></div><div class="ttdeci">uint32_t ReadUint32(const IPacketBufferPtr &amp;packetBuffer, unsigned int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00181">ProfilingUtils.cpp:181</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a6c000fcf0c62f7bc417fef72be783129"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a6c000fcf0c62f7bc417fef72be783129">armnn::profiling::CentreAlignFormatting</a></div><div class="ttdeci">std::string CentreAlignFormatting(const std::string &amp;stringToPass, const int spacingWidth)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00727">ProfilingUtils.cpp:727</a></div></div>
<div class="ttc" id="structarmnn_1_1gatordmock_1_1_counter_capture_values_xhtml_a595556c01c62177551f934f16c6616a1"><div class="ttname"><a href="structarmnn_1_1gatordmock_1_1_counter_capture_values.xhtml#a595556c01c62177551f934f16c6616a1">armnn::gatordmock::CounterCaptureValues::m_Timestamp</a></div><div class="ttdeci">uint64_t m_Timestamp</div><div class="ttdef"><b>Definition:</b> <a href="_periodic_counter_capture_command_handler_8hpp_source.xhtml#l00021">PeriodicCounterCaptureCommandHandler.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler_xhtml_a7f194544050d3b16f7363a93a234b89c"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_periodic_counter_capture_command_handler.xhtml#a7f194544050d3b16f7363a93a234b89c">armnn::gatordmock::PeriodicCounterCaptureCommandHandler::operator()</a></div><div class="ttdeci">void operator()(const arm::pipe::Packet &amp;packet) override</div><div class="ttdef"><b>Definition:</b> <a href="_periodic_counter_capture_command_handler_8cpp_source.xhtml#l00075">PeriodicCounterCaptureCommandHandler.cpp:75</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_659c7018c274c4a27f289b6765351cd5.xhtml">profiling</a></li><li class="navelem"><a class="el" href="dir_0f843ccd982e68996492857574f1c0de.xhtml">gatordmock</a></li><li class="navelem"><a class="el" href="_periodic_counter_capture_command_handler_8cpp.xhtml">PeriodicCounterCaptureCommandHandler.cpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:36 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
