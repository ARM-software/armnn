<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: TfLiteExecutor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('class_tf_lite_executor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_tf_lite_executor-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TfLiteExecutor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_tflite_executor_8hpp_source.xhtml">TfliteExecutor.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for TfLiteExecutor:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_tf_lite_executor.png" usemap="#TfLiteExecutor_map" alt=""/>
  <map id="TfLiteExecutor_map" name="TfLiteExecutor_map">
<area href="class_i_executor.xhtml" title="IExecutor executes a network. " alt="IExecutor" shape="rect" coords="0,0,93,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a4a9b0347a0c16183bc06a67d3dbb8e9a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tf_lite_executor.xhtml#a4a9b0347a0c16183bc06a67d3dbb8e9a">TfLiteExecutor</a> (const <a class="el" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a> &amp;m_Params)</td></tr>
<tr class="separator:a4a9b0347a0c16183bc06a67d3dbb8e9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b274ddaba15738d696359ad327a88ca"><td class="memItemLeft" align="right" valign="top">std::vector&lt; const void * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tf_lite_executor.xhtml#a7b274ddaba15738d696359ad327a88ca">Execute</a> () override</td></tr>
<tr class="memdesc:a7b274ddaba15738d696359ad327a88ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execute the given network.  <a href="#a7b274ddaba15738d696359ad327a88ca">More...</a><br /></td></tr>
<tr class="separator:a7b274ddaba15738d696359ad327a88ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21887e76c6b67797ada411a163d81a62"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tf_lite_executor.xhtml#a21887e76c6b67797ada411a163d81a62">PrintNetworkInfo</a> () override</td></tr>
<tr class="memdesc:a21887e76c6b67797ada411a163d81a62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print available information about the network.  <a href="#a21887e76c6b67797ada411a163d81a62">More...</a><br /></td></tr>
<tr class="separator:a21887e76c6b67797ada411a163d81a62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac65a3d900d923c4582e059c2281e70e3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tf_lite_executor.xhtml#ac65a3d900d923c4582e059c2281e70e3">CompareAndPrintResult</a> (std::vector&lt; const void *&gt; otherOutput) override</td></tr>
<tr class="memdesc:ac65a3d900d923c4582e059c2281e70e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the output with the result of another <a class="el" href="class_i_executor.xhtml" title="IExecutor executes a network. ">IExecutor</a>.  <a href="#ac65a3d900d923c4582e059c2281e70e3">More...</a><br /></td></tr>
<tr class="separator:ac65a3d900d923c4582e059c2281e70e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_i_executor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_i_executor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_i_executor.xhtml">IExecutor</a></td></tr>
<tr class="memitem:a35ce388d080edd9b1fc52dd91cf80deb inherit pub_methods_class_i_executor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_executor.xhtml#a35ce388d080edd9b1fc52dd91cf80deb">~IExecutor</a> ()</td></tr>
<tr class="separator:a35ce388d080edd9b1fc52dd91cf80deb inherit pub_methods_class_i_executor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_tflite_executor_8hpp_source.xhtml#l00021">21</a> of file <a class="el" href="_tflite_executor_8hpp_source.xhtml">TfliteExecutor.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a4a9b0347a0c16183bc06a67d3dbb8e9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a9b0347a0c16183bc06a67d3dbb8e9a">&#9670;&nbsp;</a></span>TfLiteExecutor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_tf_lite_executor.xhtml">TfLiteExecutor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a> &amp;&#160;</td>
          <td class="paramname"><em>m_Params</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tflite_executor_8cpp_source.xhtml#l00008">8</a> of file <a class="el" href="_tflite_executor_8cpp_source.xhtml">TfliteExecutor.cpp</a>.</p>

<p class="reference">References <a class="el" href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857da34feb52e49daeff4cae20f668187ec5c">ExecuteNetworkParams::ArmNNTfLiteDelegate</a>, <a class="el" href="_delegate_options_8hpp_source.xhtml#l00248">DelegateOptions::GetExternalProfilingParams()</a>, <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00075">LogAndThrow()</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00037">ExecuteNetworkParams::m_GenerateTensorData</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00041">ExecuteNetworkParams::m_InputNames</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00042">ExecuteNetworkParams::m_InputTensorDataFilePaths</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00045">ExecuteNetworkParams::m_ModelPath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00061">ExecuteNetworkParams::m_TfLiteExecutor</a>, <a class="el" href="_delegate_options_8hpp_source.xhtml#l00244">DelegateOptions::SetExternalProfilingParams()</a>, <a class="el" href="namespacearmnn_delegate.xhtml#aaab840e387d9a4e7de223fbc8c969eb3">armnnDelegate::TfLiteArmnnDelegateCreate()</a>, and <a class="el" href="namespacearmnn_delegate.xhtml#a29bbb05765039d65532d61301b56749e">armnnDelegate::TfLiteArmnnDelegateDelete()</a>.</p>
<div class="fragment"><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;                                                                 : m_Params(params)</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;{</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;    m_Model = tflite::FlatBufferModel::BuildFromFile(m_Params.<a class="code" href="struct_execute_network_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>.c_str());</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    m_TfLiteInterpreter =  std::make_unique&lt;Interpreter&gt;();</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    tflite::ops::builtin::BuiltinOpResolver resolver;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    tflite::InterpreterBuilder builder(*m_Model, resolver);</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    builder(&amp;m_TfLiteInterpreter);</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    m_TfLiteInterpreter-&gt;AllocateTensors();</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordtype">int</span> status = kTfLiteError;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordflow">if</span> (m_Params.<a class="code" href="struct_execute_network_params.xhtml#a876462c8d3a74b51c890820df24f42f9">m_TfLiteExecutor</a> == <a class="code" href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857da34feb52e49daeff4cae20f668187ec5c">ExecuteNetworkParams::TfLiteExecutor::ArmNNTfLiteDelegate</a>)</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    {</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="comment">// Create the Armnn Delegate</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="comment">// Populate a DelegateOptions from the ExecuteNetworkParams.</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <a class="code" href="classarmnn_delegate_1_1_delegate_options.xhtml">armnnDelegate::DelegateOptions</a> delegateOptions = m_Params.ToDelegateOptions();</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        delegateOptions.<a class="code" href="classarmnn_delegate_1_1_delegate_options.xhtml#abfd26a0521c63aaf8857067e4b6b6e3e">SetExternalProfilingParams</a>(delegateOptions.<a class="code" href="classarmnn_delegate_1_1_delegate_options.xhtml#a0bababf4a76395e5a7edb0c598b53b90">GetExternalProfilingParams</a>());</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        std::unique_ptr&lt;TfLiteDelegate, decltype(&amp;armnnDelegate::TfLiteArmnnDelegateDelete)&gt;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                theArmnnDelegate(<a class="code" href="namespacearmnn_delegate.xhtml#aaab840e387d9a4e7de223fbc8c969eb3">armnnDelegate::TfLiteArmnnDelegateCreate</a>(delegateOptions),</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                 <a class="code" href="namespacearmnn_delegate.xhtml#a29bbb05765039d65532d61301b56749e">armnnDelegate::TfLiteArmnnDelegateDelete</a>);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="comment">// Register armnn_delegate to TfLiteInterpreter</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        status = m_TfLiteInterpreter-&gt;ModifyGraphWithDelegate(std::move(theArmnnDelegate));</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordflow">if</span> (status != kTfLiteOk)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            <a class="code" href="_network_execution_utils_8cpp.xhtml#a0d853d3a7b138f39cc775c26e2c0821a">LogAndThrow</a>(<span class="stringliteral">&quot;Could not register ArmNN TfLite Delegate to TfLiteInterpreter&quot;</span>);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Running on TfLite without ArmNN delegate\n&quot;</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputs = m_Params.<a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>.size();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputIndex = 0; inputIndex &lt; numInputs; ++inputIndex)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a> dataFile = m_Params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            ? <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>()</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            : <a class="code" href="namespacearmnn.xhtml">armnn</a>::<a class="code" href="namespacearmnn.xhtml#a77780137c47f528921f6537447060f05">MakeOptional</a>&lt;<a class="code" href="namespacestd.xhtml">std</a>::string&gt;(m_Params.m_InputTensorDataFilePaths[inputIndex]);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordtype">int</span> input = m_TfLiteInterpreter-&gt;inputs()[inputIndex];</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        TfLiteIntArray* inputDims = m_TfLiteInterpreter-&gt;tensor(input)-&gt;dims;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = 1;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dim = 0; dim &lt; static_cast&lt;unsigned int&gt;(inputDims-&gt;size); ++dim)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            inputSize *= inputDims-&gt;data[dim];</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>&amp; inputName = m_TfLiteInterpreter-&gt;tensor(input)-&gt;name;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>&amp; dataType = m_TfLiteInterpreter-&gt;tensor(input)-&gt;type;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">switch</span> (dataType)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordflow">case</span> kTfLiteFloat32:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="keyword">auto</span> inputData = m_TfLiteInterpreter-&gt;typed_tensor&lt;<span class="keywordtype">float</span>&gt;(input);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                PopulateTensorWithData&lt;float&gt;(inputData, inputSize, dataFile, inputName);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">case</span> kTfLiteInt32:</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keyword">auto</span> inputData = m_TfLiteInterpreter-&gt;typed_tensor&lt;int32_t&gt;(input);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                PopulateTensorWithData&lt;int32_t&gt;(inputData, inputSize, dataFile, inputName);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">case</span> kTfLiteUInt8:</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keyword">auto</span> inputData = m_TfLiteInterpreter-&gt;typed_tensor&lt;uint8_t&gt;(input);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                PopulateTensorWithData&lt;uint8_t&gt;(inputData, inputSize, dataFile, inputName);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">case</span> kTfLiteInt16:</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keyword">auto</span> inputData = m_TfLiteInterpreter-&gt;typed_tensor&lt;int16_t&gt;(input);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                PopulateTensorWithData&lt;int16_t&gt;(inputData, inputSize, dataFile, inputName);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">case</span> kTfLiteInt8:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keyword">auto</span> inputData = m_TfLiteInterpreter-&gt;typed_tensor&lt;int8_t&gt;(input);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                PopulateTensorWithData&lt;int8_t&gt;(inputData, inputSize, dataFile, inputName);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <a class="code" href="_network_execution_utils_8cpp.xhtml#a0d853d3a7b138f39cc775c26e2c0821a">LogAndThrow</a>(<span class="stringliteral">&quot;Unsupported input tensor data type&quot;</span>);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="ttc" id="struct_execute_network_params_xhtml_a4fa312cf0d60fbd3988a7c76ab8e2980"><div class="ttname"><a href="struct_execute_network_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">ExecuteNetworkParams::m_ModelPath</a></div><div class="ttdeci">std::string m_ModelPath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00045">ExecuteNetworkParams.hpp:45</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_a0d853d3a7b138f39cc775c26e2c0821a"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#a0d853d3a7b138f39cc775c26e2c0821a">LogAndThrow</a></div><div class="ttdeci">void LogAndThrow(std::string eMsg)</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00075">NetworkExecutionUtils.cpp:75</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt; std::string &gt;</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a721fa5f104533ca06589330accc2857da34feb52e49daeff4cae20f668187ec5c"><div class="ttname"><a href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857da34feb52e49daeff4cae20f668187ec5c">ExecuteNetworkParams::TfLiteExecutor::ArmNNTfLiteDelegate</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a876462c8d3a74b51c890820df24f42f9"><div class="ttname"><a href="struct_execute_network_params.xhtml#a876462c8d3a74b51c890820df24f42f9">ExecuteNetworkParams::m_TfLiteExecutor</a></div><div class="ttdeci">TfLiteExecutor m_TfLiteExecutor</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00061">ExecuteNetworkParams.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_delegate_1_1_delegate_options_xhtml_abfd26a0521c63aaf8857067e4b6b6e3e"><div class="ttname"><a href="classarmnn_delegate_1_1_delegate_options.xhtml#abfd26a0521c63aaf8857067e4b6b6e3e">armnnDelegate::DelegateOptions::SetExternalProfilingParams</a></div><div class="ttdeci">void SetExternalProfilingParams(const arm::pipe::ProfilingOptions &amp;externalProfilingParams)</div><div class="ttdef"><b>Definition:</b> <a href="_delegate_options_8hpp_source.xhtml#l00244">DelegateOptions.hpp:244</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00149">BackendId.hpp:149</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a99c7360a4d4b248b3f10607bc5d2fe7b"><div class="ttname"><a href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">ExecuteNetworkParams::m_GenerateTensorData</a></div><div class="ttdeci">bool m_GenerateTensorData</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00037">ExecuteNetworkParams.hpp:37</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_aaf3c7f286030842a31025309ab6a8329"><div class="ttname"><a href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">ExecuteNetworkParams::m_InputNames</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputNames</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00041">ExecuteNetworkParams.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_delegate_xhtml_aaab840e387d9a4e7de223fbc8c969eb3"><div class="ttname"><a href="namespacearmnn_delegate.xhtml#aaab840e387d9a4e7de223fbc8c969eb3">armnnDelegate::TfLiteArmnnDelegateCreate</a></div><div class="ttdeci">TfLiteDelegate * TfLiteArmnnDelegateCreate(armnnDelegate::DelegateOptions options)</div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_delegate_xhtml_a29bbb05765039d65532d61301b56749e"><div class="ttname"><a href="namespacearmnn_delegate.xhtml#a29bbb05765039d65532d61301b56749e">armnnDelegate::TfLiteArmnnDelegateDelete</a></div><div class="ttdeci">void TfLiteArmnnDelegateDelete(TfLiteDelegate *tfLiteDelegate)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a77780137c47f528921f6537447060f05"><div class="ttname"><a href="namespacearmnn.xhtml#a77780137c47f528921f6537447060f05">armnn::MakeOptional</a></div><div class="ttdeci">Optional&lt; T &gt; MakeOptional(Args &amp;&amp;... args)</div><div class="ttdoc">Utility template that constructs an object of type T in-place and wraps it inside an Optional&lt;T&gt; obje...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00305">Optional.hpp:305</a></div></div>
<div class="ttc" id="classarmnn_delegate_1_1_delegate_options_xhtml"><div class="ttname"><a href="classarmnn_delegate_1_1_delegate_options.xhtml">armnnDelegate::DelegateOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_delegate_options_8hpp_source.xhtml#l00021">DelegateOptions.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_delegate_1_1_delegate_options_xhtml_a0bababf4a76395e5a7edb0c598b53b90"><div class="ttname"><a href="classarmnn_delegate_1_1_delegate_options.xhtml#a0bababf4a76395e5a7edb0c598b53b90">armnnDelegate::DelegateOptions::GetExternalProfilingParams</a></div><div class="ttdeci">const arm::pipe::ProfilingOptions &amp; GetExternalProfilingParams() const</div><div class="ttdef"><b>Definition:</b> <a href="_delegate_options_8hpp_source.xhtml#l00248">DelegateOptions.hpp:248</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac65a3d900d923c4582e059c2281e70e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac65a3d900d923c4582e059c2281e70e3">&#9670;&nbsp;</a></span>CompareAndPrintResult()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CompareAndPrintResult </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; const void *&gt;&#160;</td>
          <td class="paramname"><em>otherOutput</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare the output with the result of another <a class="el" href="class_i_executor.xhtml" title="IExecutor executes a network. ">IExecutor</a>. </p>

<p>Implements <a class="el" href="class_i_executor.xhtml#aa5ca9ff9e89dbc47623206d4e7b98376">IExecutor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tflite_executor_8cpp_source.xhtml#l00204">204</a> of file <a class="el" href="_tflite_executor_8cpp_source.xhtml">TfliteExecutor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;{</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = 0; outputIndex &lt; m_TfLiteInterpreter-&gt;outputs().size(); ++outputIndex)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keyword">auto</span> tfLiteDelegateOutputId = m_TfLiteInterpreter-&gt;outputs()[outputIndex];</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordtype">float</span> result = 0;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordflow">switch</span> (m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;type)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">case</span> kTfLiteFloat32:</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                result =  ComputeRMSE&lt;float&gt;(m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;allocation,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                             otherOutput[outputIndex],</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                             m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;bytes);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">case</span> kTfLiteInt32:</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                result =  ComputeRMSE&lt;int32_t&gt;(m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;allocation,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                                    otherOutput[outputIndex],</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                                    m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;bytes);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keywordflow">case</span> kTfLiteUInt8:</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                result =  ComputeRMSE&lt;uint8_t&gt;(m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;allocation,</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                                    otherOutput[outputIndex],</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                                    m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;bytes);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">case</span> kTfLiteInt8:</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                result =  ComputeRMSE&lt;int8_t&gt;(m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;allocation,</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                                    otherOutput[outputIndex],</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                                    m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;bytes);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;RMSE of &quot;</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                  &lt;&lt; m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;name</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                  &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;};</div></div><!-- fragment -->
</div>
</div>
<a id="a7b274ddaba15738d696359ad327a88ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b274ddaba15738d696359ad327a88ca">&#9670;&nbsp;</a></span>Execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; const void * &gt; Execute </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Execute the given network. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;const void*&gt; A type erased vector of the outputs, that can be compared with the output of another <a class="el" href="class_i_executor.xhtml" title="IExecutor executes a network. ">IExecutor</a> </dd></dl>

<p>Implements <a class="el" href="class_i_executor.xhtml#ab11f3f9cae37ecd9f9760d5ea82f47b3">IExecutor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tflite_executor_8cpp_source.xhtml#l00103">103</a> of file <a class="el" href="_tflite_executor_8cpp_source.xhtml">TfliteExecutor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00017">CheckInferenceTimeThreshold()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00019">armnn::GetTimeDuration()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00014">armnn::GetTimeNow()</a>, <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00075">LogAndThrow()</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00053">ExecuteNetworkParams::m_DontPrintOutputs</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00044">ExecuteNetworkParams::m_Iterations</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00050">ExecuteNetworkParams::m_OutputTensorFiles</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00064">ExecuteNetworkParams::m_ReuseBuffers</a>, and <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00057">ExecuteNetworkParams::m_ThresholdTime</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">int</span> status = 0;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    std::vector&lt;const void*&gt; results;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> x = 0; x &lt; m_Params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>; x++)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="comment">// Start timer to record inference time in milliseconds.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="comment">// Run the inference</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        status = m_TfLiteInterpreter-&gt;Invoke();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> duration = <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(start_time);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">if</span> (m_Params.<a class="code" href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">m_DontPrintOutputs</a> || m_Params.<a class="code" href="struct_execute_network_params.xhtml#acb9376adc0f7174b7d4295e00315a084">m_ReuseBuffers</a>)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">// Print out the output</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = 0; outputIndex &lt; m_TfLiteInterpreter-&gt;outputs().size(); ++outputIndex)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keyword">auto</span> tfLiteDelegateOutputId = m_TfLiteInterpreter-&gt;outputs()[outputIndex];</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            TfLiteIntArray* outputDims = m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;dims;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="comment">// If we&#39;ve been asked to write to a file then set a file output stream. Otherwise use stdout.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            FILE* outputTensorFile = stdout;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">if</span> (!m_Params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.empty())</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                outputTensorFile = fopen(m_Params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[outputIndex].c_str(), <span class="stringliteral">&quot;w&quot;</span>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keywordflow">if</span> (outputTensorFile == NULL)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <a class="code" href="_network_execution_utils_8cpp.xhtml#a0d853d3a7b138f39cc775c26e2c0821a">LogAndThrow</a>(<span class="stringliteral">&quot;Specified output tensor file, \&quot;&quot;</span> + m_Params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[outputIndex] +</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                <span class="stringliteral">&quot;\&quot;, cannot be created. Defaulting to stdout. Error was: &quot;</span> + std::strerror(errno));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Writing output &quot;</span> &lt;&lt; outputIndex &lt;&lt; <span class="stringliteral">&quot;&#39; of iteration: &quot;</span> &lt;&lt; x+1 &lt;&lt; <span class="stringliteral">&quot; to file: &#39;&quot;</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                    &lt;&lt; m_Params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[outputIndex] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordtype">long</span> outputSize = 1;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dim = 0; dim &lt; static_cast&lt;unsigned int&gt;(outputDims-&gt;size); ++dim)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                outputSize *=  outputDims-&gt;data[dim];</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            std::cout &lt;&lt; m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;name &lt;&lt; <span class="stringliteral">&quot;: &quot;</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            results.push_back(m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;allocation);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keywordflow">switch</span> (m_TfLiteInterpreter-&gt;tensor(tfLiteDelegateOutputId)-&gt;type)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keywordflow">case</span> kTfLiteFloat32:</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="keyword">auto</span> tfLiteDelegateOutputData = m_TfLiteInterpreter-&gt;typed_tensor&lt;<span class="keywordtype">float</span>&gt;(tfLiteDelegateOutputId);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; outputSize; ++i)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        fprintf(outputTensorFile, <span class="stringliteral">&quot;%f &quot;</span>, tfLiteDelegateOutputData[i]);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keywordflow">case</span> kTfLiteInt32:</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    <span class="keyword">auto</span> tfLiteDelegateOutputData = m_TfLiteInterpreter-&gt;typed_tensor&lt;int32_t&gt;(tfLiteDelegateOutputId);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; outputSize; ++i)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                        fprintf(outputTensorFile, <span class="stringliteral">&quot;%d &quot;</span>, tfLiteDelegateOutputData[i]);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordflow">case</span> kTfLiteUInt8:</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    <span class="keyword">auto</span> tfLiteDelegateOutputData = m_TfLiteInterpreter-&gt;typed_tensor&lt;uint8_t&gt;(tfLiteDelegateOutputId);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; outputSize; ++i)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        fprintf(outputTensorFile, <span class="stringliteral">&quot;%u &quot;</span>, tfLiteDelegateOutputData[i]);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="keywordflow">case</span> kTfLiteInt8:</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    <span class="keyword">auto</span> tfLiteDelegateOutputData = m_TfLiteInterpreter-&gt;typed_tensor&lt;int8_t&gt;(tfLiteDelegateOutputId);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; outputSize; ++i)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        fprintf(outputTensorFile, <span class="stringliteral">&quot;%d &quot;</span>, tfLiteDelegateOutputData[i]);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    <a class="code" href="_network_execution_utils_8cpp.xhtml#a0d853d3a7b138f39cc775c26e2c0821a">LogAndThrow</a>(<span class="stringliteral">&quot;Unsupported output type&quot;</span>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            std::cout &lt;&lt; std::endl;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <a class="code" href="_network_execution_utils_8cpp.xhtml#ab9be7e320a1879b362298cb198250dae">CheckInferenceTimeThreshold</a>(duration, m_Params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a>);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    std::cout &lt;&lt; status;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">return</span> results;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a441621f00fd5665898c81a5ae3473c6b"><div class="ttname"><a href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a></div><div class="ttdeci">std::chrono::duration&lt; double, std::milli &gt; GetTimeDuration(std::chrono::high_resolution_clock::time_point start_time)</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00019">Timer.hpp:19</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_a0d853d3a7b138f39cc775c26e2c0821a"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#a0d853d3a7b138f39cc775c26e2c0821a">LogAndThrow</a></div><div class="ttdeci">void LogAndThrow(std::string eMsg)</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00075">NetworkExecutionUtils.cpp:75</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ac828647e0c753c3727c8c1f81939f7e4"><div class="ttname"><a href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">ExecuteNetworkParams::m_DontPrintOutputs</a></div><div class="ttdeci">bool m_DontPrintOutputs</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00053">ExecuteNetworkParams.hpp:53</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac895f6f6897ce335b7b433201bae0b48"><div class="ttname"><a href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a></div><div class="ttdeci">std::chrono::high_resolution_clock::time_point GetTimeNow()</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00014">Timer.hpp:14</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a74d346297c55b516908c541030adc88d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">ExecuteNetworkParams::m_OutputTensorFiles</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputTensorFiles</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00050">ExecuteNetworkParams.hpp:50</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a6e4eff6a5f40cb026ea76d3c13c96341"><div class="ttname"><a href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">ExecuteNetworkParams::m_Iterations</a></div><div class="ttdeci">size_t m_Iterations</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00044">ExecuteNetworkParams.hpp:44</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a318999172ae5197f56326b12d29104b7"><div class="ttname"><a href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">ExecuteNetworkParams::m_ThresholdTime</a></div><div class="ttdeci">double m_ThresholdTime</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00057">ExecuteNetworkParams.hpp:57</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_ab9be7e320a1879b362298cb198250dae"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#ab9be7e320a1879b362298cb198250dae">CheckInferenceTimeThreshold</a></div><div class="ttdeci">bool CheckInferenceTimeThreshold(const std::chrono::duration&lt; double, std::milli &gt; &amp;duration, const double &amp;thresholdTime)</div><div class="ttdoc">Given a measured duration and a threshold time tell the user whether we succeeded or not...</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00017">NetworkExecutionUtils.cpp:17</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_acb9376adc0f7174b7d4295e00315a084"><div class="ttname"><a href="struct_execute_network_params.xhtml#acb9376adc0f7174b7d4295e00315a084">ExecuteNetworkParams::m_ReuseBuffers</a></div><div class="ttdeci">bool m_ReuseBuffers</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00064">ExecuteNetworkParams.hpp:64</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a21887e76c6b67797ada411a163d81a62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21887e76c6b67797ada411a163d81a62">&#9670;&nbsp;</a></span>PrintNetworkInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void PrintNetworkInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Print available information about the network. </p>

<p>Implements <a class="el" href="class_i_executor.xhtml#a225e907393c46b20bbed09e1a6a48e6d">IExecutor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tflite_executor_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="_tflite_executor_8hpp_source.xhtml">TfliteExecutor.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{};</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/ExecuteNetwork/<a class="el" href="_tflite_executor_8hpp_source.xhtml">TfliteExecutor.hpp</a></li>
<li>tests/ExecuteNetwork/<a class="el" href="_tflite_executor_8cpp_source.xhtml">TfliteExecutor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="class_tf_lite_executor.xhtml">TfLiteExecutor</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:36 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
