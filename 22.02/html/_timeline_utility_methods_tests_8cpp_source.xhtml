<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/profiling/test/TimelineUtilityMethodsTests.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_timeline_utility_methods_tests_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TimelineUtilityMethodsTests.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_timeline_utility_methods_tests_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2019 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_profiling_mocks_8hpp.xhtml">ProfilingMocks.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_profiling_test_utils_8hpp.xhtml">ProfilingTestUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_send_timeline_packet_8hpp.xhtml">SendTimelinePacket.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_timeline_utility_methods_8hpp.xhtml">TimelineUtilityMethods.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_profiling_service_8hpp.xhtml">ProfilingService.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;common/include/LabelsAndEventClasses.hpp&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;doctest/doctest.h&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn_1_1profiling.xhtml">armnn::profiling</a>;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="_timeline_utility_methods_tests_8cpp.xhtml#ac1a5d46e86123b752bdc5fc6b4f60862">   22</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a1621fb2f10314c394c9023d3e090d394">TEST_SUITE</a>(<span class="stringliteral">&quot;TimelineUtilityMethodsTests&quot;</span>)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateTypedLabelTest&quot;</span>)</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBufferManager(1024);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">ProfilingService</a>  profilingService;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; sendTimelinePacket = std::make_unique&lt;SendTimelinePacket&gt;(mockBufferManager);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml">TimelineUtilityMethods</a> timelineUtilityMethods(sendTimelinePacket);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="comment">// Generate first guid to ensure that the named typed entity guid is not 0 on local single test.</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    profilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">NextGuid</a>();</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    ProfilingGuid entityGuid(123);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> std::string entityName = <span class="stringliteral">&quot;some entity&quot;</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    ProfilingStaticGuid labelTypeGuid(456);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    CHECK_NOTHROW(timelineUtilityMethods.MarkEntityWithLabel(entityGuid, entityName, labelTypeGuid));</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// Commit all packets at once</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    timelineUtilityMethods.Commit();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">auto</span> readableBuffer = mockBufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    CHECK(readableBuffer != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = readableBuffer-&gt;GetSize();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    CHECK(size == 76);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* readableData = readableBuffer-&gt;GetReadableData();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    CHECK(readableData != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Utils</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// Verify Header</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a6bd6e8ba2f989621f7348d2bb6ce13a4">VerifyTimelineHeaderBinary</a>(readableData, offset, 68);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// First dataset sent: TimelineLabelBinaryPacket</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(<a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), entityName, readableData, offset);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Second dataset sent: TimelineRelationshipBinaryPacket</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a2d7768e5e753dcc3212100a9949db533">VerifyTimelineRelationshipBinaryPacketData</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f">ProfilingRelationshipType::LabelLink</a>,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                               entityGuid,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                               labelTypeGuid,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                                               readableData,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                               offset);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// Mark the buffer as read</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    mockBufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a>(readableBuffer);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SendWellKnownLabelsAndEventClassesTest&quot;</span>)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBufferManager(1024);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">ProfilingService</a>  profilingService;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_send_timeline_packet.xhtml">SendTimelinePacket</a> sendTimelinePacket(mockBufferManager);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    CHECK_NOTHROW(<a class="code" href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml#a1c3dd40f5b8c4b878f783addf7d08e2f">TimelineUtilityMethods::SendWellKnownLabelsAndEventClasses</a>(sendTimelinePacket));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">auto</span> readableBuffer = mockBufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    CHECK(readableBuffer != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = readableBuffer-&gt;GetSize();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    CHECK(size == 460);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* readableData = readableBuffer-&gt;GetReadableData();</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    CHECK(readableData != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">// Utils</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// Verify Header</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a6bd6e8ba2f989621f7348d2bb6ce13a4">VerifyTimelineHeaderBinary</a>(readableData, offset, 452);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="comment">// First &quot;well-known&quot; label: NAME</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::NAME_GUID,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                        LabelsAndEventClasses::NAME_LABEL,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                        readableData,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                        offset);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// Second &quot;well-known&quot; label: TYPE</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::TYPE_GUID,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                        LabelsAndEventClasses::TYPE_LABEL,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                        readableData,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                        offset);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Third &quot;well-known&quot; label: INDEX</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::INDEX_GUID,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                        LabelsAndEventClasses::INDEX_LABEL,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                        readableData,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                        offset);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Forth &quot;well-known&quot; label: BACKENDID</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::BACKENDID_GUID,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                        LabelsAndEventClasses::BACKENDID_LABEL,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                        readableData,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                        offset);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// Fifth &quot;well-known&quot; label: CHILD</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::CHILD_GUID,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                        LabelsAndEventClasses::CHILD_LABEL,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                        readableData,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                        offset);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// Sixth &quot;well-known&quot; label: EXECUTION_OF</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::EXECUTION_OF_GUID,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                        LabelsAndEventClasses::EXECUTION_OF_LABEL,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                        readableData,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                        offset);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// Seventh &quot;well-known&quot; label: PROCESS_ID_LABEL</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::PROCESS_ID_GUID,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                        LabelsAndEventClasses::PROCESS_ID_LABEL,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                        readableData,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                        offset);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// Well-known types</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// Layer</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::LAYER_GUID,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                        LabelsAndEventClasses::LAYER,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                        readableData,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                        offset);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Workload</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::WORKLOAD_GUID,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                        LabelsAndEventClasses::WORKLOAD,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                        readableData,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                        offset);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">// Network</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::NETWORK_GUID,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                        LabelsAndEventClasses::NETWORK,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                        readableData,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                        offset);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// Connection</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::CONNECTION_GUID,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                        LabelsAndEventClasses::CONNECTION,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                        readableData,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                        offset);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// Inference</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::INFERENCE_GUID,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                        LabelsAndEventClasses::INFERENCE,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                        readableData,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                        offset);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="comment">// Workload Execution</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::WORKLOAD_EXECUTION_GUID,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                        LabelsAndEventClasses::WORKLOAD_EXECUTION,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                        readableData,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                        offset);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="comment">// First &quot;well-known&quot; event class: START OF LIFE</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::ARMNN_PROFILING_SOL_EVENT_CLASS_NAME_GUID,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                        LabelsAndEventClasses::ARMNN_PROFILING_SOL_EVENT_CLASS_NAME,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                        readableData,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                        offset);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#ae8508d42bb9bd2e705d05b921c83d2b0">VerifyTimelineEventClassBinaryPacketData</a>(LabelsAndEventClasses::ARMNN_PROFILING_SOL_EVENT_CLASS,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                             LabelsAndEventClasses::ARMNN_PROFILING_SOL_EVENT_CLASS_NAME_GUID,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                             readableData,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                             offset);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">// Second &quot;well-known&quot; event class: END OF LIFE</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(LabelsAndEventClasses::ARMNN_PROFILING_EOL_EVENT_CLASS_NAME_GUID,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                        LabelsAndEventClasses::ARMNN_PROFILING_EOL_EVENT_CLASS_NAME,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                        readableData,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                        offset);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#ae8508d42bb9bd2e705d05b921c83d2b0">VerifyTimelineEventClassBinaryPacketData</a>(LabelsAndEventClasses::ARMNN_PROFILING_EOL_EVENT_CLASS,</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                             LabelsAndEventClasses::ARMNN_PROFILING_EOL_EVENT_CLASS_NAME_GUID,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                             readableData,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                             offset);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="comment">// Mark the buffer as read</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    mockBufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a>(readableBuffer);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateNamedTypedChildEntityTest&quot;</span>)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBufferManager(1024);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">ProfilingService</a>  profilingService;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; sendTimelinePacket = std::make_unique&lt;SendTimelinePacket&gt;(mockBufferManager);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml">TimelineUtilityMethods</a> timelineUtilityMethods(sendTimelinePacket);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    ProfilingDynamicGuid childEntityGuid(0);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    ProfilingGuid parentEntityGuid(123);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">const</span> std::string entityName = <span class="stringliteral">&quot;some entity&quot;</span>;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">const</span> std::string entityType = <span class="stringliteral">&quot;some type&quot;</span>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">// Generate first guid to ensure that the named typed entity guid is not 0 on local single test.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    profilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">NextGuid</a>();</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    CHECK_THROWS_AS(timelineUtilityMethods.CreateNamedTypedChildEntity(parentEntityGuid, <span class="stringliteral">&quot;&quot;</span>, entityType),</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                      <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    CHECK_THROWS_AS(timelineUtilityMethods.CreateNamedTypedChildEntity(parentEntityGuid, entityName, <span class="stringliteral">&quot;&quot;</span>),</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                      <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    CHECK_THROWS_AS(timelineUtilityMethods.CreateNamedTypedChildEntity(</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        childEntityGuid, parentEntityGuid, <span class="stringliteral">&quot;&quot;</span>, entityType), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    CHECK_THROWS_AS(timelineUtilityMethods.CreateNamedTypedChildEntity(</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        childEntityGuid, parentEntityGuid, entityName, <span class="stringliteral">&quot;&quot;</span>), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    CHECK_NOTHROW(childEntityGuid = timelineUtilityMethods.CreateNamedTypedChildEntity(parentEntityGuid,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                                                                              entityName,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                                                                              entityType));</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    CHECK(childEntityGuid != ProfilingGuid(0));</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// Commit all packets at once</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    timelineUtilityMethods.Commit();</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">auto</span> readableBuffer = mockBufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    CHECK(readableBuffer != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = readableBuffer-&gt;GetSize();</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    CHECK(size == 196);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* readableData = readableBuffer-&gt;GetReadableData();</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    CHECK(readableData != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="comment">// Utils</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">// Verify Header</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a6bd6e8ba2f989621f7348d2bb6ce13a4">VerifyTimelineHeaderBinary</a>(readableData, offset, 188);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// First dataset sent: TimelineEntityBinaryPacket</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a5bb551aa8659adc968f27238d539c3b5">VerifyTimelineEntityBinaryPacketData</a>(<a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), readableData, offset);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// Second dataset sent: TimelineLabelBinaryPacket</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(<a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), entityName, readableData, offset);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// Third dataset sent: TimelineRelationshipBinaryPacket</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a2d7768e5e753dcc3212100a9949db533">VerifyTimelineRelationshipBinaryPacketData</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f">ProfilingRelationshipType::LabelLink</a>,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                               LabelsAndEventClasses::NAME_GUID,</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                               readableData,</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                               offset);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// Fifth dataset sent: TimelineLabelBinaryPacket</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(<a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), entityType, readableData, offset);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="comment">// Sixth dataset sent: TimelineRelationshipBinaryPacket</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a2d7768e5e753dcc3212100a9949db533">VerifyTimelineRelationshipBinaryPacketData</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f">ProfilingRelationshipType::LabelLink</a>,</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                               LabelsAndEventClasses::TYPE_GUID,</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                               readableData,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                               offset);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="comment">// Eighth dataset sent: TimelineRelationshipBinaryPacket</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a2d7768e5e753dcc3212100a9949db533">VerifyTimelineRelationshipBinaryPacketData</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110">ProfilingRelationshipType::RetentionLink</a>,</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                                               parentEntityGuid,</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                               readableData,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                               offset);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// Mark the buffer as read</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    mockBufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a>(readableBuffer);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;TEST_CASE(<span class="stringliteral">&quot;DeclareLabelTest&quot;</span>)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;{</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBufferManager(1024);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">ProfilingService</a>  profilingService;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; sendTimelinePacket = std::make_unique&lt;SendTimelinePacket&gt;(mockBufferManager);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml">TimelineUtilityMethods</a> timelineUtilityMethods(sendTimelinePacket);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// Generate first guid to ensure that the named typed entity guid is not 0 on local single test.</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    profilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">NextGuid</a>();</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// Try declaring an invalid (empty) label</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    CHECK_THROWS_AS(timelineUtilityMethods.DeclareLabel(<span class="stringliteral">&quot;&quot;</span>), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="comment">// Try declaring an invalid (wrong SWTrace format) label</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    CHECK_THROWS_AS(timelineUtilityMethods.DeclareLabel(<span class="stringliteral">&quot;inv@lid labâ¬l&quot;</span>), <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">// Declare a valid label</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keyword">const</span> std::string labelName = <span class="stringliteral">&quot;valid label&quot;</span>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    ProfilingGuid labelGuid = 0;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    CHECK_NOTHROW(labelGuid = timelineUtilityMethods.DeclareLabel(labelName));</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    CHECK(labelGuid != ProfilingGuid(0));</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="comment">// Try adding the same label as before</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    ProfilingGuid newLabelGuid = 0;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    CHECK_NOTHROW(newLabelGuid = timelineUtilityMethods.DeclareLabel(labelName));</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    CHECK(newLabelGuid != ProfilingGuid(0));</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    CHECK(newLabelGuid == labelGuid);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;}</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateNameTypeEntityInvalidTest&quot;</span>)</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;{</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBufferManager(1024);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">ProfilingService</a>  profilingService;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; sendTimelinePacket = std::make_unique&lt;SendTimelinePacket&gt;(mockBufferManager);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml">TimelineUtilityMethods</a> timelineUtilityMethods(sendTimelinePacket);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// Invalid name</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    CHECK_THROWS_AS(timelineUtilityMethods.CreateNamedTypedEntity(<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;Type&quot;</span>), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="comment">// Invalid type</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    CHECK_THROWS_AS(timelineUtilityMethods.CreateNamedTypedEntity(<span class="stringliteral">&quot;Name&quot;</span>, <span class="stringliteral">&quot;&quot;</span>), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    ProfilingDynamicGuid guid = profilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">NextGuid</a>();</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="comment">// CreatedNamedTypedEntity with Guid - Invalid name</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    CHECK_THROWS_AS(timelineUtilityMethods.CreateNamedTypedEntity(guid, <span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;Type&quot;</span>),</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                      <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="comment">// CreatedNamedTypedEntity with Guid - Invalid type</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    CHECK_THROWS_AS(timelineUtilityMethods.CreateNamedTypedEntity(guid, <span class="stringliteral">&quot;Name&quot;</span>, <span class="stringliteral">&quot;&quot;</span>),</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                      <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;TEST_CASE(<span class="stringliteral">&quot;CreateNameTypeEntityTest&quot;</span>)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBufferManager(1024);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">ProfilingService</a>  profilingService;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; sendTimelinePacket = std::make_unique&lt;SendTimelinePacket&gt;(mockBufferManager);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml">TimelineUtilityMethods</a> timelineUtilityMethods(sendTimelinePacket);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keyword">const</span> std::string entityName = <span class="stringliteral">&quot;Entity0&quot;</span>;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keyword">const</span> std::string entityType = <span class="stringliteral">&quot;Type0&quot;</span>;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="comment">// Generate first guid to ensure that the named typed entity guid is not 0 on local single test.</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    profilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">NextGuid</a>();</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    ProfilingDynamicGuid guid = timelineUtilityMethods.CreateNamedTypedEntity(entityName, entityType);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    CHECK(guid != ProfilingGuid(0));</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="comment">// Commit all packets at once</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    timelineUtilityMethods.Commit();</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keyword">auto</span> readableBuffer = mockBufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    CHECK(readableBuffer != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = readableBuffer-&gt;GetSize();</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    CHECK(size == 148);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* readableData = readableBuffer-&gt;GetReadableData();</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    CHECK(readableData != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="comment">// Utils</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="comment">// Verify Header</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a6bd6e8ba2f989621f7348d2bb6ce13a4">VerifyTimelineHeaderBinary</a>(readableData, offset, 140);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="comment">// First dataset sent: TimelineEntityBinaryPacket</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a5bb551aa8659adc968f27238d539c3b5">VerifyTimelineEntityBinaryPacketData</a>(guid, readableData, offset);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="comment">// Packets for Name Entity</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="comment">// First dataset sent: TimelineLabelBinaryPacket</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(<a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), entityName, readableData, offset);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="comment">// Second dataset sent: TimelineRelationshipBinaryPacket</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a2d7768e5e753dcc3212100a9949db533">VerifyTimelineRelationshipBinaryPacketData</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f">ProfilingRelationshipType::LabelLink</a>,</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                               LabelsAndEventClasses::NAME_GUID,</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                               readableData,</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                               offset);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">// Packets for Type Entity</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="comment">// First dataset sent: TimelineLabelBinaryPacket</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a>(<a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), entityType, readableData, offset);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="comment">// Second dataset sent: TimelineRelationshipBinaryPacket</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a2d7768e5e753dcc3212100a9949db533">VerifyTimelineRelationshipBinaryPacketData</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f">ProfilingRelationshipType::LabelLink</a>,</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                               LabelsAndEventClasses::TYPE_GUID,</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                               readableData,</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                                               offset);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="comment">// Mark the buffer as read</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    mockBufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a>(readableBuffer);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;}</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;TEST_CASE(<span class="stringliteral">&quot;RecordEventTest&quot;</span>)</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;{</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> mockBufferManager(1024);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">ProfilingService</a>  profilingService;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; sendTimelinePacket = std::make_unique&lt;SendTimelinePacket&gt;(mockBufferManager);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <a class="code" href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml">TimelineUtilityMethods</a> timelineUtilityMethods(sendTimelinePacket);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="comment">// Generate first guid to ensure that the named typed entity guid is not 0 on local single test.</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    profilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">NextGuid</a>();</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    ProfilingGuid entityGuid(123);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    ProfilingStaticGuid eventClassGuid(456);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    ProfilingDynamicGuid eventGuid(0);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    CHECK_NOTHROW(eventGuid = timelineUtilityMethods.RecordEvent(entityGuid, eventClassGuid));</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    CHECK(eventGuid != ProfilingGuid(0));</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="comment">// Commit all packets at once</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    timelineUtilityMethods.Commit();</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="comment">// Get the readable buffer</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keyword">auto</span> readableBuffer = mockBufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>();</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    CHECK(readableBuffer != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = readableBuffer-&gt;GetSize();</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    CHECK(size == 68 + <a class="code" href="namespacearmnn_1_1profiling.xhtml#a6272d5d5e3a8afa0a402e9aafd19aedf">ThreadIdSize</a>);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* readableData = readableBuffer-&gt;GetReadableData();</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    CHECK(readableData != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="comment">// Utils</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = 0;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="comment">// Verify Header</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a6bd6e8ba2f989621f7348d2bb6ce13a4">VerifyTimelineHeaderBinary</a>(readableData, offset, 60 + <a class="code" href="namespacearmnn_1_1profiling.xhtml#a6272d5d5e3a8afa0a402e9aafd19aedf">ThreadIdSize</a>);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="comment">// First dataset sent: TimelineEntityBinaryPacket</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a6580407dea269ed62934d0fd909a2e08">VerifyTimelineEventBinaryPacket</a>(<a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), readableData, offset);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="comment">// Second dataset sent: TimelineRelationshipBinaryPacket</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <a class="code" href="_profiling_test_utils_8cpp.xhtml#a2d7768e5e753dcc3212100a9949db533">VerifyTimelineRelationshipBinaryPacketData</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a5265db1a79410fbe447a3faa98e7b914">ProfilingRelationshipType::ExecutionLink</a>,</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                               <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                               entityGuid,</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                               eventGuid,</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                               eventClassGuid,</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                                               readableData,</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                                               offset);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="comment">// Mark the buffer as read</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    mockBufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a>(readableBuffer);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a1621fb2f10314c394c9023d3e090d394"><div class="ttname"><a href="namespacearmnn.xhtml#a1621fb2f10314c394c9023d3e090d394">armnn::TEST_SUITE</a></div><div class="ttdeci">TEST_SUITE(&quot;TestConstTensorLayerVisitor&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00110">ConstTensorLayerVisitor.cpp:110</a></div></div>
<div class="ttc" id="_send_timeline_packet_8hpp_xhtml"><div class="ttname"><a href="_send_timeline_packet_8hpp.xhtml">SendTimelinePacket.hpp</a></div></div>
<div class="ttc" id="_profiling_test_utils_8cpp_xhtml_ae8508d42bb9bd2e705d05b921c83d2b0"><div class="ttname"><a href="_profiling_test_utils_8cpp.xhtml#ae8508d42bb9bd2e705d05b921c83d2b0">VerifyTimelineEventClassBinaryPacketData</a></div><div class="ttdeci">void VerifyTimelineEventClassBinaryPacketData(ProfilingGuid guid, ProfilingGuid nameGuid, const unsigned char *readableData, unsigned int &amp;offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_test_utils_8cpp_source.xhtml#l00147">ProfilingTestUtils.cpp:147</a></div></div>
<div class="ttc" id="_profiling_test_utils_8cpp_xhtml_a5bb551aa8659adc968f27238d539c3b5"><div class="ttname"><a href="_profiling_test_utils_8cpp.xhtml#a5bb551aa8659adc968f27238d539c3b5">VerifyTimelineEntityBinaryPacketData</a></div><div class="ttdeci">ProfilingGuid VerifyTimelineEntityBinaryPacketData(Optional&lt; ProfilingGuid &gt; guid, const unsigned char *readableData, unsigned int &amp;offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_test_utils_8cpp_source.xhtml#l00269">ProfilingTestUtils.cpp:269</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ab805f5aa9f101e7f6d971daba044c3c2a5265db1a79410fbe447a3faa98e7b914"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a5265db1a79410fbe447a3faa98e7b914">armnn::profiling::ProfilingRelationshipType::ExecutionLink</a></div><div class="ttdoc">Head retains(parents) Tail. </div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_aeea32305626f921e1e9f99434dbf9049"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">armnn::profiling::ProfilingService::NextGuid</a></div><div class="ttdeci">ProfilingDynamicGuid NextGuid() override</div><div class="ttdoc">Return the next random Guid in the sequence. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00319">ProfilingService.cpp:319</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2a47d6c060a0aa40c6fd018f12b7c96f1f">armnn::profiling::ProfilingRelationshipType::LabelLink</a></div><div class="ttdoc">Head uses data of Tail. </div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_timeline_utility_methods_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml">armnn::profiling::TimelineUtilityMethods</a></div><div class="ttdef"><b>Definition:</b> <a href="_timeline_utility_methods_8hpp_source.xhtml#l00019">TimelineUtilityMethods.hpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_mock_buffer_manager_xhtml_ae717263b3243e9f88f4caea6d31b0652"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">armnn::profiling::MockBufferManager::MarkRead</a></div><div class="ttdeci">void MarkRead(IPacketBufferPtr &amp;packetBuffer) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00249">ProfilingMocks.hpp:249</a></div></div>
<div class="ttc" id="_profiling_test_utils_8cpp_xhtml_a2d7768e5e753dcc3212100a9949db533"><div class="ttname"><a href="_profiling_test_utils_8cpp.xhtml#a2d7768e5e753dcc3212100a9949db533">VerifyTimelineRelationshipBinaryPacketData</a></div><div class="ttdeci">void VerifyTimelineRelationshipBinaryPacketData(ProfilingRelationshipType relationshipType, Optional&lt; ProfilingGuid &gt; relationshipGuid, Optional&lt; ProfilingGuid &gt; headGuid, Optional&lt; ProfilingGuid &gt; tailGuid, Optional&lt; ProfilingGuid &gt; attributeGuid, const unsigned char *readableData, unsigned int &amp;offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_test_utils_8cpp_source.xhtml#l00175">ProfilingTestUtils.cpp:175</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_mock_buffer_manager_xhtml_abce8709dc1b666a26f427ba7ff08b737"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">armnn::profiling::MockBufferManager::GetReadableBuffer</a></div><div class="ttdeci">IPacketBufferPtr GetReadableBuffer() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00238">ProfilingMocks.hpp:238</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml">armnn::profiling</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00170">BackendId.hpp:170</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a6272d5d5e3a8afa0a402e9aafd19aedf"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a6272d5d5e3a8afa0a402e9aafd19aedf">armnn::profiling::ThreadIdSize</a></div><div class="ttdeci">constexpr unsigned int ThreadIdSize</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8hpp_source.xhtml#l00031">ProfilingUtils.hpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110">armnn::profiling::ProfilingRelationshipType::RetentionLink</a></div></div>
<div class="ttc" id="_profiling_test_utils_8cpp_xhtml_a6bd6e8ba2f989621f7348d2bb6ce13a4"><div class="ttname"><a href="_profiling_test_utils_8cpp.xhtml#a6bd6e8ba2f989621f7348d2bb6ce13a4">VerifyTimelineHeaderBinary</a></div><div class="ttdeci">void VerifyTimelineHeaderBinary(const unsigned char *readableData, unsigned int &amp;offset, uint32_t packetDataLength)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_test_utils_8cpp_source.xhtml#l00074">ProfilingTestUtils.cpp:74</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">armnn::profiling::ProfilingService</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8hpp_source.xhtml#l00050">ProfilingService.hpp:50</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="_timeline_utility_methods_8hpp_xhtml"><div class="ttname"><a href="_timeline_utility_methods_8hpp.xhtml">TimelineUtilityMethods.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_timeline_utility_methods_xhtml_a1c3dd40f5b8c4b878f783addf7d08e2f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml#a1c3dd40f5b8c4b878f783addf7d08e2f">armnn::profiling::TimelineUtilityMethods::SendWellKnownLabelsAndEventClasses</a></div><div class="ttdeci">static void SendWellKnownLabelsAndEventClasses(ISendTimelinePacket &amp;timelinePacket)</div><div class="ttdef"><b>Definition:</b> <a href="_timeline_utility_methods_8cpp_source.xhtml#l00033">TimelineUtilityMethods.cpp:33</a></div></div>
<div class="ttc" id="_profiling_test_utils_8hpp_xhtml"><div class="ttname"><a href="_profiling_test_utils_8hpp.xhtml">ProfilingTestUtils.hpp</a></div></div>
<div class="ttc" id="_profiling_test_utils_8cpp_xhtml_a6580407dea269ed62934d0fd909a2e08"><div class="ttname"><a href="_profiling_test_utils_8cpp.xhtml#a6580407dea269ed62934d0fd909a2e08">VerifyTimelineEventBinaryPacket</a></div><div class="ttdeci">ProfilingGuid VerifyTimelineEventBinaryPacket(Optional&lt; uint64_t &gt; timestamp, Optional&lt; int &gt; threadId, Optional&lt; ProfilingGuid &gt; eventGuid, const unsigned char *readableData, unsigned int &amp;offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_test_utils_8cpp_source.xhtml#l00303">ProfilingTestUtils.cpp:303</a></div></div>
<div class="ttc" id="_profiling_test_utils_8cpp_xhtml_adc7f226dc73412440c4588cf685fab40"><div class="ttname"><a href="_profiling_test_utils_8cpp.xhtml#adc7f226dc73412440c4588cf685fab40">VerifyTimelineLabelBinaryPacketData</a></div><div class="ttdeci">ProfilingGuid VerifyTimelineLabelBinaryPacketData(Optional&lt; ProfilingGuid &gt; guid, const std::string &amp;label, const unsigned char *readableData, unsigned int &amp;offset)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_test_utils_8cpp_source.xhtml#l00102">ProfilingTestUtils.cpp:102</a></div></div>
<div class="ttc" id="_profiling_mocks_8hpp_xhtml"><div class="ttname"><a href="_profiling_mocks_8hpp.xhtml">ProfilingMocks.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_send_timeline_packet_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_send_timeline_packet.xhtml">armnn::profiling::SendTimelinePacket</a></div><div class="ttdef"><b>Definition:</b> <a href="_send_timeline_packet_8hpp_source.xhtml#l00022">SendTimelinePacket.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_mock_buffer_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_mock_buffer_manager.xhtml">armnn::profiling::MockBufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00204">ProfilingMocks.hpp:204</a></div></div>
<div class="ttc" id="_profiling_service_8hpp_xhtml"><div class="ttname"><a href="_profiling_service_8hpp.xhtml">ProfilingService.hpp</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_637c692f14729569dd2eac0c18e2a54a.xhtml">profiling</a></li><li class="navelem"><a class="el" href="dir_6b1198f6e738611120ec65b09506d2f8.xhtml">test</a></li><li class="navelem"><a class="el" href="_timeline_utility_methods_tests_8cpp.xhtml">TimelineUtilityMethodsTests.cpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:36 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
