<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/test/RefDetectionPostProcessTests.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_ref_detection_post_process_tests_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">RefDetectionPostProcessTests.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_ref_detection_post_process_tests_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_detection_post_process_8hpp.xhtml">reference/workloads/DetectionPostProcess.hpp</a>&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_descriptors_8hpp.xhtml">armnn/Descriptors.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_8hpp.xhtml">armnn/Types.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;doctest/doctest.h&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="_ref_detection_post_process_tests_8cpp.xhtml#a435fa425ac6efa6695dbdf04831b3668">   13</a></span>&#160;<a class="code" href="_ref_detection_post_process_tests_8cpp.xhtml#a435fa425ac6efa6695dbdf04831b3668">TEST_SUITE</a>(<span class="stringliteral">&quot;RefDetectionPostProcess&quot;</span>)</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;TEST_CASE(<span class="stringliteral">&quot;TopKSortTest&quot;</span>)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k = 3;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> indices[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordtype">float</span> values[8] = { 0, 7, 6, 5, 4, 3, 2, 500 };</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">armnn::TopKSort</a>(k, indices, values, 8);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    CHECK(indices[0] == 7);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    CHECK(indices[1] == 1);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    CHECK(indices[2] == 2);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;}</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;TEST_CASE(<span class="stringliteral">&quot;FullTopKSortTest&quot;</span>)</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k = 8;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> indices[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordtype">float</span> values[8] = { 0, 7, 6, 5, 4, 3, 2, 500 };</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">armnn::TopKSort</a>(k, indices, values, 8);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    CHECK(indices[0] == 7);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    CHECK(indices[1] == 1);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    CHECK(indices[2] == 2);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    CHECK(indices[3] == 3);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    CHECK(indices[4] == 4);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    CHECK(indices[5] == 5);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    CHECK(indices[6] == 6);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    CHECK(indices[7] == 0);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;TEST_CASE(<span class="stringliteral">&quot;IouTest&quot;</span>)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">float</span> boxI[4] = { 0.0f, 0.0f, 10.0f, 10.0f };</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">float</span> boxJ[4] = { 1.0f, 1.0f, 11.0f, 11.0f };</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordtype">float</span> iou = <a class="code" href="namespacearmnn.xhtml#abf6aad7bc221f8ad22b4d99cd020373b">armnn::IntersectionOverUnion</a>(boxI, boxJ);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    CHECK(iou == doctest::Approx(0.68).epsilon(0.001f));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;TEST_CASE(<span class="stringliteral">&quot;NmsFunction&quot;</span>)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    std::vector&lt;float&gt; boxCorners({</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        0.0f, 0.0f, 1.0f, 1.0f,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        0.0f, 0.1f, 1.0f, 1.1f,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        0.0f, -0.1f, 1.0f, 0.9f,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        0.0f, 10.0f, 1.0f, 11.0f,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        0.0f, 10.1f, 1.0f, 11.1f,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        0.0f, 100.0f, 1.0f, 101.0f</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    });</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    std::vector&lt;float&gt; scores({ 0.9f, 0.75f, 0.6f, 0.93f, 0.5f, 0.3f });</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::vector&lt;unsigned int&gt; result =</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ac8c641d4a69c9a85c487cfbc7ea4d73c">armnn::NonMaxSuppression</a>(6, boxCorners, scores, 0.0, 3, 0.5);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    CHECK(result.size() == 3);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    CHECK(result[0] == 3);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    CHECK(result[1] == 0);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    CHECK(result[2] == 5);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keywordtype">void</span> DetectionPostProcessTestImpl(<span class="keywordtype">bool</span> useRegularNms,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                  <span class="keyword">const</span> std::vector&lt;float&gt;&amp; expectedDetectionBoxes,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                  <span class="keyword">const</span> std::vector&lt;float&gt;&amp; expectedDetectionClasses,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                  <span class="keyword">const</span> std::vector&lt;float&gt;&amp; expectedDetectionScores,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                  <span class="keyword">const</span> std::vector&lt;float&gt;&amp; expectedNumDetections)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> boxEncodingsInfo({ 1, 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> scoresInfo({ 1, 6, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> anchorsInfo({ 6, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionBoxesInfo({ 1, 3, 4 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionScoresInfo({ 1, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionClassesInfo({ 1, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> numDetectionInfo({ 1 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a> desc;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">m_UseRegularNms</a> = useRegularNms;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    desc.m_MaxDetections = 3;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    desc.m_MaxClassesPerDetection = 1;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    desc.m_DetectionsPerClass =1;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    desc.m_NmsScoreThreshold = 0.0;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    desc.m_NmsIouThreshold = 0.5;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    desc.m_NumClasses = 2;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    desc.m_ScaleY = 10.0;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    desc.m_ScaleX = 10.0;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    desc.m_ScaleH = 5.0;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    desc.m_ScaleW = 5.0;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    std::vector&lt;float&gt; boxEncodings({</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        0.0f, -1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        0.0f, 1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    });</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::vector&lt;float&gt; scores({</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        0.0f, 0.9f, 0.8f,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        0.0f, 0.75f, 0.72f,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        0.0f, 0.6f, 0.5f,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        0.0f, 0.93f, 0.95f,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        0.0f, 0.5f, 0.4f,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        0.0f, 0.3f, 0.2f</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    });</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    std::vector&lt;float&gt; anchors({</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        0.5f, 0.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        0.5f, 10.5f, 1.0f, 1.0f,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        0.5f, 100.5f, 1.0f, 1.0f</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    });</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">auto</span> boxEncodingsDecoder = armnn::MakeDecoder&lt;float&gt;(boxEncodingsInfo, boxEncodings.data());</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">auto</span> scoresDecoder       = armnn::MakeDecoder&lt;float&gt;(scoresInfo, scores.data());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">auto</span> anchorsDecoder      = armnn::MakeDecoder&lt;float&gt;(anchorsInfo, anchors.data());</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::vector&lt;float&gt; detectionBoxes(detectionBoxesInfo.GetNumElements());</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    std::vector&lt;float&gt; detectionScores(detectionScoresInfo.GetNumElements());</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    std::vector&lt;float&gt; detectionClasses(detectionClassesInfo.GetNumElements());</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    std::vector&lt;float&gt; numDetections(1);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ae76ce23fa9fc18e56448d52b37dd3f32">armnn::DetectionPostProcess</a>(boxEncodingsInfo,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                scoresInfo,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                anchorsInfo,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                detectionBoxesInfo,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                detectionClassesInfo,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                detectionScoresInfo,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                numDetectionInfo,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                desc,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                *boxEncodingsDecoder,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                *scoresDecoder,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                *anchorsDecoder,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                detectionBoxes.data(),</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                detectionClasses.data(),</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                detectionScores.data(),</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                numDetections.data());</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    CHECK(std::equal(detectionBoxes.begin(),</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                  detectionBoxes.end(),</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                  expectedDetectionBoxes.begin(),</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                  expectedDetectionBoxes.end()));</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    CHECK(std::equal(detectionScores.begin(), detectionScores.end(),</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        expectedDetectionScores.begin(), expectedDetectionScores.end()));</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    CHECK(std::equal(detectionClasses.begin(), detectionClasses.end(),</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        expectedDetectionClasses.begin(), expectedDetectionClasses.end()));</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    CHECK(std::equal(numDetections.begin(), numDetections.end(),</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        expectedNumDetections.begin(), expectedNumDetections.end()));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;TEST_CASE(<span class="stringliteral">&quot;RegularNmsDetectionPostProcess&quot;</span>)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    std::vector&lt;float&gt; expectedDetectionBoxes({</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        0.0f, 10.0f, 1.0f, 11.0f,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        0.0f, 10.0f, 1.0f, 11.0f,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        0.0f, 0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    });</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    std::vector&lt;float&gt; expectedDetectionScores({ 0.95f, 0.93f, 0.0f });</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    std::vector&lt;float&gt; expectedDetectionClasses({ 1.0f, 0.0f, 0.0f });</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    std::vector&lt;float&gt; expectedNumDetections({ 2.0f });</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    DetectionPostProcessTestImpl(<span class="keyword">true</span>, expectedDetectionBoxes, expectedDetectionClasses,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                 expectedDetectionScores, expectedNumDetections);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;TEST_CASE(<span class="stringliteral">&quot;FastNmsDetectionPostProcess&quot;</span>)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    std::vector&lt;float&gt; expectedDetectionBoxes({</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        0.0f, 10.0f, 1.0f, 11.0f,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        0.0f, 0.0f, 1.0f, 1.0f,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        0.0f, 100.0f, 1.0f, 101.0f</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    });</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    std::vector&lt;float&gt; expectedDetectionScores({ 0.95f, 0.9f, 0.3f });</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    std::vector&lt;float&gt; expectedDetectionClasses({ 1.0f, 0.0f, 0.0f });</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    std::vector&lt;float&gt; expectedNumDetections({ 3.0f });</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    DetectionPostProcessTestImpl(<span class="keyword">false</span>, expectedDetectionBoxes, expectedDetectionClasses,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                 expectedDetectionScores, expectedNumDetections);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_abf6aad7bc221f8ad22b4d99cd020373b"><div class="ttname"><a href="namespacearmnn.xhtml#abf6aad7bc221f8ad22b4d99cd020373b">armnn::IntersectionOverUnion</a></div><div class="ttdeci">float IntersectionOverUnion(const float *boxI, const float *boxJ)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00030">DetectionPostProcess.cpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae76ce23fa9fc18e56448d52b37dd3f32"><div class="ttname"><a href="namespacearmnn.xhtml#ae76ce23fa9fc18e56448d52b37dd3f32">armnn::DetectionPostProcess</a></div><div class="ttdeci">void DetectionPostProcess(const TensorInfo &amp;boxEncodingsInfo, const TensorInfo &amp;scoresInfo, const TensorInfo &amp;anchorsInfo, const TensorInfo &amp;detectionBoxesInfo, const TensorInfo &amp;detectionClassesInfo, const TensorInfo &amp;detectionScoresInfo, const TensorInfo &amp;numDetectionsInfo, const DetectionPostProcessDescriptor &amp;desc, Decoder&lt; float &gt; &amp;boxEncodings, Decoder&lt; float &gt; &amp;scores, Decoder&lt; float &gt; &amp;anchors, float *detectionBoxes, float *detectionClasses, float *detectionScores, float *numDetections)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00140">DetectionPostProcess.cpp:140</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml"><div class="ttname"><a href="_types_8hpp.xhtml">Types.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2748f45e58b1c612d473043f711d1434"><div class="ttname"><a href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">armnn::TopKSort</a></div><div class="ttdeci">void TopKSort(unsigned int k, unsigned int *indices, const float *values, unsigned int numElement)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00024">DetectionPostProcess.cpp:24</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7ed9bc7c26df67d274d5dd4cd83adf0f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">armnn::DetectionPostProcessDescriptor::m_UseRegularNms</a></div><div class="ttdeci">bool m_UseRegularNms</div><div class="ttdoc">Use Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00717">Descriptors.hpp:717</a></div></div>
<div class="ttc" id="_descriptors_8hpp_xhtml"><div class="ttname"><a href="_descriptors_8hpp.xhtml">Descriptors.hpp</a></div></div>
<div class="ttc" id="_ref_detection_post_process_tests_8cpp_xhtml_a435fa425ac6efa6695dbdf04831b3668"><div class="ttname"><a href="_ref_detection_post_process_tests_8cpp.xhtml#a435fa425ac6efa6695dbdf04831b3668">TEST_SUITE</a></div><div class="ttdeci">TEST_SUITE(&quot;RefDetectionPostProcess&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_detection_post_process_tests_8cpp_source.xhtml#l00013">RefDetectionPostProcessTests.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac8c641d4a69c9a85c487cfbc7ea4d73c"><div class="ttname"><a href="namespacearmnn.xhtml#ac8c641d4a69c9a85c487cfbc7ea4d73c">armnn::NonMaxSuppression</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; NonMaxSuppression(unsigned int numBoxes, const std::vector&lt; float &gt; &amp;boxCorners, const std::vector&lt; float &gt; &amp;scores, float nmsScoreThreshold, unsigned int maxDetection, float nmsIouThreshold)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00049">DetectionPostProcess.cpp:49</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="_detection_post_process_8hpp_xhtml"><div class="ttname"><a href="_detection_post_process_8hpp.xhtml">DetectionPostProcess.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00673">Descriptors.hpp:673</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_820f114a135ae891c13c0cafd2ecf138.xhtml">test</a></li><li class="navelem"><a class="el" href="_ref_detection_post_process_tests_8cpp.xhtml">RefDetectionPostProcessTests.cpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:00:59 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
