<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: DynamicBackendUtils Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarmnn_1_1_dynamic_backend_utils.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="classarmnn_1_1_dynamic_backend_utils-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">DynamicBackendUtils Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_dynamic_backend_utils_8hpp_source.xhtml">DynamicBackendUtils.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aed6d54e3299851dea74d4175d28ddb87"><td class="memItemLeft" align="right" valign="top">static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">OpenHandle</a> (const std::string &amp;sharedObjectPath)</td></tr>
<tr class="separator:aed6d54e3299851dea74d4175d28ddb87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebd30d283660a07b4123fdb0245e8426"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aebd30d283660a07b4123fdb0245e8426">CloseHandle</a> (const void *sharedObjectHandle)</td></tr>
<tr class="separator:aebd30d283660a07b4123fdb0245e8426"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3964c90252556ffae5242cc6a69d8b3c"><td class="memTemplParams" colspan="2">template&lt;typename EntryPointType &gt; </td></tr>
<tr class="memitem:a3964c90252556ffae5242cc6a69d8b3c"><td class="memTemplItemLeft" align="right" valign="top">static EntryPointType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a3964c90252556ffae5242cc6a69d8b3c">GetEntryPoint</a> (const void *sharedObjectHandle, const char *symbolName)</td></tr>
<tr class="separator:a3964c90252556ffae5242cc6a69d8b3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6789076aa25c6a10faeff1043359bda8"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a6789076aa25c6a10faeff1043359bda8">IsBackendCompatible</a> (const <a class="el" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> &amp;backendVersion)</td></tr>
<tr class="separator:a6789076aa25c6a10faeff1043359bda8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d47980f97dd4d3aab24d818f8474dce"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a6d47980f97dd4d3aab24d818f8474dce">GetBackendPaths</a> (const std::string &amp;overrideBackendPath=&quot;&quot;)</td></tr>
<tr class="separator:a6d47980f97dd4d3aab24d818f8474dce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30619dd4b86da204cb47530f40e175db"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a30619dd4b86da204cb47530f40e175db">IsPathValid</a> (const std::string &amp;path)</td></tr>
<tr class="separator:a30619dd4b86da204cb47530f40e175db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48e1fb944c3ef4086365aedcadb4c311"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a48e1fb944c3ef4086365aedcadb4c311">GetSharedObjects</a> (const std::vector&lt; std::string &gt; &amp;backendPaths)</td></tr>
<tr class="separator:a48e1fb944c3ef4086365aedcadb4c311"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42e250dfa19b9df3abdb273e1d35fa5b"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a42e250dfa19b9df3abdb273e1d35fa5b">CreateDynamicBackends</a> (const std::vector&lt; std::string &gt; &amp;sharedObjects)</td></tr>
<tr class="separator:a42e250dfa19b9df3abdb273e1d35fa5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55415a62bbb0a72c1a2f333501989401"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a55415a62bbb0a72c1a2f333501989401">RegisterDynamicBackends</a> (const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> &gt; &amp;dynamicBackends)</td></tr>
<tr class="separator:a55415a62bbb0a72c1a2f333501989401"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e786263f454b19c40b78c4092a4af5b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a7e786263f454b19c40b78c4092a4af5b">DeregisterDynamicBackends</a> (const <a class="el" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> &amp;dynamicBackends)</td></tr>
<tr class="separator:a7e786263f454b19c40b78c4092a4af5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr class="memitem:aafeb709b667b8554e43d2212b7d46e48"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aafeb709b667b8554e43d2212b7d46e48">IsBackendCompatibleImpl</a> (const <a class="el" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> &amp;backendApiVersion, const <a class="el" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> &amp;backendVersion)</td></tr>
<tr class="memdesc:aafeb709b667b8554e43d2212b7d46e48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Protected methods for testing purposes.  <a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aafeb709b667b8554e43d2212b7d46e48">More...</a><br /></td></tr>
<tr class="separator:aafeb709b667b8554e43d2212b7d46e48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d8cade961d9ea50a19a382c974d1ce5"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a5d8cade961d9ea50a19a382c974d1ce5">GetBackendPathsImpl</a> (const std::string &amp;backendPaths)</td></tr>
<tr class="separator:a5d8cade961d9ea50a19a382c974d1ce5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb6f50f10cdce40bd5493d42930b58cb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml#adb6f50f10cdce40bd5493d42930b58cb">RegisterDynamicBackendsImpl</a> (<a class="el" href="classarmnn_1_1_backend_registry.xhtml">BackendRegistry</a> &amp;backendRegistry, const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> &gt; &amp;dynamicBackends)</td></tr>
<tr class="separator:adb6f50f10cdce40bd5493d42930b58cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8hpp_source.xhtml#l00028">28</a> of file <a class="el" href="_dynamic_backend_utils_8hpp_source.xhtml">DynamicBackendUtils.hpp</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="aebd30d283660a07b4123fdb0245e8426"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebd30d283660a07b4123fdb0245e8426">&#9670;&nbsp;</a></span>CloseHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CloseHandle </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>sharedObjectHandle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#if defined(__unix__) || defined(__APPLE__)</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">if</span> (!sharedObjectHandle)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    dlclose(<span class="keyword">const_cast&lt;</span><span class="keywordtype">void</span>*<span class="keyword">&gt;</span>(sharedObjectHandle));</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(sharedObjectHandle);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">throw</span> RuntimeException(<span class="stringliteral">&quot;Dynamic backends not supported on this platform&quot;</span>);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

</div>
</div>
<a id="a42e250dfa19b9df3abdb273e1d35fa5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42e250dfa19b9df3abdb273e1d35fa5b">&#9670;&nbsp;</a></span>CreateDynamicBackends()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> &gt; CreateDynamicBackends </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>sharedObjects</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00269">269</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="comment">// Create a list of dynamic backends</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    std::vector&lt;DynamicBackendPtr&gt; dynamicBackends;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; sharedObject : sharedObjects)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="comment">// Create a handle to the shared object</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordtype">void</span>* sharedObjectHandle = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">try</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            sharedObjectHandle = <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">DynamicBackendUtils::OpenHandle</a>(sharedObject);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> RuntimeException&amp; e)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Cannot create a handle to the shared object file \&quot;&quot;</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                               &lt;&lt; sharedObject &lt;&lt; <span class="stringliteral">&quot;\&quot;: &quot;</span> &lt;&lt; e.what();</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">if</span> (!sharedObjectHandle)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Invalid handle to the shared object file \&quot;&quot;</span> &lt;&lt; sharedObject &lt;&lt; <span class="stringliteral">&quot;\&quot;&quot;</span>;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="comment">// Create a dynamic backend object</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> dynamicBackend;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordflow">try</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            dynamicBackend.reset(<span class="keyword">new</span> DynamicBackend(sharedObjectHandle));</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> Exception&amp; e)</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Cannot create a valid dynamic backend from the shared object file \&quot;&quot;</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                               &lt;&lt; sharedObject &lt;&lt; <span class="stringliteral">&quot;\&quot;: &quot;</span> &lt;&lt; e.what();</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keywordflow">if</span> (!dynamicBackend)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Invalid dynamic backend object for the shared object file \&quot;&quot;</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                               &lt;&lt; sharedObject &lt;&lt; <span class="stringliteral">&quot;\&quot;&quot;</span>;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        }</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="comment">// Append the newly created dynamic backend to the list</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        dynamicBackends.push_back(std::move(dynamicBackend));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">return</span> dynamicBackends;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00212">ARMNN_LOG</a>, <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils::OpenHandle()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::warning</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>

</div>
</div>
<a id="a7e786263f454b19c40b78c4092a4af5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e786263f454b19c40b78c4092a4af5b">&#9670;&nbsp;</a></span>DeregisterDynamicBackends()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DeregisterDynamicBackends </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> &amp;&#160;</td>
          <td class="paramname"><em>dynamicBackends</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00320">320</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">// Get a reference of the backend registry</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    BackendRegistry&amp; backendRegistry = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>();</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; <span class="keywordtype">id</span> : dynamicBackends)</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    {</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        backendRegistry.Deregister(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    }</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00015">armnn::BackendRegistryInstance()</a>, and <a class="el" href="_backend_registry_8cpp_source.xhtml#l00041">BackendRegistry::Deregister()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00323">RuntimeImpl::RuntimeImpl()</a>, and <a class="el" href="_runtime_8cpp_source.xhtml#l00548">RuntimeImpl::~RuntimeImpl()</a>.</p>

</div>
</div>
<a id="a6d47980f97dd4d3aab24d818f8474dce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d47980f97dd4d3aab24d818f8474dce">&#9670;&nbsp;</a></span>GetBackendPaths()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetBackendPaths </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>overrideBackendPath</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00081">81</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// Check if a path where to dynamically load the backends from is given</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">if</span> (!overrideBackendPath.empty())</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a30619dd4b86da204cb47530f40e175db">IsPathValid</a>(overrideBackendPath))</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;WARNING: The given override path for dynamic backends \&quot;&quot;</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                               &lt;&lt; overrideBackendPath &lt;&lt; <span class="stringliteral">&quot;\&quot; is not valid&quot;</span>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">return</span> std::vector&lt;std::string&gt;{ overrideBackendPath };</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Expects a colon-separated list: DYNAMIC_BACKEND_PATHS=&quot;PATH_1:PATH_2:...:PATH_N&quot;</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> std::string backendPaths = <a class="code" href="_dynamic_backend_utils_8hpp.xhtml#a6100170f71dc5f7f2558234843db82b3">DYNAMIC_BACKEND_PATHS</a>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a5d8cade961d9ea50a19a382c974d1ce5">GetBackendPathsImpl</a>(backendPaths);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00212">ARMNN_LOG</a>, <a class="el" href="_dynamic_backend_utils_8hpp_source.xhtml#l00022">DYNAMIC_BACKEND_PATHS</a>, <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00103">DynamicBackendUtils::GetBackendPathsImpl()</a>, <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00145">DynamicBackendUtils::IsPathValid()</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::warning</a>.</p>

</div>
</div>
<a id="a5d8cade961d9ea50a19a382c974d1ce5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d8cade961d9ea50a19a382c974d1ce5">&#9670;&nbsp;</a></span>GetBackendPathsImpl()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetBackendPathsImpl </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>backendPaths</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00103">103</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">// Check if there&#39;s any path to process at all</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">if</span> (backendPaths.empty())</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// Silently return without issuing a warning as no paths have been passed, so</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="comment">// the whole dynamic backend loading feature can be considered as disabled</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    std::unordered_set&lt;std::string&gt; uniqueBackendPaths;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    std::vector&lt;std::string&gt; validBackendPaths;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// Split the given list of paths</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    std::vector&lt;std::string&gt; tempBackendPaths = <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a25545ea8edf6a26c00077b01294beac5">armnn::stringUtils::StringTokenizer</a>(backendPaths, <span class="stringliteral">&quot;:&quot;</span>);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; path : tempBackendPaths)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="comment">// Check whether the path is valid</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a30619dd4b86da204cb47530f40e175db">IsPathValid</a>(path))</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="comment">// Check whether the path is a duplicate</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keyword">auto</span> it = uniqueBackendPaths.find(path);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">if</span> (it != uniqueBackendPaths.end())</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="comment">// The path is a duplicate</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="comment">// Add the path to the set of unique paths</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        uniqueBackendPaths.insert(path);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">// Add the path to the list of valid paths</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        validBackendPaths.push_back(path);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">return</span> validBackendPaths;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00145">DynamicBackendUtils::IsPathValid()</a>, and <a class="el" href="_string_utils_8hpp_source.xhtml#l00023">armnn::stringUtils::StringTokenizer()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00081">DynamicBackendUtils::GetBackendPaths()</a>.</p>

</div>
</div>
<a id="a3964c90252556ffae5242cc6a69d8b3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3964c90252556ffae5242cc6a69d8b3c">&#9670;&nbsp;</a></span>GetEntryPoint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">EntryPointType GetEntryPoint </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>sharedObjectHandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>symbolName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8hpp_source.xhtml#l00062">62</a> of file <a class="el" href="_dynamic_backend_utils_8hpp_source.xhtml">DynamicBackendUtils.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#if defined(__unix__) || defined(__APPLE__)</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">if</span> (sharedObjectHandle == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">throw</span> RuntimeException(<span class="stringliteral">&quot;GetEntryPoint error: invalid handle&quot;</span>);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">if</span> (symbolName == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">throw</span> RuntimeException(<span class="stringliteral">&quot;GetEntryPoint error: invalid symbol&quot;</span>);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">auto</span> entryPoint = <span class="keyword">reinterpret_cast&lt;</span>EntryPointType<span class="keyword">&gt;</span>(dlsym(<span class="keyword">const_cast&lt;</span><span class="keywordtype">void</span>*<span class="keyword">&gt;</span>(sharedObjectHandle), symbolName));</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span> (!entryPoint)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">throw</span> RuntimeException(fmt::format(<span class="stringliteral">&quot;GetEntryPoint error: {}&quot;</span>, GetDlError()));</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> entryPoint;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(sharedObjectHandle);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(symbolName);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">throw</span> RuntimeException(<span class="stringliteral">&quot;Dynamic backends not supported on this platform&quot;</span>);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

</div>
</div>
<a id="a48e1fb944c3ef4086365aedcadb4c311"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48e1fb944c3ef4086365aedcadb4c311">&#9670;&nbsp;</a></span>GetSharedObjects()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSharedObjects </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>backendPaths</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00178">178</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;{</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    std::unordered_set&lt;std::string&gt; uniqueSharedObjects;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    std::vector&lt;std::string&gt; sharedObjects;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">#if !defined(ARMNN_DISABLE_FILESYSTEM)</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; backendPath : backendPaths)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keyword">using namespace </span>fs;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">// Check if the path is valid. In case of error, IsValidPath will log an error message</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a30619dd4b86da204cb47530f40e175db">IsPathValid</a>(backendPath))</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="comment">// Get all the files in the current path in alphabetical order</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        std::vector&lt;path&gt; backendPathFiles;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        std::copy(directory_iterator(backendPath), directory_iterator(), std::back_inserter(backendPathFiles));</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        std::sort(backendPathFiles.begin(), backendPathFiles.end());</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="comment">// Go through all the files in the current backend path</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> path&amp; backendPathFile : backendPathFiles)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="comment">// Get only the name of the file (without the full path)</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            std::string filename = backendPathFile.filename().string();</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">if</span> (filename.empty())</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="comment">// Empty filename</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            path canonicalPath;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">try</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="comment">// Get the canonical path for the current file, it will throw if for example the file is a</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="comment">// symlink that cannot be resolved</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                canonicalPath = canonical(backendPathFile);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="keywordflow">catch</span> (<span class="keyword">const</span> filesystem_error&amp; e)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;GetSharedObjects warning: &quot;</span> &lt;&lt; e.what();</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="keywordflow">if</span> (canonicalPath.empty())</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                <span class="comment">// No such file or perhaps a symlink that couldn&#39;t be resolved</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="comment">// Check if the current filename matches the expected naming convention</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="comment">// The expected format is: &lt;vendor&gt;_&lt;name&gt;_backend.so[&lt;version&gt;]</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="comment">// e.g. &quot;Arm_GpuAcc_backend.so&quot; or &quot;Arm_GpuAcc_backend.so.1.2&quot;</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <span class="keyword">const</span> std::regex dynamicBackendRegex(<span class="stringliteral">&quot;^[a-zA-Z0-9]+_[a-zA-Z0-9]+_backend.so(\\.[0-9]+)*$&quot;</span>);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keywordtype">bool</span> filenameMatch = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">try</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                <span class="comment">// Match the filename to the expected naming scheme</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                filenameMatch = std::regex_match(filename, dynamicBackendRegex);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;GetSharedObjects warning: &quot;</span> &lt;&lt; e.what();</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keywordflow">if</span> (!filenameMatch)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="comment">// Filename does not match the expected naming scheme (or an error has occurred)</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="comment">// Append the valid canonical path to the output list only if it&#39;s not a duplicate</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            std::string validCanonicalPath = canonicalPath.string();</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <span class="keyword">auto</span> it = uniqueSharedObjects.find(validCanonicalPath);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="keywordflow">if</span> (it == uniqueSharedObjects.end())</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                <span class="comment">// Not a duplicate, append the canonical path to the output list</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                sharedObjects.push_back(validCanonicalPath);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                <span class="comment">// Add the canonical path to the collection of unique shared objects</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                uniqueSharedObjects.insert(validCanonicalPath);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(backendPaths);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">#endif // !defined(ARMNN_DISABLE_FILESYSTEM)</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">return</span> sharedObjects;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00212">ARMNN_LOG</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00145">DynamicBackendUtils::IsPathValid()</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::warning</a>.</p>

</div>
</div>
<a id="a6789076aa25c6a10faeff1043359bda8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6789076aa25c6a10faeff1043359bda8">&#9670;&nbsp;</a></span>IsBackendCompatible()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBackendCompatible </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> &amp;&#160;</td>
          <td class="paramname"><em>backendVersion</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    BackendVersion backendApiVersion = <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a878b8f50d8a2f92ed624803e9f6968ae">IBackendInternal::GetApiVersion</a>();</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#aafeb709b667b8554e43d2212b7d46e48">IsBackendCompatibleImpl</a>(backendApiVersion, backendVersion);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_backend_internal_8hpp_source.xhtml#l00167">IBackendInternal::GetApiVersion()</a>, and <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00059">DynamicBackendUtils::IsBackendCompatibleImpl()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_8cpp_source.xhtml#l00012">DynamicBackend::DynamicBackend()</a>.</p>

</div>
</div>
<a id="aafeb709b667b8554e43d2212b7d46e48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafeb709b667b8554e43d2212b7d46e48">&#9670;&nbsp;</a></span>IsBackendCompatibleImpl()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBackendCompatibleImpl </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> &amp;&#160;</td>
          <td class="paramname"><em>backendApiVersion</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> &amp;&#160;</td>
          <td class="paramname"><em>backendVersion</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Protected methods for testing purposes. </p>

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00059">59</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span> backendVersion.m_Major == backendApiVersion.m_Major &amp;&amp;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;           backendVersion.m_Minor &lt;= backendApiVersion.m_Minor;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_backend_internal_8hpp_source.xhtml#l00036">BackendVersion::m_Major</a>, and <a class="el" href="_i_backend_internal_8hpp_source.xhtml#l00037">BackendVersion::m_Minor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00052">DynamicBackendUtils::IsBackendCompatible()</a>.</p>

</div>
</div>
<a id="a30619dd4b86da204cb47530f40e175db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30619dd4b86da204cb47530f40e175db">&#9670;&nbsp;</a></span>IsPathValid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPathValid </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00145">145</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">if</span> (path.empty())</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;WARNING: The given backend path is empty&quot;</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#if !defined(ARMNN_DISABLE_FILESYSTEM)</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    fs::path fsPath(path);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(fsPath))</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;WARNING: The given backend path \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="stringliteral">&quot;\&quot; does not exist&quot;</span>;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">if</span> (!fs::is_directory(fsPath))</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;WARNING: The given backend path \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="stringliteral">&quot;\&quot; is not a directory&quot;</span>;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span> (!fsPath.is_absolute())</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;WARNING: The given backend path \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="stringliteral">&quot;\&quot; is not absolute&quot;</span>;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor">#endif // !defined(ARMNN_DISABLE_FILESYSTEM)</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00212">ARMNN_LOG</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::warning</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00081">DynamicBackendUtils::GetBackendPaths()</a>, <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00103">DynamicBackendUtils::GetBackendPathsImpl()</a>, and <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00178">DynamicBackendUtils::GetSharedObjects()</a>.</p>

</div>
</div>
<a id="aed6d54e3299851dea74d4175d28ddb87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed6d54e3299851dea74d4175d28ddb87">&#9670;&nbsp;</a></span>OpenHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void * OpenHandle </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>sharedObjectPath</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">16</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#if defined(__unix__) || defined(__APPLE__)</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordflow">if</span> (sharedObjectPath.empty())</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    {</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        <span class="keywordflow">throw</span> RuntimeException(<span class="stringliteral">&quot;OpenHandle error: shared object path must not be empty&quot;</span>);</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    }</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keywordtype">void</span>* sharedObjectHandle = dlopen(sharedObjectPath.c_str(), RTLD_LAZY);</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">if</span> (!sharedObjectHandle)</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    {</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keywordflow">throw</span> RuntimeException(fmt::format(<span class="stringliteral">&quot;OpenHandle error: {}&quot;</span>, GetDlError()));</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    }</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">return</span> sharedObjectHandle;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(sharedObjectPath);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">throw</span> RuntimeException(<span class="stringliteral">&quot;Dynamic backends not supported on this platform&quot;</span>);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00269">DynamicBackendUtils::CreateDynamicBackends()</a>.</p>

</div>
</div>
<a id="a55415a62bbb0a72c1a2f333501989401"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55415a62bbb0a72c1a2f333501989401">&#9670;&nbsp;</a></span>RegisterDynamicBackends()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> RegisterDynamicBackends </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>dynamicBackends</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00332">332</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="comment">// Get a reference of the backend registry</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    BackendRegistry&amp; backendRegistry = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>();</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="comment">// Register the dynamic backends in the backend registry, and return a list of registered backend ids</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#adb6f50f10cdce40bd5493d42930b58cb">RegisterDynamicBackendsImpl</a>(backendRegistry, dynamicBackends);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00015">armnn::BackendRegistryInstance()</a>, and <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00341">DynamicBackendUtils::RegisterDynamicBackendsImpl()</a>.</p>

</div>
</div>
<a id="adb6f50f10cdce40bd5493d42930b58cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb6f50f10cdce40bd5493d42930b58cb">&#9670;&nbsp;</a></span>RegisterDynamicBackendsImpl()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> RegisterDynamicBackendsImpl </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_backend_registry.xhtml">BackendRegistry</a> &amp;&#160;</td>
          <td class="paramname"><em>backendRegistry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>dynamicBackends</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00341">341</a> of file <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="comment">// Initialize the list of registered backend ids</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> registeredBackendIds;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">// Register the dynamic backends in the backend registry</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">DynamicBackendPtr</a>&amp; dynamicBackend : dynamicBackends)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="comment">// Get the id of the dynamic backend</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        BackendId dynamicBackendId;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">try</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        {</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            dynamicBackendId = dynamicBackend-&gt;GetBackendId();</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> RuntimeException&amp; e)</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Cannot register dynamic backend, &quot;</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot;an error has occurred when getting the backend id: &quot;</span> &lt;&lt; e.what();</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">if</span> (dynamicBackendId.IsEmpty() ||</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            dynamicBackendId.IsUndefined())</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Cannot register dynamic backend, invalid backend id: &quot;</span> &lt;&lt; dynamicBackendId;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        }</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160; </div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="comment">// Check whether the dynamic backend is already registered</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keywordtype">bool</span> backendAlreadyRegistered = backendRegistry.IsBackendRegistered(dynamicBackendId);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="keywordflow">if</span> (backendAlreadyRegistered)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Cannot register dynamic backend \&quot;&quot;</span> &lt;&lt; dynamicBackendId</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot;\&quot;: backend already registered&quot;</span>;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160; </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="comment">// Get the dynamic backend factory function</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <a class="code" href="classarmnn_1_1_backend_registry.xhtml#aa33ac375677ee8436456a585dd6f68d9">BackendRegistry::FactoryFunction</a> dynamicBackendFactoryFunction = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="keywordflow">try</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            dynamicBackendFactoryFunction = dynamicBackend-&gt;GetFactoryFunction();</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        }</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> RuntimeException&amp; e)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Cannot register dynamic backend \&quot;&quot;</span> &lt;&lt; dynamicBackendId</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot;\&quot;: an error has occurred when getting the backend factory function: &quot;</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                               &lt;&lt; e.what();</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keywordflow">if</span> (dynamicBackendFactoryFunction == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Cannot register dynamic backend \&quot;&quot;</span> &lt;&lt; dynamicBackendId</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                               &lt;&lt; <span class="stringliteral">&quot;\&quot;: invalid backend factory function&quot;</span>;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="comment">// Register the dynamic backend</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordflow">try</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        {</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            backendRegistry.Register(dynamicBackendId, dynamicBackendFactoryFunction);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> InvalidArgumentException&amp; e)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;An error has occurred when registering the dynamic backend \&quot;&quot;</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                               &lt;&lt; dynamicBackendId &lt;&lt; <span class="stringliteral">&quot;\&quot;: &quot;</span> &lt;&lt; e.what();</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        }</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160; </div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="comment">// Add the id of the dynamic backend just registered to the list of registered backend ids</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        registeredBackendIds.insert(dynamicBackendId);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160; </div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordflow">return</span> registeredBackendIds;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00212">ARMNN_LOG</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00052">BackendRegistry::IsBackendRegistered()</a>, <a class="el" href="_backend_id_8hpp_source.xhtml#l00140">BackendId::IsEmpty()</a>, <a class="el" href="_backend_id_8hpp_source.xhtml#l00141">BackendId::IsUndefined()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00021">BackendRegistry::Register()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::warning</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml#l00332">DynamicBackendUtils::RegisterDynamicBackends()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/backendsCommon/<a class="el" href="_dynamic_backend_utils_8hpp_source.xhtml">DynamicBackendUtils.hpp</a></li>
<li>src/backends/backendsCommon/<a class="el" href="_dynamic_backend_utils_8cpp_source.xhtml">DynamicBackendUtils.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarmnn_1_1_dynamic_backend_utils_xhtml_aed6d54e3299851dea74d4175d28ddb87"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aed6d54e3299851dea74d4175d28ddb87">armnn::DynamicBackendUtils::OpenHandle</a></div><div class="ttdeci">static void * OpenHandle(const std::string &amp;sharedObjectPath)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00016">DynamicBackendUtils.cpp:16</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_dynamic_backend_utils_xhtml_adb6f50f10cdce40bd5493d42930b58cb"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#adb6f50f10cdce40bd5493d42930b58cb">armnn::DynamicBackendUtils::RegisterDynamicBackendsImpl</a></div><div class="ttdeci">static BackendIdSet RegisterDynamicBackendsImpl(BackendRegistry &amp;backendRegistry, const std::vector&lt; DynamicBackendPtr &gt; &amp;dynamicBackends)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00341">DynamicBackendUtils.cpp:341</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00015">BackendRegistry.cpp:15</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_dynamic_backend_utils_xhtml_a5d8cade961d9ea50a19a382c974d1ce5"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a5d8cade961d9ea50a19a382c974d1ce5">armnn::DynamicBackendUtils::GetBackendPathsImpl</a></div><div class="ttdeci">static std::vector&lt; std::string &gt; GetBackendPathsImpl(const std::string &amp;backendPaths)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00103">DynamicBackendUtils.cpp:103</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a754d43dc24a0fe36ecb3044d8f13a413"><div class="ttname"><a href="namespacearmnn.xhtml#a754d43dc24a0fe36ecb3044d8f13a413">armnn::DynamicBackendPtr</a></div><div class="ttdeci">std::unique_ptr&lt; DynamicBackend &gt; DynamicBackendPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_dynamic_backend_8hpp_source.xhtml#l00054">DynamicBackend.hpp:54</a></div></div>
<div class="ttc" id="a_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00212">Logging.hpp:212</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_backend_internal_xhtml_a878b8f50d8a2f92ed624803e9f6968ae"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a878b8f50d8a2f92ed624803e9f6968ae">armnn::IBackendInternal::GetApiVersion</a></div><div class="ttdeci">static constexpr BackendVersion GetApiVersion()</div><div class="ttdoc">Returns the version of the Backend API.</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00167">IBackendInternal.hpp:167</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_dynamic_backend_utils_xhtml_aafeb709b667b8554e43d2212b7d46e48"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#aafeb709b667b8554e43d2212b7d46e48">armnn::DynamicBackendUtils::IsBackendCompatibleImpl</a></div><div class="ttdeci">static bool IsBackendCompatibleImpl(const BackendVersion &amp;backendApiVersion, const BackendVersion &amp;backendVersion)</div><div class="ttdoc">Protected methods for testing purposes.</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00059">DynamicBackendUtils.cpp:59</a></div></div>
<div class="ttc" id="anamespacearmnn_1_1string_utils_xhtml_a25545ea8edf6a26c00077b01294beac5"><div class="ttname"><a href="namespacearmnn_1_1string_utils.xhtml#a25545ea8edf6a26c00077b01294beac5">armnn::stringUtils::StringTokenizer</a></div><div class="ttdeci">std::vector&lt; std::string &gt; StringTokenizer(const std::string &amp;str, const char *delimiters, bool tokenCompression=true)</div><div class="ttdoc">Function to take a string and a list of delimiters and split the string into tokens based on those de...</div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8hpp_source.xhtml#l00023">StringUtils.hpp:23</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_backend_registry_xhtml_aa33ac375677ee8436456a585dd6f68d9"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#aa33ac375677ee8436456a585dd6f68d9">armnn::BackendRegistry::FactoryFunction</a></div><div class="ttdeci">std::function&lt; PointerType()&gt; FactoryFunction</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00039">BackendRegistry.hpp:39</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00193">BackendId.hpp:193</a></div></div>
<div class="ttc" id="a_dynamic_backend_utils_8hpp_xhtml_a6100170f71dc5f7f2558234843db82b3"><div class="ttname"><a href="_dynamic_backend_utils_8hpp.xhtml#a6100170f71dc5f7f2558234843db82b3">DYNAMIC_BACKEND_PATHS</a></div><div class="ttdeci">#define DYNAMIC_BACKEND_PATHS</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8hpp_source.xhtml#l00022">DynamicBackendUtils.hpp:22</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_dynamic_backend_utils_xhtml_a30619dd4b86da204cb47530f40e175db"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a30619dd4b86da204cb47530f40e175db">armnn::DynamicBackendUtils::IsPathValid</a></div><div class="ttdeci">static bool IsPathValid(const std::string &amp;path)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00145">DynamicBackendUtils.cpp:145</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_dynamic_backend_utils.xhtml">DynamicBackendUtils</a></li>
    <li class="footer">Generated on Wed Mar 22 2023 15:53:05 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
