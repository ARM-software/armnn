<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: OnnxParserImpl Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_onnx_parser_1_1_onnx_parser_impl-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OnnxParserImpl Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_onnx_parser_8hpp_source.xhtml">OnnxParser.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ac81510b21cb2b5719cce34474ad01675"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#ac81510b21cb2b5719cce34474ad01675">GraphPtr</a> = std::unique_ptr&lt; onnx::GraphProto &gt;</td></tr>
<tr class="separator:ac81510b21cb2b5719cce34474ad01675"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aed935c554e4f6a4e7b9dcde057d00877"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#aed935c554e4f6a4e7b9dcde057d00877">CreateNetworkFromBinaryFile</a> (const char *graphFile)</td></tr>
<tr class="memdesc:aed935c554e4f6a4e7b9dcde057d00877"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a protobuf binary file on disk.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#aed935c554e4f6a4e7b9dcde057d00877">More...</a><br /></td></tr>
<tr class="separator:aed935c554e4f6a4e7b9dcde057d00877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a430131420f20d32b8ae2281c51dcb3ae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a430131420f20d32b8ae2281c51dcb3ae">CreateNetworkFromBinaryFile</a> (const char *graphFile, const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;inputShapes)</td></tr>
<tr class="memdesc:a430131420f20d32b8ae2281c51dcb3ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a protobuf binary file on disk, with inputShapes specified.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a430131420f20d32b8ae2281c51dcb3ae">More...</a><br /></td></tr>
<tr class="separator:a430131420f20d32b8ae2281c51dcb3ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32a96909bc8a8ee9076bd4d5c1028301"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a32a96909bc8a8ee9076bd4d5c1028301">CreateNetworkFromBinary</a> (const std::vector&lt; uint8_t &gt; &amp;binaryContent)</td></tr>
<tr class="memdesc:a32a96909bc8a8ee9076bd4d5c1028301"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a protobuf binary.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a32a96909bc8a8ee9076bd4d5c1028301">More...</a><br /></td></tr>
<tr class="separator:a32a96909bc8a8ee9076bd4d5c1028301"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe2f6ff5cc92c32d24f5c2f3bf2c8ae8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#afe2f6ff5cc92c32d24f5c2f3bf2c8ae8">CreateNetworkFromBinary</a> (const std::vector&lt; uint8_t &gt; &amp;binaryContent, const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;inputShapes)</td></tr>
<tr class="memdesc:afe2f6ff5cc92c32d24f5c2f3bf2c8ae8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a protobuf binary, with inputShapes specified.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#afe2f6ff5cc92c32d24f5c2f3bf2c8ae8">More...</a><br /></td></tr>
<tr class="separator:afe2f6ff5cc92c32d24f5c2f3bf2c8ae8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf4ce461aa35597cf80954314a3cb0e1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#aaf4ce461aa35597cf80954314a3cb0e1">CreateNetworkFromTextFile</a> (const char *graphFile)</td></tr>
<tr class="memdesc:aaf4ce461aa35597cf80954314a3cb0e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a protobuf text file on disk.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#aaf4ce461aa35597cf80954314a3cb0e1">More...</a><br /></td></tr>
<tr class="separator:aaf4ce461aa35597cf80954314a3cb0e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47020c5078f437e9e7a966fcdb42ea30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a47020c5078f437e9e7a966fcdb42ea30">CreateNetworkFromTextFile</a> (const char *graphFile, const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;inputShapes)</td></tr>
<tr class="memdesc:a47020c5078f437e9e7a966fcdb42ea30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a protobuf text file on disk, with inputShapes specified.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a47020c5078f437e9e7a966fcdb42ea30">More...</a><br /></td></tr>
<tr class="separator:a47020c5078f437e9e7a966fcdb42ea30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30c0c947bb15e86ee6d535ecd934c0a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a30c0c947bb15e86ee6d535ecd934c0a6">CreateNetworkFromString</a> (const std::string &amp;protoText)</td></tr>
<tr class="memdesc:a30c0c947bb15e86ee6d535ecd934c0a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network directly from protobuf text in a string. Useful for debugging/testing.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a30c0c947bb15e86ee6d535ecd934c0a6">More...</a><br /></td></tr>
<tr class="separator:a30c0c947bb15e86ee6d535ecd934c0a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a375b0e662129d894cd7627e90f1007cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a375b0e662129d894cd7627e90f1007cc">CreateNetworkFromString</a> (const std::string &amp;protoText, const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;inputShapes)</td></tr>
<tr class="memdesc:a375b0e662129d894cd7627e90f1007cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network directly from protobuf text in a string, with inputShapes specified.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a375b0e662129d894cd7627e90f1007cc">More...</a><br /></td></tr>
<tr class="separator:a375b0e662129d894cd7627e90f1007cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b053a6c449d0814cc831c916c126668"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_onnx_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a8b053a6c449d0814cc831c916c126668">GetNetworkInputBindingInfo</a> (const std::string &amp;name) const</td></tr>
<tr class="memdesc:a8b053a6c449d0814cc831c916c126668"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve binding info (layer id and tensor info) for the network input identified by the given layer name.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a8b053a6c449d0814cc831c916c126668">More...</a><br /></td></tr>
<tr class="separator:a8b053a6c449d0814cc831c916c126668"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b1fdcb1985af12dd1848a9ffa5d3271"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_onnx_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a4b1fdcb1985af12dd1848a9ffa5d3271">GetNetworkOutputBindingInfo</a> (const std::string &amp;name) const</td></tr>
<tr class="memdesc:a4b1fdcb1985af12dd1848a9ffa5d3271"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve binding info (layer id and tensor info) for the network output identified by the given layer name.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a4b1fdcb1985af12dd1848a9ffa5d3271">More...</a><br /></td></tr>
<tr class="separator:a4b1fdcb1985af12dd1848a9ffa5d3271"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad131103003f2f4c6e4e3a7406192ad30"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#ad131103003f2f4c6e4e3a7406192ad30">OnnxParserImpl</a> ()</td></tr>
<tr class="separator:ad131103003f2f4c6e4e3a7406192ad30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02c6251df76d47f18f24a734a8a2e2e8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a02c6251df76d47f18f24a734a8a2e2e8">~OnnxParserImpl</a> ()=default</td></tr>
<tr class="separator:a02c6251df76d47f18f24a734a8a2e2e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74e612d0e7242695de575fb44e7f0762"><td class="memTemplParams" colspan="2">template&lt;typename TypePair , typename Location &gt; </td></tr>
<tr class="memitem:a74e612d0e7242695de575fb44e7f0762"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a74e612d0e7242695de575fb44e7f0762">ValidateInputs</a> (const onnx::NodeProto &amp;node, TypePair validInputs, const Location &amp;location)</td></tr>
<tr class="separator:a74e612d0e7242695de575fb44e7f0762"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a8e30b9dff215c314959ca3145e939338"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a8e30b9dff215c314959ca3145e939338">LoadModelFromBinary</a> (const std::vector&lt; uint8_t &gt; &amp;binaryContent)</td></tr>
<tr class="separator:a8e30b9dff215c314959ca3145e939338"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf9c6119ceb99755bc1f86c5a325c796"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#acf9c6119ceb99755bc1f86c5a325c796">LoadModelFromBinaryFile</a> (const char *fileName)</td></tr>
<tr class="separator:acf9c6119ceb99755bc1f86c5a325c796"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a975a79b9b35d51ea81c42c05d245e7c0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a975a79b9b35d51ea81c42c05d245e7c0">LoadModelFromTextFile</a> (const char *fileName)</td></tr>
<tr class="separator:a975a79b9b35d51ea81c42c05d245e7c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a181f87cf45fdc9f040a41c985ce7f8cd"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a181f87cf45fdc9f040a41c985ce7f8cd">LoadModelFromString</a> (const std::string &amp;inputString)</td></tr>
<tr class="separator:a181f87cf45fdc9f040a41c985ce7f8cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cf8b801043e1eccd5e6db1325eaa4fe"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a7cf8b801043e1eccd5e6db1325eaa4fe">GetInputs</a> (<a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> &amp;model)</td></tr>
<tr class="memdesc:a7cf8b801043e1eccd5e6db1325eaa4fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve inputs names.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a7cf8b801043e1eccd5e6db1325eaa4fe">More...</a><br /></td></tr>
<tr class="separator:a7cf8b801043e1eccd5e6db1325eaa4fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad116319e33228bc23ec505887d3eee4d"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#ad116319e33228bc23ec505887d3eee4d">GetOutputs</a> (<a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> &amp;model)</td></tr>
<tr class="memdesc:ad116319e33228bc23ec505887d3eee4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve outputs names.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#ad116319e33228bc23ec505887d3eee4d">More...</a><br /></td></tr>
<tr class="separator:ad116319e33228bc23ec505887d3eee4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#aa09a8bb02eed50715082d8b7fccd2f8d">GetVersion</a> ()</td></tr>
<tr class="memdesc:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve version in X.Y.Z form.  <a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#aa09a8bb02eed50715082d8b7fccd2f8d">More...</a><br /></td></tr>
<tr class="separator:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_onnx_parser_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="_onnx_parser_8hpp_source.xhtml">OnnxParser.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ac81510b21cb2b5719cce34474ad01675"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac81510b21cb2b5719cce34474ad01675">&#9670;&nbsp;</a></span>GraphPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#ac81510b21cb2b5719cce34474ad01675">GraphPtr</a> =  std::unique_ptr&lt;onnx::GraphProto&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8hpp_source.xhtml#l00032">32</a> of file <a class="el" href="_onnx_parser_8hpp_source.xhtml">OnnxParser.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad131103003f2f4c6e4e3a7406192ad30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad131103003f2f4c6e4e3a7406192ad30">&#9670;&nbsp;</a></span>OnnxParserImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml">OnnxParserImpl</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00553">553</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    : m_Network(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;{</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a02c6251df76d47f18f24a734a8a2e2e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a02c6251df76d47f18f24a734a8a2e2e8">&#9670;&nbsp;</a></span>~OnnxParserImpl()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml">OnnxParserImpl</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a32a96909bc8a8ee9076bd4d5c1028301"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32a96909bc8a8ee9076bd4d5c1028301">&#9670;&nbsp;</a></span>CreateNetworkFromBinary() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinary </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>binaryContent</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a protobuf binary. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00745">745</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;{</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    ResetParser();</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> modelProto = <a class="code" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a8e30b9dff215c314959ca3145e939338">LoadModelFromBinary</a>(binaryContent);</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel(*modelProto);</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00761">OnnxParserImpl::LoadModelFromBinary()</a>.</p>

</div>
</div>
<a id="afe2f6ff5cc92c32d24f5c2f3bf2c8ae8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe2f6ff5cc92c32d24f5c2f3bf2c8ae8">&#9670;&nbsp;</a></span>CreateNetworkFromBinary() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinary </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>binaryContent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputShapes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a protobuf binary, with inputShapes specified. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00752">752</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;{</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    ResetParser();</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    m_InputShapes = inputShapes;</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> modelProto = <a class="code" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a8e30b9dff215c314959ca3145e939338">LoadModelFromBinary</a>(binaryContent);</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel(*modelProto);</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00761">OnnxParserImpl::LoadModelFromBinary()</a>.</p>

</div>
</div>
<a id="aed935c554e4f6a4e7b9dcde057d00877"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed935c554e4f6a4e7b9dcde057d00877">&#9670;&nbsp;</a></span>CreateNetworkFromBinaryFile() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinaryFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>graphFile</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a protobuf binary file on disk. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00811">811</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;{</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    ResetParser();</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> modelProto = <a class="code" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#acf9c6119ceb99755bc1f86c5a325c796">LoadModelFromBinaryFile</a>(graphFile);</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel(*modelProto);</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00783">OnnxParserImpl::LoadModelFromBinaryFile()</a>.</p>

</div>
</div>
<a id="a430131420f20d32b8ae2281c51dcb3ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a430131420f20d32b8ae2281c51dcb3ae">&#9670;&nbsp;</a></span>CreateNetworkFromBinaryFile() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinaryFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>graphFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputShapes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a protobuf binary file on disk, with inputShapes specified. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00818">818</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;{</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    ResetParser();</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    m_InputShapes = inputShapes;</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> modelProto = <a class="code" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#acf9c6119ceb99755bc1f86c5a325c796">LoadModelFromBinaryFile</a>(graphFile);</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel(*modelProto);</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00783">OnnxParserImpl::LoadModelFromBinaryFile()</a>.</p>

</div>
</div>
<a id="a30c0c947bb15e86ee6d535ecd934c0a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30c0c947bb15e86ee6d535ecd934c0a6">&#9670;&nbsp;</a></span>CreateNetworkFromString() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>protoText</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network directly from protobuf text in a string. Useful for debugging/testing. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00846">846</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;{</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    ResetParser();</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> modelProto = <a class="code" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a181f87cf45fdc9f040a41c985ce7f8cd">LoadModelFromString</a>(protoText);</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel(*modelProto);</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00827">OnnxParserImpl::LoadModelFromString()</a>.</p>

</div>
</div>
<a id="a375b0e662129d894cd7627e90f1007cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a375b0e662129d894cd7627e90f1007cc">&#9670;&nbsp;</a></span>CreateNetworkFromString() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>protoText</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputShapes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network directly from protobuf text in a string, with inputShapes specified. </p>
<p>Useful for debugging/testing </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00853">853</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;{</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    ResetParser();</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    m_InputShapes = inputShapes;</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> modelProto = <a class="code" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a181f87cf45fdc9f040a41c985ce7f8cd">LoadModelFromString</a>(protoText);</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel(*modelProto);</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00827">OnnxParserImpl::LoadModelFromString()</a>.</p>

</div>
</div>
<a id="aaf4ce461aa35597cf80954314a3cb0e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf4ce461aa35597cf80954314a3cb0e1">&#9670;&nbsp;</a></span>CreateNetworkFromTextFile() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromTextFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>graphFile</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a protobuf text file on disk. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00729">729</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;{</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    ResetParser();</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> modelProto = <a class="code" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a975a79b9b35d51ea81c42c05d245e7c0">LoadModelFromTextFile</a>(graphFile);</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel(*modelProto);</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00704">OnnxParserImpl::LoadModelFromTextFile()</a>.</p>

</div>
</div>
<a id="a47020c5078f437e9e7a966fcdb42ea30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47020c5078f437e9e7a966fcdb42ea30">&#9670;&nbsp;</a></span>CreateNetworkFromTextFile() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromTextFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>graphFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::map&lt; std::string, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputShapes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a protobuf text file on disk, with inputShapes specified. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00736">736</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;{</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    ResetParser();</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    m_InputShapes = inputShapes;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> modelProto = <a class="code" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a975a79b9b35d51ea81c42c05d245e7c0">LoadModelFromTextFile</a>(graphFile);</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel(*modelProto);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00704">OnnxParserImpl::LoadModelFromTextFile()</a>.</p>

</div>
</div>
<a id="a7cf8b801043e1eccd5e6db1325eaa4fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cf8b801043e1eccd5e6db1325eaa4fe">&#9670;&nbsp;</a></span>GetInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetInputs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieve inputs names. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l02490">2490</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l02491"></a><span class="lineno"> 2491</span>&#160;{</div>
<div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;    <span class="keywordflow">if</span>(model == <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l02493"></a><span class="lineno"> 2493</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;The given model cannot be null {}&quot;</span>,</div>
<div class="line"><a name="l02494"></a><span class="lineno"> 2494</span>&#160;                                                   <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l02495"></a><span class="lineno"> 2495</span>&#160;    }</div>
<div class="line"><a name="l02496"></a><span class="lineno"> 2496</span>&#160; </div>
<div class="line"><a name="l02497"></a><span class="lineno"> 2497</span>&#160;    std::vector&lt;std::string&gt; inputNames;</div>
<div class="line"><a name="l02498"></a><span class="lineno"> 2498</span>&#160;    std::map&lt;std::string, bool&gt; isConstant;</div>
<div class="line"><a name="l02499"></a><span class="lineno"> 2499</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> tensor : model-&gt;graph().initializer())</div>
<div class="line"><a name="l02500"></a><span class="lineno"> 2500</span>&#160;    {</div>
<div class="line"><a name="l02501"></a><span class="lineno"> 2501</span>&#160;        isConstant[tensor.name()] = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02502"></a><span class="lineno"> 2502</span>&#160;    }</div>
<div class="line"><a name="l02503"></a><span class="lineno"> 2503</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> input : model-&gt;graph().input())</div>
<div class="line"><a name="l02504"></a><span class="lineno"> 2504</span>&#160;    {</div>
<div class="line"><a name="l02505"></a><span class="lineno"> 2505</span>&#160;        <span class="keyword">auto</span> it = isConstant.find(input.name());</div>
<div class="line"><a name="l02506"></a><span class="lineno"> 2506</span>&#160;        <span class="keywordflow">if</span>(it == isConstant.end())</div>
<div class="line"><a name="l02507"></a><span class="lineno"> 2507</span>&#160;        {</div>
<div class="line"><a name="l02508"></a><span class="lineno"> 2508</span>&#160;            inputNames.push_back(input.name());</div>
<div class="line"><a name="l02509"></a><span class="lineno"> 2509</span>&#160;        }</div>
<div class="line"><a name="l02510"></a><span class="lineno"> 2510</span>&#160;    }</div>
<div class="line"><a name="l02511"></a><span class="lineno"> 2511</span>&#160;    <span class="keywordflow">return</span> inputNames;</div>
<div class="line"><a name="l02512"></a><span class="lineno"> 2512</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>.</p>

</div>
</div>
<a id="a8b053a6c449d0814cc831c916c126668"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b053a6c449d0814cc831c916c126668">&#9670;&nbsp;</a></span>GetNetworkInputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_onnx_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkInputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieve binding info (layer id and tensor info) for the network input identified by the given layer name. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l02452">2452</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l02453"></a><span class="lineno"> 2453</span>&#160;{</div>
<div class="line"><a name="l02454"></a><span class="lineno"> 2454</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; m_Graph-&gt;input_size(); ++i)</div>
<div class="line"><a name="l02455"></a><span class="lineno"> 2455</span>&#160;    {</div>
<div class="line"><a name="l02456"></a><span class="lineno"> 2456</span>&#160;        <span class="keyword">auto</span> input = m_Graph-&gt;input(i);</div>
<div class="line"><a name="l02457"></a><span class="lineno"> 2457</span>&#160;        <span class="keywordflow">if</span>(input.name() == name)</div>
<div class="line"><a name="l02458"></a><span class="lineno"> 2458</span>&#160;        {</div>
<div class="line"><a name="l02459"></a><span class="lineno"> 2459</span>&#160;            <span class="keyword">auto</span> it = m_InputInfos.find(name);</div>
<div class="line"><a name="l02460"></a><span class="lineno"> 2460</span>&#160; </div>
<div class="line"><a name="l02461"></a><span class="lineno"> 2461</span>&#160;            <span class="keywordflow">if</span> (it != m_InputInfos.end())</div>
<div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;            {</div>
<div class="line"><a name="l02463"></a><span class="lineno"> 2463</span>&#160;                <span class="keywordflow">return</span> std::make_pair(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a><span class="keyword">&gt;</span>(i), it-&gt;second);</div>
<div class="line"><a name="l02464"></a><span class="lineno"> 2464</span>&#160;            }</div>
<div class="line"><a name="l02465"></a><span class="lineno"> 2465</span>&#160;        }</div>
<div class="line"><a name="l02466"></a><span class="lineno"> 2466</span>&#160;    }</div>
<div class="line"><a name="l02467"></a><span class="lineno"> 2467</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;The input layer &#39;{}&#39; does not exist {}&quot;</span>,</div>
<div class="line"><a name="l02468"></a><span class="lineno"> 2468</span>&#160;                                               name, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l02469"></a><span class="lineno"> 2469</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>.</p>

</div>
</div>
<a id="a4b1fdcb1985af12dd1848a9ffa5d3271"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b1fdcb1985af12dd1848a9ffa5d3271">&#9670;&nbsp;</a></span>GetNetworkOutputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_onnx_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkOutputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieve binding info (layer id and tensor info) for the network output identified by the given layer name. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l02471">2471</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l02472"></a><span class="lineno"> 2472</span>&#160;{</div>
<div class="line"><a name="l02473"></a><span class="lineno"> 2473</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; m_Graph-&gt;output_size(); ++i)</div>
<div class="line"><a name="l02474"></a><span class="lineno"> 2474</span>&#160;    {</div>
<div class="line"><a name="l02475"></a><span class="lineno"> 2475</span>&#160;        <span class="keyword">auto</span> output = m_Graph-&gt;output(i);</div>
<div class="line"><a name="l02476"></a><span class="lineno"> 2476</span>&#160;        <span class="keywordflow">if</span>(output.name() == name)</div>
<div class="line"><a name="l02477"></a><span class="lineno"> 2477</span>&#160;        {</div>
<div class="line"><a name="l02478"></a><span class="lineno"> 2478</span>&#160;            <span class="keyword">auto</span> it = m_OutputInfos.find(name);</div>
<div class="line"><a name="l02479"></a><span class="lineno"> 2479</span>&#160; </div>
<div class="line"><a name="l02480"></a><span class="lineno"> 2480</span>&#160;            <span class="keywordflow">if</span> (it != m_OutputInfos.end())</div>
<div class="line"><a name="l02481"></a><span class="lineno"> 2481</span>&#160;            {</div>
<div class="line"><a name="l02482"></a><span class="lineno"> 2482</span>&#160;                <span class="keywordflow">return</span> std::make_pair(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a><span class="keyword">&gt;</span>(i), it-&gt;second);</div>
<div class="line"><a name="l02483"></a><span class="lineno"> 2483</span>&#160;            }</div>
<div class="line"><a name="l02484"></a><span class="lineno"> 2484</span>&#160;        }</div>
<div class="line"><a name="l02485"></a><span class="lineno"> 2485</span>&#160;    }</div>
<div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;The output layer &#39;{}&#39; does not exist {}&quot;</span>,</div>
<div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;                                               name, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>.</p>

</div>
</div>
<a id="ad116319e33228bc23ec505887d3eee4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad116319e33228bc23ec505887d3eee4d">&#9670;&nbsp;</a></span>GetOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetOutputs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieve outputs names. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l02514">2514</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l02515"></a><span class="lineno"> 2515</span>&#160;{</div>
<div class="line"><a name="l02516"></a><span class="lineno"> 2516</span>&#160;    <span class="keywordflow">if</span>(model == <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l02517"></a><span class="lineno"> 2517</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;The given model cannot be null {}&quot;</span>,</div>
<div class="line"><a name="l02518"></a><span class="lineno"> 2518</span>&#160;                                                   <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l02519"></a><span class="lineno"> 2519</span>&#160;    }</div>
<div class="line"><a name="l02520"></a><span class="lineno"> 2520</span>&#160; </div>
<div class="line"><a name="l02521"></a><span class="lineno"> 2521</span>&#160;    std::vector&lt;std::string&gt; outputNames;</div>
<div class="line"><a name="l02522"></a><span class="lineno"> 2522</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> output : model-&gt;graph().output())</div>
<div class="line"><a name="l02523"></a><span class="lineno"> 2523</span>&#160;    {</div>
<div class="line"><a name="l02524"></a><span class="lineno"> 2524</span>&#160;        outputNames.push_back(output.name());</div>
<div class="line"><a name="l02525"></a><span class="lineno"> 2525</span>&#160;    }</div>
<div class="line"><a name="l02526"></a><span class="lineno"> 2526</span>&#160;    <span class="keywordflow">return</span> outputNames;</div>
<div class="line"><a name="l02527"></a><span class="lineno"> 2527</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>.</p>

</div>
</div>
<a id="aa09a8bb02eed50715082d8b7fccd2f8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa09a8bb02eed50715082d8b7fccd2f8d">&#9670;&nbsp;</a></span>GetVersion()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string GetVersion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieve version in X.Y.Z form. </p>

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l02529">2529</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l02530"></a><span class="lineno"> 2530</span>&#160;{</div>
<div class="line"><a name="l02531"></a><span class="lineno"> 2531</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="include_2armnn_onnx_parser_2_version_8hpp.xhtml#a91718cb27a114419c34ce33827e94321">ONNX_PARSER_VERSION</a>;</div>
<div class="line"><a name="l02532"></a><span class="lineno"> 2532</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="include_2armnn_onnx_parser_2_version_8hpp_source.xhtml#l00025">ONNX_PARSER_VERSION</a>.</p>

</div>
</div>
<a id="a8e30b9dff215c314959ca3145e939338"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e30b9dff215c314959ca3145e939338">&#9670;&nbsp;</a></span>LoadModelFromBinary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> LoadModelFromBinary </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>binaryContent</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00761">761</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;{</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <span class="keywordflow">if</span> (binaryContent.size() == 0)</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    {</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(fmt::format(<span class="stringliteral">&quot;Missing binary content&quot;</span>, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    }</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <span class="comment">// Parse the file into a message</span></div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> modelProto = std::make_unique&lt;onnx::ModelProto&gt;();</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160; </div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    google::protobuf::io::CodedInputStream codedStream(binaryContent.data(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(binaryContent.size()));</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    codedStream.SetTotalBytesLimit(INT_MAX);</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="keywordtype">bool</span> success = modelProto.get()-&gt;ParseFromCodedStream(&amp;codedStream);</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160; </div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <span class="keywordflow">if</span> (!success)</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    {</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        std::stringstream <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a> &lt;&lt; <span class="stringliteral">&quot;Failed to parse graph&quot;</span>;</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(fmt::format(<span class="stringliteral">&quot;{} {}&quot;</span>, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>.str(), <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    }</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <span class="keywordflow">return</span> modelProto;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>.</p>

<p class="reference">Referenced by <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00745">OnnxParserImpl::CreateNetworkFromBinary()</a>.</p>

</div>
</div>
<a id="acf9c6119ceb99755bc1f86c5a325c796"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf9c6119ceb99755bc1f86c5a325c796">&#9670;&nbsp;</a></span>LoadModelFromBinaryFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> LoadModelFromBinaryFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fileName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00783">783</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;{</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    FILE* fd = fopen(graphFile, <span class="stringliteral">&quot;rb&quot;</span>);</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160; </div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keywordflow">if</span> (fd == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    {</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_file_not_found_exception.xhtml">FileNotFoundException</a>(fmt::format(<span class="stringliteral">&quot;Invalid (null) filename {}&quot;</span>, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    }</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160; </div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="comment">// Parse the file into a message</span></div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> modelProto = std::make_unique&lt;onnx::ModelProto&gt;();</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160; </div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    google::protobuf::io::FileInputStream  inStream(fileno(fd));</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    google::protobuf::io::CodedInputStream codedStream(&amp;inStream);</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    codedStream.SetTotalBytesLimit(INT_MAX);</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="keywordtype">bool</span> success = modelProto.get()-&gt;ParseFromCodedStream(&amp;codedStream);</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    fclose(fd);</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160; </div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <span class="keywordflow">if</span> (!success)</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    {</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        std::stringstream <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a> &lt;&lt; <span class="stringliteral">&quot;Failed to parse graph file&quot;</span>;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(fmt::format(<span class="stringliteral">&quot;{} {}&quot;</span>, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>.str(), <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    }</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    <span class="keywordflow">return</span> modelProto;</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160; </div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>.</p>

<p class="reference">Referenced by <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00811">OnnxParserImpl::CreateNetworkFromBinaryFile()</a>.</p>

</div>
</div>
<a id="a181f87cf45fdc9f040a41c985ce7f8cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a181f87cf45fdc9f040a41c985ce7f8cd">&#9670;&nbsp;</a></span>LoadModelFromString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> LoadModelFromString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>inputString</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00827">827</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;{</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="keywordflow">if</span> (protoText == <span class="stringliteral">&quot;&quot;</span>)</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    {</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Invalid (empty) string for model parameter {}&quot;</span>,</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                                                   <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    }</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <span class="comment">// Parse the string into a message</span></div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> modelProto = std::make_unique&lt;onnx::ModelProto&gt;();</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <span class="keywordtype">bool</span> success = google::protobuf::TextFormat::ParseFromString(protoText, modelProto.get());</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <span class="keywordflow">if</span> (!success)</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    {</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;        std::stringstream <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>;</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a> &lt;&lt; <span class="stringliteral">&quot;Failed to parse graph file&quot;</span>;</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(fmt::format(<span class="stringliteral">&quot;{} {}&quot;</span>, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>.str(), <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    }</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <span class="keywordflow">return</span> modelProto;</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>.</p>

<p class="reference">Referenced by <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00846">OnnxParserImpl::CreateNetworkFromString()</a>.</p>

</div>
</div>
<a id="a975a79b9b35d51ea81c42c05d245e7c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a975a79b9b35d51ea81c42c05d245e7c0">&#9670;&nbsp;</a></span>LoadModelFromTextFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a> LoadModelFromTextFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fileName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00704">704</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;{</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    FILE* fd = fopen(graphFile, <span class="stringliteral">&quot;r&quot;</span>);</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160; </div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keywordflow">if</span> (fd == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    {</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_file_not_found_exception.xhtml">FileNotFoundException</a>(fmt::format(<span class="stringliteral">&quot;Invalid (null) filename {}&quot;</span>, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    }</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160; </div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="comment">// Parse the file into a message</span></div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <a class="code" href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">ModelPtr</a>     modelProto = std::make_unique&lt;onnx::ModelProto&gt;();</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keyword">using</span> google::protobuf::io::FileInputStream;</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    std::unique_ptr&lt;FileInputStream&gt; input = std::make_unique&lt;FileInputStream&gt;(fileno(fd));</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keywordtype">bool</span>                 success = google::protobuf::TextFormat::Parse(input.get(), modelProto.get());</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    fclose(fd);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160; </div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keywordflow">if</span> (!success)</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    {</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        std::stringstream <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a> &lt;&lt; <span class="stringliteral">&quot;Failed to parse graph file&quot;</span>;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(fmt::format(<span class="stringliteral">&quot;{} {}&quot;</span>, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>.str(), <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    }</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keywordflow">return</span> modelProto;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>.</p>

<p class="reference">Referenced by <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00729">OnnxParserImpl::CreateNetworkFromTextFile()</a>.</p>

</div>
</div>
<a id="a74e612d0e7242695de575fb44e7f0762"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74e612d0e7242695de575fb44e7f0762">&#9670;&nbsp;</a></span>ValidateInputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ValidateInputs </td>
          <td>(</td>
          <td class="paramtype">const onnx::NodeProto &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TypePair&#160;</td>
          <td class="paramname"><em>validInputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Location &amp;&#160;</td>
          <td class="paramname"><em>location</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00478">478</a> of file <a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;{</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> input : node.input())</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        CheckValidDataType(validInputs.second,</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                           m_TensorsInfo[input].m_dtype,</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                           validInputs.first,</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                           node.name(),</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                           input,</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                           location);</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    }</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnnOnnxParser/<a class="el" href="_onnx_parser_8hpp_source.xhtml">OnnxParser.hpp</a></li>
<li>src/armnnOnnxParser/<a class="el" href="_onnx_parser_8cpp_source.xhtml">OnnxParser.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="aclassarmnn_onnx_parser_1_1_onnx_parser_impl_xhtml_acf9c6119ceb99755bc1f86c5a325c796"><div class="ttname"><a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#acf9c6119ceb99755bc1f86c5a325c796">armnnOnnxParser::OnnxParserImpl::LoadModelFromBinaryFile</a></div><div class="ttdeci">static ModelPtr LoadModelFromBinaryFile(const char *fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_onnx_parser_8cpp_source.xhtml#l00783">OnnxParser.cpp:783</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs).</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00290">Types.hpp:290</a></div></div>
<div class="ttc" id="anamespacearmnn_onnx_parser_xhtml_a503ae4f55dae1486e53978657083b35d"><div class="ttname"><a href="namespacearmnn_onnx_parser.xhtml#a503ae4f55dae1486e53978657083b35d">armnnOnnxParser::ModelPtr</a></div><div class="ttdeci">std::unique_ptr&lt; onnx::ModelProto &gt; ModelPtr</div><div class="ttdef"><b>Definition:</b> <a href="_onnx_parser_8hpp_source.xhtml#l00023">OnnxParser.hpp:23</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="aclassarmnn_onnx_parser_1_1_onnx_parser_impl_xhtml_a181f87cf45fdc9f040a41c985ce7f8cd"><div class="ttname"><a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a181f87cf45fdc9f040a41c985ce7f8cd">armnnOnnxParser::OnnxParserImpl::LoadModelFromString</a></div><div class="ttdeci">static ModelPtr LoadModelFromString(const std::string &amp;inputString)</div><div class="ttdef"><b>Definition:</b> <a href="_onnx_parser_8cpp_source.xhtml#l00827">OnnxParser.cpp:827</a></div></div>
<div class="ttc" id="aclassarmnn_onnx_parser_1_1_onnx_parser_impl_xhtml_a975a79b9b35d51ea81c42c05d245e7c0"><div class="ttname"><a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a975a79b9b35d51ea81c42c05d245e7c0">armnnOnnxParser::OnnxParserImpl::LoadModelFromTextFile</a></div><div class="ttdeci">static ModelPtr LoadModelFromTextFile(const char *fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_onnx_parser_8cpp_source.xhtml#l00704">OnnxParser.cpp:704</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_file_not_found_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_file_not_found_exception.xhtml">armnn::FileNotFoundException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00086">Exceptions.hpp:86</a></div></div>
<div class="ttc" id="ainclude_2armnn_onnx_parser_2_version_8hpp_xhtml_a91718cb27a114419c34ce33827e94321"><div class="ttname"><a href="include_2armnn_onnx_parser_2_version_8hpp.xhtml#a91718cb27a114419c34ce33827e94321">ONNX_PARSER_VERSION</a></div><div class="ttdeci">#define ONNX_PARSER_VERSION</div><div class="ttdoc">ONNX_PARSER_VERSION: &quot;X.Y.Z&quot; where: X = Major version number Y = Minor version number Z = Patch versi...</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_onnx_parser_2_version_8hpp_source.xhtml#l00025">Version.hpp:25</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::BoostLogSeverityMapping::error</a></div><div class="ttdeci">@ error</div></div>
<div class="ttc" id="aclassarmnn_onnx_parser_1_1_onnx_parser_impl_xhtml_a8e30b9dff215c314959ca3145e939338"><div class="ttname"><a href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml#a8e30b9dff215c314959ca3145e939338">armnnOnnxParser::OnnxParserImpl::LoadModelFromBinary</a></div><div class="ttdeci">static ModelPtr LoadModelFromBinary(const std::vector&lt; uint8_t &gt; &amp;binaryContent)</div><div class="ttdef"><b>Definition:</b> <a href="_onnx_parser_8cpp_source.xhtml#l00761">OnnxParser.cpp:761</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn_onnx_parser.xhtml">armnnOnnxParser</a></li><li class="navelem"><a class="el" href="classarmnn_onnx_parser_1_1_onnx_parser_impl.xhtml">OnnxParserImpl</a></li>
    <li class="footer">Generated on Wed Mar 22 2023 15:53:09 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
