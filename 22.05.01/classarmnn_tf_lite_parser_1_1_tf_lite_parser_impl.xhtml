<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: TfLiteParserImpl Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TfLiteParserImpl Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:abfc86471394295357a23b3addd0b5b1c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> = std::unique_ptr&lt; tflite::ModelT &gt;</td></tr>
<tr class="separator:abfc86471394295357a23b3addd0b5b1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a988cb5e216eb87d854414c6a0282eeb4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a988cb5e216eb87d854414c6a0282eeb4">SubgraphPtr</a> = std::unique_ptr&lt; tflite::SubGraphT &gt;</td></tr>
<tr class="separator:a988cb5e216eb87d854414c6a0282eeb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadad81a95152fe5aad839db352d4012c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aadad81a95152fe5aad839db352d4012c">OperatorPtr</a> = std::unique_ptr&lt; tflite::OperatorT &gt;</td></tr>
<tr class="separator:aadad81a95152fe5aad839db352d4012c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab80edc19da7460a95a0ac05902f244b7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab80edc19da7460a95a0ac05902f244b7">OperatorCodePtr</a> = std::unique_ptr&lt; tflite::OperatorCodeT &gt;</td></tr>
<tr class="separator:ab80edc19da7460a95a0ac05902f244b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ab952e29d01028931f75f997ad7cbd4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a4ab952e29d01028931f75f997ad7cbd4">TensorPtr</a> = std::unique_ptr&lt; tflite::TensorT &gt;</td></tr>
<tr class="separator:a4ab952e29d01028931f75f997ad7cbd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3486e6c1a291aa67efd8b280ffb83cc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> = const tflite::TensorT *</td></tr>
<tr class="separator:ac3486e6c1a291aa67efd8b280ffb83cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd8bee7fb9b86485a60bc7ee05114270"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> = std::vector&lt; <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> &gt;</td></tr>
<tr class="separator:abd8bee7fb9b86485a60bc7ee05114270"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7553cea300edaeb5722990f99f042ef0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> = std::pair&lt; size_t, <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> &gt;</td></tr>
<tr class="separator:a7553cea300edaeb5722990f99f042ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86428e0c674542488c7292dfbe2ce381"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> = std::vector&lt; <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> &gt;</td></tr>
<tr class="separator:a86428e0c674542488c7292dfbe2ce381"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab93d9fb8a272789623edfa0b214c40f9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab93d9fb8a272789623edfa0b214c40f9">BufferPtr</a> = std::unique_ptr&lt; tflite::BufferT &gt;</td></tr>
<tr class="separator:ab93d9fb8a272789623edfa0b214c40f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaafbda6e6816876b3d7963cfe64dd2f8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a> = const tflite::BufferT *</td></tr>
<tr class="separator:aaafbda6e6816876b3d7963cfe64dd2f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aed935c554e4f6a4e7b9dcde057d00877"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aed935c554e4f6a4e7b9dcde057d00877">CreateNetworkFromBinaryFile</a> (const char *graphFile)</td></tr>
<tr class="memdesc:aed935c554e4f6a4e7b9dcde057d00877"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a flatbuffers binary file on disk.  <a href="#aed935c554e4f6a4e7b9dcde057d00877">More...</a><br /></td></tr>
<tr class="separator:aed935c554e4f6a4e7b9dcde057d00877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32a96909bc8a8ee9076bd4d5c1028301"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a32a96909bc8a8ee9076bd4d5c1028301">CreateNetworkFromBinary</a> (const std::vector&lt; uint8_t &gt; &amp;binaryContent)</td></tr>
<tr class="memdesc:a32a96909bc8a8ee9076bd4d5c1028301"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a flatbuffers binary.  <a href="#a32a96909bc8a8ee9076bd4d5c1028301">More...</a><br /></td></tr>
<tr class="separator:a32a96909bc8a8ee9076bd4d5c1028301"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a913d452e7766210b59a69d3c658b2862"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a913d452e7766210b59a69d3c658b2862">GetNetworkInputBindingInfo</a> (size_t subgraphId, const std::string &amp;name) const</td></tr>
<tr class="memdesc:a913d452e7766210b59a69d3c658b2862"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve binding info (layer id and tensor info) for the network input identified by the given layer name and subgraph id.  <a href="#a913d452e7766210b59a69d3c658b2862">More...</a><br /></td></tr>
<tr class="separator:a913d452e7766210b59a69d3c658b2862"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59139faede3a07a43c4c8f86bb03dc43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a59139faede3a07a43c4c8f86bb03dc43">GetNetworkOutputBindingInfo</a> (size_t subgraphId, const std::string &amp;name) const</td></tr>
<tr class="memdesc:a59139faede3a07a43c4c8f86bb03dc43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve binding info (layer id and tensor info) for the network output identified by the given layer name and subgraph id.  <a href="#a59139faede3a07a43c4c8f86bb03dc43">More...</a><br /></td></tr>
<tr class="separator:a59139faede3a07a43c4c8f86bb03dc43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b7aed8466cc5792966d271a65285d0e"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1b7aed8466cc5792966d271a65285d0e">GetSubgraphCount</a> () const</td></tr>
<tr class="memdesc:a1b7aed8466cc5792966d271a65285d0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of subgraphs in the parsed model.  <a href="#a1b7aed8466cc5792966d271a65285d0e">More...</a><br /></td></tr>
<tr class="separator:a1b7aed8466cc5792966d271a65285d0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe1ea028d8fcb9942c204d4415ff3319"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#afe1ea028d8fcb9942c204d4415ff3319">GetSubgraphInputTensorNames</a> (size_t subgraphId) const</td></tr>
<tr class="memdesc:afe1ea028d8fcb9942c204d4415ff3319"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the input tensor names for a given subgraph.  <a href="#afe1ea028d8fcb9942c204d4415ff3319">More...</a><br /></td></tr>
<tr class="separator:afe1ea028d8fcb9942c204d4415ff3319"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a949070abe70fabe18cc1eb29d5853f47"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a949070abe70fabe18cc1eb29d5853f47">GetSubgraphOutputTensorNames</a> (size_t subgraphId) const</td></tr>
<tr class="memdesc:a949070abe70fabe18cc1eb29d5853f47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the output tensor names for a given subgraph.  <a href="#a949070abe70fabe18cc1eb29d5853f47">More...</a><br /></td></tr>
<tr class="separator:a949070abe70fabe18cc1eb29d5853f47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9199a42f5fae611db182fb4c31a11df"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ad9199a42f5fae611db182fb4c31a11df">TfLiteParserImpl</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">ITfLiteParser::TfLiteParserOptions</a> &gt; &amp;options=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>())</td></tr>
<tr class="separator:ad9199a42f5fae611db182fb4c31a11df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaccd84a6cf2f9bdd77f833e4b65ffd42"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaccd84a6cf2f9bdd77f833e4b65ffd42">~TfLiteParserImpl</a> ()=default</td></tr>
<tr class="separator:aaccd84a6cf2f9bdd77f833e4b65ffd42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8abb48132e89e5273ca888ca884e305"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac8abb48132e89e5273ca888ca884e305">CreateNetworkFromBinaryAsDynamic</a> (const std::vector&lt; uint8_t &gt; &amp;binaryContent)</td></tr>
<tr class="separator:ac8abb48132e89e5273ca888ca884e305"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0da1e3b0281fa84f8b6f5ce3cd15b7c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a0da1e3b0281fa84f8b6f5ce3cd15b7c0">LoadModel</a> (std::unique_ptr&lt; tflite::ModelT &gt; model)</td></tr>
<tr class="separator:a0da1e3b0281fa84f8b6f5ce3cd15b7c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af9590c2ae8d68b5da999d3d6ab21dd3b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#af9590c2ae8d68b5da999d3d6ab21dd3b">LoadModelFromFile</a> (const char *fileName)</td></tr>
<tr class="separator:af9590c2ae8d68b5da999d3d6ab21dd3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f3fc56b7306b444f06f45cdc4032bbf"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">LoadModelFromBinary</a> (const uint8_t *binaryContent, size_t len)</td></tr>
<tr class="separator:a7f3fc56b7306b444f06f45cdc4032bbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a342a58ab95b91af13b24dd4bdc7e09bb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a342a58ab95b91af13b24dd4bdc7e09bb">GetInputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a342a58ab95b91af13b24dd4bdc7e09bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a279d0891900c191d5a0139e5c11fe488"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a279d0891900c191d5a0139e5c11fe488">GetOutputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a279d0891900c191d5a0139e5c11fe488"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20518e431cb501b172371b850e6c3ec7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">GetSubgraphInputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex)</td></tr>
<tr class="separator:a20518e431cb501b172371b850e6c3ec7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bd7b663eb19e2355b6aa5c36232d6fc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">GetSubgraphOutputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex)</td></tr>
<tr class="separator:a1bd7b663eb19e2355b6aa5c36232d6fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b4b0b88a5e79a88b8b60db76398f575"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; int32_t &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a8b4b0b88a5e79a88b8b60db76398f575">GetInputTensorIds</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a8b4b0b88a5e79a88b8b60db76398f575"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe6c475f92d02dd1eb12acd746e4736f"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; int32_t &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#afe6c475f92d02dd1eb12acd746e4736f">GetOutputTensorIds</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:afe6c475f92d02dd1eb12acd746e4736f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a720f0206e377dd1808acc94b3b12c538"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a720f0206e377dd1808acc94b3b12c538">GetBuffer</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t bufferIndex)</td></tr>
<tr class="separator:a720f0206e377dd1808acc94b3b12c538"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d28f3a07c7ab30f66e7c70ded86eb49"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7d28f3a07c7ab30f66e7c70ded86eb49">OutputShapeOfSqueeze</a> (std::vector&lt; uint32_t &gt; squeezeDims, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputTensorInfo)</td></tr>
<tr class="separator:a7d28f3a07c7ab30f66e7c70ded86eb49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaebfa9a01a0bb8a0935114ff0140cc45"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaebfa9a01a0bb8a0935114ff0140cc45">OutputShapeOfReshape</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputTensorInfo, const std::vector&lt; int32_t &gt; &amp;targetDimsIn)</td></tr>
<tr class="separator:aaebfa9a01a0bb8a0935114ff0140cc45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aa09a8bb02eed50715082d8b7fccd2f8d">GetVersion</a> ()</td></tr>
<tr class="memdesc:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve version in X.Y.Z form.  <a href="#aa09a8bb02eed50715082d8b7fccd2f8d">More...</a><br /></td></tr>
<tr class="separator:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ab93d9fb8a272789623edfa0b214c40f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab93d9fb8a272789623edfa0b214c40f9">&#9670;&nbsp;</a></span>BufferPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab93d9fb8a272789623edfa0b214c40f9">BufferPtr</a> =  std::unique_ptr&lt;tflite::BufferT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00038">38</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="aaafbda6e6816876b3d7963cfe64dd2f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaafbda6e6816876b3d7963cfe64dd2f8">&#9670;&nbsp;</a></span>BufferRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a> =  const tflite::BufferT *</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00039">39</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="abfc86471394295357a23b3addd0b5b1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfc86471394295357a23b3addd0b5b1c">&#9670;&nbsp;</a></span>ModelPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> =  std::unique_ptr&lt;tflite::ModelT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00029">29</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="ab80edc19da7460a95a0ac05902f244b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab80edc19da7460a95a0ac05902f244b7">&#9670;&nbsp;</a></span>OperatorCodePtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab80edc19da7460a95a0ac05902f244b7">OperatorCodePtr</a> =  std::unique_ptr&lt;tflite::OperatorCodeT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00032">32</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="aadad81a95152fe5aad839db352d4012c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aadad81a95152fe5aad839db352d4012c">&#9670;&nbsp;</a></span>OperatorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aadad81a95152fe5aad839db352d4012c">OperatorPtr</a> =  std::unique_ptr&lt;tflite::OperatorT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00031">31</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a988cb5e216eb87d854414c6a0282eeb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a988cb5e216eb87d854414c6a0282eeb4">&#9670;&nbsp;</a></span>SubgraphPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a988cb5e216eb87d854414c6a0282eeb4">SubgraphPtr</a> =  std::unique_ptr&lt;tflite::SubGraphT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00030">30</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a7553cea300edaeb5722990f99f042ef0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7553cea300edaeb5722990f99f042ef0">&#9670;&nbsp;</a></span>TensorIdRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> =  std::pair&lt;size_t, <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00036">36</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a86428e0c674542488c7292dfbe2ce381"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86428e0c674542488c7292dfbe2ce381">&#9670;&nbsp;</a></span>TensorIdRawPtrVector</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> =  std::vector&lt;<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00037">37</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a4ab952e29d01028931f75f997ad7cbd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ab952e29d01028931f75f997ad7cbd4">&#9670;&nbsp;</a></span>TensorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a4ab952e29d01028931f75f997ad7cbd4">TensorPtr</a> =  std::unique_ptr&lt;tflite::TensorT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00033">33</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="ac3486e6c1a291aa67efd8b280ffb83cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3486e6c1a291aa67efd8b280ffb83cc">&#9670;&nbsp;</a></span>TensorRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> =  const tflite::TensorT *</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00034">34</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="abd8bee7fb9b86485a60bc7ee05114270"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd8bee7fb9b86485a60bc7ee05114270">&#9670;&nbsp;</a></span>TensorRawPtrVector</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> =  std::vector&lt;<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad9199a42f5fae611db182fb4c31a11df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9199a42f5fae611db182fb4c31a11df">&#9670;&nbsp;</a></span>TfLiteParserImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml">TfLiteParserImpl</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">ITfLiteParser::TfLiteParserOptions</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>options</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>()</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00671">671</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;: m_Options(options)</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;, m_Network(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;, m_ParserFunctions(tflite::BuiltinOperator_MAX+1, &amp;TfLiteParserImpl::ParseUnsupportedOperator)</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;{</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="comment">// register supported operators</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ABS]                     = &amp;TfLiteParserImpl::ParseAbs;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ADD]                     = &amp;TfLiteParserImpl::ParseAdd;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ARG_MIN]                 = &amp;TfLiteParserImpl::ParseArgMin;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ARG_MAX]                 = &amp;TfLiteParserImpl::ParseArgMax;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_AVERAGE_POOL_2D]         = &amp;TfLiteParserImpl::ParseAveragePool2D;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_BATCH_TO_SPACE_ND]       = &amp;TfLiteParserImpl::ParseBatchToSpaceND;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CAST]                    = &amp;TfLiteParserImpl::ParseCast;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CONCATENATION]           = &amp;TfLiteParserImpl::ParseConcatenation;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CONV_2D]                 = &amp;TfLiteParserImpl::ParseConv2D;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="comment">// Conv3D support was added in TF 2.5, so for backwards compatibility a hash define is needed.</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="preprocessor">    #if defined(ARMNN_POST_TFLITE_2_3)</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CONV_3D]                 = &amp;TfLiteParserImpl::ParseConv3D;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CUSTOM]                  = &amp;TfLiteParserImpl::ParseCustomOperator;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DEPTH_TO_SPACE]          = &amp;TfLiteParserImpl::ParseDepthToSpace;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DEPTHWISE_CONV_2D]       = &amp;TfLiteParserImpl::ParseDepthwiseConv2D;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DEQUANTIZE]              = &amp;TfLiteParserImpl::ParseDequantize;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DIV]                     = &amp;TfLiteParserImpl::ParseDiv;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ELU]                     = &amp;TfLiteParserImpl::ParseElu;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_EQUAL]                   = &amp;TfLiteParserImpl::ParseEqual;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_EXP]                     = &amp;TfLiteParserImpl::ParseExp;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_EXPAND_DIMS]             = &amp;TfLiteParserImpl::ParseExpandDims;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_FLOOR_DIV]               = &amp;TfLiteParserImpl::ParseFloorDiv;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_FULLY_CONNECTED]         = &amp;TfLiteParserImpl::ParseFullyConnected;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_GATHER]                  = &amp;TfLiteParserImpl::ParseGather;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_GATHER_ND]               = &amp;TfLiteParserImpl::ParseGatherNd;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_GREATER]                 = &amp;TfLiteParserImpl::ParseGreater;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_GREATER_EQUAL]           = &amp;TfLiteParserImpl::ParseGreaterOrEqual;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_HARD_SWISH]              = &amp;TfLiteParserImpl::ParseHardSwish;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LEAKY_RELU]              = &amp;TfLiteParserImpl::ParseLeakyRelu;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LESS]                    = &amp;TfLiteParserImpl::ParseLess;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LESS_EQUAL]              = &amp;TfLiteParserImpl::ParseLessOrEqual;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOCAL_RESPONSE_NORMALIZATION]</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            = &amp;TfLiteParserImpl::ParseLocalResponseNormalization;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOGICAL_NOT]             = &amp;TfLiteParserImpl::ParseLogicalNot;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOGISTIC]                = &amp;TfLiteParserImpl::ParseLogistic;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_L2_NORMALIZATION]        = &amp;TfLiteParserImpl::ParseL2Normalization;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MAX_POOL_2D]             = &amp;TfLiteParserImpl::ParseMaxPool2D;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MAXIMUM]                 = &amp;TfLiteParserImpl::ParseMaximum;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MEAN]                    = &amp;TfLiteParserImpl::ParseMean;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MINIMUM]                 = &amp;TfLiteParserImpl::ParseMinimum;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MIRROR_PAD]              = &amp;TfLiteParserImpl::ParseMirrorPad;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MUL]                     = &amp;TfLiteParserImpl::ParseMul;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_NEG]                     = &amp;TfLiteParserImpl::ParseNeg;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_NOT_EQUAL]               = &amp;TfLiteParserImpl::ParseNotEqual;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PACK]                    = &amp;TfLiteParserImpl::ParsePack;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PAD]                     = &amp;TfLiteParserImpl::ParsePad;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PADV2]                   = &amp;TfLiteParserImpl::ParsePad;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PRELU]                   = &amp;TfLiteParserImpl::ParsePrelu;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_QUANTIZE]                = &amp;TfLiteParserImpl::ParseQuantize;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RELU]                    = &amp;TfLiteParserImpl::ParseRelu;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RELU6]                   = &amp;TfLiteParserImpl::ParseRelu6;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_REDUCE_MAX]              = &amp;TfLiteParserImpl::ParseReduceMax;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_REDUCE_MIN]              = &amp;TfLiteParserImpl::ParseReduceMin;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_REDUCE_PROD]             = &amp;TfLiteParserImpl::ParseReduceProd;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESHAPE]                 = &amp;TfLiteParserImpl::ParseReshape;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESIZE_BILINEAR]         = &amp;TfLiteParserImpl::ParseResizeBilinear;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESIZE_NEAREST_NEIGHBOR] = &amp;TfLiteParserImpl::ParseResizeNearestNeighbor;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RSQRT]                   = &amp;TfLiteParserImpl::ParseRsqrt;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SQRT]                    = &amp;TfLiteParserImpl::ParseSqrt;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SHAPE]                   = &amp;TfLiteParserImpl::ParseShape;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SLICE]                   = &amp;TfLiteParserImpl::ParseSlice;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SOFTMAX]                 = &amp;TfLiteParserImpl::ParseSoftmax;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPACE_TO_BATCH_ND]       = &amp;TfLiteParserImpl::ParseSpaceToBatchND;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPLIT]                   = &amp;TfLiteParserImpl::ParseSplit;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPLIT_V]                 = &amp;TfLiteParserImpl::ParseSplitV;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SQUEEZE]                 = &amp;TfLiteParserImpl::ParseSqueeze;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_STRIDED_SLICE]           = &amp;TfLiteParserImpl::ParseStridedSlice;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SUB]                     = &amp;TfLiteParserImpl::ParseSub;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SUM]                     = &amp;TfLiteParserImpl::ParseSum;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TANH]                    = &amp;TfLiteParserImpl::ParseTanH;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TRANSPOSE]               = &amp;TfLiteParserImpl::ParseTranspose;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TRANSPOSE_CONV]          = &amp;TfLiteParserImpl::ParseTransposeConv;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_UNIDIRECTIONAL_SEQUENCE_LSTM]</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            = &amp;TfLiteParserImpl::ParseUnidirectionalSequenceLSTM;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_UNPACK]                  = &amp;TfLiteParserImpl::ParseUnpack;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <span class="comment">// register supported custom operators</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    m_CustomParserFunctions[<span class="stringliteral">&quot;TFLite_Detection_PostProcess&quot;</span>]      = &amp;TfLiteParserImpl::ParseDetectionPostProcess;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaccd84a6cf2f9bdd77f833e4b65ffd42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaccd84a6cf2f9bdd77f833e4b65ffd42">&#9670;&nbsp;</a></span>~TfLiteParserImpl()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml">TfLiteParserImpl</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a32a96909bc8a8ee9076bd4d5c1028301"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32a96909bc8a8ee9076bd4d5c1028301">&#9670;&nbsp;</a></span>CreateNetworkFromBinary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinary </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>binaryContent</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a flatbuffers binary. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00775">775</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04404">TfLiteParserImpl::LoadModelFromBinary()</a>.</p>
<div class="fragment"><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;{</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    ResetParser();</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    m_Model = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">LoadModelFromBinary</a>(binaryContent.data(), binaryContent.size());</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel();</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a7f3fc56b7306b444f06f45cdc4032bbf"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">armnnTfLiteParser::TfLiteParserImpl::LoadModelFromBinary</a></div><div class="ttdeci">static ModelPtr LoadModelFromBinary(const uint8_t *binaryContent, size_t len)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04404">TfLiteParser.cpp:4404</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac8abb48132e89e5273ca888ca884e305"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8abb48132e89e5273ca888ca884e305">&#9670;&nbsp;</a></span>CreateNetworkFromBinaryAsDynamic()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> CreateNetworkFromBinaryAsDynamic </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>binaryContent</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aed935c554e4f6a4e7b9dcde057d00877"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed935c554e4f6a4e7b9dcde057d00877">&#9670;&nbsp;</a></span>CreateNetworkFromBinaryFile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinaryFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>graphFile</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a flatbuffers binary file on disk. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00768">768</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04380">TfLiteParserImpl::LoadModelFromFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;{</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    ResetParser();</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    m_Model = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#af9590c2ae8d68b5da999d3d6ab21dd3b">LoadModelFromFile</a>(graphFile);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel();</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_af9590c2ae8d68b5da999d3d6ab21dd3b"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#af9590c2ae8d68b5da999d3d6ab21dd3b">armnnTfLiteParser::TfLiteParserImpl::LoadModelFromFile</a></div><div class="ttdeci">static ModelPtr LoadModelFromFile(const char *fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04380">TfLiteParser.cpp:4380</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a720f0206e377dd1808acc94b3b12c538"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a720f0206e377dd1808acc94b3b12c538">&#9670;&nbsp;</a></span>GetBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">TfLiteParserImpl::BufferRawPtr</a> GetBuffer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bufferIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04690">4690</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00900">armnnTfLiteParser::AsFloatArray()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00259">CHECK_BUFFER</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00322">CHECK_BUFFER_SIZE</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00224">CHECK_TENSOR_PTR</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00202">armnn::GetDataTypeName()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00514">TensorInfo::SetConstant()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00613">armnnDeserializer::ToTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00900">armnnTfLiteParser::AsFloatArray()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03692">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02671">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04691"></a><span class="lineno"> 4691</span>&#160;{</div><div class="line"><a name="l04692"></a><span class="lineno"> 4692</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a7c88d54e3f895030c70330a4c9d76a7a">CHECK_BUFFER</a>(model, bufferIndex);</div><div class="line"><a name="l04693"></a><span class="lineno"> 4693</span>&#160;    <span class="keywordflow">return</span> model-&gt;buffers[bufferIndex].get();</div><div class="line"><a name="l04694"></a><span class="lineno"> 4694</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a7c88d54e3f895030c70330a4c9d76a7a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a7c88d54e3f895030c70330a4c9d76a7a">CHECK_BUFFER</a></div><div class="ttdeci">#define CHECK_BUFFER(MODEL, BUFFER_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00259">TfLiteParser.cpp:259</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a342a58ab95b91af13b24dd4bdc7e09bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a342a58ab95b91af13b24dd4bdc7e09bb">&#9670;&nbsp;</a></span>GetInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TfLiteParserImpl::TensorRawPtrVector</a> GetInputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04423">4423</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00182">CHECK_MODEL</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00900">armnnTfLiteParser::AsFloatArray()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03692">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02671">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04426"></a><span class="lineno"> 4426</span>&#160;{</div><div class="line"><a name="l04427"></a><span class="lineno"> 4427</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l04428"></a><span class="lineno"> 4428</span>&#160;</div><div class="line"><a name="l04429"></a><span class="lineno"> 4429</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04430"></a><span class="lineno"> 4430</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l04431"></a><span class="lineno"> 4431</span>&#160;</div><div class="line"><a name="l04432"></a><span class="lineno"> 4432</span>&#160;    <span class="keywordtype">size_t</span> inputCount = operatorPtr-&gt;inputs.size();</div><div class="line"><a name="l04433"></a><span class="lineno"> 4433</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> result;</div><div class="line"><a name="l04434"></a><span class="lineno"> 4434</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; inputCount; ++i)</div><div class="line"><a name="l04435"></a><span class="lineno"> 4435</span>&#160;    {</div><div class="line"><a name="l04436"></a><span class="lineno"> 4436</span>&#160;        <span class="comment">// If the input location is -1 then assume input is turned off.</span></div><div class="line"><a name="l04437"></a><span class="lineno"> 4437</span>&#160;        <span class="keywordflow">if</span> (operatorPtr-&gt;inputs[i] == -1)</div><div class="line"><a name="l04438"></a><span class="lineno"> 4438</span>&#160;        {</div><div class="line"><a name="l04439"></a><span class="lineno"> 4439</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l04440"></a><span class="lineno"> 4440</span>&#160;        }</div><div class="line"><a name="l04441"></a><span class="lineno"> 4441</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l04442"></a><span class="lineno"> 4442</span>&#160;        {</div><div class="line"><a name="l04443"></a><span class="lineno"> 4443</span>&#160;            uint32_t inputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(operatorPtr-&gt;inputs[i]);</div><div class="line"><a name="l04444"></a><span class="lineno"> 4444</span>&#160;            result.push_back(subgraphPtr-&gt;tensors[inputId].get());</div><div class="line"><a name="l04445"></a><span class="lineno"> 4445</span>&#160;        }</div><div class="line"><a name="l04446"></a><span class="lineno"> 4446</span>&#160;    }</div><div class="line"><a name="l04447"></a><span class="lineno"> 4447</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04448"></a><span class="lineno"> 4448</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00182">TfLiteParser.cpp:182</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_abd8bee7fb9b86485a60bc7ee05114270"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">armnnTfLiteParser::TfLiteParserImpl::TensorRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorRawPtr &gt; TensorRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00035">TfLiteParser.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8b4b0b88a5e79a88b8b60db76398f575"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b4b0b88a5e79a88b8b60db76398f575">&#9670;&nbsp;</a></span>GetInputTensorIds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; int32_t &gt; &amp; GetInputTensorIds </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04503">4503</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00182">CHECK_MODEL</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00900">armnnTfLiteParser::AsFloatArray()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03692">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02671">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04506"></a><span class="lineno"> 4506</span>&#160;{</div><div class="line"><a name="l04507"></a><span class="lineno"> 4507</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l04508"></a><span class="lineno"> 4508</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04509"></a><span class="lineno"> 4509</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l04510"></a><span class="lineno"> 4510</span>&#160;    <span class="keywordflow">return</span> operatorPtr-&gt;inputs;</div><div class="line"><a name="l04511"></a><span class="lineno"> 4511</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00182">TfLiteParser.cpp:182</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a913d452e7766210b59a69d3c658b2862"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a913d452e7766210b59a69d3c658b2862">&#9670;&nbsp;</a></span>GetNetworkInputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkInputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieve binding info (layer id and tensor info) for the network input identified by the given layer name and subgraph id. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04846">4846</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00140">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04470">TfLiteParserImpl::GetSubgraphInputs()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00514">TensorInfo::SetConstant()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00613">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l04848"></a><span class="lineno"> 4848</span>&#160;{</div><div class="line"><a name="l04849"></a><span class="lineno"> 4849</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l04850"></a><span class="lineno"> 4850</span>&#160;    <span class="keyword">auto</span> inputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">GetSubgraphInputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l04851"></a><span class="lineno"> 4851</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; input : inputs)</div><div class="line"><a name="l04852"></a><span class="lineno"> 4852</span>&#160;    {</div><div class="line"><a name="l04853"></a><span class="lineno"> 4853</span>&#160;        <span class="keywordflow">if</span> (input.second-&gt;name == name)</div><div class="line"><a name="l04854"></a><span class="lineno"> 4854</span>&#160;        {</div><div class="line"><a name="l04855"></a><span class="lineno"> 4855</span>&#160;            <span class="keyword">auto</span> bindingId = GenerateLayerBindingId(subgraphId, input.first);</div><div class="line"><a name="l04856"></a><span class="lineno"> 4856</span>&#160;            <span class="keyword">auto</span> inputTensorInfo = <a class="code" href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">ToTensorInfo</a>(input.second);</div><div class="line"><a name="l04857"></a><span class="lineno"> 4857</span>&#160;            <span class="comment">// Input tensors are always treated as constant tensors during network execution.</span></div><div class="line"><a name="l04858"></a><span class="lineno"> 4858</span>&#160;            inputTensorInfo.SetConstant(<span class="keyword">true</span>);</div><div class="line"><a name="l04859"></a><span class="lineno"> 4859</span>&#160;            <span class="keywordflow">return</span> std::make_pair(bindingId, inputTensorInfo);</div><div class="line"><a name="l04860"></a><span class="lineno"> 4860</span>&#160;        }</div><div class="line"><a name="l04861"></a><span class="lineno"> 4861</span>&#160;    }</div><div class="line"><a name="l04862"></a><span class="lineno"> 4862</span>&#160;</div><div class="line"><a name="l04863"></a><span class="lineno"> 4863</span>&#160;    std::stringstream bindings;</div><div class="line"><a name="l04864"></a><span class="lineno"> 4864</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; input : inputs)</div><div class="line"><a name="l04865"></a><span class="lineno"> 4865</span>&#160;    {</div><div class="line"><a name="l04866"></a><span class="lineno"> 4866</span>&#160;        bindings &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; input.second-&gt;name &lt;&lt; <span class="stringliteral">&quot;&#39; &quot;</span>;</div><div class="line"><a name="l04867"></a><span class="lineno"> 4867</span>&#160;    }</div><div class="line"><a name="l04868"></a><span class="lineno"> 4868</span>&#160;</div><div class="line"><a name="l04869"></a><span class="lineno"> 4869</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l04870"></a><span class="lineno"> 4870</span>&#160;        fmt::format(<span class="stringliteral">&quot;No input binding found for subgraph:{} and name:{}. &quot;</span></div><div class="line"><a name="l04871"></a><span class="lineno"> 4871</span>&#160;                    <span class="stringliteral">&quot;Possible inputs are: [{}] {}&quot;</span>,</div><div class="line"><a name="l04872"></a><span class="lineno"> 4872</span>&#160;                    subgraphId,</div><div class="line"><a name="l04873"></a><span class="lineno"> 4873</span>&#160;                    name,</div><div class="line"><a name="l04874"></a><span class="lineno"> 4874</span>&#160;                    bindings.str(),</div><div class="line"><a name="l04875"></a><span class="lineno"> 4875</span>&#160;                    <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l04876"></a><span class="lineno"> 4876</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00140">TfLiteParser.cpp:140</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a20518e431cb501b172371b850e6c3ec7"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphInputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphInputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04470">TfLiteParser.cpp:4470</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_deserializer_xhtml_a948b8c615ff06defa3b80d2352259ff2"><div class="ttname"><a href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">armnnDeserializer::ToTensorInfo</a></div><div class="ttdeci">armnn::TensorInfo ToTensorInfo(TensorRawPtr tensorPtr)</div><div class="ttdef"><b>Definition:</b> <a href="_deserializer_8cpp_source.xhtml#l00613">Deserializer.cpp:613</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a59139faede3a07a43c4c8f86bb03dc43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59139faede3a07a43c4c8f86bb03dc43">&#9670;&nbsp;</a></span>GetNetworkOutputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkOutputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieve binding info (layer id and tensor info) for the network output identified by the given layer name and subgraph id. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04878">4878</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00140">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04487">TfLiteParserImpl::GetSubgraphOutputs()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00613">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l04880"></a><span class="lineno"> 4880</span>&#160;{</div><div class="line"><a name="l04881"></a><span class="lineno"> 4881</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l04882"></a><span class="lineno"> 4882</span>&#160;    <span class="keyword">auto</span> outputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">GetSubgraphOutputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l04883"></a><span class="lineno"> 4883</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputs.size(); ++i)</div><div class="line"><a name="l04884"></a><span class="lineno"> 4884</span>&#160;    {</div><div class="line"><a name="l04885"></a><span class="lineno"> 4885</span>&#160;        <span class="keyword">auto</span> <span class="keyword">const</span> output = outputs[i];</div><div class="line"><a name="l04886"></a><span class="lineno"> 4886</span>&#160;        <span class="keywordflow">if</span> (output.second-&gt;name == name)</div><div class="line"><a name="l04887"></a><span class="lineno"> 4887</span>&#160;        {</div><div class="line"><a name="l04888"></a><span class="lineno"> 4888</span>&#160;            <span class="keyword">auto</span> bindingId = GenerateLayerBindingId(subgraphId, output.first);</div><div class="line"><a name="l04889"></a><span class="lineno"> 4889</span>&#160;            std::vector&lt;unsigned int&gt; shape = m_OverridenOutputShapes.size() &gt; 0 ?</div><div class="line"><a name="l04890"></a><span class="lineno"> 4890</span>&#160;                                                m_OverridenOutputShapes[i] : AsUnsignedVector(output.second-&gt;shape);</div><div class="line"><a name="l04891"></a><span class="lineno"> 4891</span>&#160;            <span class="keywordflow">return</span> std::make_pair(bindingId, <a class="code" href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">ToTensorInfo</a>(output.second, shape));</div><div class="line"><a name="l04892"></a><span class="lineno"> 4892</span>&#160;        }</div><div class="line"><a name="l04893"></a><span class="lineno"> 4893</span>&#160;    }</div><div class="line"><a name="l04894"></a><span class="lineno"> 4894</span>&#160;</div><div class="line"><a name="l04895"></a><span class="lineno"> 4895</span>&#160;    std::stringstream bindings;</div><div class="line"><a name="l04896"></a><span class="lineno"> 4896</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; output : outputs)</div><div class="line"><a name="l04897"></a><span class="lineno"> 4897</span>&#160;    {</div><div class="line"><a name="l04898"></a><span class="lineno"> 4898</span>&#160;        bindings &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; output.second-&gt;name &lt;&lt; <span class="stringliteral">&quot;&#39; &quot;</span>;</div><div class="line"><a name="l04899"></a><span class="lineno"> 4899</span>&#160;    }</div><div class="line"><a name="l04900"></a><span class="lineno"> 4900</span>&#160;</div><div class="line"><a name="l04901"></a><span class="lineno"> 4901</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l04902"></a><span class="lineno"> 4902</span>&#160;        fmt::format(<span class="stringliteral">&quot;No output binding found for subgraph:{} and name:{}. &quot;</span></div><div class="line"><a name="l04903"></a><span class="lineno"> 4903</span>&#160;                    <span class="stringliteral">&quot;Possible outputs are: [{}] {}&quot;</span>,</div><div class="line"><a name="l04904"></a><span class="lineno"> 4904</span>&#160;                    subgraphId,</div><div class="line"><a name="l04905"></a><span class="lineno"> 4905</span>&#160;                    name,</div><div class="line"><a name="l04906"></a><span class="lineno"> 4906</span>&#160;                    bindings.str(),</div><div class="line"><a name="l04907"></a><span class="lineno"> 4907</span>&#160;                    <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l04908"></a><span class="lineno"> 4908</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a1bd7b663eb19e2355b6aa5c36232d6fc"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphOutputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphOutputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04487">TfLiteParser.cpp:4487</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00140">TfLiteParser.cpp:140</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_deserializer_xhtml_a948b8c615ff06defa3b80d2352259ff2"><div class="ttname"><a href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">armnnDeserializer::ToTensorInfo</a></div><div class="ttdeci">armnn::TensorInfo ToTensorInfo(TensorRawPtr tensorPtr)</div><div class="ttdef"><b>Definition:</b> <a href="_deserializer_8cpp_source.xhtml#l00613">Deserializer.cpp:613</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a279d0891900c191d5a0139e5c11fe488"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a279d0891900c191d5a0139e5c11fe488">&#9670;&nbsp;</a></span>GetOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TfLiteParserImpl::TensorRawPtrVector</a> GetOutputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04450">4450</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00182">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00211">CHECK_TENSOR</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00900">armnnTfLiteParser::AsFloatArray()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03692">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02671">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04453"></a><span class="lineno"> 4453</span>&#160;{</div><div class="line"><a name="l04454"></a><span class="lineno"> 4454</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l04455"></a><span class="lineno"> 4455</span>&#160;</div><div class="line"><a name="l04456"></a><span class="lineno"> 4456</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04457"></a><span class="lineno"> 4457</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l04458"></a><span class="lineno"> 4458</span>&#160;</div><div class="line"><a name="l04459"></a><span class="lineno"> 4459</span>&#160;    <span class="keywordtype">size_t</span> outputCount = operatorPtr-&gt;outputs.size();</div><div class="line"><a name="l04460"></a><span class="lineno"> 4460</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> result(outputCount);</div><div class="line"><a name="l04461"></a><span class="lineno"> 4461</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; outputCount; ++i)</div><div class="line"><a name="l04462"></a><span class="lineno"> 4462</span>&#160;    {</div><div class="line"><a name="l04463"></a><span class="lineno"> 4463</span>&#160;        uint32_t outputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(operatorPtr-&gt;outputs[i]);</div><div class="line"><a name="l04464"></a><span class="lineno"> 4464</span>&#160;        <a class="code" href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a>(model, subgraphIndex, outputId);</div><div class="line"><a name="l04465"></a><span class="lineno"> 4465</span>&#160;        result[i] = subgraphPtr-&gt;tensors[outputId].get();</div><div class="line"><a name="l04466"></a><span class="lineno"> 4466</span>&#160;    }</div><div class="line"><a name="l04467"></a><span class="lineno"> 4467</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04468"></a><span class="lineno"> 4468</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00182">TfLiteParser.cpp:182</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_aa1664dc13adbc85ac12fb584b76bfdae"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a></div><div class="ttdeci">#define CHECK_TENSOR(MODEL, SUBGRAPH_INDEX, TENSOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00211">TfLiteParser.cpp:211</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_abd8bee7fb9b86485a60bc7ee05114270"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">armnnTfLiteParser::TfLiteParserImpl::TensorRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorRawPtr &gt; TensorRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00035">TfLiteParser.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe6c475f92d02dd1eb12acd746e4736f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe6c475f92d02dd1eb12acd746e4736f">&#9670;&nbsp;</a></span>GetOutputTensorIds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; int32_t &gt; &amp; GetOutputTensorIds </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04513">4513</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00182">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00140">CHECK_SUBGRAPH</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00427">TensorInfo::GetNumBytes()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">IConnectableLayer::GetNumInputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">IConnectableLayer::GetNumOutputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04470">TfLiteParserImpl::GetSubgraphInputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04487">TfLiteParserImpl::GetSubgraphOutputs()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00514">TensorInfo::SetConstant()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00199">TensorInfo::SetDataType()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00613">armnnDeserializer::ToTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00900">armnnTfLiteParser::AsFloatArray()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03692">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02671">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04516"></a><span class="lineno"> 4516</span>&#160;{</div><div class="line"><a name="l04517"></a><span class="lineno"> 4517</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l04518"></a><span class="lineno"> 4518</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04519"></a><span class="lineno"> 4519</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l04520"></a><span class="lineno"> 4520</span>&#160;    <span class="keywordflow">return</span> operatorPtr-&gt;outputs;</div><div class="line"><a name="l04521"></a><span class="lineno"> 4521</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00182">TfLiteParser.cpp:182</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1b7aed8466cc5792966d271a65285d0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b7aed8466cc5792966d271a65285d0e">&#9670;&nbsp;</a></span>GetSubgraphCount()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t GetSubgraphCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the number of subgraphs in the parsed model. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04910">4910</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l04911"></a><span class="lineno"> 4911</span>&#160;{</div><div class="line"><a name="l04912"></a><span class="lineno"> 4912</span>&#160;    <span class="keywordflow">return</span> m_Model-&gt;subgraphs.size();</div><div class="line"><a name="l04913"></a><span class="lineno"> 4913</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a20518e431cb501b172371b850e6c3ec7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20518e431cb501b172371b850e6c3ec7">&#9670;&nbsp;</a></span>GetSubgraphInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TfLiteParserImpl::TensorIdRawPtrVector</a> GetSubgraphInputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04470">4470</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00140">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00211">CHECK_TENSOR</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04846">TfLiteParserImpl::GetNetworkInputBindingInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04513">TfLiteParserImpl::GetOutputTensorIds()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04915">TfLiteParserImpl::GetSubgraphInputTensorNames()</a>.</p>
<div class="fragment"><div class="line"><a name="l04472"></a><span class="lineno"> 4472</span>&#160;{</div><div class="line"><a name="l04473"></a><span class="lineno"> 4473</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(model, subgraphIndex);</div><div class="line"><a name="l04474"></a><span class="lineno"> 4474</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04475"></a><span class="lineno"> 4475</span>&#160;</div><div class="line"><a name="l04476"></a><span class="lineno"> 4476</span>&#160;    <span class="keywordtype">size_t</span> inputCount = subgraphPtr-&gt;inputs.size();</div><div class="line"><a name="l04477"></a><span class="lineno"> 4477</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> result(inputCount);</div><div class="line"><a name="l04478"></a><span class="lineno"> 4478</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; inputCount; ++i)</div><div class="line"><a name="l04479"></a><span class="lineno"> 4479</span>&#160;    {</div><div class="line"><a name="l04480"></a><span class="lineno"> 4480</span>&#160;        uint32_t inputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(subgraphPtr-&gt;inputs[i]);</div><div class="line"><a name="l04481"></a><span class="lineno"> 4481</span>&#160;        <a class="code" href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a>(model, subgraphIndex, inputId);</div><div class="line"><a name="l04482"></a><span class="lineno"> 4482</span>&#160;        result[i] = std::make_pair(inputId, subgraphPtr-&gt;tensors[inputId].get());</div><div class="line"><a name="l04483"></a><span class="lineno"> 4483</span>&#160;    }</div><div class="line"><a name="l04484"></a><span class="lineno"> 4484</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04485"></a><span class="lineno"> 4485</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_aa1664dc13adbc85ac12fb584b76bfdae"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a></div><div class="ttdeci">#define CHECK_TENSOR(MODEL, SUBGRAPH_INDEX, TENSOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00211">TfLiteParser.cpp:211</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00140">TfLiteParser.cpp:140</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a86428e0c674542488c7292dfbe2ce381"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">armnnTfLiteParser::TfLiteParserImpl::TensorIdRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorIdRawPtr &gt; TensorIdRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00037">TfLiteParser.hpp:37</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe1ea028d8fcb9942c204d4415ff3319"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe1ea028d8fcb9942c204d4415ff3319">&#9670;&nbsp;</a></span>GetSubgraphInputTensorNames()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSubgraphInputTensorNames </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the input tensor names for a given subgraph. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04915">4915</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00140">CHECK_SUBGRAPH</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04470">TfLiteParserImpl::GetSubgraphInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l04916"></a><span class="lineno"> 4916</span>&#160;{</div><div class="line"><a name="l04917"></a><span class="lineno"> 4917</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l04918"></a><span class="lineno"> 4918</span>&#160;    <span class="keyword">auto</span> inputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">GetSubgraphInputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l04919"></a><span class="lineno"> 4919</span>&#160;    std::vector&lt;std::string&gt; result;</div><div class="line"><a name="l04920"></a><span class="lineno"> 4920</span>&#160;    result.reserve(inputs.size());</div><div class="line"><a name="l04921"></a><span class="lineno"> 4921</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; input : inputs)</div><div class="line"><a name="l04922"></a><span class="lineno"> 4922</span>&#160;    {</div><div class="line"><a name="l04923"></a><span class="lineno"> 4923</span>&#160;        result.push_back(input.second-&gt;name);</div><div class="line"><a name="l04924"></a><span class="lineno"> 4924</span>&#160;    }</div><div class="line"><a name="l04925"></a><span class="lineno"> 4925</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04926"></a><span class="lineno"> 4926</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00140">TfLiteParser.cpp:140</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a20518e431cb501b172371b850e6c3ec7"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphInputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphInputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04470">TfLiteParser.cpp:4470</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1bd7b663eb19e2355b6aa5c36232d6fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bd7b663eb19e2355b6aa5c36232d6fc">&#9670;&nbsp;</a></span>GetSubgraphOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TfLiteParserImpl::TensorIdRawPtrVector</a> GetSubgraphOutputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04487">4487</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00140">CHECK_SUBGRAPH</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04878">TfLiteParserImpl::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04513">TfLiteParserImpl::GetOutputTensorIds()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04928">TfLiteParserImpl::GetSubgraphOutputTensorNames()</a>.</p>
<div class="fragment"><div class="line"><a name="l04489"></a><span class="lineno"> 4489</span>&#160;{</div><div class="line"><a name="l04490"></a><span class="lineno"> 4490</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(model, subgraphIndex);</div><div class="line"><a name="l04491"></a><span class="lineno"> 4491</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04492"></a><span class="lineno"> 4492</span>&#160;</div><div class="line"><a name="l04493"></a><span class="lineno"> 4493</span>&#160;    <span class="keywordtype">size_t</span> outputCount = subgraphPtr-&gt;outputs.size();</div><div class="line"><a name="l04494"></a><span class="lineno"> 4494</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> result(outputCount);</div><div class="line"><a name="l04495"></a><span class="lineno"> 4495</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; outputCount; ++i)</div><div class="line"><a name="l04496"></a><span class="lineno"> 4496</span>&#160;    {</div><div class="line"><a name="l04497"></a><span class="lineno"> 4497</span>&#160;        uint32_t outputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(subgraphPtr-&gt;outputs[i]);</div><div class="line"><a name="l04498"></a><span class="lineno"> 4498</span>&#160;        result[i] = std::make_pair(outputId, subgraphPtr-&gt;tensors[outputId].get());</div><div class="line"><a name="l04499"></a><span class="lineno"> 4499</span>&#160;    }</div><div class="line"><a name="l04500"></a><span class="lineno"> 4500</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04501"></a><span class="lineno"> 4501</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00140">TfLiteParser.cpp:140</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a86428e0c674542488c7292dfbe2ce381"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">armnnTfLiteParser::TfLiteParserImpl::TensorIdRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorIdRawPtr &gt; TensorIdRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00037">TfLiteParser.hpp:37</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a949070abe70fabe18cc1eb29d5853f47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a949070abe70fabe18cc1eb29d5853f47">&#9670;&nbsp;</a></span>GetSubgraphOutputTensorNames()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSubgraphOutputTensorNames </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the output tensor names for a given subgraph. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04928">4928</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00140">CHECK_SUBGRAPH</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04487">TfLiteParserImpl::GetSubgraphOutputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l04929"></a><span class="lineno"> 4929</span>&#160;{</div><div class="line"><a name="l04930"></a><span class="lineno"> 4930</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l04931"></a><span class="lineno"> 4931</span>&#160;    <span class="keyword">auto</span> outputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">GetSubgraphOutputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l04932"></a><span class="lineno"> 4932</span>&#160;    std::vector&lt;std::string&gt; result;</div><div class="line"><a name="l04933"></a><span class="lineno"> 4933</span>&#160;    result.reserve(outputs.size());</div><div class="line"><a name="l04934"></a><span class="lineno"> 4934</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; output : outputs)</div><div class="line"><a name="l04935"></a><span class="lineno"> 4935</span>&#160;    {</div><div class="line"><a name="l04936"></a><span class="lineno"> 4936</span>&#160;        result.push_back(output.second-&gt;name);</div><div class="line"><a name="l04937"></a><span class="lineno"> 4937</span>&#160;    }</div><div class="line"><a name="l04938"></a><span class="lineno"> 4938</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04939"></a><span class="lineno"> 4939</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a1bd7b663eb19e2355b6aa5c36232d6fc"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphOutputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphOutputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04487">TfLiteParser.cpp:4487</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00140">TfLiteParser.cpp:140</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa09a8bb02eed50715082d8b7fccd2f8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa09a8bb02eed50715082d8b7fccd2f8d">&#9670;&nbsp;</a></span>GetVersion()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string GetVersion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieve version in X.Y.Z form. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04941">4941</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="include_2armnn_tf_lite_parser_2_version_8hpp_source.xhtml#l00025">TFLITE_PARSER_VERSION</a>.</p>
<div class="fragment"><div class="line"><a name="l04942"></a><span class="lineno"> 4942</span>&#160;{</div><div class="line"><a name="l04943"></a><span class="lineno"> 4943</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="include_2armnn_tf_lite_parser_2_version_8hpp.xhtml#a88c7ccef0cfc85702b48557ec804ef9a">TFLITE_PARSER_VERSION</a>;</div><div class="line"><a name="l04944"></a><span class="lineno"> 4944</span>&#160;}</div><div class="ttc" id="include_2armnn_tf_lite_parser_2_version_8hpp_xhtml_a88c7ccef0cfc85702b48557ec804ef9a"><div class="ttname"><a href="include_2armnn_tf_lite_parser_2_version_8hpp.xhtml#a88c7ccef0cfc85702b48557ec804ef9a">TFLITE_PARSER_VERSION</a></div><div class="ttdeci">#define TFLITE_PARSER_VERSION</div><div class="ttdoc">TFLITE_PARSER_VERSION: &quot;X.Y.Z&quot; where: X = Major version number Y = Minor version number Z = Patch ver...</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_tf_lite_parser_2_version_8hpp_source.xhtml#l00025">Version.hpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0da1e3b0281fa84f8b6f5ce3cd15b7c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0da1e3b0281fa84f8b6f5ce3cd15b7c0">&#9670;&nbsp;</a></span>LoadModel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> LoadModel </td>
          <td>(</td>
          <td class="paramtype">std::unique_ptr&lt; tflite::ModelT &gt;&#160;</td>
          <td class="paramname"><em>model</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00783">783</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>
<div class="fragment"><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;{</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    ResetParser();</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    m_Model = std::move(model);</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel();</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7f3fc56b7306b444f06f45cdc4032bbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f3fc56b7306b444f06f45cdc4032bbf">&#9670;&nbsp;</a></span>LoadModelFromBinary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">TfLiteParserImpl::ModelPtr</a> LoadModelFromBinary </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>binaryContent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04404">4404</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00775">TfLiteParserImpl::CreateNetworkFromBinary()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04380">TfLiteParserImpl::LoadModelFromFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l04405"></a><span class="lineno"> 4405</span>&#160;{</div><div class="line"><a name="l04406"></a><span class="lineno"> 4406</span>&#160;    <span class="keywordflow">if</span> (binaryContent == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l04407"></a><span class="lineno"> 4407</span>&#160;     {</div><div class="line"><a name="l04408"></a><span class="lineno"> 4408</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Invalid (null) binary content {}&quot;</span>,</div><div class="line"><a name="l04409"></a><span class="lineno"> 4409</span>&#160;                                       <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l04410"></a><span class="lineno"> 4410</span>&#160;     }</div><div class="line"><a name="l04411"></a><span class="lineno"> 4411</span>&#160;    flatbuffers::Verifier verifier(binaryContent, len);</div><div class="line"><a name="l04412"></a><span class="lineno"> 4412</span>&#160;    <span class="keywordflow">if</span> (verifier.VerifyBuffer&lt;tflite::Model&gt;() == <span class="keyword">false</span>)</div><div class="line"><a name="l04413"></a><span class="lineno"> 4413</span>&#160;    {</div><div class="line"><a name="l04414"></a><span class="lineno"> 4414</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l04415"></a><span class="lineno"> 4415</span>&#160;            fmt::format(<span class="stringliteral">&quot;Buffer doesn&#39;t conform to the expected Tensorflow Lite &quot;</span></div><div class="line"><a name="l04416"></a><span class="lineno"> 4416</span>&#160;                        <span class="stringliteral">&quot;flatbuffers format. size:{} {}&quot;</span>,</div><div class="line"><a name="l04417"></a><span class="lineno"> 4417</span>&#160;                        len,</div><div class="line"><a name="l04418"></a><span class="lineno"> 4418</span>&#160;                        <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l04419"></a><span class="lineno"> 4419</span>&#160;    }</div><div class="line"><a name="l04420"></a><span class="lineno"> 4420</span>&#160;    <span class="keywordflow">return</span> tflite::UnPackModel(binaryContent);</div><div class="line"><a name="l04421"></a><span class="lineno"> 4421</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af9590c2ae8d68b5da999d3d6ab21dd3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9590c2ae8d68b5da999d3d6ab21dd3b">&#9670;&nbsp;</a></span>LoadModelFromFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">TfLiteParserImpl::ModelPtr</a> LoadModelFromFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fileName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04380">4380</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04404">TfLiteParserImpl::LoadModelFromBinary()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00768">TfLiteParserImpl::CreateNetworkFromBinaryFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l04381"></a><span class="lineno"> 4381</span>&#160;{</div><div class="line"><a name="l04382"></a><span class="lineno"> 4382</span>&#160;    <span class="keywordflow">if</span> (fileName == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l04383"></a><span class="lineno"> 4383</span>&#160;    {</div><div class="line"><a name="l04384"></a><span class="lineno"> 4384</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Invalid (null) file name {}&quot;</span>,</div><div class="line"><a name="l04385"></a><span class="lineno"> 4385</span>&#160;                                       <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l04386"></a><span class="lineno"> 4386</span>&#160;    }</div><div class="line"><a name="l04387"></a><span class="lineno"> 4387</span>&#160;    std::error_code errorCode;</div><div class="line"><a name="l04388"></a><span class="lineno"> 4388</span>&#160;    fs::path pathToFile(fileName);</div><div class="line"><a name="l04389"></a><span class="lineno"> 4389</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(pathToFile, errorCode))</div><div class="line"><a name="l04390"></a><span class="lineno"> 4390</span>&#160;    {</div><div class="line"><a name="l04391"></a><span class="lineno"> 4391</span>&#160;        <span class="comment">//fmt::format() could not be used here (format error)</span></div><div class="line"><a name="l04392"></a><span class="lineno"> 4392</span>&#160;        std::stringstream msg;</div><div class="line"><a name="l04393"></a><span class="lineno"> 4393</span>&#160;        msg &lt;&lt; <span class="stringliteral">&quot;Cannot find the file (&quot;</span> &lt;&lt; fileName &lt;&lt; <span class="stringliteral">&quot;) errorCode: &quot;</span> &lt;&lt; errorCode</div><div class="line"><a name="l04394"></a><span class="lineno"> 4394</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l04395"></a><span class="lineno"> 4395</span>&#160;</div><div class="line"><a name="l04396"></a><span class="lineno"> 4396</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_file_not_found_exception.xhtml">FileNotFoundException</a>(msg.str());</div><div class="line"><a name="l04397"></a><span class="lineno"> 4397</span>&#160;    }</div><div class="line"><a name="l04398"></a><span class="lineno"> 4398</span>&#160;    std::ifstream file(fileName, std::ios::binary);</div><div class="line"><a name="l04399"></a><span class="lineno"> 4399</span>&#160;    std::string fileContent((std::istreambuf_iterator&lt;char&gt;(file)), std::istreambuf_iterator&lt;char&gt;());</div><div class="line"><a name="l04400"></a><span class="lineno"> 4400</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">LoadModelFromBinary</a>(reinterpret_cast&lt;const uint8_t *&gt;(fileContent.c_str()),</div><div class="line"><a name="l04401"></a><span class="lineno"> 4401</span>&#160;                               fileContent.size());</div><div class="line"><a name="l04402"></a><span class="lineno"> 4402</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_file_not_found_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_file_not_found_exception.xhtml">armnn::FileNotFoundException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00086">Exceptions.hpp:86</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a7f3fc56b7306b444f06f45cdc4032bbf"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">armnnTfLiteParser::TfLiteParserImpl::LoadModelFromBinary</a></div><div class="ttdeci">static ModelPtr LoadModelFromBinary(const uint8_t *binaryContent, size_t len)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04404">TfLiteParser.cpp:4404</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaebfa9a01a0bb8a0935114ff0140cc45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaebfa9a01a0bb8a0935114ff0140cc45">&#9670;&nbsp;</a></span>OutputShapeOfReshape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> OutputShapeOfReshape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>targetDimsIn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02671">2671</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00041">ARMNN_THROW_PARSE_EXCEPTION</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00182">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00343">CHECK_SUPPORTED_FUSED_ACTIVATION</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00032">CHECK_VALID_SIZE</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00188">armnnDeserializer::CheckShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04690">TfLiteParserImpl::GetBuffer()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00295">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04423">TfLiteParserImpl::GetInputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04503">TfLiteParserImpl::GetInputTensorIds()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#afcc1c3a20bd2860e0ddd21674389246f">IConnectableLayer::GetName()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00427">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00196">TensorInfo::GetNumElements()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">IConnectableLayer::GetNumOutputSlots()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04450">TfLiteParserImpl::GetOutputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04513">TfLiteParserImpl::GetOutputTensorIds()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00478">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00461">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00164">armnnUtils::GetUnsignedAxis()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01121">LstmDescriptor::m_ActivationFunc</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01254">StackDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00491">FullyConnectedDescriptor::m_BiasEnabled</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00053">LstmInputParams::m_CellBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00059">LstmInputParams::m_CellLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00049">LstmInputParams::m_CellToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00048">LstmInputParams::m_CellToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00050">LstmInputParams::m_CellToOutputWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00495">FullyConnectedDescriptor::m_ConstantWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00714">DetectionPostProcessDescriptor::m_DetectionsPerClass</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00052">LstmInputParams::m_ForgetGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00058">LstmInputParams::m_ForgetLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00051">LstmInputParams::m_InputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00057">LstmInputParams::m_InputLayerNormWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01258">StackDescriptor::m_InputShape</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00042">LstmInputParams::m_InputToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00041">LstmInputParams::m_InputToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00090">LstmInputParamsInfo::m_InputToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00040">LstmInputParams::m_InputToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00043">LstmInputParams::m_InputToOutputWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00712">DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00710">DetectionPostProcessDescriptor::m_MaxDetections</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00993">ResizeDescriptor::m_Method</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00718">DetectionPostProcessDescriptor::m_NmsIouThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00716">DetectionPostProcessDescriptor::m_NmsScoreThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00720">DetectionPostProcessDescriptor::m_NumClasses</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01256">StackDescriptor::m_NumInputs</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00054">LstmInputParams::m_OutputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00060">LstmInputParams::m_OutputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00056">LstmInputParams::m_ProjectionBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00055">LstmInputParams::m_ProjectionWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00046">LstmInputParams::m_RecurrentToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00045">LstmInputParams::m_RecurrentToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00044">LstmInputParams::m_RecurrentToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00047">LstmInputParams::m_RecurrentToOutputWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00730">DetectionPostProcessDescriptor::m_ScaleH</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00728">DetectionPostProcessDescriptor::m_ScaleW</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00724">DetectionPostProcessDescriptor::m_ScaleX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00726">DetectionPostProcessDescriptor::m_ScaleY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01020">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00493">FullyConnectedDescriptor::m_TransposeWeightMatrix</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00722">DetectionPostProcessDescriptor::m_UseRegularNms</a>, <a class="el" href="_types_8hpp_source.xhtml#l00031">armnn::MaxNumOfTensorDimensions</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00019">armnnUtils::ProcessConcatInputTensorInfo()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00158">OriginsDescriptor::SetConcatAxis()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00193">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00310">ViewsDescriptor::SetViewOriginCoord()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00315">ViewsDescriptor::SetViewSize()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00613">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l02673"></a><span class="lineno"> 2673</span>&#160;{</div><div class="line"><a name="l02674"></a><span class="lineno"> 2674</span>&#160;    std::vector&lt;unsigned int&gt; outputDims(targetDimsIn.begin(), targetDimsIn.end());</div><div class="line"><a name="l02675"></a><span class="lineno"> 2675</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> stretchDim = std::find(targetDimsIn.begin(), targetDimsIn.end(), -1);</div><div class="line"><a name="l02676"></a><span class="lineno"> 2676</span>&#160;</div><div class="line"><a name="l02677"></a><span class="lineno"> 2677</span>&#160;    <span class="keywordflow">if</span> (stretchDim != targetDimsIn.end())</div><div class="line"><a name="l02678"></a><span class="lineno"> 2678</span>&#160;    {</div><div class="line"><a name="l02679"></a><span class="lineno"> 2679</span>&#160;        <span class="keywordflow">if</span> (std::find(std::next(stretchDim), targetDimsIn.end(), -1) != targetDimsIn.end())</div><div class="line"><a name="l02680"></a><span class="lineno"> 2680</span>&#160;        {</div><div class="line"><a name="l02681"></a><span class="lineno"> 2681</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02682"></a><span class="lineno"> 2682</span>&#160;                fmt::format(<span class="stringliteral">&quot;At most one component of shape can be -1 {}&quot;</span>, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02683"></a><span class="lineno"> 2683</span>&#160;        }</div><div class="line"><a name="l02684"></a><span class="lineno"> 2684</span>&#160;</div><div class="line"><a name="l02685"></a><span class="lineno"> 2685</span>&#160;        <span class="keyword">auto</span> targetNumElements =</div><div class="line"><a name="l02686"></a><span class="lineno"> 2686</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(</div><div class="line"><a name="l02687"></a><span class="lineno"> 2687</span>&#160;                std::accumulate(targetDimsIn.begin(), targetDimsIn.end(), -1, std::multiplies&lt;int32_t&gt;()));</div><div class="line"><a name="l02688"></a><span class="lineno"> 2688</span>&#160;</div><div class="line"><a name="l02689"></a><span class="lineno"> 2689</span>&#160;        <span class="keyword">auto</span> stretchIndex = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(std::distance(targetDimsIn.begin(), stretchDim));</div><div class="line"><a name="l02690"></a><span class="lineno"> 2690</span>&#160;        outputDims[stretchIndex] = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>() / targetNumElements;</div><div class="line"><a name="l02691"></a><span class="lineno"> 2691</span>&#160;    }</div><div class="line"><a name="l02692"></a><span class="lineno"> 2692</span>&#160;</div><div class="line"><a name="l02693"></a><span class="lineno"> 2693</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()), outputDims.data());</div><div class="line"><a name="l02694"></a><span class="lineno"> 2694</span>&#160;</div><div class="line"><a name="l02695"></a><span class="lineno"> 2695</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> reshapeInfo = inputTensorInfo;</div><div class="line"><a name="l02696"></a><span class="lineno"> 2696</span>&#160;    reshapeInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outputShape);</div><div class="line"><a name="l02697"></a><span class="lineno"> 2697</span>&#160;</div><div class="line"><a name="l02698"></a><span class="lineno"> 2698</span>&#160;    <span class="keywordflow">return</span> reshapeInfo;</div><div class="line"><a name="l02699"></a><span class="lineno"> 2699</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00193">Tensor.hpp:193</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00196">Tensor.hpp:196</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7d28f3a07c7ab30f66e7c70ded86eb49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d28f3a07c7ab30f66e7c70ded86eb49">&#9670;&nbsp;</a></span>OutputShapeOfSqueeze()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> OutputShapeOfSqueeze </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; uint32_t &gt;&#160;</td>
          <td class="paramname"><em>squeezeDims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01928">1928</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00041">ARMNN_THROW_PARSE_EXCEPTION</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00182">CHECK_MODEL</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00032">CHECK_VALID_SIZE</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04690">TfLiteParserImpl::GetBuffer()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04423">TfLiteParserImpl::GetInputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04503">TfLiteParserImpl::GetInputTensorIds()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00427">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00196">TensorInfo::GetNumElements()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04450">TfLiteParserImpl::GetOutputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04513">TfLiteParserImpl::GetOutputTensorIds()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00061">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01171">MeanDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00063">ActivationDescriptor::m_B</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01323">StridedSliceDescriptor::m_Begin</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01331">StridedSliceDescriptor::m_BeginMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01344">StridedSliceDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01338">StridedSliceDescriptor::m_EllipsisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01325">StridedSliceDescriptor::m_End</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01334">StridedSliceDescriptor::m_EndMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00059">ActivationDescriptor::m_Function</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01173">MeanDescriptor::m_KeepDims</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01341">StridedSliceDescriptor::m_NewAxisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01205">PadDescriptor::m_PaddingMode</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01199">PadDescriptor::m_PadList</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01202">PadDescriptor::m_PadValue</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01336">StridedSliceDescriptor::m_ShrinkAxisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01327">StridedSliceDescriptor::m_Stride</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01020">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00193">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ae1b3c9c6087a93b07c83e0b04f377a8d">armnn::Signed64</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00613">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;{</div><div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;    <a class="code" href="_verification_helpers_8hpp.xhtml#a479b2821a7a2cbb8fa8eb7f60a47065d">CHECK_VALID_SIZE</a>(squeezeDims.size(), 0, 1, 2, 3, 4);</div><div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> uint32_t dimensionSequence[] = { 0, 1, 2, 3 };</div><div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;</div><div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;    <span class="keywordflow">if</span> (inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 4)</div><div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;    {</div><div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;Input tensor has unexpected number of dimensions:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()</div><div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;           &lt;&lt; <span class="stringliteral">&quot; shape:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;           &lt;&lt; <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(ss.str());</div><div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;    }</div><div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;</div><div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;    <span class="keywordflow">if</span> (squeezeDims.empty())</div><div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;    {</div><div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;        squeezeDims.assign(dimensionSequence,</div><div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;                           dimensionSequence+inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div><div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;    }</div><div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;</div><div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;    std::vector&lt;uint32_t&gt; outputDims;</div><div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;    {</div><div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;        <span class="keywordtype">bool</span> skipSqueeze = (std::find(squeezeDims.begin(), squeezeDims.end(), i) == squeezeDims.end());</div><div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;        <span class="keyword">auto</span> currentDimension = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div><div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;        <span class="keywordflow">if</span> (skipSqueeze || currentDimension != 1)</div><div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;        {</div><div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;            outputDims.push_back(currentDimension);</div><div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;        }</div><div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;    }</div><div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;</div><div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;    <span class="keywordflow">if</span> (outputDims.size() &gt; 4)</div><div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;    {</div><div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;Output tensor has unexpected number of dimensions:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()</div><div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;           &lt;&lt; <span class="stringliteral">&quot; shape:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;           &lt;&lt; <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(ss.str());</div><div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;    }</div><div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;</div><div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()),</div><div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;                                       outputDims.data());</div><div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;</div><div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;    <span class="comment">// we need to preserve the tensor type and the quantization data as well</span></div><div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outTensorInfo = inputTensorInfo;</div><div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;    outTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outShape);</div><div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;</div><div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;    <span class="keywordflow">return</span> outTensorInfo;</div><div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00193">Tensor.hpp:193</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_a479b2821a7a2cbb8fa8eb7f60a47065d"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#a479b2821a7a2cbb8fa8eb7f60a47065d">CHECK_VALID_SIZE</a></div><div class="ttdeci">#define CHECK_VALID_SIZE(ACTUAL,...)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00032">VerificationHelpers.hpp:32</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnnTfLiteParser/<a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a></li>
<li>src/armnnTfLiteParser/<a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml">armnnTfLiteParser</a></li><li class="navelem"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml">TfLiteParserImpl</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:38 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
