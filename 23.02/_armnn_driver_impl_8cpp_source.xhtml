<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: shim/sl/canonical/ArmnnDriverImpl.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_armnn_driver_impl_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ArmnnDriverImpl.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_armnn_driver_impl_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2022 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_armnn_driver_impl_8hpp.xhtml">ArmnnDriverImpl.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_armnn_prepared_model_8hpp.xhtml">ArmnnPreparedModel.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_model_to_i_network_transformer_8hpp.xhtml">ModelToINetworkTransformer.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_system_properties_utils_8hpp.xhtml">SystemPropertiesUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_deserializer_8hpp.xhtml">armnnDeserializer/IDeserializer.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;log/log.h&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;sys/stat.h&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;Capabilities GenerateCapabilities()</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::GenerateCapabilities()&quot;</span>;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordtype">float</span> defaultPerfValue = .1f;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">const</span> Capabilities::PerformanceInfo defaultPerfInfo = { <span class="comment">/* execTime */</span> defaultPerfValue,</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                                                            <span class="comment">/* powerUsage */</span> defaultPerfValue</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                                                          };</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    std::vector&lt;OperandType&gt; operandsTypes({</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                OperandType::FLOAT32,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                OperandType::INT32,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                OperandType::UINT32,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                OperandType::TENSOR_FLOAT32,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                OperandType::TENSOR_INT32,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                OperandType::TENSOR_QUANT8_ASYMM,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                OperandType::BOOL,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                OperandType::TENSOR_QUANT16_SYMM,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                OperandType::TENSOR_FLOAT16,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                OperandType::TENSOR_BOOL8,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                OperandType::FLOAT16,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                OperandType::TENSOR_QUANT8_SYMM_PER_CHANNEL,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                OperandType::TENSOR_QUANT16_ASYMM,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                OperandType::TENSOR_QUANT8_SYMM,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                OperandType::TENSOR_QUANT8_ASYMM_SIGNED,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    });</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    std::vector&lt;Capabilities::OperandPerformance&gt; operandPerformances;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    operandPerformances.reserve(operandsTypes.size());</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> opType : operandsTypes)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        operandPerformances.push_back(</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                Capabilities::OperandPerformance{ <span class="comment">/* type */</span> opType, <span class="comment">/* info */</span> defaultPerfInfo });</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">auto</span> operandPerformanceTable =</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;               Capabilities::OperandPerformanceTable::create(std::move(operandPerformances)).value();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> { <span class="comment">/* relaxedFloat32toFloat16PerformanceScalar */</span> defaultPerfInfo,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;             <span class="comment">/* relaxedFloat32toFloat16PerformanceTensor */</span> defaultPerfInfo,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;             <span class="comment">/* operandPerformance */</span> std::move(operandPerformanceTable),</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;             <span class="comment">/* ifPerformance */</span> defaultPerfInfo,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;             <span class="comment">/* whilePerformance */</span> defaultPerfInfo };</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keywordtype">size_t</span> Hash(std::vector&lt;uint8_t&gt;&amp; cacheData)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    std::size_t hash = cacheData.size();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; i : cacheData)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        hash = ((hash &lt;&lt; 5) - hash) + i;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">return</span> hash;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;} <span class="comment">// anonymous namespace</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespaceandroid_1_1nn.xhtml">android::nn</a>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn__driver.xhtml">armnn_driver</a></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keywordtype">bool</span> ArmnnDriverImpl::ValidateSharedHandle(<span class="keyword">const</span> SharedHandle&amp; sharedHandle)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordtype">bool</span> valid = <span class="keyword">true</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">if</span> (*sharedHandle &lt; 0)</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">return</span> !valid;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordtype">int</span> dataCacheFileAccessMode = fcntl(*sharedHandle, F_GETFL) &amp; O_ACCMODE;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">if</span> (dataCacheFileAccessMode != O_RDWR)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">return</span> !valid;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> valid;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_armnn_driver_impl.xhtml#ad7f46e940507224fb741406dc216f370">   99</a></span>&#160;GeneralResult&lt;SharedPreparedModel&gt; ArmnnDriverImpl::PrepareArmnnModel(</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a>&amp; runtime,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a2d3a708a26ac6d77bf8f15506e89a25a">armnn::IGpuAccTunedParametersPtr</a>&amp; clTunedParameters,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_driver_options.xhtml">DriverOptions</a>&amp; options,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> std::vector&lt;SharedHandle&gt;&amp; modelCacheHandle,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> std::vector&lt;SharedHandle&gt;&amp; dataCacheHandle,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> CacheToken&amp; token,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordtype">bool</span> float32ToFloat16,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    Priority priority)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::PrepareArmnnModel()&quot;</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> (!runtime)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::DEVICE_UNAVAILABLE) &lt;&lt; <span class="stringliteral">&quot;Device unavailable&quot;</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">const</span> <span class="keyword">auto</span> result = validate(model); !result.ok())</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::INVALID_ARGUMENT) &lt;&lt; <span class="stringliteral">&quot;Invalid model passed as input&quot;</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// Deliberately ignore any unsupported operations requested by the options -</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">// at this point we&#39;re being asked to prepare a model that we&#39;ve already declared support for</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">// and the operation indices may be different to those in getSupportedOperations anyway.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    std::set&lt;unsigned int&gt; unsupportedOperations;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml">ModelToINetworkTransformer</a> modelConverter(options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>(),</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                                              model,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                              unsupportedOperations);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">if</span> (modelConverter.GetConversionResult() != ConversionResult::Success)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkConverter failed&quot;</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Serialize the network graph to a .armnn file if an output directory</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// has been specified in the drivers&#39; arguments.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    std::vector&lt;uint8_t&gt; dataCacheData;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordtype">bool</span> serializeToFile = dataCacheHandle.size() &lt; 1 ? false : <span class="keyword">true</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">auto</span> serializedNetworkFileName =</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a31f074135a3dba97d9baf1dffd0a07fd">SerializeNetwork</a>(*modelConverter.GetINetwork(),</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                             options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a052b5692df75f05d7f0710faca305bb8">GetRequestInputsAndOutputsDumpDir</a>(),</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                             dataCacheData,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                             serializeToFile);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// Optimize the network</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a> optNet(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a> OptOptions;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    OptOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a6e1a42622ca43dafc7ba8e684c016eb4">m_ReduceFp32ToFp16</a> = float32ToFloat16;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    OptOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">m_ProfilingEnabled</a> = options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a43799d34e102001274633713c12c0225">IsGpuProfilingEnabled</a>();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordtype">int</span> cachedFd = -1;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordtype">bool</span> saveCachedNetwork = options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a9640684f215321d0d93f6f3cb14d5da1">SaveCachedNetwork</a>();</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfCachedModelFiles = 0;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">if</span> (modelCacheHandle.size() &gt; 0)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index = 0;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; backend : options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>())</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="comment">// modelCacheHandle size should be equal to numberOfCachedModelFiles</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="comment">// modelCacheHandle vector should be in same order as backends</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keyword">auto</span> numberOfCacheFiles = <a class="code" href="namespacearmnn.xhtml#ae266ee8bf362cbf8a88ab6e6b389791a">GetNumberOfCacheFiles</a>(backend);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">if</span> (numberOfCacheFiles &gt; 0)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                numberOfCachedModelFiles += numberOfCacheFiles;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="comment">// For GpuAcc numberOfCachedFiles is 1</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordflow">if</span> (backend == <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a>)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    cachedFd = *modelCacheHandle[index];</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    saveCachedNetwork = <span class="keyword">true</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                index += numberOfCachedModelFiles;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> gpuAcc(<span class="stringliteral">&quot;GpuAcc&quot;</span>,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        { <span class="stringliteral">&quot;FastMathEnabled&quot;</span>, options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#abfe9aa4fa74aca0f9a925752bbbb0f79">IsFastMathEnabled</a>() },</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        { <span class="stringliteral">&quot;SaveCachedNetwork&quot;</span>, saveCachedNetwork },</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        { <span class="stringliteral">&quot;CachedNetworkFilePath&quot;</span>, options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#aa9b3868fd9a9b9fc4b637e9fa3fa3b5a">GetCachedNetworkFilePath</a>() },</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        { <span class="stringliteral">&quot;MLGOTuningFilePath&quot;</span>, options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#acb9af28ccca1aac78c52be2baf0bf864">GetClMLGOTunedParametersFile</a>() },</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        { <span class="stringliteral">&quot;CachedFileDescriptor&quot;</span>, cachedFd }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    });</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> cpuAcc(<span class="stringliteral">&quot;CpuAcc&quot;</span>,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        { <span class="stringliteral">&quot;FastMathEnabled&quot;</span>, options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#abfe9aa4fa74aca0f9a925752bbbb0f79">IsFastMathEnabled</a>() },</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        { <span class="stringliteral">&quot;NumberOfThreads&quot;</span>, options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ab496797d400c4976d0d4b15b110bf7d9">GetNumberOfThreads</a>() }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    });</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    OptOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(gpuAcc);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    OptOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(cpuAcc);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    std::vector&lt;std::string&gt; errMessages;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a>(*modelConverter.GetINetwork(),</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                 options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>(),</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                 runtime-&gt;GetDeviceSpec(),</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                 OptOptions,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                 errMessages);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">catch</span> (std::exception&amp; e)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; e.what();</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// Check that the optimized network is valid.</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">if</span> (!optNet)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        std::stringstream message;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        message &lt;&lt; <span class="stringliteral">&quot;Invalid optimized network&quot;</span>;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; msg : errMessages)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            message &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; msg;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; message.str();</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="comment">// Export the optimized network graph to a dot file if an output dump directory</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="comment">// has been specified in the drivers&#39; arguments.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    std::string dotGraphFileName = <a class="code" href="namespacearmnn__driver.xhtml#a5304cf930377fc082e7494d20de2be12">ExportNetworkGraphToDotFile</a>(*optNet,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                                               options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a052b5692df75f05d7f0710faca305bb8">GetRequestInputsAndOutputsDumpDir</a>());</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// Load it into the runtime.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> netId = 0;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    std::string msg;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a> networkProperties(options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ae87f994847cbe71c0e0bb5665f8fc218">isAsyncModelExecutionEnabled</a>(),</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                                MemorySource::Undefined,</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                                MemorySource::Undefined,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                                options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a43799d34e102001274633713c12c0225">IsGpuProfilingEnabled</a>());</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">auto</span> numInputs  = <a class="code" href="_conversion_utils_8hpp.xhtml#abcb5019b10b89cbd2b96118885a026d4">getMainModel</a>(model).inputIndexes.size();</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">auto</span> numOutputs = <a class="code" href="_conversion_utils_8hpp.xhtml#abcb5019b10b89cbd2b96118885a026d4">getMainModel</a>(model).outputIndexes.size();</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordflow">if</span> (runtime-&gt;LoadNetwork(netId, move(optNet), msg, networkProperties) != <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a>)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; <span class="stringliteral">&quot;Network could not be loaded&quot;</span>;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">catch</span> (std::exception&amp; e)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        std::stringstream message;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        message &lt;&lt; <span class="stringliteral">&quot;Exception (&quot;</span> &lt;&lt; e.what()&lt;&lt; <span class="stringliteral">&quot;) caught from LoadNetwork.&quot;</span>;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; message.str();</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">// Now that we have a networkId for the graph rename the exported files to use it</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// so that we can associate the graph file and the input/output tensor exported files</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a3d30e31a46482fbc714fc34e0d5a1c90">RenameExportedFiles</a>(serializedNetworkFileName,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                        dotGraphFileName,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                        options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a052b5692df75f05d7f0710faca305bb8">GetRequestInputsAndOutputsDumpDir</a>(),</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                        netId);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// Cache the model</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordtype">size_t</span> hashValue = 0;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">if</span> (dataCacheHandle.size() == 1 )</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        hashValue = Hash(dataCacheData);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    }</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// Cache the model data</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">if</span> (modelCacheHandle.size() &gt; 0)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keywordflow">if</span> (modelCacheHandle.size() == numberOfCachedModelFiles)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; modelCacheHandle.size(); ++i)</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                <span class="keywordtype">int</span> modelCacheFileAccessMode = fcntl(*modelCacheHandle[i], F_GETFL) &amp; O_ACCMODE;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <span class="keywordflow">if</span> (modelCacheFileAccessMode != O_RDONLY)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    <span class="keyword">struct </span>stat statBuffer;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    <span class="keywordflow">if</span> (fstat(*modelCacheHandle[i], &amp;statBuffer) == 0)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                    {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        <span class="keywordtype">long</span> modelDataSize = statBuffer.st_size;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                        <span class="keywordflow">if</span> (modelDataSize &gt; 0)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                        {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                            std::vector&lt;uint8_t&gt; modelData(modelDataSize);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                            pread(*modelCacheHandle[i], modelData.data(), modelData.size(), 0);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                            hashValue ^= Hash(modelData);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                        }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">if</span> (dataCacheHandle.size() == 1 &amp;&amp; hashValue != 0)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        std::vector&lt;uint8_t&gt; theHashValue(<span class="keyword">sizeof</span>(hashValue));</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        ::memcpy(theHashValue.data(), &amp;hashValue, <span class="keyword">sizeof</span>(hashValue));</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        write(*dataCacheHandle[0], theHashValue.data(), theHashValue.size());</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        pwrite(*dataCacheHandle[0], dataCacheData.data(), dataCacheData.size(), theHashValue.size());</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    }</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordtype">bool</span> executeWithDummyInputs = (std::find(options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>().begin(),</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                            options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>().end(),</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                            <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a>) != options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>().end());</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">auto</span> preparedModel = std::make_shared&lt;const ArmnnPreparedModel&gt;(netId,</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                                                    runtime.get(),</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                                                    model,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                                                    options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a052b5692df75f05d7f0710faca305bb8">GetRequestInputsAndOutputsDumpDir</a>(),</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                                                    options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a43799d34e102001274633713c12c0225">IsGpuProfilingEnabled</a>(),</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                                                    priority);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="comment">// Run a single &#39;dummy&#39; inference of the model. This means that CL kernels will get compiled (and tuned if</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="comment">// this is enabled) before the first &#39;real&#39; inference which removes the overhead of the first inference.</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="comment">// Only run this if the GpuAcc backend has been added to options</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">if</span> (std::find(options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>().begin(),</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                  options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>().end(),</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                  <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a>) != options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>().end())</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordflow">if</span> (!preparedModel-&gt;ExecuteWithDummyInputs(numInputs, numOutputs))</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; <span class="stringliteral">&quot;Network could not be executed&quot;</span>;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordflow">if</span> (clTunedParameters &amp;&amp;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a97f3f76fa3f6f6c6438e2e7121415219">GetClTunedParametersMode</a>() == <a class="code" href="classarmnn_1_1_i_gpu_acc_tuned_parameters.xhtml#a46c8a310cf4c094f8c80e1cb8dc1f911ac20468a4ef4b1707d13a1aea2ece6104">armnn::IGpuAccTunedParameters::Mode::UpdateTunedParameters</a>)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        {</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="comment">// Now that we&#39;ve done one inference the CL kernel parameters will have been tuned,</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="comment">// so save the updated file.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keywordflow">try</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                clTunedParameters-&gt;Save(options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a37570fb994ca42aac33a6a494f63c6c5">GetClTunedParametersFile</a>().c_str());</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">catch</span> (std::exception&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>)</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::prepareModel: Failed to save CL tuned parameters file&quot;</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                             &lt;&lt; options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a37570fb994ca42aac33a6a494f63c6c5">GetClTunedParametersFile</a>().c_str() &lt;&lt; error.what();</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        }</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">return</span> std::move(preparedModel);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;}</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_armnn_driver_impl.xhtml#a3f22b9cef4af3244aaed9c28f7674a1b">  338</a></span>&#160;GeneralResult&lt;SharedPreparedModel&gt; ArmnnDriverImpl::PrepareArmnnModelFromCache(</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a>&amp; runtime,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a2d3a708a26ac6d77bf8f15506e89a25a">armnn::IGpuAccTunedParametersPtr</a>&amp; clTunedParameters,</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_driver_options.xhtml">DriverOptions</a>&amp; options,</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> std::vector&lt;SharedHandle&gt;&amp; modelCacheHandle,</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">const</span> std::vector&lt;SharedHandle&gt;&amp; dataCacheHandle,</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keyword">const</span> CacheToken&amp; token,</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordtype">bool</span> float32ToFloat16)</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;{</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::PrepareArmnnModelFromCache()&quot;</span>;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">if</span> (!runtime)</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    {</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::DEVICE_UNAVAILABLE)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::prepareModelFromCache(): Device unavailable&quot;</span>;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordflow">if</span> (token.size() != ANEURALNETWORKS_BYTE_SIZE_OF_CACHE_TOKEN)</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    {</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE)</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::prepareModelFromCache(): Token size does not match!&quot;</span>;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    }</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="comment">// Validate dataCacheHandle</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">if</span> (dataCacheHandle.size() != 1)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE)</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::prepareModelFromCache(): Not valid data cache handle!&quot;</span>;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">if</span> (!ValidateSharedHandle(dataCacheHandle[0]))</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    {</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE)</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::prepareModelFromCache(): Not valid data cache handle!&quot;</span>;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    }</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keywordtype">size_t</span> cachedDataSize = 0;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">struct </span>stat dataStatBuffer;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">if</span> (fstat(*dataCacheHandle[0], &amp;dataStatBuffer) == 0)</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        cachedDataSize = dataStatBuffer.st_size;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    }</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">if</span> (cachedDataSize == 0)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE)</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::prepareModelFromCache(): Not valid cached data!&quot;</span>;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="comment">// Check if model files cached they match the expected value</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfCachedModelFiles = 0;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; backend : options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>())</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    {</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        numberOfCachedModelFiles += <a class="code" href="namespacearmnn.xhtml#ae266ee8bf362cbf8a88ab6e6b389791a">GetNumberOfCacheFiles</a>(backend);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordflow">if</span> (modelCacheHandle.size() != numberOfCachedModelFiles)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    {</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE)</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                           &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::prepareModelFromCache(): Model cache handle size does not match.&quot;</span>;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    }</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="comment">// Read the hashValue</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    std::vector&lt;uint8_t&gt; hashValue(<span class="keyword">sizeof</span>(<span class="keywordtype">size_t</span>));</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    pread(*dataCacheHandle[0], hashValue.data(), hashValue.size(), 0);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="comment">// Read the model</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    std::vector&lt;uint8_t&gt; dataCacheData(cachedDataSize - hashValue.size());</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    pread(*dataCacheHandle[0], dataCacheData.data(), dataCacheData.size(), hashValue.size());</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keyword">auto</span> calculatedHashValue = Hash(dataCacheData);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordtype">int</span> gpuAccCachedFd = -1;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keywordflow">if</span> (modelCacheHandle.size() &gt; 0)</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    {</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index = 0;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; backend : options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>())</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            <span class="comment">// modelCacheHandle size should be equal to numberOfCachedModelFiles</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="comment">// modelCacheHandle vector should be in same order as backends</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="keyword">auto</span> numberOfCacheFiles = <a class="code" href="namespacearmnn.xhtml#ae266ee8bf362cbf8a88ab6e6b389791a">GetNumberOfCacheFiles</a>(backend);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            <span class="keywordflow">if</span> (numberOfCacheFiles &gt; 0)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            {</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                <span class="keywordflow">if</span> (!ValidateSharedHandle(modelCacheHandle[index]))</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                {</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                    <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE)</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::prepareModelFromCache(): Invalid model cache handle!&quot;</span>;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                }</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                <span class="keywordtype">int</span> cachedFd = *modelCacheHandle[index];</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                <span class="keyword">struct </span>stat statBuffer;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                <span class="keywordflow">if</span> (fstat(cachedFd, &amp;statBuffer) == 0)</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                {</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                    <span class="keywordtype">long</span> modelDataSize = statBuffer.st_size;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                    <span class="keywordflow">if</span> (modelDataSize &gt; 0)</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                    {</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                        std::vector&lt;uint8_t&gt; modelData(modelDataSize);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                        pread(cachedFd, modelData.data(), modelData.size(), 0);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                        calculatedHashValue ^= Hash(modelData);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                        <span class="keywordflow">if</span> (backend == <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a>)</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                        {</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                            gpuAccCachedFd = cachedFd;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                        }</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                    }</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                }</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                index += numberOfCacheFiles;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            }</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        }</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    }</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    std::vector&lt;uint8_t&gt; calculatedHashData(<span class="keyword">sizeof</span>(calculatedHashValue));</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    ::memcpy(calculatedHashData.data(), &amp;calculatedHashValue, <span class="keyword">sizeof</span>(calculatedHashValue));</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordflow">if</span> (hashValue != calculatedHashData)</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    {</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE)</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::prepareModelFromCache(): ValidateHash() failed!&quot;</span>;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    }</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="comment">// Deserialize the network..</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network = <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>(<span class="keyword">nullptr</span>, [](<a class="code" href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a>*){});</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    {</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        network = <a class="code" href="classarmnn_deserializer_1_1_i_deserializer.xhtml#af116abd698a7feb92876ae48917005a4">armnnDeserializer::IDeserializer::Create</a>()-&gt;CreateNetworkFromBinary(dataCacheData);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">catch</span> (std::exception&amp;)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    {</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE)</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::prepareModelFromCache(): Exception caught from Deserializer!&quot;</span>;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="comment">// Optimize the network</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a> optNet(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a> OptOptions;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    OptOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a6e1a42622ca43dafc7ba8e684c016eb4">m_ReduceFp32ToFp16</a> = float32ToFloat16;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    OptOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">m_ProfilingEnabled</a> = options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a43799d34e102001274633713c12c0225">IsGpuProfilingEnabled</a>();</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> gpuAcc(<span class="stringliteral">&quot;GpuAcc&quot;</span>,</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    {</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        { <span class="stringliteral">&quot;FastMathEnabled&quot;</span>, options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#abfe9aa4fa74aca0f9a925752bbbb0f79">IsFastMathEnabled</a>() },</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        { <span class="stringliteral">&quot;SaveCachedNetwork&quot;</span>, <span class="keyword">false</span> },</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        { <span class="stringliteral">&quot;CachedNetworkFilePath&quot;</span>, options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#aa9b3868fd9a9b9fc4b637e9fa3fa3b5a">GetCachedNetworkFilePath</a>() },</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        { <span class="stringliteral">&quot;MLGOTuningFilePath&quot;</span>, options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#acb9af28ccca1aac78c52be2baf0bf864">GetClMLGOTunedParametersFile</a>() },</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        { <span class="stringliteral">&quot;CachedFileDescriptor&quot;</span>, gpuAccCachedFd }</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    });</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> cpuAcc(<span class="stringliteral">&quot;CpuAcc&quot;</span>,</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    {</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        { <span class="stringliteral">&quot;FastMathEnabled&quot;</span>, options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#abfe9aa4fa74aca0f9a925752bbbb0f79">IsFastMathEnabled</a>() },</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        { <span class="stringliteral">&quot;NumberOfThreads&quot;</span>, options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ab496797d400c4976d0d4b15b110bf7d9">GetNumberOfThreads</a>() }</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    });</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    OptOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(gpuAcc);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    OptOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(cpuAcc);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    std::vector&lt;std::string&gt; errMessages;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a>(*network.get(),</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                 options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>(),</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                 runtime-&gt;GetDeviceSpec(),</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                 OptOptions,</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                 errMessages);</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    }</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordflow">catch</span> (std::exception&amp; e)</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    {</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; e.what();</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    }</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="comment">// Check that the optimized network is valid.</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordflow">if</span> (!optNet)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    {</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        std::stringstream message;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        message &lt;&lt; <span class="stringliteral">&quot;Invalid optimized network&quot;</span>;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; msg : errMessages)</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        {</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            message &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; msg;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        }</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; message.str();</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    }</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="comment">// Export the optimized network graph to a dot file if an output dump directory</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="comment">// has been specified in the drivers&#39; arguments.</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    std::string dotGraphFileName = <a class="code" href="namespacearmnn__driver.xhtml#a5304cf930377fc082e7494d20de2be12">ExportNetworkGraphToDotFile</a>(*optNet,</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                                                               options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a052b5692df75f05d7f0710faca305bb8">GetRequestInputsAndOutputsDumpDir</a>());</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="comment">// Load it into the runtime.</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> netId = 0;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    std::string msg;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a> networkProperties(options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ae87f994847cbe71c0e0bb5665f8fc218">isAsyncModelExecutionEnabled</a>(),</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                                                MemorySource::Undefined,</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                                                MemorySource::Undefined,</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                                                options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a43799d34e102001274633713c12c0225">IsGpuProfilingEnabled</a>());</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    {</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        <span class="keywordflow">if</span> (runtime-&gt;LoadNetwork(netId, move(optNet), msg, networkProperties) != <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a>)</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; <span class="stringliteral">&quot;Network could not be loaded&quot;</span>;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        }</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    }</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">catch</span> (std::exception&amp; e)</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    {</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        std::stringstream message;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        message &lt;&lt; <span class="stringliteral">&quot;Exception (&quot;</span> &lt;&lt; e.what()&lt;&lt; <span class="stringliteral">&quot;) caught from LoadNetwork.&quot;</span>;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; message.str();</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    }</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="keyword">auto</span> preparedModel = std::make_shared&lt;const ArmnnPreparedModel&gt;(netId,</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                                                      runtime.get(),</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                                      options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a052b5692df75f05d7f0710faca305bb8">GetRequestInputsAndOutputsDumpDir</a>(),</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                                                      options.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a43799d34e102001274633713c12c0225">IsGpuProfilingEnabled</a>(),</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                                                      Priority::MEDIUM,</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                                                      <span class="keyword">true</span>);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordflow">return</span> std::move(preparedModel);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;}</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_armnn_driver_impl.xhtml#ae1de3914a6c5726a757ecd79ebb2e9fc">  549</a></span>&#160;<span class="keyword">const</span> Capabilities&amp; ArmnnDriverImpl::GetCapabilities(<span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a>&amp; runtime)</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;{</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::GetCapabilities()&quot;</span>;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> Capabilities theCapabilities = GenerateCapabilities();</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="keywordflow">return</span> theCapabilities;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;}</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;} <span class="comment">// namespace armnn_driver</span></div><div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a71194277c60153a5f86539f5d39f01db"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">armnn::OptimizerOptions::m_ModelOptions</a></div><div class="ttdeci">ModelOptions m_ModelOptions</div><div class="ttdoc">Enable Model Options. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00238">INetwork.hpp:238</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_abfe9aa4fa74aca0f9a925752bbbb0f79"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#abfe9aa4fa74aca0f9a925752bbbb0f79">armnn_driver::DriverOptions::IsFastMathEnabled</a></div><div class="ttdeci">bool IsFastMathEnabled() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00036">DriverOptions.hpp:36</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00041">IRuntime.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a></div><div class="ttdoc">Main network class which provides the interface for building up a neural network. ...</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00260">INetwork.hpp:260</a></div></div>
<div class="ttc" id="classarmnn_deserializer_1_1_i_deserializer_xhtml_af116abd698a7feb92876ae48917005a4"><div class="ttname"><a href="classarmnn_deserializer_1_1_i_deserializer.xhtml#af116abd698a7feb92876ae48917005a4">armnnDeserializer::IDeserializer::Create</a></div><div class="ttdeci">static IDeserializerPtr Create()</div><div class="ttdef"><b>Definition:</b> <a href="_deserializer_8cpp_source.xhtml#l00047">Deserializer.cpp:47</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::BoostLogSeverityMapping::error</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_ae87f994847cbe71c0e0bb5665f8fc218"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#ae87f994847cbe71c0e0bb5665f8fc218">armnn_driver::DriverOptions::isAsyncModelExecutionEnabled</a></div><div class="ttdeci">bool isAsyncModelExecutionEnabled() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00044">DriverOptions.hpp:44</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00043">IRuntime.hpp:43</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a6e1a42622ca43dafc7ba8e684c016eb4"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a6e1a42622ca43dafc7ba8e684c016eb4">armnn::OptimizerOptions::m_ReduceFp32ToFp16</a></div><div class="ttdeci">bool m_ReduceFp32ToFp16</div><div class="ttdoc">Reduces all Fp32 operators in the model to Fp16 for faster processing. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00219">INetwork.hpp:219</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a3d30e31a46482fbc714fc34e0d5a1c90"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a3d30e31a46482fbc714fc34e0d5a1c90">armnn_driver::RenameExportedFiles</a></div><div class="ttdeci">void RenameExportedFiles(const std::string &amp;existingSerializedFileName, const std::string &amp;existingDotFileName, const std::string &amp;dumpDir, const armnn::NetworkId networkId)</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00575">CanonicalUtils.cpp:575</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a923b39ec5f83672f50289cbaf5de6798"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">armnn_driver::Model</a></div><div class="ttdeci">::android::nn::Model Model</div><div class="ttdoc">Helper classes. </div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00043">ConversionUtils.hpp:43</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae266ee8bf362cbf8a88ab6e6b389791a"><div class="ttname"><a href="namespacearmnn.xhtml#ae266ee8bf362cbf8a88ab6e6b389791a">armnn::GetNumberOfCacheFiles</a></div><div class="ttdeci">unsigned int GetNumberOfCacheFiles(const armnn::BackendId &amp;backend)</div><div class="ttdoc">Returns the number of cached files if backend supports caching. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_helper_8cpp_source.xhtml#l00120">BackendHelper.cpp:120</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01773">Network.cpp:1773</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a31f074135a3dba97d9baf1dffd0a07fd"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a31f074135a3dba97d9baf1dffd0a07fd">armnn_driver::SerializeNetwork</a></div><div class="ttdeci">std::string SerializeNetwork(const armnn::INetwork &amp;network, const std::string &amp;dumpDir, std::vector&lt; uint8_t &gt; &amp;dataCacheData, bool dataCachingActive)</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00427">CanonicalUtils.cpp:427</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_a97f3f76fa3f6f6c6438e2e7121415219"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#a97f3f76fa3f6f6c6438e2e7121415219">armnn_driver::DriverOptions::GetClTunedParametersMode</a></div><div class="ttdeci">armnn::IGpuAccTunedParameters::Mode GetClTunedParametersMode() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00033">DriverOptions.hpp:33</a></div></div>
<div class="ttc" id="_armnn_driver_impl_8hpp_xhtml"><div class="ttname"><a href="_armnn_driver_impl_8hpp.xhtml">ArmnnDriverImpl.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00035">IRuntime.hpp:35</a></div></div>
<div class="ttc" id="_armnn_prepared_model_8hpp_xhtml"><div class="ttname"><a href="_armnn_prepared_model_8hpp.xhtml">ArmnnPreparedModel.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00253">INetwork.hpp:253</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a1b1892da2aaf7eaedaa38671d56b7f19"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">armnn::OptimizerOptions::m_ProfilingEnabled</a></div><div class="ttdeci">bool m_ProfilingEnabled</div><div class="ttdoc">Enable profiling dump of the optimizer phase. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_a052b5692df75f05d7f0710faca305bb8"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#a052b5692df75f05d7f0710faca305bb8">armnn_driver::DriverOptions::GetRequestInputsAndOutputsDumpDir</a></div><div class="ttdeci">const std::string &amp; GetRequestInputsAndOutputsDumpDir() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00028">DriverOptions.hpp:28</a></div></div>
<div class="ttc" id="namespaceandroid_1_1nn_xhtml"><div class="ttname"><a href="namespaceandroid_1_1nn.xhtml">android::nn</a></div><div class="ttdef"><b>Definition:</b> <a href="support__library__service_8cpp_source.xhtml#l00010">support_library_service.cpp:10</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a></div><div class="ttdoc">GPU Execution: OpenCL: ArmCompute. </div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a></div><div class="ttdoc">ArmNN performs an optimization on each model/network before it gets loaded for execution. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00137">INetwork.hpp:137</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_model_to_i_network_transformer_xhtml"><div class="ttname"><a href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml">armnn_driver::ModelToINetworkTransformer</a></div><div class="ttdef"><b>Definition:</b> <a href="_model_to_i_network_transformer_8hpp_source.xhtml#l00030">ModelToINetworkTransformer.hpp:30</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml">armnn_driver::DriverOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00017">DriverOptions.hpp:17</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_ab496797d400c4976d0d4b15b110bf7d9"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#ab496797d400c4976d0d4b15b110bf7d9">armnn_driver::DriverOptions::GetNumberOfThreads</a></div><div class="ttdeci">unsigned int GetNumberOfThreads() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00043">DriverOptions.hpp:43</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2d3a708a26ac6d77bf8f15506e89a25a"><div class="ttname"><a href="namespacearmnn.xhtml#a2d3a708a26ac6d77bf8f15506e89a25a">armnn::IGpuAccTunedParametersPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IGpuAccTunedParameters &gt; IGpuAccTunedParametersPtr</div><div class="ttdoc">The following API is replaced by the backend options API. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00307">IRuntime.hpp:307</a></div></div>
<div class="ttc" id="_system_properties_utils_8hpp_xhtml"><div class="ttname"><a href="_system_properties_utils_8hpp.xhtml">SystemPropertiesUtils.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a></div><div class="ttdoc">Struct for the users to pass backend specific options. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00022">BackendOptions.hpp:22</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a5304cf930377fc082e7494d20de2be12"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a5304cf930377fc082e7494d20de2be12">armnn_driver::ExportNetworkGraphToDotFile</a></div><div class="ttdeci">std::string ExportNetworkGraphToDotFile(const armnn::IOptimizedNetwork &amp;optimizedNetwork, const std::string &amp;dumpDir)</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00387">CanonicalUtils.cpp:387</a></div></div>
<div class="ttc" id="_conversion_utils_8hpp_xhtml_abcb5019b10b89cbd2b96118885a026d4"><div class="ttname"><a href="_conversion_utils_8hpp.xhtml#abcb5019b10b89cbd2b96118885a026d4">getMainModel</a></div><div class="ttdeci">const android::nn::Model::Subgraph &amp; getMainModel(const android::nn::Model &amp;model)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00028">ConversionUtils.hpp:28</a></div></div>
<div class="ttc" id="_i_deserializer_8hpp_xhtml"><div class="ttname"><a href="_i_deserializer_8hpp.xhtml">IDeserializer.hpp</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_ad95feca4087d8e42ecacc1950a3d3901"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">armnn_driver::DriverOptions::GetBackends</a></div><div class="ttdeci">const std::vector&lt; armnn::BackendId &gt; &amp; GetBackends() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00026">DriverOptions.hpp:26</a></div></div>
<div class="ttc" id="_model_to_i_network_transformer_8hpp_xhtml"><div class="ttname"><a href="_model_to_i_network_transformer_8hpp.xhtml">ModelToINetworkTransformer.hpp</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_a43799d34e102001274633713c12c0225"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#a43799d34e102001274633713c12c0225">armnn_driver::DriverOptions::IsGpuProfilingEnabled</a></div><div class="ttdeci">bool IsGpuProfilingEnabled() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00035">DriverOptions.hpp:35</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00252">INetwork.hpp:252</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_aa9b3868fd9a9b9fc4b637e9fa3fa3b5a"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#aa9b3868fd9a9b9fc4b637e9fa3fa3b5a">armnn_driver::DriverOptions::GetCachedNetworkFilePath</a></div><div class="ttdeci">const std::string &amp; GetCachedNetworkFilePath() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00041">DriverOptions.hpp:41</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_a37570fb994ca42aac33a6a494f63c6c5"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#a37570fb994ca42aac33a6a494f63c6c5">armnn_driver::DriverOptions::GetClTunedParametersFile</a></div><div class="ttdeci">const std::string &amp; GetClTunedParametersFile() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00031">DriverOptions.hpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_gpu_acc_tuned_parameters_xhtml_a46c8a310cf4c094f8c80e1cb8dc1f911ac20468a4ef4b1707d13a1aea2ece6104"><div class="ttname"><a href="classarmnn_1_1_i_gpu_acc_tuned_parameters.xhtml#a46c8a310cf4c094f8c80e1cb8dc1f911ac20468a4ef4b1707d13a1aea2ece6104">armnn::IGpuAccTunedParameters::Mode::UpdateTunedParameters</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml"><div class="ttname"><a href="namespacearmnn__driver.xhtml">armnn_driver</a></div><div class="ttdoc">Helper classes. </div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8cpp_source.xhtml#l00037">ArmnnDevice.cpp:37</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_a9640684f215321d0d93f6f3cb14d5da1"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#a9640684f215321d0d93f6f3cb14d5da1">armnn_driver::DriverOptions::SaveCachedNetwork</a></div><div class="ttdeci">bool SaveCachedNetwork() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00042">DriverOptions.hpp:42</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_acb9af28ccca1aac78c52be2baf0bf864"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#acb9af28ccca1aac78c52be2baf0bf864">armnn_driver::DriverOptions::GetClMLGOTunedParametersFile</a></div><div class="ttdeci">const std::string &amp; GetClMLGOTunedParametersFile() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00032">DriverOptions.hpp:32</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_b4dbf96392bc72a402a7206cbda88a03.xhtml">shim</a></li><li class="navelem"><a class="el" href="dir_09eea26cf0279feb9fcfb9b796a3e57e.xhtml">sl</a></li><li class="navelem"><a class="el" href="dir_6de13b49022bb7cfc6557e28050d5cbe.xhtml">canonical</a></li><li class="navelem"><a class="el" href="_armnn_driver_impl_8cpp.xhtml">ArmnnDriverImpl.cpp</a></li>
    <li class="footer">Generated on Fri Feb 24 2023 10:24:24 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
