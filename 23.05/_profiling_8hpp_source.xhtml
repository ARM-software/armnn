<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/Profiling.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_profiling_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Profiling.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_profiling_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;common/include/ProfilingGuid.hpp&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_profiling_event_8hpp.xhtml">ProfilingEvent.hpp</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_profiling_details_8hpp.xhtml">ProfilingDetails.hpp</a>&quot;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_profiler_8hpp.xhtml">armnn/IProfiler.hpp</a>&quot;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_optional_8hpp.xhtml">armnn/Optional.hpp</a>&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_wall_clock_timer_8hpp.xhtml">WallClockTimer.hpp</a>&quot;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;chrono&gt;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;iosfwd&gt;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;ctime&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;stack&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// Simple single-threaded profiler.</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">// Tracks events reported by BeginEvent()/EndEvent() and outputs detailed information and stats when</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// Profiler::AnalyzeEventsAndWriteResults() is called.</span></div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_impl.xhtml">   29</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_profiler_impl.xhtml">ProfilerImpl</a></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#ab4a49101468246556a6652cedaa8d2f7">ProfilerImpl</a>();</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a6412388bcab05aee892066269fd4112d">~ProfilerImpl</a>();</div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_impl.xhtml#a70926d23f3aef7e657a9057a7badb014">   34</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a70926d23f3aef7e657a9057a7badb014">InstrumentPtr</a> = std::unique_ptr&lt;Instrument&gt;;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="comment">// Marks the beginning of a user-defined event.</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// No attempt will be made to copy the name string: it must be known at compile time.</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="classarmnn_1_1_event.xhtml">Event</a>* <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a86d52d5034f3cb8930665a60e72f41d8">BeginEvent</a>(<a class="code" href="classarmnn_1_1_i_profiler.xhtml">armnn::IProfiler</a>* profiler,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; backendId,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                      <span class="keyword">const</span> std::string&amp; name,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                      std::vector&lt;InstrumentPtr&gt;&amp;&amp; instruments,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;arm::pipe::ProfilingGuid&gt;</a>&amp; guid);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> DescriptorType&gt;</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_impl.xhtml#a0316c3f57591bec09460ba7859f60df2">   45</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a0316c3f57591bec09460ba7859f60df2">AddLayerDetails</a>(<span class="keyword">const</span> std::string&amp; label,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                         <span class="keyword">const</span> DescriptorType&amp; desc,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; infos,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                         <span class="keyword">const</span> arm::pipe::ProfilingGuid guid)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a2384be7d839af91fcc72825e7e33111c">m_ProfilingDetails</a>-&gt;AddDetailsToString(label, desc, infos, guid);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="comment">// Marks the end of a user-defined event.</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a8ed16398e69bb7b0625e3cf4a279b1f3">EndEvent</a>(<a class="code" href="classarmnn_1_1_event.xhtml">Event</a>* event);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// Enables/disables profiling.</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#af556ae358458c476f8594b3bbb28d712">EnableProfiling</a>(<span class="keywordtype">bool</span> enableProfiling);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// Checks if profiling is enabled.</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#aa5a25e3cf143724a9460c4aa9c47841b">IsProfilingEnabled</a>();</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// Enables outputting the layer descriptors and infos to stdout</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a2eb407e04f6462e4fd4ac0fd27dee141">EnableNetworkDetailsToStdOut</a>(<a class="code" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1f">ProfilingDetailsMethod</a> detailsMethod);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// Increments the event tag, allowing grouping of events in a user-defined manner (e.g. per inference).</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#afb5ba6c1110d2ea400f49ad7f3ac4d15">UpdateEventTag</a>();</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// Analyzes the tracked events and writes the results to the given output stream.</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Please refer to the configuration variables in Profiling.cpp to customize the information written.</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#ac9f22844fb2e329ffd193f2d9a8ce336">AnalyzeEventsAndWriteResults</a>(std::ostream&amp; outStream) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">// Print stats for events in JSON Format to the given output stream.</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a038bb767bbc6abc0ee0d9b509616b896">Print</a>(std::ostream&amp; outStream) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// Gets the color to render an event with, based on which device it denotes.</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    uint32_t <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#ac2afea56b7e3ffcc81f49f15febf88f1">GetEventColor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; backendId) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_impl.xhtml#a28e9d9830b822f64faa17f7ccb55145b">   78</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a28e9d9830b822f64faa17f7ccb55145b">EventPtr</a> = std::unique_ptr&lt;Event&gt;;</div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_impl.xhtml#a3d2f6d4e5e262ee1be7b7d3bf2ff3134">   79</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a3d2f6d4e5e262ee1be7b7d3bf2ff3134">DescPtr</a> = std::unique_ptr&lt;ProfilingDetails&gt;;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="structarmnn_1_1_profiler_impl_1_1_marker.xhtml">   81</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_profiler_impl_1_1_marker.xhtml">Marker</a></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="structarmnn_1_1_profiler_impl_1_1_marker.xhtml#a9be18087caca4704995bf26463f4b46a">   83</a></span>&#160;        std::size_t <a class="code" href="structarmnn_1_1_profiler_impl_1_1_marker.xhtml#a9be18087caca4704995bf26463f4b46a">m_Id</a>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    };</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml">   86</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml">ProfilingEventStats</a></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#a987e938e13b0c6d0864b7473497816a2">   88</a></span>&#160;        <span class="keywordtype">double</span> <a class="code" href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#a987e938e13b0c6d0864b7473497816a2">m_TotalMs</a>;</div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#acf82cb43aa8ac450a64249b1339edcd6">   89</a></span>&#160;        <span class="keywordtype">double</span> <a class="code" href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#acf82cb43aa8ac450a64249b1339edcd6">m_MinMs</a>;</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#a7a2e04ecfcc33687bd52a9f57bb3c73b">   90</a></span>&#160;        <span class="keywordtype">double</span> <a class="code" href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#a7a2e04ecfcc33687bd52a9f57bb3c73b">m_MaxMs</a>;</div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#a1bf817b905316b6a2e823652eb156e5e">   91</a></span>&#160;        uint32_t <a class="code" href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#a1bf817b905316b6a2e823652eb156e5e">m_Count</a>;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    };</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> EventIterType&gt;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#ae9462da7222b5d3315271e64bae6740b">AnalyzeEventSequenceAndWriteResults</a>(EventIterType first, EventIterType last, std::ostream&amp; outStream) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    std::map&lt;std::string, ProfilingEventStats&gt; <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a0c14f9e9a75d1279acb6a4ea036b5b33">CalculateProfilingEventStats</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#aa1c4f528914e710bf4914f30c2478020">PopulateParent</a>(std::vector&lt;const Event*&gt;&amp; outEvents, <span class="keywordtype">int</span>&amp; outBaseLevel, std::string parentName) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#afd8eb8e34710c688b76a196c67e8bed8">PopulateDescendants</a>(std::map&lt;<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_event.xhtml">Event</a>*, std::vector&lt;const Event*&gt;&gt;&amp; outDescendantsMap) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_impl.xhtml#a7cccdda9e15c719d099c0699a14e5f87">  101</a></span>&#160;    std::stack&lt;Event*&gt; <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a7cccdda9e15c719d099c0699a14e5f87">m_Parents</a>;</div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_impl.xhtml#a6c8819e2b32bf401c10505919ad8368c">  102</a></span>&#160;    std::vector&lt;EventPtr&gt; <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a6c8819e2b32bf401c10505919ad8368c">m_EventSequence</a>;</div>
<div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_impl.xhtml#a2384be7d839af91fcc72825e7e33111c">  103</a></span>&#160;    <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a3d2f6d4e5e262ee1be7b7d3bf2ff3134">DescPtr</a> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a2384be7d839af91fcc72825e7e33111c">m_ProfilingDetails</a> = std::make_unique&lt;ProfilingDetails&gt;();</div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_impl.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">  104</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">m_ProfilingEnabled</a>;</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_impl.xhtml#aee2a1b7405b64c6f48a5b62c0877d935">  105</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1f">ProfilingDetailsMethod</a> <a class="code" href="classarmnn_1_1_profiler_impl.xhtml#aee2a1b7405b64c6f48a5b62c0877d935">m_DetailsToStdOutMethod</a>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;};</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">// Singleton profiler manager.</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">// Keeps track of all the running profiler instances.</span></div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classarmnn_1_1_profiler_manager.xhtml">  111</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;{</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Register the given profiler as a thread local pointer.</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a7b1e3e5bf386004541be2b5b22443208">RegisterProfiler</a>(<a class="code" href="classarmnn_1_1_i_profiler.xhtml">IProfiler</a>* profiler);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// Gets the thread local pointer to the profiler.</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="classarmnn_1_1_i_profiler.xhtml">IProfiler</a>* <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a3756986bc88b9b212d3f983c70c5c129">GetProfiler</a>();</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// Accesses the singleton.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>&amp; <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">GetInstance</a>();</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">// The constructor is kept private so that other instances of this class (other that the singleton&#39;s)</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// can&#39;t be allocated.</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>() {}</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;};</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">// Helper to easily add event markers to the codebase.</span></div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_profiling_event.xhtml">  130</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_scoped_profiling_event.xhtml">ScopedProfilingEvent</a></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_profiling_event.xhtml#a70926d23f3aef7e657a9057a7badb014">  133</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarmnn_1_1_scoped_profiling_event.xhtml#a70926d23f3aef7e657a9057a7badb014">InstrumentPtr</a> = std::unique_ptr&lt;Instrument&gt;;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_profiling_event.xhtml#a8607dcc995844bd9a7d9296b79c6c1be">  136</a></span>&#160;    <a class="code" href="classarmnn_1_1_scoped_profiling_event.xhtml#a8607dcc995844bd9a7d9296b79c6c1be">ScopedProfilingEvent</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; backendId,</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;arm::pipe::ProfilingGuid&gt;</a>&amp; guid,</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                         <span class="keyword">const</span> std::string&amp; name,</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                         Args&amp;&amp; ... args)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        : m_Event(nullptr)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        , m_Profiler(<a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>::GetInstance().GetProfiler())</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">if</span> (m_Profiler &amp;&amp; m_Profiler-&gt;<a class="code" href="classarmnn_1_1_i_profiler.xhtml#aa5a25e3cf143724a9460c4aa9c47841b">IsProfilingEnabled</a>())</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            std::vector&lt;InstrumentPtr&gt; instruments(0);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            instruments.reserve(<span class="keyword">sizeof</span>...(args)); <span class="comment">//One allocation</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            ConstructNextInVector(instruments, std::forward&lt;Args&gt;(args)...);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            m_Event = m_Profiler-&gt;BeginEvent(backendId, name, std::move(instruments), guid);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classarmnn_1_1_scoped_profiling_event.xhtml#aa4f6b27d8649f796fba223997c3a9087">  152</a></span>&#160;    <a class="code" href="classarmnn_1_1_scoped_profiling_event.xhtml#aa4f6b27d8649f796fba223997c3a9087">~ScopedProfilingEvent</a>()</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">if</span> (m_Profiler &amp;&amp; m_Event)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            m_Profiler-&gt;pProfilerImpl-&gt;EndEvent(m_Event);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordtype">void</span> ConstructNextInVector(std::vector&lt;InstrumentPtr&gt;&amp; instruments)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(instruments);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Arg, <span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordtype">void</span> ConstructNextInVector(std::vector&lt;InstrumentPtr&gt;&amp; instruments, Arg&amp;&amp; arg, Args&amp;&amp;... args)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        instruments.emplace_back(std::make_unique&lt;Arg&gt;(std::forward&lt;Arg&gt;(arg)));</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        ConstructNextInVector(instruments, std::forward&lt;Args&gt;(args)...);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a4e2dd387ba6f0dc5164b4cdf8de3262aaa4ecfc70574394990cf17bd83df499f7">Event</a>* m_Event;       <span class="comment">///&lt; Event to track</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"></span>    IProfiler* m_Profiler; <span class="comment">///&lt; Profiler used</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span>};</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">// Helper to easily add operator details during profiling.</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> DescriptorType&gt;</div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a2386397752b62040e3b0647e8bc4dc70">  180</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a2386397752b62040e3b0647e8bc4dc70">ProfilingUpdateDescriptions</a>(<span class="keyword">const</span> std::string&amp; name,</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                        <span class="keyword">const</span> DescriptorType&amp; desc,</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; infos,</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                        <span class="keyword">const</span> arm::pipe::ProfilingGuid guid)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="classarmnn_1_1_i_profiler.xhtml">IProfiler</a>* profiler(<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">ProfilerManager::GetInstance</a>().GetProfiler()); <span class="comment">///&lt; Profiler used</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"></span>    <span class="keywordflow">if</span> (profiler &amp;&amp; profiler-&gt;<a class="code" href="classarmnn_1_1_i_profiler.xhtml#aa5a25e3cf143724a9460c4aa9c47841b">IsProfilingEnabled</a>())</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        profiler-&gt;AddLayerDetails(name, desc, infos, guid);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> DescriptorType&gt;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keywordtype">void</span> IProfiler::AddLayerDetails(<span class="keyword">const</span> std::string&amp; name,</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                <span class="keyword">const</span> DescriptorType&amp; desc,</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                <span class="keyword">const</span> WorkloadInfo&amp; infos,</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                <span class="keyword">const</span> arm::pipe::ProfilingGuid guid)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">return</span> pProfilerImpl-&gt;AddLayerDetails(name, desc, infos, guid);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;} <span class="comment">// namespace armnn</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">// Event Definitions for profiling</span></div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="_profiling_8hpp.xhtml#a4cdafc65083cb710486a87b7eb07ad49">  204</a></span>&#160;<span class="preprocessor">#define ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS_UNIQUE_LOC_INNER(lineNumber, backendId, guid, </span><span class="comment">/*name,*/</span><span class="preprocessor"> ...) \</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="preprocessor">    armnn::ScopedProfilingEvent e_ ## lineNumber(backendId, guid, </span><span class="comment">/*name,*/</span><span class="preprocessor"> __VA_ARGS__);</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="_profiling_8hpp.xhtml#a42a0735f9160bf902380fa61de31c36e">  207</a></span>&#160;<span class="preprocessor">#define ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS_UNIQUE_LOC(lineNumber, backendId, guid, </span><span class="comment">/*name,*/</span><span class="preprocessor"> ...) \</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="preprocessor">    ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS_UNIQUE_LOC_INNER(lineNumber, backendId, guid, </span><span class="comment">/*name,*/</span><span class="preprocessor"> __VA_ARGS__)</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">// The event name must be known at compile time i.e. if you are going to use this version of the macro</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">// in code the first argument you supply after the backendId must be the name.</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">// NOTE: need to pass the line number as an argument from here so by the time it gets to the UNIQUE_LOC_INNER</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">//       above it has expanded to a string and will concat (##) correctly with the &#39;e_&#39; prefix to yield a</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">//       legal and unique variable name (so long as you don&#39;t use the macro twice on the same line).</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">//       The concat preprocessing operator (##) very unhelpfully will not expand macros see</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">//       https://gcc.gnu.org/onlinedocs/cpp/Concatenation.html for the gory details.</span></div>
<div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">  217</a></span>&#160;<span class="preprocessor">#define ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS(backendId, guid, </span><span class="comment">/*name,*/</span><span class="preprocessor"> ...) \</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="preprocessor">    ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS_UNIQUE_LOC(__LINE__,backendId, guid, </span><span class="comment">/*name,*/</span><span class="preprocessor"> __VA_ARGS__)</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">  220</a></span>&#160;<span class="preprocessor">#define ARMNN_SCOPED_PROFILING_EVENT(backendId, name) \</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="preprocessor">    ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS(backendId, armnn::EmptyOptional(), name, armnn::WallClockTimer())</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="_profiling_8hpp.xhtml#a20704df665aaf54d02d1aa477f5fc956">  223</a></span>&#160;<span class="preprocessor">#define ARMNN_SCOPED_PROFILING_EVENT_GUID(backendId, name, guid) \</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="preprocessor">    ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS(backendId, guid, name, armnn::WallClockTimer())</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">// Workload Description definitons for profiling</span></div>
<div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="_profiling_8hpp.xhtml#a786492a3881a4c760ab1eec2149f4aba">  227</a></span>&#160;<span class="preprocessor">#define ARMNN_REPORT_PROFILING_WORKLOAD_DESC(name, desc, infos, guid) \</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="preprocessor">    armnn::ProfilingUpdateDescriptions(name, desc, infos, guid);</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a0c14f9e9a75d1279acb6a4ea036b5b33"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a0c14f9e9a75d1279acb6a4ea036b5b33">armnn::ProfilerImpl::CalculateProfilingEventStats</a></div><div class="ttdeci">std::map&lt; std::string, ProfilingEventStats &gt; CalculateProfilingEventStats() const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00082">Profiling.cpp:82</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a28e9d9830b822f64faa17f7ccb55145b"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a28e9d9830b822f64faa17f7ccb55145b">armnn::ProfilerImpl::EventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Event &gt; EventPtr</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00078">Profiling.hpp:78</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="a_i_profiler_8hpp_xhtml"><div class="ttname"><a href="_i_profiler_8hpp.xhtml">IProfiler.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a1b1892da2aaf7eaedaa38671d56b7f19"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">armnn::ProfilerImpl::m_ProfilingEnabled</a></div><div class="ttdeci">bool m_ProfilingEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00104">Profiling.hpp:104</a></div></div>
<div class="ttc" id="astructarmnn_1_1_profiler_impl_1_1_profiling_event_stats_xhtml"><div class="ttname"><a href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml">armnn::ProfilerImpl::ProfilingEventStats</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00086">Profiling.hpp:86</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a70926d23f3aef7e657a9057a7badb014"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a70926d23f3aef7e657a9057a7badb014">armnn::ProfilerImpl::InstrumentPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Instrument &gt; InstrumentPtr</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00034">Profiling.hpp:34</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_manager_xhtml_a3756986bc88b9b212d3f983c70c5c129"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a3756986bc88b9b212d3f983c70c5c129">armnn::ProfilerManager::GetProfiler</a></div><div class="ttdeci">IProfiler * GetProfiler()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00605">Profiling.cpp:605</a></div></div>
<div class="ttc" id="a_wall_clock_timer_8hpp_xhtml"><div class="ttname"><a href="_wall_clock_timer_8hpp.xhtml">WallClockTimer.hpp</a></div></div>
<div class="ttc" id="astructarmnn_1_1_profiler_impl_1_1_profiling_event_stats_xhtml_a987e938e13b0c6d0864b7473497816a2"><div class="ttname"><a href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#a987e938e13b0c6d0864b7473497816a2">armnn::ProfilerImpl::ProfilingEventStats::m_TotalMs</a></div><div class="ttdeci">double m_TotalMs</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00088">Profiling.hpp:88</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2386397752b62040e3b0647e8bc4dc70"><div class="ttname"><a href="namespacearmnn.xhtml#a2386397752b62040e3b0647e8bc4dc70">armnn::ProfilingUpdateDescriptions</a></div><div class="ttdeci">void ProfilingUpdateDescriptions(const std::string &amp;name, const DescriptorType &amp;desc, const WorkloadInfo &amp;infos, const arm::pipe::ProfilingGuid guid)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00180">Profiling.hpp:180</a></div></div>
<div class="ttc" id="a_optional_8hpp_xhtml"><div class="ttname"><a href="_optional_8hpp.xhtml">Optional.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_afb5ba6c1110d2ea400f49ad7f3ac4d15"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#afb5ba6c1110d2ea400f49ad7f3ac4d15">armnn::ProfilerImpl::UpdateEventTag</a></div><div class="ttdeci">void UpdateEventTag()</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a6412388bcab05aee892066269fd4112d"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a6412388bcab05aee892066269fd4112d">armnn::ProfilerImpl::~ProfilerImpl</a></div><div class="ttdeci">~ProfilerImpl()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00176">Profiling.cpp:176</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a2384be7d839af91fcc72825e7e33111c"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a2384be7d839af91fcc72825e7e33111c">armnn::ProfilerImpl::m_ProfilingDetails</a></div><div class="ttdeci">DescPtr m_ProfilingDetails</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00103">Profiling.hpp:103</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_profiler_xhtml_aa5a25e3cf143724a9460c4aa9c47841b"><div class="ttname"><a href="classarmnn_1_1_i_profiler.xhtml#aa5a25e3cf143724a9460c4aa9c47841b">armnn::IProfiler::IsProfilingEnabled</a></div><div class="ttdeci">bool IsProfilingEnabled()</div><div class="ttdoc">Checks whether profiling is enabled.</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00620">Profiling.cpp:620</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a2eb407e04f6462e4fd4ac0fd27dee141"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a2eb407e04f6462e4fd4ac0fd27dee141">armnn::ProfilerImpl::EnableNetworkDetailsToStdOut</a></div><div class="ttdeci">void EnableNetworkDetailsToStdOut(ProfilingDetailsMethod detailsMethod)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00200">Profiling.cpp:200</a></div></div>
<div class="ttc" id="astructarmnn_1_1_profiler_impl_1_1_profiling_event_stats_xhtml_acf82cb43aa8ac450a64249b1339edcd6"><div class="ttname"><a href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#acf82cb43aa8ac450a64249b1339edcd6">armnn::ProfilerImpl::ProfilingEventStats::m_MinMs</a></div><div class="ttdeci">double m_MinMs</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00089">Profiling.hpp:89</a></div></div>
<div class="ttc" id="astructarmnn_1_1_profiler_impl_1_1_profiling_event_stats_xhtml_a1bf817b905316b6a2e823652eb156e5e"><div class="ttname"><a href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#a1bf817b905316b6a2e823652eb156e5e">armnn::ProfilerImpl::ProfilingEventStats::m_Count</a></div><div class="ttdeci">uint32_t m_Count</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00091">Profiling.hpp:91</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors.</div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a3d2f6d4e5e262ee1be7b7d3bf2ff3134"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a3d2f6d4e5e262ee1be7b7d3bf2ff3134">armnn::ProfilerImpl::DescPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ProfilingDetails &gt; DescPtr</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00079">Profiling.hpp:79</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_af556ae358458c476f8594b3bbb28d712"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#af556ae358458c476f8594b3bbb28d712">armnn::ProfilerImpl::EnableProfiling</a></div><div class="ttdeci">void EnableProfiling(bool enableProfiling)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00195">Profiling.cpp:195</a></div></div>
<div class="ttc" id="astructarmnn_1_1_profiler_impl_1_1_profiling_event_stats_xhtml_a7a2e04ecfcc33687bd52a9f57bb3c73b"><div class="ttname"><a href="structarmnn_1_1_profiler_impl_1_1_profiling_event_stats.xhtml#a7a2e04ecfcc33687bd52a9f57bb3c73b">armnn::ProfilerImpl::ProfilingEventStats::m_MaxMs</a></div><div class="ttdeci">double m_MaxMs</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00090">Profiling.hpp:90</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_event_xhtml"><div class="ttname"><a href="classarmnn_1_1_event.xhtml">armnn::Event</a></div><div class="ttdoc">Event class records measurements reported by BeginEvent()/EndEvent() and returns measurements when Ev...</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_event_8hpp_source.xhtml#l00027">ProfilingEvent.hpp:27</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a6c8819e2b32bf401c10505919ad8368c"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a6c8819e2b32bf401c10505919ad8368c">armnn::ProfilerImpl::m_EventSequence</a></div><div class="ttdeci">std::vector&lt; EventPtr &gt; m_EventSequence</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00102">Profiling.hpp:102</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a038bb767bbc6abc0ee0d9b509616b896"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a038bb767bbc6abc0ee0d9b509616b896">armnn::ProfilerImpl::Print</a></div><div class="ttdeci">void Print(std::ostream &amp;outStream) const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00381">Profiling.cpp:381</a></div></div>
<div class="ttc" id="astructarmnn_1_1_profiler_impl_1_1_marker_xhtml"><div class="ttname"><a href="structarmnn_1_1_profiler_impl_1_1_marker.xhtml">armnn::ProfilerImpl::Marker</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00081">Profiling.hpp:81</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_ac2afea56b7e3ffcc81f49f15febf88f1"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#ac2afea56b7e3ffcc81f49f15febf88f1">armnn::ProfilerImpl::GetEventColor</a></div><div class="ttdeci">uint32_t GetEventColor(const BackendId &amp;backendId) const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00563">Profiling.cpp:563</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_manager_xhtml_a93857080c2523bf3395e7aa7e6024d5c"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a></div><div class="ttdeci">static ProfilerManager &amp; GetInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00593">Profiling.cpp:593</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_scoped_profiling_event_xhtml_aa4f6b27d8649f796fba223997c3a9087"><div class="ttname"><a href="classarmnn_1_1_scoped_profiling_event.xhtml#aa4f6b27d8649f796fba223997c3a9087">armnn::ScopedProfilingEvent::~ScopedProfilingEvent</a></div><div class="ttdeci">~ScopedProfilingEvent()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00152">Profiling.hpp:152</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00111">Profiling.hpp:111</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_profiler_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_profiler.xhtml">armnn::IProfiler</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_profiler_8hpp_source.xhtml#l00021">IProfiler.hpp:21</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4e2dd387ba6f0dc5164b4cdf8de3262aaa4ecfc70574394990cf17bd83df499f7"><div class="ttname"><a href="namespacearmnn.xhtml#a4e2dd387ba6f0dc5164b4cdf8de3262aaa4ecfc70574394990cf17bd83df499f7">armnn::JsonObjectType::Event</a></div><div class="ttdeci">@ Event</div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_afd8eb8e34710c688b76a196c67e8bed8"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#afd8eb8e34710c688b76a196c67e8bed8">armnn::ProfilerImpl::PopulateDescendants</a></div><div class="ttdeci">void PopulateDescendants(std::map&lt; const Event *, std::vector&lt; const Event * &gt;&gt; &amp;outDescendantsMap) const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00271">Profiling.cpp:271</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml">armnn::ProfilerImpl</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00029">Profiling.hpp:29</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a7cccdda9e15c719d099c0699a14e5f87"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a7cccdda9e15c719d099c0699a14e5f87">armnn::ProfilerImpl::m_Parents</a></div><div class="ttdeci">std::stack&lt; Event * &gt; m_Parents</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00101">Profiling.hpp:101</a></div></div>
<div class="ttc" id="astructarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about TensorInfos of a layer.</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_aa1c4f528914e710bf4914f30c2478020"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#aa1c4f528914e710bf4914f30c2478020">armnn::ProfilerImpl::PopulateParent</a></div><div class="ttdeci">void PopulateParent(std::vector&lt; const Event * &gt; &amp;outEvents, int &amp;outBaseLevel, std::string parentName) const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00257">Profiling.cpp:257</a></div></div>
<div class="ttc" id="a_profiling_details_8hpp_xhtml"><div class="ttname"><a href="_profiling_details_8hpp.xhtml">ProfilingDetails.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_ab4a49101468246556a6652cedaa8d2f7"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#ab4a49101468246556a6652cedaa8d2f7">armnn::ProfilerImpl::ProfilerImpl</a></div><div class="ttdeci">ProfilerImpl()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00164">Profiling.cpp:164</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a0316c3f57591bec09460ba7859f60df2"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a0316c3f57591bec09460ba7859f60df2">armnn::ProfilerImpl::AddLayerDetails</a></div><div class="ttdeci">void AddLayerDetails(const std::string &amp;label, const DescriptorType &amp;desc, const WorkloadInfo &amp;infos, const arm::pipe::ProfilingGuid guid)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00045">Profiling.hpp:45</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_ae9462da7222b5d3315271e64bae6740b"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#ae9462da7222b5d3315271e64bae6740b">armnn::ProfilerImpl::AnalyzeEventSequenceAndWriteResults</a></div><div class="ttdeci">void AnalyzeEventSequenceAndWriteResults(EventIterType first, EventIterType last, std::ostream &amp;outStream) const</div></div>
<div class="ttc" id="aclassarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt; arm::pipe::ProfilingGuid &gt;</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a8ed16398e69bb7b0625e3cf4a279b1f3"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a8ed16398e69bb7b0625e3cf4a279b1f3">armnn::ProfilerImpl::EndEvent</a></div><div class="ttdeci">void EndEvent(Event *event)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00229">Profiling.cpp:229</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae060224135f57f926cbda9d2732a2b1f"><div class="ttname"><a href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1f">armnn::ProfilingDetailsMethod</a></div><div class="ttdeci">ProfilingDetailsMethod</div><div class="ttdoc">Define the behaviour of the internal profiler when outputting network details.</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00071">Types.hpp:71</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_scoped_profiling_event_xhtml"><div class="ttname"><a href="classarmnn_1_1_scoped_profiling_event.xhtml">armnn::ScopedProfilingEvent</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00130">Profiling.hpp:130</a></div></div>
<div class="ttc" id="a_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="a_profiling_event_8hpp_xhtml"><div class="ttname"><a href="_profiling_event_8hpp.xhtml">ProfilingEvent.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_scoped_profiling_event_xhtml_a8607dcc995844bd9a7d9296b79c6c1be"><div class="ttname"><a href="classarmnn_1_1_scoped_profiling_event.xhtml#a8607dcc995844bd9a7d9296b79c6c1be">armnn::ScopedProfilingEvent::ScopedProfilingEvent</a></div><div class="ttdeci">ScopedProfilingEvent(const BackendId &amp;backendId, const Optional&lt; arm::pipe::ProfilingGuid &gt; &amp;guid, const std::string &amp;name, Args &amp;&amp;... args)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00136">Profiling.hpp:136</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_aa5a25e3cf143724a9460c4aa9c47841b"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#aa5a25e3cf143724a9460c4aa9c47841b">armnn::ProfilerImpl::IsProfilingEnabled</a></div><div class="ttdeci">bool IsProfilingEnabled()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00190">Profiling.cpp:190</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_aee2a1b7405b64c6f48a5b62c0877d935"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#aee2a1b7405b64c6f48a5b62c0877d935">armnn::ProfilerImpl::m_DetailsToStdOutMethod</a></div><div class="ttdeci">ProfilingDetailsMethod m_DetailsToStdOutMethod</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00105">Profiling.hpp:105</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_scoped_profiling_event_xhtml_a70926d23f3aef7e657a9057a7badb014"><div class="ttname"><a href="classarmnn_1_1_scoped_profiling_event.xhtml#a70926d23f3aef7e657a9057a7badb014">armnn::ScopedProfilingEvent::InstrumentPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Instrument &gt; InstrumentPtr</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00133">Profiling.hpp:133</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_manager_xhtml_a7b1e3e5bf386004541be2b5b22443208"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a7b1e3e5bf386004541be2b5b22443208">armnn::ProfilerManager::RegisterProfiler</a></div><div class="ttdeci">void RegisterProfiler(IProfiler *profiler)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00600">Profiling.cpp:600</a></div></div>
<div class="ttc" id="astructarmnn_1_1_profiler_impl_1_1_marker_xhtml_a9be18087caca4704995bf26463f4b46a"><div class="ttname"><a href="structarmnn_1_1_profiler_impl_1_1_marker.xhtml#a9be18087caca4704995bf26463f4b46a">armnn::ProfilerImpl::Marker::m_Id</a></div><div class="ttdeci">std::size_t m_Id</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00083">Profiling.hpp:83</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_a86d52d5034f3cb8930665a60e72f41d8"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#a86d52d5034f3cb8930665a60e72f41d8">armnn::ProfilerImpl::BeginEvent</a></div><div class="ttdeci">Event * BeginEvent(armnn::IProfiler *profiler, const BackendId &amp;backendId, const std::string &amp;name, std::vector&lt; InstrumentPtr &gt; &amp;&amp;instruments, const Optional&lt; arm::pipe::ProfilingGuid &gt; &amp;guid)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00205">Profiling.cpp:205</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_profiler_impl_xhtml_ac9f22844fb2e329ffd193f2d9a8ce336"><div class="ttname"><a href="classarmnn_1_1_profiler_impl.xhtml#ac9f22844fb2e329ffd193f2d9a8ce336">armnn::ProfilerImpl::AnalyzeEventsAndWriteResults</a></div><div class="ttdeci">void AnalyzeEventsAndWriteResults(std::ostream &amp;outStream) const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00481">Profiling.cpp:481</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_profiling_8hpp.xhtml">Profiling.hpp</a></li>
    <li class="footer">Generated on Thu May 18 2023 10:35:40 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
