<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/StridedSliceAsyncEndToEndTest.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_strided_slice_async_end_to_end_test_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">StridedSliceAsyncEndToEndTest.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_strided_slice_async_end_to_end_test_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_working_mem_handle_8hpp.xhtml">armnn/IWorkingMemHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_network_8hpp.xhtml">armnn/INetwork.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_threadpool_8hpp.xhtml">armnn/Threadpool.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_async_execution_callback_8hpp.xhtml">armnn/IAsyncExecutionCallback.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_async_execution_callback_8hpp.xhtml">AsyncExecutionCallback.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="backends_2backends_common_2test_2_common_test_utils_8hpp.xhtml">CommonTestUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;doctest/doctest.h&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">template</span>&lt;<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> ArmnnIType, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> ArmnnOType,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keyword">typename</span> TInput = ResolveType &lt;ArmnnIType&gt;, <span class="keyword">typename</span> TOutput = ResolveType &lt;ArmnnOType&gt;&gt;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1experimental.xhtml#ae9bd946ed0ec9f8a41197b83037a401f">   30</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn_1_1experimental.xhtml#ae9bd946ed0ec9f8a41197b83037a401f">AsyncThreadedEndToEndTestImpl</a>(<a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> network,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                   <span class="keyword">const</span> std::vector&lt;std::map&lt;<span class="keywordtype">int</span>, std::vector&lt;TInput&gt;&gt;&gt;&amp; inputTensorData,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                   <span class="keyword">const</span> std::vector&lt;std::map&lt;<span class="keywordtype">int</span>, std::vector&lt;TOutput&gt;&gt;&gt;&amp; expectedOutputData,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                   std::vector&lt;BackendId&gt; backends,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                                   <span class="keyword">const</span> <span class="keywordtype">size_t</span> numberOfInferences,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                   <span class="keywordtype">float</span> tolerance = 0.000001f)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// Create Runtime in which test will run</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options));</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// Optimize the Network</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, backends, runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// Creates AsyncNetwork</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkId = 0;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> networkProperties(<span class="keyword">true</span>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    runtime-&gt;LoadNetwork(networkId, std::move(optNet), errorMessage, networkProperties);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    std::vector&lt;InputTensors&gt; inputTensorsVec;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    std::vector&lt;OutputTensors&gt; outputTensorsVec;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    std::vector&lt;std::map&lt;int, std::vector&lt;TOutput&gt;&gt;&gt; outputStorageVec;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    std::vector&lt;std::unique_ptr&lt;IWorkingMemHandle&gt;&gt; workingMemHandles;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numberOfInferences; ++i)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        outputStorageVec.emplace_back(std::map&lt;<span class="keywordtype">int</span>, std::vector&lt;TOutput&gt;&gt;());</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        inputTensors.reserve(inputTensorData.size());</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : inputTensorData[i])</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo = runtime-&gt;GetInputTensorInfo(networkId, it.first);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            inputTensors.push_back({it.first,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                                    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>(inputTensorInfo, it.second.data())});</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        outputTensors.reserve(expectedOutputData.size());</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData[i])</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            std::vector&lt;TOutput&gt; out(it.second.size());</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            outputStorageVec[i].emplace(it.first, out);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            outputTensors.push_back({it.first,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                     <a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a>(runtime-&gt;GetOutputTensorInfo(networkId, it.first),</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                            outputStorageVec[i].at(it.first).data())});</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        inputTensorsVec.push_back(inputTensors);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        outputTensorsVec.push_back(outputTensors);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        workingMemHandles.push_back(runtime-&gt;CreateWorkingMemHandle(networkId));</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    std::vector&lt;std::thread&gt; threads;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numberOfInferences; ++i)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="comment">// Access the vectors before we do anything multi-threaded</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a>&amp; inputTensors = inputTensorsVec[i];</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a>&amp; outputTensors = outputTensorsVec[i];</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <a class="code" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a>&amp; workingMemHandle = *workingMemHandles[i].get();</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        threads.emplace_back([&amp;]()</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="comment">// Run the async network</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            runtime-&gt;Execute(workingMemHandle, inputTensors, outputTensors);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        });</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numberOfInferences; ++i)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        threads[i].join();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// Checks the results.</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numberOfInferences; ++i)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;&amp;it : expectedOutputData[i])</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            std::vector&lt;TOutput&gt; out = outputStorageVec[i].at(it.first);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; out.size(); ++j)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                CHECK(Compare&lt;ArmnnOType&gt;(it.second[j], out[j], tolerance) == <span class="keyword">true</span>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">template</span>&lt;<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> ArmnnIType, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> ArmnnOType,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">typename</span> TInput = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">ResolveType&lt;ArmnnIType&gt;</a>, <span class="keyword">typename</span> TOutput = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">ResolveType&lt;ArmnnOType&gt;</a>&gt;</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1experimental.xhtml#a6c8cd7552424617a2e4361c1d966f734">  123</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn_1_1experimental.xhtml#a6c8cd7552424617a2e4361c1d966f734">AsyncEndToEndTestImpl</a>(<a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> network,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                           <span class="keyword">const</span> std::map&lt;<span class="keywordtype">int</span>, std::vector&lt;TInput&gt;&gt;&amp; inputTensorData,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                           <span class="keyword">const</span> std::map&lt;<span class="keywordtype">int</span>, std::vector&lt;TOutput&gt;&gt;&amp; expectedOutputData,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                           std::vector&lt;BackendId&gt; backends,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                           <span class="keywordtype">float</span> tolerance = 0.000001f,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                           <span class="keywordtype">size_t</span> numThreads = 1)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(numThreads &gt;= 1);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfInferences = numThreads == 1 ? 1 : 1000;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="comment">// Create Runtime in which test will run</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a>               runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options));</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Optimize the Network</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, backends, runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Creates AsyncNetwork</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkId = 0;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    std::string errorMessage;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> networkProperties(<span class="keyword">true</span>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    runtime-&gt;LoadNetwork(networkId, std::move(optNet), errorMessage, networkProperties);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    inputTensors.reserve(inputTensorData.size());</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : inputTensorData)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo = runtime-&gt;GetInputTensorInfo(networkId, it.first);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        inputTensors.push_back({it.first,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>(inputTensorInfo, it.second.data())});</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    std::vector&lt;OutputTensors&gt; outputTensorsVec;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    std::vector&lt;std::map&lt;int, std::vector&lt;TOutput&gt;&gt;&gt; outputStorageVec;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    outputTensorsVec.reserve(numberOfInferences);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    outputStorageVec.reserve(numberOfInferences);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numberOfInferences; ++i)</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        outputStorageVec.emplace_back(std::map&lt;<span class="keywordtype">int</span>, std::vector&lt;TOutput&gt;&gt;());</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        outputTensors.reserve(expectedOutputData.size());</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            std::vector&lt;TOutput&gt; out(it.second.size());</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            outputStorageVec[i].emplace(it.first, out);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            outputTensors.push_back({it.first,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                     <a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a>(runtime-&gt;GetOutputTensorInfo(networkId, it.first),</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                            outputStorageVec[i].at(it.first).data())});</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        outputTensorsVec.push_back(outputTensors);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">if</span> (numThreads == 1)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="comment">// Create WorkingMemHandle for this async network</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        std::unique_ptr&lt;IWorkingMemHandle&gt; workingMemHandle = runtime-&gt;CreateWorkingMemHandle(networkId);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <a class="code" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a>&amp; workingMemHandleRef = *workingMemHandle.get();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">// Run the async network</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        runtime-&gt;Execute(workingMemHandleRef, inputTensors, outputTensorsVec[0]);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        std::vector&lt;std::shared_ptr&lt;IWorkingMemHandle&gt;&gt; memHandles;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numThreads; ++i)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            memHandles.emplace_back(runtime-&gt;CreateWorkingMemHandle(networkId));</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <a class="code" href="classarmnn_1_1experimental_1_1_threadpool.xhtml">Threadpool</a> threadpool(numThreads, runtime.get(), memHandles);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <a class="code" href="classarmnn_1_1experimental_1_1_async_callback_manager.xhtml">AsyncCallbackManager</a> callbackManager;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="comment">// For the asyncronous execution, we are adding a pool of working memory handles (1 per thread) in the</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="comment">// LoadedNetwork with each scheduled inference having a random priority</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numberOfInferences; ++i)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            threadpool.Schedule(networkId,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                inputTensors,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                outputTensorsVec[i],</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                static_cast&lt;QosExecPriority&gt;(rand()%3),</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                callbackManager.GetNewCallback());</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="comment">// Wait until the execution signals a notify</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numberOfInferences; ++i)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keyword">auto</span> cb = callbackManager.<a class="code" href="classarmnn_1_1experimental_1_1_async_callback_manager.xhtml#a9ee5b1dd7d3a6f619d2ed3d97d75d9b1">GetNotifiedCallback</a>();</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="comment">// Checks the results.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            CHECK(cb-&gt;GetStatus() == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a>);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; outputStorage : outputStorageVec)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            std::vector&lt;TOutput&gt; out = outputStorage.at(it.first);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; out.size(); ++i)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="comment">//CHECK(Compare&lt;ArmnnOType&gt;(it.second[i], out[i], tolerance) == true);</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                CHECK(it.second[i] == doctest::Approx(out[i]).epsilon(tolerance));</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;}</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00240"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1experimental.xhtml#adef78ee82cfcce4c9061f266ccf0a29d">  240</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> <a class="code" href="namespacearmnn_1_1experimental.xhtml#adef78ee82cfcce4c9061f266ccf0a29d">CreateStridedSliceNetwork</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inputShape,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; outputShape,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                      <span class="keyword">const</span> std::vector&lt;int&gt;&amp; beginData,</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                      <span class="keyword">const</span> std::vector&lt;int&gt;&amp; endData,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                      <span class="keyword">const</span> std::vector&lt;int&gt;&amp; stridesData,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                      <span class="keywordtype">int</span> beginMask = 0,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                      <span class="keywordtype">int</span> endMask = 0,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                      <span class="keywordtype">int</span> shrinkAxisMask = 0,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                      <span class="keywordtype">int</span> ellipsisMask = 0,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                      <span class="keywordtype">int</span> newAxisMask = 0,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span> qScale = 1.0f,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                      <span class="keyword">const</span> int32_t qOffset = 0)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// Builds up the structure of the network.</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>());</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo(inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>, qScale, qOffset);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputTensorInfo(outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>, qScale, qOffset);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a> stridedSliceDescriptor;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">m_Begin</a> = beginData;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">m_End</a> = endData;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">m_Stride</a> = stridesData;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a61081be1483984e33db452c75d569f51">m_BeginMask</a> = beginMask;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#ac37e49c0d6e6e54f9d2015d0f11f8ee7">m_EndMask</a> = endMask;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6d0384878432cfc9652b7ae8bc59506f">m_ShrinkAxisMask</a> = shrinkAxisMask;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#af996d82c47e43a16f4c8faa6c6b3e030">m_EllipsisMask</a> = ellipsisMask;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    stridedSliceDescriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a7c91eda2b331d607bae92cd8ebf50bb9">m_NewAxisMask</a> = newAxisMask;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input = net-&gt;AddInputLayer(0, <span class="stringliteral">&quot;Input_Layer&quot;</span>);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* stridedSlice = net-&gt;AddStridedSliceLayer(stridedSliceDescriptor, <span class="stringliteral">&quot;splitter&quot;</span>);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a>(input, stridedSlice, inputTensorInfo, 0, 0);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <a class="code" href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a>(stridedSlice, output, outputTensorInfo, 0, 0);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> net;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType&gt;</div><div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1experimental.xhtml#a88ec5950dc1ba35b8932373b5eda2729">  281</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn_1_1experimental.xhtml#a88ec5950dc1ba35b8932373b5eda2729">StridedSlicedEndToEndTest</a>(<span class="keyword">const</span> std::vector&lt;BackendId&gt;&amp; backends, <span class="keywordtype">size_t</span> numThreads)</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">using</span> T = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">ResolveType&lt;ArmnnType&gt;</a>;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inputShape = {3, 2, 3, 1};</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; outputShape = {1, 2, 3, 1};</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">const</span> std::vector&lt;int&gt;&amp; beginData = {1, 0, 0, 0};</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">const</span> std::vector&lt;int&gt;&amp; endData = {2, 2, 3, 1};</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">const</span> std::vector&lt;int&gt;&amp; stridesData = {1, 1, 1, 1};</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordtype">int</span> beginMask = 0;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordtype">int</span> endMask = 0;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordtype">int</span> shrinkAxisMask = 0;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordtype">int</span> ellipsisMask = 0;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordtype">int</span> newAxisMask = 0;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="comment">// Builds up the structure of the network</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net = CreateStridedSliceNetwork&lt;ArmnnType&gt;(inputShape,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                                           outputShape,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                                           beginData,</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                                           endData,</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                                           stridesData,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                                           beginMask,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                                           endMask,</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                                           shrinkAxisMask,</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                                           ellipsisMask,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                                           newAxisMask);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    CHECK(net);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="comment">// Creates structures for input &amp; output.</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    std::vector&lt;T&gt; inputData{</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            1.0f, 1.0f, 1.0f, 2.0f, 2.0f, 2.0f,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            3.0f, 3.0f, 3.0f, 4.0f, 4.0f, 4.0f,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            5.0f, 5.0f, 5.0f, 6.0f, 6.0f, 6.0f</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    };</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    std::vector&lt;T&gt; outputExpected{</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            3.0f, 3.0f, 3.0f, 4.0f, 4.0f, 4.0f</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    };</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    std::map&lt;int, std::vector&lt;T&gt;&gt; inputTensorData = {{0, inputData}};</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    std::map&lt;int, std::vector&lt;T&gt;&gt; expectedOutputData = {{0, outputExpected}};</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    AsyncEndToEndTestImpl&lt;ArmnnType, ArmnnType&gt;(move(net),</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                                inputTensorData,</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                                expectedOutputData,</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                                                backends,</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                                0.000001f,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                                numThreads);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType&gt;</div><div class="line"><a name="l00335"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1experimental.xhtml#abc5302ddb43cf5de9a847fce043bae9b">  335</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn_1_1experimental.xhtml#abc5302ddb43cf5de9a847fce043bae9b">StridedSlicedMultiThreadedEndToEndTest</a>(<span class="keyword">const</span> std::vector&lt;BackendId&gt;&amp; backends)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;{</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">using</span> T = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">ResolveType&lt;ArmnnType&gt;</a>;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inputShape = {3, 2, 3, 1};</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; outputShape = {1, 2, 3, 1};</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> std::vector&lt;int&gt;&amp; beginData = {1, 0, 0, 0};</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">const</span> std::vector&lt;int&gt;&amp; endData = {2, 2, 3, 1};</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keyword">const</span> std::vector&lt;int&gt;&amp; stridesData = {1, 1, 1, 1};</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordtype">int</span> beginMask = 0;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordtype">int</span> endMask = 0;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordtype">int</span> shrinkAxisMask = 0;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordtype">int</span> ellipsisMask = 0;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordtype">int</span> newAxisMask = 0;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="comment">// Builds up the structure of the network</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net = CreateStridedSliceNetwork&lt;ArmnnType&gt;(inputShape,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                                           outputShape,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                                           beginData,</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                                           endData,</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                                           stridesData,</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                                           beginMask,</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                                           endMask,</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                                           shrinkAxisMask,</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                                           ellipsisMask,</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                                           newAxisMask);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    CHECK(net);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="comment">// Creates structures for input &amp; output.</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    std::vector&lt;T&gt; inputData1{</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            1.0f, 1.0f, 1.0f, 2.0f, 2.0f, 2.0f,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            3.0f, 3.0f, 3.0f, 4.0f, 4.0f, 4.0f,</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            5.0f, 5.0f, 5.0f, 6.0f, 6.0f, 6.0f</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    };</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    std::vector&lt;T&gt; outputExpected1{ 3.0f, 3.0f, 3.0f, 4.0f, 4.0f, 4.0f };</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="comment">// Creates structures for input &amp; output.</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    std::vector&lt;T&gt; inputData2{</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            1.0f, 1.0f, 1.0f, 2.0f, 2.0f, 2.0f,</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            8.0f, 8.0f, 8.0f, 7.0f, 7.0f, 7.0f,</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            5.0f, 5.0f, 5.0f, 6.0f, 6.0f, 6.0f</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    };</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    std::vector&lt;T&gt; outputExpected2{ 8.0f, 8.0f, 8.0f, 7.0f, 7.0f, 7.0f };</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    std::vector&lt;std::map&lt;int, std::vector&lt;T&gt;&gt;&gt; inputTensors;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    std::vector&lt;std::map&lt;int, std::vector&lt;T&gt;&gt;&gt; outputTensors;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    inputTensors.push_back(std::map&lt;<span class="keywordtype">int</span>, std::vector&lt;T&gt;&gt; {{0, inputData1}});</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    inputTensors.push_back(std::map&lt;<span class="keywordtype">int</span>, std::vector&lt;T&gt;&gt; {{0, inputData2}});</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    outputTensors.push_back(std::map&lt;<span class="keywordtype">int</span>, std::vector&lt;T&gt;&gt; {{0, outputExpected1}});</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    outputTensors.push_back(std::map&lt;<span class="keywordtype">int</span>, std::vector&lt;T&gt;&gt; {{0, outputExpected2}});</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    AsyncThreadedEndToEndTestImpl&lt;ArmnnType, ArmnnType&gt;(move(net), inputTensors, outputTensors, backends, 2);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;}</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;} <span class="comment">// experimental namespace</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;} <span class="comment">// armnn namespace</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00049">Runtime.cpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00066">INetwork.hpp:66</a></div></div>
<div class="ttc" id="_i_async_execution_callback_8hpp_xhtml"><div class="ttname"><a href="_i_async_execution_callback_8hpp.xhtml">IAsyncExecutionCallback.hpp</a></div></div>
<div class="ttc" id="_threadpool_8hpp_xhtml"><div class="ttname"><a href="_threadpool_8hpp.xhtml">Threadpool.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a6d0384878432cfc9652b7ae8bc59506f"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6d0384878432cfc9652b7ae8bc59506f">armnn::StridedSliceDescriptor::m_ShrinkAxisMask</a></div><div class="ttdeci">int32_t m_ShrinkAxisMask</div><div class="ttdoc">Shrink axis mask value. If set, the nth specification shrinks the dimensionality by 1...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01336">Descriptors.hpp:1336</a></div></div>
<div class="ttc" id="namespacearmnn_1_1experimental_xhtml_ae9bd946ed0ec9f8a41197b83037a401f"><div class="ttname"><a href="namespacearmnn_1_1experimental.xhtml#ae9bd946ed0ec9f8a41197b83037a401f">armnn::experimental::AsyncThreadedEndToEndTestImpl</a></div><div class="ttdeci">void AsyncThreadedEndToEndTestImpl(INetworkPtr network, const std::vector&lt; std::map&lt; int, std::vector&lt; TInput &gt;&gt;&gt; &amp;inputTensorData, const std::vector&lt; std::map&lt; int, std::vector&lt; TOutput &gt;&gt;&gt; &amp;expectedOutputData, std::vector&lt; BackendId &gt; backends, const size_t numberOfInferences, float tolerance=0.000001f)</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_async_end_to_end_test_8hpp_source.xhtml#l00030">StridedSliceAsyncEndToEndTest.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a118fe06b7c2599da60398ee311ede923"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">armnn::StridedSliceDescriptor::m_Begin</a></div><div class="ttdeci">std::vector&lt; int &gt; m_Begin</div><div class="ttdoc">Begin values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01323">Descriptors.hpp:1323</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00033">IRuntime.hpp:33</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0743ed5e860c316a20b68ca96301b411"><div class="ttname"><a href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a></div><div class="ttdeci">typename ResolveTypeImpl&lt; DT &gt;::Type ResolveType</div><div class="ttdef"><b>Definition:</b> <a href="_resolve_type_8hpp_source.xhtml#l00079">ResolveType.hpp:79</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="_resolve_type_8hpp_xhtml"><div class="ttname"><a href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a61081be1483984e33db452c75d569f51"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a61081be1483984e33db452c75d569f51">armnn::StridedSliceDescriptor::m_BeginMask</a></div><div class="ttdeci">int32_t m_BeginMask</div><div class="ttdoc">Begin mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01331">Descriptors.hpp:1331</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_ac37e49c0d6e6e54f9d2015d0f11f8ee7"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#ac37e49c0d6e6e54f9d2015d0f11f8ee7">armnn::StridedSliceDescriptor::m_EndMask</a></div><div class="ttdeci">int32_t m_EndMask</div><div class="ttdoc">End mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01334">Descriptors.hpp:1334</a></div></div>
<div class="ttc" id="backends_2backends_common_2test_2_common_test_utils_8hpp_xhtml"><div class="ttname"><a href="backends_2backends_common_2test_2_common_test_utils_8hpp.xhtml">CommonTestUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1experimental_xhtml_a88ec5950dc1ba35b8932373b5eda2729"><div class="ttname"><a href="namespacearmnn_1_1experimental.xhtml#a88ec5950dc1ba35b8932373b5eda2729">armnn::experimental::StridedSlicedEndToEndTest</a></div><div class="ttdeci">void StridedSlicedEndToEndTest(const std::vector&lt; BackendId &gt; &amp;backends, size_t numThreads)</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_async_end_to_end_test_8hpp_source.xhtml#l00281">StridedSliceAsyncEndToEndTest.hpp:281</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00035">IRuntime.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="_i_working_mem_handle_8hpp_xhtml"><div class="ttname"><a href="_i_working_mem_handle_8hpp.xhtml">IWorkingMemHandle.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1experimental_xhtml_abc5302ddb43cf5de9a847fce043bae9b"><div class="ttname"><a href="namespacearmnn_1_1experimental.xhtml#abc5302ddb43cf5de9a847fce043bae9b">armnn::experimental::StridedSlicedMultiThreadedEndToEndTest</a></div><div class="ttdeci">void StridedSlicedMultiThreadedEndToEndTest(const std::vector&lt; BackendId &gt; &amp;backends)</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_async_end_to_end_test_8hpp_source.xhtml#l00335">StridedSliceAsyncEndToEndTest.hpp:335</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01847">Network.cpp:1847</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a7c91eda2b331d607bae92cd8ebf50bb9"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a7c91eda2b331d607bae92cd8ebf50bb9">armnn::StridedSliceDescriptor::m_NewAxisMask</a></div><div class="ttdeci">int32_t m_NewAxisMask</div><div class="ttdoc">New axis mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01341">Descriptors.hpp:1341</a></div></div>
<div class="ttc" id="namespacearmnn_1_1experimental_xhtml_a6c8cd7552424617a2e4361c1d966f734"><div class="ttname"><a href="namespacearmnn_1_1experimental.xhtml#a6c8cd7552424617a2e4361c1d966f734">armnn::experimental::AsyncEndToEndTestImpl</a></div><div class="ttdeci">void AsyncEndToEndTestImpl(INetworkPtr network, const std::map&lt; int, std::vector&lt; TInput &gt;&gt; &amp;inputTensorData, const std::map&lt; int, std::vector&lt; TOutput &gt;&gt; &amp;expectedOutputData, std::vector&lt; BackendId &gt; backends, float tolerance=0.000001f, size_t numThreads=1)</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_async_end_to_end_test_8hpp_source.xhtml#l00123">StridedSliceAsyncEndToEndTest.hpp:123</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_af996d82c47e43a16f4c8faa6c6b3e030"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#af996d82c47e43a16f4c8faa6c6b3e030">armnn::StridedSliceDescriptor::m_EllipsisMask</a></div><div class="ttdeci">int32_t m_EllipsisMask</div><div class="ttdoc">Ellipsis mask value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01338">Descriptors.hpp:1338</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00242">INetwork.hpp:242</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_i_working_mem_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">armnn::experimental::IWorkingMemHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_working_mem_handle_8hpp_source.xhtml#l00018">IWorkingMemHandle.hpp:18</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a0d53caff836b84204adbd1c28752a201"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">armnn::StridedSliceDescriptor::m_Stride</a></div><div class="ttdeci">std::vector&lt; int &gt; m_Stride</div><div class="ttdoc">Stride values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01327">Descriptors.hpp:1327</a></div></div>
<div class="ttc" id="namespacearmnn_1_1experimental_xhtml_adef78ee82cfcce4c9061f266ccf0a29d"><div class="ttname"><a href="namespacearmnn_1_1experimental.xhtml#adef78ee82cfcce4c9061f266ccf0a29d">armnn::experimental::CreateStridedSliceNetwork</a></div><div class="ttdeci">INetworkPtr CreateStridedSliceNetwork(const TensorShape &amp;inputShape, const TensorShape &amp;outputShape, const std::vector&lt; int &gt; &amp;beginData, const std::vector&lt; int &gt; &amp;endData, const std::vector&lt; int &gt; &amp;stridesData, int beginMask=0, int endMask=0, int shrinkAxisMask=0, int ellipsisMask=0, int newAxisMask=0, const float qScale=1.0f, const int32_t qOffset=0)</div><div class="ttdef"><b>Definition:</b> <a href="_strided_slice_async_end_to_end_test_8hpp_source.xhtml#l00240">StridedSliceAsyncEndToEndTest.hpp:240</a></div></div>
<div class="ttc" id="_i_network_8hpp_xhtml"><div class="ttname"><a href="_i_network_8hpp.xhtml">INetwork.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00077">IRuntime.hpp:77</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_aa68194dd6258ab5b04123005a066ea25"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">armnn::StridedSliceDescriptor::m_End</a></div><div class="ttdeci">std::vector&lt; int &gt; m_End</div><div class="ttdoc">End values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01325">Descriptors.hpp:1325</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_threadpool_xhtml"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_threadpool.xhtml">armnn::experimental::Threadpool</a></div><div class="ttdef"><b>Definition:</b> <a href="_threadpool_8hpp_source.xhtml#l00025">Threadpool.hpp:25</a></div></div>
<div class="ttc" id="_async_execution_callback_8hpp_xhtml"><div class="ttname"><a href="_async_execution_callback_8hpp.xhtml">AsyncExecutionCallback.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8ffca1e21bdfa7f945617acd606aac91"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">armnn::TensorInfo::SetConstant</a></div><div class="ttdeci">void SetConstant(const bool IsConstant=true)</div><div class="ttdoc">Marks the data corresponding to this tensor info as constant. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00514">Tensor.cpp:514</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_async_callback_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_async_callback_manager.xhtml">armnn::experimental::AsyncCallbackManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_async_execution_callback_8hpp_source.xhtml#l00076">AsyncExecutionCallback.hpp:76</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a></div><div class="ttdoc">A StridedSliceDescriptor for the StridedSliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01284">Descriptors.hpp:1284</a></div></div>
<div class="ttc" id="_test_utils_8cpp_xhtml_a0b295acb179f15eb3fb862b32008f782"><div class="ttname"><a href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a></div><div class="ttdeci">void Connect(armnn::IConnectableLayer *from, armnn::IConnectableLayer *to, const armnn::TensorInfo &amp;tensorInfo, unsigned int fromIndex, unsigned int toIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_test_utils_8cpp_source.xhtml#l00014">TestUtils.cpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00476">Network.cpp:476</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_async_callback_manager_xhtml_a9ee5b1dd7d3a6f619d2ed3d97d75d9b1"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_async_callback_manager.xhtml#a9ee5b1dd7d3a6f619d2ed3d97d75d9b1">armnn::experimental::AsyncCallbackManager::GetNotifiedCallback</a></div><div class="ttdeci">std::shared_ptr&lt; AsyncExecutionCallback &gt; GetNotifiedCallback()</div><div class="ttdef"><b>Definition:</b> <a href="_async_execution_callback_8cpp_source.xhtml#l00060">AsyncExecutionCallback.cpp:60</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="_strided_slice_async_end_to_end_test_8hpp.xhtml">StridedSliceAsyncEndToEndTest.hpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:22 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
