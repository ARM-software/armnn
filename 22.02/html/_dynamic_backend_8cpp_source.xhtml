<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/DynamicBackend.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_dynamic_backend_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DynamicBackend.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_dynamic_backend_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_dynamic_backend_8hpp.xhtml">armnn/backends/DynamicBackend.hpp</a>&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_dynamic_backend_utils_8hpp.xhtml">backendsCommon/DynamicBackendUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;{</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="classarmnn_1_1_dynamic_backend.xhtml#a1c1454fae6258415712b5e720023fbd1">   12</a></span>&#160;<a class="code" href="classarmnn_1_1_dynamic_backend.xhtml#a1c1454fae6258415712b5e720023fbd1">DynamicBackend::DynamicBackend</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* sharedObjectHandle)</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    : m_BackendIdFunction(nullptr)</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    , m_BackendVersionFunction(nullptr)</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    , m_BackendFactoryFunction(nullptr)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    , m_Handle(const_cast&lt;void*&gt;(sharedObjectHandle), &amp;<a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml">DynamicBackendUtils</a>::CloseHandle)</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="keywordflow">if</span> (m_Handle == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    {</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Cannot create a DynamicBackend object from an invalid shared object handle&quot;</span>);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    }</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="comment">// These calls will throw in case of error</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    m_BackendIdFunction      = SetFunctionPointer&lt;IdFunctionType&gt;(<span class="stringliteral">&quot;GetBackendId&quot;</span>);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    m_BackendVersionFunction = SetFunctionPointer&lt;VersionFunctionType&gt;(<span class="stringliteral">&quot;GetVersion&quot;</span>);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    m_BackendFactoryFunction = SetFunctionPointer&lt;FactoryFunctionType&gt;(<span class="stringliteral">&quot;BackendFactory&quot;</span>);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="comment">// Check that the backend is compatible with the current Backend API</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> backendId = <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml#a6deb5373920ee59a800eca6b01085654">GetBackendId</a>();</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> backendVersion = <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml#a74db049ad0000a58b9a58a6cd6d88feb">GetBackendVersion</a>();</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classarmnn_1_1_dynamic_backend_utils.xhtml#a6789076aa25c6a10faeff1043359bda8">DynamicBackendUtils::IsBackendCompatible</a>(backendVersion))</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="comment">// This exception message could not be formatted simply using fmt::format</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        std::stringstream message;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        message &lt;&lt; <span class="stringliteral">&quot;The dynamic backend &quot;</span> &lt;&lt; backendId &lt;&lt; <span class="stringliteral">&quot; (version &quot;</span> &lt;&lt; backendVersion &lt;&lt;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="stringliteral">&quot;) is not compatible with the current Backend API (version &quot;</span> &lt;&lt; <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a878b8f50d8a2f92ed624803e9f6968ae">IBackendInternal::GetApiVersion</a>() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(message.str());</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classarmnn_1_1_dynamic_backend.xhtml#a6deb5373920ee59a800eca6b01085654">   42</a></span>&#160;<a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml#a6deb5373920ee59a800eca6b01085654">DynamicBackend::GetBackendId</a>()</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (m_BackendIdFunction == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(<span class="stringliteral">&quot;GetBackendId error: invalid function pointer&quot;</span>);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* backendId = m_BackendIdFunction();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span> (backendId == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(<span class="stringliteral">&quot;GetBackendId error: invalid backend id&quot;</span>);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>(backendId);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarmnn_1_1_dynamic_backend.xhtml#a74db049ad0000a58b9a58a6cd6d88feb">   58</a></span>&#160;<a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml#a74db049ad0000a58b9a58a6cd6d88feb">DynamicBackend::GetBackendVersion</a>()</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span> (m_BackendVersionFunction == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(<span class="stringliteral">&quot;GetBackendVersion error: invalid function pointer&quot;</span>);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    uint32_t major = 0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    uint32_t minor = 0;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    m_BackendVersionFunction(&amp;major, &amp;minor);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a>{ major, minor };</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classarmnn_1_1_dynamic_backend.xhtml#a9d10388a851fc1a748c3e385f484b52a">   72</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#ade0af9dacaa52cafdd701bef2e901c77">IBackendInternalUniquePtr</a> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml#a9d10388a851fc1a748c3e385f484b52a">DynamicBackend::GetBackend</a>()</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// This call throws in case of error</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> CreateBackend();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classarmnn_1_1_dynamic_backend.xhtml#a4c24f07cb0b4bff43655dfdbd5eac539">   78</a></span>&#160;<a class="code" href="classarmnn_1_1_backend_registry.xhtml#aa33ac375677ee8436456a585dd6f68d9">BackendRegistry::FactoryFunction</a> <a class="code" href="classarmnn_1_1_dynamic_backend.xhtml#a4c24f07cb0b4bff43655dfdbd5eac539">DynamicBackend::GetFactoryFunction</a>()</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">if</span> (m_BackendFactoryFunction == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(<span class="stringliteral">&quot;GetFactoryFunction error: invalid function pointer&quot;</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">return</span> [<span class="keyword">this</span>]() -&gt; <a class="code" href="namespacearmnn.xhtml#ade0af9dacaa52cafdd701bef2e901c77">IBackendInternalUniquePtr</a></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="comment">// This call throws in case of error</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> CreateBackend();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    };</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> BackendFunctionType&gt;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;BackendFunctionType DynamicBackend::SetFunctionPointer(<span class="keyword">const</span> std::string&amp; backendFunctionName)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">if</span> (m_Handle == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(<span class="stringliteral">&quot;SetFunctionPointer error: invalid shared object handle&quot;</span>);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">if</span> (backendFunctionName.empty())</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(<span class="stringliteral">&quot;SetFunctionPointer error: backend function name must not be empty&quot;</span>);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">// This call will throw in case of error</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">auto</span> functionPointer = DynamicBackendUtils::GetEntryPoint&lt;BackendFunctionType&gt;(m_Handle.get(),</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                                                                   backendFunctionName.c_str());</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">if</span> (!functionPointer)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(<span class="stringliteral">&quot;SetFunctionPointer error: invalid backend function pointer returned&quot;</span>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> functionPointer;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<a class="code" href="namespacearmnn.xhtml#ade0af9dacaa52cafdd701bef2e901c77">IBackendInternalUniquePtr</a> DynamicBackend::CreateBackend()</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">if</span> (m_BackendFactoryFunction == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(<span class="stringliteral">&quot;CreateBackend error: invalid function pointer&quot;</span>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">auto</span> backendPointer = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a>*<span class="keyword">&gt;</span>(m_BackendFactoryFunction());</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span> (backendPointer == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>(<span class="stringliteral">&quot;CreateBackend error: backend instance must not be null&quot;</span>);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IBackendInternal&gt;(backendPointer);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_aa33ac375677ee8436456a585dd6f68d9"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#aa33ac375677ee8436456a585dd6f68d9">armnn::BackendRegistry::FactoryFunction</a></div><div class="ttdeci">std::function&lt; PointerType()&gt; FactoryFunction</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00033">BackendRegistry.hpp:33</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml">armnn::IBackendInternal</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00074">IBackendInternal.hpp:74</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml_a6789076aa25c6a10faeff1043359bda8"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml#a6789076aa25c6a10faeff1043359bda8">armnn::DynamicBackendUtils::IsBackendCompatible</a></div><div class="ttdeci">static bool IsBackendCompatible(const BackendVersion &amp;backendVersion)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8cpp_source.xhtml#l00050">DynamicBackendUtils.cpp:50</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="_dynamic_backend_utils_8hpp_xhtml"><div class="ttname"><a href="_dynamic_backend_utils_8hpp.xhtml">DynamicBackendUtils.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_version_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_version.xhtml">armnn::BackendVersion</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00031">IBackendInternal.hpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a878b8f50d8a2f92ed624803e9f6968ae"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a878b8f50d8a2f92ed624803e9f6968ae">armnn::IBackendInternal::GetApiVersion</a></div><div class="ttdeci">static constexpr BackendVersion GetApiVersion()</div><div class="ttdoc">Returns the version of the Backend API. </div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00164">IBackendInternal.hpp:164</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_dynamic_backend_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_dynamic_backend_8hpp.xhtml">DynamicBackend.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_utils_xhtml"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend_utils.xhtml">armnn::DynamicBackendUtils</a></div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_utils_8hpp_source.xhtml#l00028">DynamicBackendUtils.hpp:28</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml_a4c24f07cb0b4bff43655dfdbd5eac539"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml#a4c24f07cb0b4bff43655dfdbd5eac539">armnn::DynamicBackend::GetFactoryFunction</a></div><div class="ttdeci">BackendRegistry::FactoryFunction GetFactoryFunction()</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_8cpp_source.xhtml#l00078">DynamicBackend.cpp:78</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml_a1c1454fae6258415712b5e720023fbd1"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml#a1c1454fae6258415712b5e720023fbd1">armnn::DynamicBackend::DynamicBackend</a></div><div class="ttdeci">DynamicBackend(const void *sharedObjectHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_8cpp_source.xhtml#l00012">DynamicBackend.cpp:12</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml_a6deb5373920ee59a800eca6b01085654"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml#a6deb5373920ee59a800eca6b01085654">armnn::DynamicBackend::GetBackendId</a></div><div class="ttdeci">BackendId GetBackendId()</div><div class="ttdoc">Public dynamic backend functions. </div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_8cpp_source.xhtml#l00042">DynamicBackend.cpp:42</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml_a9d10388a851fc1a748c3e385f484b52a"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml#a9d10388a851fc1a748c3e385f484b52a">armnn::DynamicBackend::GetBackend</a></div><div class="ttdeci">IBackendInternalUniquePtr GetBackend()</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_8cpp_source.xhtml#l00072">DynamicBackend.cpp:72</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ade0af9dacaa52cafdd701bef2e901c77"><div class="ttname"><a href="namespacearmnn.xhtml#ade0af9dacaa52cafdd701bef2e901c77">armnn::IBackendInternalUniquePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IBackendInternal &gt; IBackendInternalUniquePtr</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00026">BackendRegistry.hpp:26</a></div></div>
<div class="ttc" id="classarmnn_1_1_dynamic_backend_xhtml_a74db049ad0000a58b9a58a6cd6d88feb"><div class="ttname"><a href="classarmnn_1_1_dynamic_backend.xhtml#a74db049ad0000a58b9a58a6cd6d88feb">armnn::DynamicBackend::GetBackendVersion</a></div><div class="ttdeci">BackendVersion GetBackendVersion()</div><div class="ttdef"><b>Definition:</b> <a href="_dynamic_backend_8cpp_source.xhtml#l00058">DynamicBackend.cpp:58</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="_dynamic_backend_8cpp.xhtml">DynamicBackend.cpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:32 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
