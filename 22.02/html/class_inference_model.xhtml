<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: InferenceModel&lt; IParser, TDataType &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('class_inference_model.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="class_inference_model-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">InferenceModel&lt; IParser, TDataType &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_inference_model_1_1_command_line_options.xhtml">CommandLineOptions</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:af6964b8f91085191c5228d1a67db4523"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#af6964b8f91085191c5228d1a67db4523">DataType</a> = TDataType</td></tr>
<tr class="separator:af6964b8f91085191c5228d1a67db4523"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e61c7404108440828ef7a45f310e229"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a2e61c7404108440828ef7a45f310e229">Params</a> = <a class="el" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a></td></tr>
<tr class="separator:a2e61c7404108440828ef7a45f310e229"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3ca0528045df8958ce5dcdf9d1af041"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">QuantizationParams</a> = <a class="el" href="namespace_inference_model_internal.xhtml#a6e713a319588c57fc854bc478f5ee13a">InferenceModelInternal::QuantizationParams</a></td></tr>
<tr class="separator:ae3ca0528045df8958ce5dcdf9d1af041"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5a211a676b879363f0c5001698a14c50"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a5a211a676b879363f0c5001698a14c50">InferenceModel</a> (const <a class="el" href="class_inference_model.xhtml#a2e61c7404108440828ef7a45f310e229">Params</a> &amp;params, bool enableProfiling, const std::string &amp;dynamicBackendsPath, const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;runtime=nullptr)</td></tr>
<tr class="separator:a5a211a676b879363f0c5001698a14c50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a262185c43532d5728c4bd7890f3b2235"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a262185c43532d5728c4bd7890f3b2235">CheckInputIndexIsValid</a> (unsigned int inputIndex) const</td></tr>
<tr class="separator:a262185c43532d5728c4bd7890f3b2235"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72a6db08ffca660ece7c2d86e2a14daa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a72a6db08ffca660ece7c2d86e2a14daa">CheckOutputIndexIsValid</a> (unsigned int outputIndex) const</td></tr>
<tr class="separator:a72a6db08ffca660ece7c2d86e2a14daa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a679e4b22a845c8d7f58f6ca6a5df625f"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a679e4b22a845c8d7f58f6ca6a5df625f">GetInputSize</a> (unsigned int inputIndex=0u) const</td></tr>
<tr class="separator:a679e4b22a845c8d7f58f6ca6a5df625f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8282dddf88e0deb3c414235e20a6cb2c"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">GetOutputSize</a> (unsigned int outputIndex=0u) const</td></tr>
<tr class="separator:a8282dddf88e0deb3c414235e20a6cb2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25651303cbe4a971cdada990eb71bf21"><td class="memItemLeft" align="right" valign="top">std::chrono::duration&lt; double, std::milli &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a25651303cbe4a971cdada990eb71bf21">Run</a> (const std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;inputContainers, std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;outputContainers)</td></tr>
<tr class="separator:a25651303cbe4a971cdada990eb71bf21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab510347c552e6ff7fd6b702b688525b1"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; unsigned int, std::chrono::duration&lt; double, std::milli &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#ab510347c552e6ff7fd6b702b688525b1">RunAsync</a> (<a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">armnn::experimental::IWorkingMemHandle</a> &amp;workingMemHandleRef, const std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;inputContainers, std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;outputContainers, unsigned int inferenceID)</td></tr>
<tr class="separator:ab510347c552e6ff7fd6b702b688525b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43b9b072a5aad953e50500b71bcbbef7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a43b9b072a5aad953e50500b71bcbbef7">RunAsync</a> (const std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;inputContainers, std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;outputContainers, std::shared_ptr&lt; <a class="el" href="classarmnn_1_1experimental_1_1_i_async_execution_callback.xhtml">armnn::IAsyncExecutionCallback</a> &gt; cb)</td></tr>
<tr class="separator:a43b9b072a5aad953e50500b71bcbbef7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a28e0c17604e5a945409f994c020212"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a9a28e0c17604e5a945409f994c020212">GetInputBindingInfo</a> (unsigned int inputIndex=0u) const</td></tr>
<tr class="separator:a9a28e0c17604e5a945409f994c020212"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e0f3330fc1e6c1fa1d99d731490c483"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a0e0f3330fc1e6c1fa1d99d731490c483">GetInputBindingInfos</a> () const</td></tr>
<tr class="separator:a0e0f3330fc1e6c1fa1d99d731490c483"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a325f1c17b5ff2153cae944e3c62820a2"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a325f1c17b5ff2153cae944e3c62820a2">GetOutputBindingInfo</a> (unsigned int outputIndex=0u) const</td></tr>
<tr class="separator:a325f1c17b5ff2153cae944e3c62820a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0b73049e00e7013f5cc6ae7fcaedcd4"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#ac0b73049e00e7013f5cc6ae7fcaedcd4">GetOutputBindingInfos</a> () const</td></tr>
<tr class="separator:ac0b73049e00e7013f5cc6ae7fcaedcd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a09727b3f781272e702516fffb7d97f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">QuantizationParams</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a1a09727b3f781272e702516fffb7d97f">GetQuantizationParams</a> (unsigned int outputIndex=0u) const</td></tr>
<tr class="separator:a1a09727b3f781272e702516fffb7d97f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a066580d185559e2efdcb6cedd1709b9c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">QuantizationParams</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a066580d185559e2efdcb6cedd1709b9c">GetInputQuantizationParams</a> (unsigned int inputIndex=0u) const</td></tr>
<tr class="separator:a066580d185559e2efdcb6cedd1709b9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade1a8545be49b1c10e724ea8536907c7"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">QuantizationParams</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#ade1a8545be49b1c10e724ea8536907c7">GetAllQuantizationParams</a> () const</td></tr>
<tr class="separator:ade1a8545be49b1c10e724ea8536907c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d789a57513b4b26e31eaed316e45b7f"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">armnn::experimental::IWorkingMemHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a6d789a57513b4b26e31eaed316e45b7f">CreateWorkingMemHandle</a> ()</td></tr>
<tr class="separator:a6d789a57513b4b26e31eaed316e45b7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a22794efa5d496a49a33739dd99087841"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_inference_model.xhtml#a22794efa5d496a49a33739dd99087841">AddCommandLineOptions</a> (cxxopts::Options &amp;options, <a class="el" href="struct_inference_model_1_1_command_line_options.xhtml">CommandLineOptions</a> &amp;cLineOptions, std::vector&lt; std::string &gt; &amp;required)</td></tr>
<tr class="separator:a22794efa5d496a49a33739dd99087841"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename IParser, typename TDataType&gt;<br />
class InferenceModel&lt; IParser, TDataType &gt;</h3>


<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00372">372</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="af6964b8f91085191c5228d1a67db4523"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6964b8f91085191c5228d1a67db4523">&#9670;&nbsp;</a></span>DataType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_inference_model.xhtml#af6964b8f91085191c5228d1a67db4523">DataType</a> =  TDataType</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00375">375</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

</div>
</div>
<a id="a2e61c7404108440828ef7a45f310e229"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e61c7404108440828ef7a45f310e229">&#9670;&nbsp;</a></span>Params</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_inference_model.xhtml#a2e61c7404108440828ef7a45f310e229">Params</a> =  <a class="el" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00376">376</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

</div>
</div>
<a id="ae3ca0528045df8958ce5dcdf9d1af041"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3ca0528045df8958ce5dcdf9d1af041">&#9670;&nbsp;</a></span>QuantizationParams</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">QuantizationParams</a> =  <a class="el" href="namespace_inference_model_internal.xhtml#a6e713a319588c57fc854bc478f5ee13a">InferenceModelInternal::QuantizationParams</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00377">377</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a5a211a676b879363f0c5001698a14c50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a211a676b879363f0c5001698a14c50">&#9670;&nbsp;</a></span>InferenceModel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_inference_model.xhtml">InferenceModel</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_inference_model.xhtml#a2e61c7404108440828ef7a45f310e229">Params</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enableProfiling</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>dynamicBackendsPath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>runtime</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00436">436</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_heap_profiling_8hpp_source.xhtml#l00045">ARMNN_SCOPED_HEAP_PROFILING</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00146">CreateNetworkImpl&lt; IParser &gt;::Create()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00040">IRuntime::Create()</a>, <a class="el" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa566666dfc3a9a82da0d7b0816b19f278">armnn::DetailsOnly</a>, <a class="el" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa497ab261a562e316736c2cb59b839d32">armnn::DetailsWithEvents</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Failure</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00019">armnn::GetTimeDuration()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00014">armnn::GetTimeNow()</a>, <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">armnn::InferAndValidate</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00112">Params::m_AsyncEnabled</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00109">Params::m_CachedNetworkFilePath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00095">Params::m_ComputeDevices</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00217">OptimizerOptions::m_Debug</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00096">IRuntime::CreationOptions::m_DynamicBackendsPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00096">Params::m_DynamicBackendsPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00101">Params::m_EnableBf16TurboMode</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00105">Params::m_EnableFastMath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00100">Params::m_EnableFp16TurboMode</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00091">IRuntime::CreationOptions::m_EnableGpuProfiling</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00104">Params::m_InferOutputShape</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00092">Params::m_InputBindings</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00111">Params::m_MLGOTuningFilePath</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00233">OptimizerOptions::m_ModelOptions</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00091">Params::m_ModelPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00110">Params::m_NumberOfThreads</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_OutputBindings</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00108">Params::m_OutputDetailsOnlyToStdOut</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00107">Params::m_OutputDetailsToStdOut</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00102">Params::m_PrintIntermediateLayers</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00236">OptimizerOptions::m_ProfilingEnabled</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00224">OptimizerOptions::m_ReduceFp32ToBf16</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00214">OptimizerOptions::m_ReduceFp32ToFp16</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00106">Params::m_SaveCachedNetwork</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00227">OptimizerOptions::m_shapeInferenceMethod</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00113">Params::m_ThreadPoolSize</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00099">Params::m_VisualizePostOptimizationModel</a>, <a class="el" href="_network_8cpp_source.xhtml#l01680">armnn::Optimize()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>, and <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ValidateOnly</a>.</p>
<div class="fragment"><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        : m_EnableProfiling(enableProfiling),</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;          m_ProfilingDetailsMethod(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::ProfilingDetailsMethod::Undefined</a>)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        , m_DynamicBackendsPath(dynamicBackendsPath)</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    {</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">if</span> (runtime)</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        {</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            m_Runtime = runtime;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        }</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        {</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a2fe8c3eadf4f4f9c0c664a24a2a298f9">m_EnableGpuProfiling</a> = m_EnableProfiling;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a> = m_DynamicBackendsPath;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            m_Runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        }</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="comment">// Configure the Profiler if the the profiling details are opted for</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">if</span> (params.m_OutputDetailsOnlyToStdOut)</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            m_ProfilingDetailsMethod = <a class="code" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa566666dfc3a9a82da0d7b0816b19f278">armnn::ProfilingDetailsMethod::DetailsOnly</a>;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.m_OutputDetailsToStdOut)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            m_ProfilingDetailsMethod = <a class="code" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa497ab261a562e316736c2cb59b839d32">armnn::ProfilingDetailsMethod::DetailsWithEvents</a>;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        std::string invalidBackends;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keywordflow">if</span> (!CheckRequestedBackendsAreValid(params.m_ComputeDevices, <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a>(invalidBackends)))</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        {</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Some backend IDs are invalid: &quot;</span> + invalidBackends);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        }</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a> optNet{<span class="keyword">nullptr</span>, [](<a class="code" href="classarmnn_1_1_i_optimized_network.xhtml">armnn::IOptimizedNetwork</a>*){}};</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        {</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> parsing_start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network = <a class="code" href="struct_create_network_impl.xhtml#a4cbece5e7793be85f9a1e8a0ab9e02f8">CreateNetworkImpl&lt;IParser&gt;::Create</a>(params, m_InputBindings, m_OutputBindings);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Network parsing time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                            &lt;&lt; std::fixed &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(parsing_start_time).count() &lt;&lt; <span class="stringliteral">&quot; ms.&quot;</span>;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;Optimizing&quot;</span>);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a> options;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a6e1a42622ca43dafc7ba8e684c016eb4">m_ReduceFp32ToFp16</a> = params.m_EnableFp16TurboMode;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a11f463726addcc1d2845266997d79e9c">m_ReduceFp32ToBf16</a> = params.m_EnableBf16TurboMode;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a69eb14082d40fa0a3cff50457344a5e0">m_Debug</a> = params.m_PrintIntermediateLayers;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a9416d94a8aad7cdfa47eb35e825cbda5">m_shapeInferenceMethod</a> = params.m_InferOutputShape ?</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                    <a class="code" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">armnn::ShapeInferenceMethod::InferAndValidate</a> : <a class="code" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ShapeInferenceMethod::ValidateOnly</a>;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">m_ProfilingEnabled</a> = m_EnableProfiling;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> gpuAcc(<span class="stringliteral">&quot;GpuAcc&quot;</span>,</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                { <span class="stringliteral">&quot;FastMathEnabled&quot;</span>, params.m_EnableFastMath },</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                { <span class="stringliteral">&quot;SaveCachedNetwork&quot;</span>, params.m_SaveCachedNetwork },</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                { <span class="stringliteral">&quot;CachedNetworkFilePath&quot;</span>, params.m_CachedNetworkFilePath },</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                { <span class="stringliteral">&quot;MLGOTuningFilePath&quot;</span>, params.m_MLGOTuningFilePath }</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            });</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> cpuAcc(<span class="stringliteral">&quot;CpuAcc&quot;</span>,</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            {</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                { <span class="stringliteral">&quot;FastMathEnabled&quot;</span>, params.m_EnableFastMath },</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                { <span class="stringliteral">&quot;NumberOfThreads&quot;</span>, params.m_NumberOfThreads }</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            });</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(gpuAcc);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(cpuAcc);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> optimization_start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a>(*network, params.m_ComputeDevices, m_Runtime-&gt;GetDeviceSpec(), options);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Optimization time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                            &lt;&lt; std::fixed &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(optimization_start_time).count() &lt;&lt; <span class="stringliteral">&quot; ms.&quot;</span>;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            <span class="keywordflow">if</span> (!optNet)</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            {</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Optimize returned nullptr&quot;</span>);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            }</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        }</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="keywordflow">if</span> (params.m_VisualizePostOptimizationModel)</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        {</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            fs::path filename = params.m_ModelPath;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            filename.replace_extension(<span class="stringliteral">&quot;dot&quot;</span>);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            std::fstream file(filename.c_str(), std::ios_base::out);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            optNet-&gt;SerializeToDot(file);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        }</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> ret;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        {</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;LoadNetwork&quot;</span>);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> loading_start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a> networkProperties(params.m_AsyncEnabled,</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                                        <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::MemorySource::Undefined</a>,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                                        <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::MemorySource::Undefined</a>,</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                                        enableProfiling,</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                                        m_ProfilingDetailsMethod);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            std::string errorMessage;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            ret = m_Runtime-&gt;LoadNetwork(m_NetworkIdentifier, std::move(optNet), errorMessage, networkProperties);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Network loading time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                            &lt;&lt; std::fixed &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(loading_start_time).count() &lt;&lt; <span class="stringliteral">&quot; ms.&quot;</span>;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            <span class="keywordflow">if</span> (params.m_AsyncEnabled &amp;&amp; params.m_ThreadPoolSize &gt; 0)</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            {</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                std::vector&lt;std::shared_ptr&lt;armnn::IWorkingMemHandle&gt;&gt; memHandles;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; params.m_ThreadPoolSize; ++i)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                {</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                    memHandles.emplace_back(m_Runtime-&gt;CreateWorkingMemHandle(m_NetworkIdentifier));</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                }</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                m_Threadpool = std::make_unique&lt;armnn::Threadpool&gt;(params.m_ThreadPoolSize,</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                                                                   m_Runtime.get(),</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                                                   memHandles);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            }</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        }</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        <span class="keywordflow">if</span> (ret == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a>)</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        {</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;IRuntime::LoadNetwork failed&quot;</span>);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        }</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    }</div><div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a71194277c60153a5f86539f5d39f01db"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">armnn::OptimizerOptions::m_ModelOptions</a></div><div class="ttdeci">ModelOptions m_ModelOptions</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00233">INetwork.hpp:233</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00040">Runtime.cpp:40</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a441621f00fd5665898c81a5ae3473c6b"><div class="ttname"><a href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a></div><div class="ttdeci">std::chrono::duration&lt; double, std::milli &gt; GetTimeDuration(std::chrono::high_resolution_clock::time_point start_time)</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00019">Timer.hpp:19</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a9416d94a8aad7cdfa47eb35e825cbda5"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a9416d94a8aad7cdfa47eb35e825cbda5">armnn::OptimizerOptions::m_shapeInferenceMethod</a></div><div class="ttdeci">ShapeInferenceMethod m_shapeInferenceMethod</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00227">INetwork.hpp:227</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae060224135f57f926cbda9d2732a2b1fa566666dfc3a9a82da0d7b0816b19f278"><div class="ttname"><a href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa566666dfc3a9a82da0d7b0816b19f278">armnn::ProfilingDetailsMethod::DetailsOnly</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a11f463726addcc1d2845266997d79e9c"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a11f463726addcc1d2845266997d79e9c">armnn::OptimizerOptions::m_ReduceFp32ToBf16</a></div><div class="ttdeci">bool m_ReduceFp32ToBf16</div><div class="ttdoc">Reduces all Fp32 operators in the model to Bf16 for faster processing. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00224">INetwork.hpp:224</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac895f6f6897ce335b7b433201bae0b48"><div class="ttname"><a href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a></div><div class="ttdeci">std::chrono::high_resolution_clock::time_point GetTimeNow()</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00014">Timer.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00033">IRuntime.hpp:33</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a6e1a42622ca43dafc7ba8e684c016eb4"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a6e1a42622ca43dafc7ba8e684c016eb4">armnn::OptimizerOptions::m_ReduceFp32ToFp16</a></div><div class="ttdeci">bool m_ReduceFp32ToFp16</div><div class="ttdoc">Reduces all Fp32 operators in the model to Fp16 for faster processing. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00214">INetwork.hpp:214</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a69eb14082d40fa0a3cff50457344a5e0"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a69eb14082d40fa0a3cff50457344a5e0">armnn::OptimizerOptions::m_Debug</a></div><div class="ttdeci">bool m_Debug</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00217">INetwork.hpp:217</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae060224135f57f926cbda9d2732a2b1fa497ab261a562e316736c2cb59b839d32"><div class="ttname"><a href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa497ab261a562e316736c2cb59b839d32">armnn::ProfilingDetailsMethod::DetailsWithEvents</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01680">Network.cpp:1680</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_optimized_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_optimized_network.xhtml">armnn::IOptimizedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00790">INetwork.hpp:790</a></div></div>
<div class="ttc" id="_heap_profiling_8hpp_xhtml_aeeb927880fc4ffc2eea754a67d884a53"><div class="ttname"><a href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a></div><div class="ttdeci">#define ARMNN_SCOPED_HEAP_PROFILING(TAG)</div><div class="ttdef"><b>Definition:</b> <a href="_heap_profiling_8hpp_source.xhtml#l00045">HeapProfiling.hpp:45</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1"><div class="ttname"><a href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ShapeInferenceMethod::ValidateOnly</a></div><div class="ttdoc">Validate all output shapes. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00029">Types.hpp:29</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00242">INetwork.hpp:242</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a1b1892da2aaf7eaedaa38671d56b7f19"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">armnn::OptimizerOptions::m_ProfilingEnabled</a></div><div class="ttdeci">bool m_ProfilingEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00236">INetwork.hpp:236</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a></div><div class="ttdoc">ArmNN performs an optimization on each model/network before it gets loaded for execution. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00137">INetwork.hpp:137</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a></div><div class="ttdoc">Struct for the users to pass backend specific options. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00022">BackendOptions.hpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">armnn::IRuntime::CreationOptions::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdoc">Setting this value will override the paths set by the DYNAMIC_BACKEND_PATHS compiler directive Only a...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00096">IRuntime.hpp:96</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_a2fe8c3eadf4f4f9c0c664a24a2a298f9"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a2fe8c3eadf4f4f9c0c664a24a2a298f9">armnn::IRuntime::CreationOptions::m_EnableGpuProfiling</a></div><div class="ttdeci">bool m_EnableGpuProfiling</div><div class="ttdoc">Setting this flag will allow the user to obtain GPU profiling information from the runtime...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00091">IRuntime.hpp:91</a></div></div>
<div class="ttc" id="struct_create_network_impl_xhtml_a4cbece5e7793be85f9a1e8a0ab9e02f8"><div class="ttname"><a href="struct_create_network_impl.xhtml#a4cbece5e7793be85f9a1e8a0ab9e02f8">CreateNetworkImpl::Create</a></div><div class="ttdeci">static armnn::INetworkPtr Create(const Params &amp;params, std::vector&lt; armnn::BindingPointInfo &gt; &amp;inputBindings, std::vector&lt; armnn::BindingPointInfo &gt; &amp;outputBindings)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00146">InferenceModel.hpp:146</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb"><div class="ttname"><a href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">armnn::ShapeInferenceMethod::InferAndValidate</a></div><div class="ttdoc">Infer missing output shapes and validate all output shapes. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a22794efa5d496a49a33739dd99087841"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22794efa5d496a49a33739dd99087841">&#9670;&nbsp;</a></span>AddCommandLineOptions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void AddCommandLineOptions </td>
          <td>(</td>
          <td class="paramtype">cxxopts::Options &amp;&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_inference_model_1_1_command_line_options.xhtml">CommandLineOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>cLineOptions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>required</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00398">398</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00083">BackendRegistry::GetBackendIdsAsString()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00383">InferenceModel&lt; IParser, TDataType &gt;::CommandLineOptions::m_ComputeDevices</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00384">InferenceModel&lt; IParser, TDataType &gt;::CommandLineOptions::m_DynamicBackendsPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00387">InferenceModel&lt; IParser, TDataType &gt;::CommandLineOptions::m_EnableBf16TurboMode</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00386">InferenceModel&lt; IParser, TDataType &gt;::CommandLineOptions::m_EnableFp16TurboMode</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00388">InferenceModel&lt; IParser, TDataType &gt;::CommandLineOptions::m_Labels</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00382">InferenceModel&lt; IParser, TDataType &gt;::CommandLineOptions::m_ModelDir</a>, and <a class="el" href="_inference_model_8hpp_source.xhtml#l00385">InferenceModel&lt; IParser, TDataType &gt;::CommandLineOptions::m_VisualizePostOptimizationModel</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_test_8inl_source.xhtml#l00193">ClassifierTestCaseProvider&lt; TDatabase, InferenceModel &gt;::AddCommandLineOptions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    {</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="keyword">const</span> std::vector&lt;std::string&gt; defaultComputes = { <span class="stringliteral">&quot;CpuAcc&quot;</span>, <span class="stringliteral">&quot;CpuRef&quot;</span> };</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keyword">const</span> std::string backendsMessage = <span class="stringliteral">&quot;Which device to run layers on by default. Possible choices: &quot;</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                          + <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#ae1de2f7ca1db17f45f97155e239b8b45">GetBackendIdsAsString</a>();</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        options</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            .allow_unrecognised_options()</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            .add_options()</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                (<span class="stringliteral">&quot;m,model-dir&quot;</span>, <span class="stringliteral">&quot;Path to directory containing model files (.prototxt/.tflite)&quot;</span>,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                 cxxopts::value&lt;std::string&gt;(cLineOptions.m_ModelDir))</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                (<span class="stringliteral">&quot;c,compute&quot;</span>, backendsMessage.c_str(),</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                 cxxopts::value&lt;std::vector&lt;std::string&gt;&gt;(cLineOptions.m_ComputeDevices)-&gt;default_value(<span class="stringliteral">&quot;CpuRef&quot;</span>))</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                (<span class="stringliteral">&quot;b,dynamic-backends-path&quot;</span>,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                 <span class="stringliteral">&quot;Path where to load any available dynamic backend from. &quot;</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                 <span class="stringliteral">&quot;If left empty (the default), dynamic backends will not be used.&quot;</span>,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                 cxxopts::value(cLineOptions.m_DynamicBackendsPath))</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                (<span class="stringliteral">&quot;l,labels&quot;</span>,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                 <span class="stringliteral">&quot;Text file containing one image filename - correct label pair per line, &quot;</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                 <span class="stringliteral">&quot;used to test the accuracy of the network.&quot;</span>, cxxopts::value&lt;std::string&gt;(cLineOptions.m_Labels))</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                (<span class="stringliteral">&quot;v,visualize-optimized-model&quot;</span>,</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                 <span class="stringliteral">&quot;Produce a dot file useful for visualizing the graph post optimization.&quot;</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                 <span class="stringliteral">&quot;The file will have the same name as the model with the .dot extention.&quot;</span>,</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                 cxxopts::value&lt;bool&gt;(cLineOptions.m_VisualizePostOptimizationModel)-&gt;default_value(<span class="stringliteral">&quot;false&quot;</span>))</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                (<span class="stringliteral">&quot;fp16-turbo-mode&quot;</span>,</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                 <span class="stringliteral">&quot;If this option is enabled FP32 layers, weights and biases will be converted &quot;</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                 <span class="stringliteral">&quot;to FP16 where the backend supports it.&quot;</span>,</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                 cxxopts::value&lt;bool&gt;(cLineOptions.m_EnableFp16TurboMode)-&gt;default_value(<span class="stringliteral">&quot;false&quot;</span>))</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                (<span class="stringliteral">&quot;bf16-turbo-mode&quot;</span>,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                 <span class="stringliteral">&quot;If this option is enabled FP32 layers, weights and biases will be converted &quot;</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                 <span class="stringliteral">&quot;to BF16 where the backend supports it.&quot;</span>,</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                 cxxopts::value&lt;bool&gt;(cLineOptions.m_EnableBf16TurboMode)-&gt;default_value(<span class="stringliteral">&quot;false&quot;</span>));</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        required.emplace_back(<span class="stringliteral">&quot;model-dir&quot;</span>);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_ae1de2f7ca1db17f45f97155e239b8b45"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#ae1de2f7ca1db17f45f97155e239b8b45">armnn::BackendRegistry::GetBackendIdsAsString</a></div><div class="ttdeci">std::string GetBackendIdsAsString() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00083">BackendRegistry.cpp:83</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a262185c43532d5728c4bd7890f3b2235"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a262185c43532d5728c4bd7890f3b2235">&#9670;&nbsp;</a></span>CheckInputIndexIsValid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckInputIndexIsValid </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inputIndex</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00560">560</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00092">Params::m_InputBindings</a>.</p>
<div class="fragment"><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    {</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <span class="keywordflow">if</span> (m_InputBindings.size() &lt; inputIndex + 1)</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        {</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(<span class="stringliteral">&quot;Input index out of range: {}&quot;</span>, inputIndex));</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        }</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a72a6db08ffca660ece7c2d86e2a14daa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72a6db08ffca660ece7c2d86e2a14daa">&#9670;&nbsp;</a></span>CheckOutputIndexIsValid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CheckOutputIndexIsValid </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>outputIndex</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00568">568</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_OutputBindings</a>.</p>
<div class="fragment"><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    {</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="keywordflow">if</span> (m_OutputBindings.size() &lt; outputIndex + 1)</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        {</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(<span class="stringliteral">&quot;Output index out of range: {}&quot;</span>, outputIndex));</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        }</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6d789a57513b4b26e31eaed316e45b7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d789a57513b4b26e31eaed316e45b7f">&#9670;&nbsp;</a></span>CreateWorkingMemHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">armnn::experimental::IWorkingMemHandle</a>&gt; CreateWorkingMemHandle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00772">772</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00096">Params::m_DynamicBackendsPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00092">Params::m_InputBindings</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_OutputBindings</a>, <a class="el" href="_tensor_i_o_utils_8hpp_source.xhtml#l00017">armnnUtils::MakeInputTensors()</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00050">MakeInputTensors()</a>, <a class="el" href="_tensor_i_o_utils_8hpp_source.xhtml#l00056">armnnUtils::MakeOutputTensors()</a>, and <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00074">MakeOutputTensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_8cpp_source.xhtml#l00377">MainImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    {</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        <span class="keywordflow">return</span> m_Runtime-&gt;CreateWorkingMemHandle(m_NetworkIdentifier);</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ade1a8545be49b1c10e724ea8536907c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade1a8545be49b1c10e724ea8536907c7">&#9670;&nbsp;</a></span>GetAllQuantizationParams()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">QuantizationParams</a>&gt; GetAllQuantizationParams </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00762">762</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_OutputBindings</a>.</p>
<div class="fragment"><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    {</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        std::vector&lt;QuantizationParams&gt; quantizationParams;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0u; i &lt; m_OutputBindings.size(); i++)</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        {</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            quantizationParams.push_back(<a class="code" href="class_inference_model.xhtml#a1a09727b3f781272e702516fffb7d97f">GetQuantizationParams</a>(i));</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        }</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <span class="keywordflow">return</span> quantizationParams;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    }</div><div class="ttc" id="class_inference_model_xhtml_a1a09727b3f781272e702516fffb7d97f"><div class="ttname"><a href="class_inference_model.xhtml#a1a09727b3f781272e702516fffb7d97f">InferenceModel::GetQuantizationParams</a></div><div class="ttdeci">QuantizationParams GetQuantizationParams(unsigned int outputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00748">InferenceModel.hpp:748</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9a28e0c17604e5a945409f994c020212"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a28e0c17604e5a945409f994c020212">&#9670;&nbsp;</a></span>GetInputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a>&amp; GetInputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inputIndex</em> = <code>0u</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00726">726</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00092">Params::m_InputBindings</a>.</p>

<p class="reference">Referenced by <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00049">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    {</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        <a class="code" href="class_inference_model.xhtml#a262185c43532d5728c4bd7890f3b2235">CheckInputIndexIsValid</a>(inputIndex);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;        <span class="keywordflow">return</span> m_InputBindings[inputIndex];</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    }</div><div class="ttc" id="class_inference_model_xhtml_a262185c43532d5728c4bd7890f3b2235"><div class="ttname"><a href="class_inference_model.xhtml#a262185c43532d5728c4bd7890f3b2235">InferenceModel::CheckInputIndexIsValid</a></div><div class="ttdeci">void CheckInputIndexIsValid(unsigned int inputIndex) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00560">InferenceModel.hpp:560</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0e0f3330fc1e6c1fa1d99d731490c483"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e0f3330fc1e6c1fa1d99d731490c483">&#9670;&nbsp;</a></span>GetInputBindingInfos()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;<a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a>&gt;&amp; GetInputBindingInfos </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00732">732</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00092">Params::m_InputBindings</a>.</p>
<div class="fragment"><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    {</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <span class="keywordflow">return</span> m_InputBindings;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a066580d185559e2efdcb6cedd1709b9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a066580d185559e2efdcb6cedd1709b9c">&#9670;&nbsp;</a></span>GetInputQuantizationParams()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">QuantizationParams</a> GetInputQuantizationParams </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inputIndex</em> = <code>0u</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00755">755</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00092">Params::m_InputBindings</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_8cpp_source.xhtml#l00377">MainImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    {</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;        <a class="code" href="class_inference_model.xhtml#a262185c43532d5728c4bd7890f3b2235">CheckInputIndexIsValid</a>(inputIndex);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        <span class="keywordflow">return</span> std::make_pair(m_InputBindings[inputIndex].second.GetQuantizationScale(),</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                              m_InputBindings[inputIndex].second.GetQuantizationOffset());</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    }</div><div class="ttc" id="class_inference_model_xhtml_a262185c43532d5728c4bd7890f3b2235"><div class="ttname"><a href="class_inference_model.xhtml#a262185c43532d5728c4bd7890f3b2235">InferenceModel::CheckInputIndexIsValid</a></div><div class="ttdeci">void CheckInputIndexIsValid(unsigned int inputIndex) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00560">InferenceModel.hpp:560</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a679e4b22a845c8d7f58f6ca6a5df625f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a679e4b22a845c8d7f58f6ca6a5df625f">&#9670;&nbsp;</a></span>GetInputSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetInputSize </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inputIndex</em> = <code>0u</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00576">576</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00092">Params::m_InputBindings</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_8cpp_source.xhtml#l00377">MainImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    {</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        <a class="code" href="class_inference_model.xhtml#a262185c43532d5728c4bd7890f3b2235">CheckInputIndexIsValid</a>(inputIndex);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="keywordflow">return</span> m_InputBindings[inputIndex].second.GetNumElements();</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    }</div><div class="ttc" id="class_inference_model_xhtml_a262185c43532d5728c4bd7890f3b2235"><div class="ttname"><a href="class_inference_model.xhtml#a262185c43532d5728c4bd7890f3b2235">InferenceModel::CheckInputIndexIsValid</a></div><div class="ttdeci">void CheckInputIndexIsValid(unsigned int inputIndex) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00560">InferenceModel.hpp:560</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a325f1c17b5ff2153cae944e3c62820a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a325f1c17b5ff2153cae944e3c62820a2">&#9670;&nbsp;</a></span>GetOutputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a>&amp; GetOutputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>outputIndex</em> = <code>0u</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00737">737</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_OutputBindings</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_8cpp_source.xhtml#l00377">MainImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    {</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <a class="code" href="class_inference_model.xhtml#a72a6db08ffca660ece7c2d86e2a14daa">CheckOutputIndexIsValid</a>(outputIndex);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        <span class="keywordflow">return</span> m_OutputBindings[outputIndex];</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    }</div><div class="ttc" id="class_inference_model_xhtml_a72a6db08ffca660ece7c2d86e2a14daa"><div class="ttname"><a href="class_inference_model.xhtml#a72a6db08ffca660ece7c2d86e2a14daa">InferenceModel::CheckOutputIndexIsValid</a></div><div class="ttdeci">void CheckOutputIndexIsValid(unsigned int outputIndex) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00568">InferenceModel.hpp:568</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac0b73049e00e7013f5cc6ae7fcaedcd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0b73049e00e7013f5cc6ae7fcaedcd4">&#9670;&nbsp;</a></span>GetOutputBindingInfos()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;<a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a>&gt;&amp; GetOutputBindingInfos </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00743">743</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_OutputBindings</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_8cpp_source.xhtml#l00377">MainImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    {</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        <span class="keywordflow">return</span> m_OutputBindings;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a8282dddf88e0deb3c414235e20a6cb2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8282dddf88e0deb3c414235e20a6cb2c">&#9670;&nbsp;</a></span>GetOutputSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetOutputSize </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>outputIndex</em> = <code>0u</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00582">582</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_OutputBindings</a>.</p>

<p class="reference">Referenced by <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00049">main()</a>, and <a class="el" href="_execute_network_8cpp_source.xhtml#l00377">MainImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    {</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <a class="code" href="class_inference_model.xhtml#a72a6db08ffca660ece7c2d86e2a14daa">CheckOutputIndexIsValid</a>(outputIndex);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        <span class="keywordflow">return</span> m_OutputBindings[outputIndex].second.GetNumElements();</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    }</div><div class="ttc" id="class_inference_model_xhtml_a72a6db08ffca660ece7c2d86e2a14daa"><div class="ttname"><a href="class_inference_model.xhtml#a72a6db08ffca660ece7c2d86e2a14daa">InferenceModel::CheckOutputIndexIsValid</a></div><div class="ttdeci">void CheckOutputIndexIsValid(unsigned int outputIndex) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00568">InferenceModel.hpp:568</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1a09727b3f781272e702516fffb7d97f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a09727b3f781272e702516fffb7d97f">&#9670;&nbsp;</a></span>GetQuantizationParams()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">QuantizationParams</a> GetQuantizationParams </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>outputIndex</em> = <code>0u</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00748">748</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_OutputBindings</a>.</p>
<div class="fragment"><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    {</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        <a class="code" href="class_inference_model.xhtml#a72a6db08ffca660ece7c2d86e2a14daa">CheckOutputIndexIsValid</a>(outputIndex);</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        <span class="keywordflow">return</span> std::make_pair(m_OutputBindings[outputIndex].second.GetQuantizationScale(),</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                              m_OutputBindings[outputIndex].second.GetQuantizationOffset());</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    }</div><div class="ttc" id="class_inference_model_xhtml_a72a6db08ffca660ece7c2d86e2a14daa"><div class="ttname"><a href="class_inference_model.xhtml#a72a6db08ffca660ece7c2d86e2a14daa">InferenceModel::CheckOutputIndexIsValid</a></div><div class="ttdeci">void CheckOutputIndexIsValid(unsigned int outputIndex) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00568">InferenceModel.hpp:568</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a25651303cbe4a971cdada990eb71bf21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25651303cbe4a971cdada990eb71bf21">&#9670;&nbsp;</a></span>Run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::chrono::duration&lt;double, std::milli&gt; Run </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputContainers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputContainers</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00588">588</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Failure</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00019">armnn::GetTimeDuration()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00014">armnn::GetTimeNow()</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00050">MakeInputTensors()</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00074">MakeOutputTensors()</a>, and <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_8cpp_source.xhtml#l00377">MainImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    {</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputContainers.size(); ++i)</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        {</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> expectedOutputDataSize = <a class="code" href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">GetOutputSize</a>(i);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            mapbox::util::apply_visitor([expectedOutputDataSize, i](<span class="keyword">auto</span>&amp;&amp; value)</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            {</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> actualOutputDataSize   = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(value.size());</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                <span class="keywordflow">if</span> (actualOutputDataSize &lt; expectedOutputDataSize)</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                {</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = i;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                            fmt::format(<span class="stringliteral">&quot;Not enough data for output #{0}: expected &quot;</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                            <span class="stringliteral">&quot;{1} elements, got {2}&quot;</span>, outputIndex, expectedOutputDataSize, actualOutputDataSize));</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                }</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            },</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            outputContainers[i]);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        }</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        std::shared_ptr&lt;armnn::IProfiler&gt; profiler = m_Runtime-&gt;GetProfiler(m_NetworkIdentifier);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <span class="comment">// Start timer to record inference time in EnqueueWorkload (in milliseconds)</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> ret = m_Runtime-&gt;EnqueueWorkload(m_NetworkIdentifier,</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                                                       MakeInputTensors(inputContainers),</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                                       MakeOutputTensors(outputContainers));</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> duration = <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(start_time);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <span class="comment">// if profiling is enabled print out the results</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keywordflow">if</span> (profiler &amp;&amp; profiler-&gt;IsProfilingEnabled())</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        {</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            profiler-&gt;Print(std::cout);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        }</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        <span class="keywordflow">if</span> (ret == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a>)</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        {</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;IRuntime::EnqueueWorkload failed&quot;</span>);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        }</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        {</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            <span class="keywordflow">return</span> duration;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        }</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_a441621f00fd5665898c81a5ae3473c6b"><div class="ttname"><a href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a></div><div class="ttdeci">std::chrono::duration&lt; double, std::milli &gt; GetTimeDuration(std::chrono::high_resolution_clock::time_point start_time)</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00019">Timer.hpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac895f6f6897ce335b7b433201bae0b48"><div class="ttname"><a href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a></div><div class="ttdeci">std::chrono::high_resolution_clock::time_point GetTimeNow()</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00014">Timer.hpp:14</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a8282dddf88e0deb3c414235e20a6cb2c"><div class="ttname"><a href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">InferenceModel::GetOutputSize</a></div><div class="ttdeci">unsigned int GetOutputSize(unsigned int outputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00582">InferenceModel.hpp:582</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00029">Types.hpp:29</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab510347c552e6ff7fd6b702b688525b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab510347c552e6ff7fd6b702b688525b1">&#9670;&nbsp;</a></span>RunAsync() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt;unsigned int, std::chrono::duration&lt;double, std::milli&gt; &gt; RunAsync </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">armnn::experimental::IWorkingMemHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>workingMemHandleRef</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputContainers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputContainers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inferenceID</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00636">636</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Failure</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00019">armnn::GetTimeDuration()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00014">armnn::GetTimeNow()</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00050">MakeInputTensors()</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00074">MakeOutputTensors()</a>, and <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_8cpp_source.xhtml#l00377">MainImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    {</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputContainers.size(); ++i)</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        {</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> expectedOutputDataSize = <a class="code" href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">GetOutputSize</a>(i);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            mapbox::util::apply_visitor([expectedOutputDataSize, i](<span class="keyword">auto</span>&amp;&amp; value)</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            {</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> actualOutputDataSize   = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(value.size());</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                <span class="keywordflow">if</span> (actualOutputDataSize &lt; expectedOutputDataSize)</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                {</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = i;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                            fmt::format(<span class="stringliteral">&quot;Not enough data for output #{0}: expected &quot;</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                            <span class="stringliteral">&quot;{1} elements, got {2}&quot;</span>, outputIndex, expectedOutputDataSize, actualOutputDataSize));</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                }</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            },</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            outputContainers[i]);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        }</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        std::shared_ptr&lt;armnn::IProfiler&gt; profiler = m_Runtime-&gt;GetProfiler(m_NetworkIdentifier);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <span class="comment">// Start timer to record inference time in EnqueueWorkload (in milliseconds)</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> ret = m_Runtime-&gt;Execute(workingMemHandleRef,</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                                               MakeInputTensors(inputContainers),</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                                               MakeOutputTensors(outputContainers));</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> duration = <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(start_time);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="comment">// if profiling is enabled print out the results</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        <span class="keywordflow">if</span> (profiler &amp;&amp; profiler-&gt;IsProfilingEnabled())</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        {</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;            profiler-&gt;Print(std::cout);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        }</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <span class="keywordflow">if</span> (ret == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a>)</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        {</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                fmt::format(<span class="stringliteral">&quot;IRuntime::Execute asynchronously failed for network #{0} on inference #{1}&quot;</span>,</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                            m_NetworkIdentifier, inferenceID));</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        }</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        {</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            <span class="keywordflow">return</span> std::make_tuple(inferenceID, duration);</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        }</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_a441621f00fd5665898c81a5ae3473c6b"><div class="ttname"><a href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a></div><div class="ttdeci">std::chrono::duration&lt; double, std::milli &gt; GetTimeDuration(std::chrono::high_resolution_clock::time_point start_time)</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00019">Timer.hpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac895f6f6897ce335b7b433201bae0b48"><div class="ttname"><a href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a></div><div class="ttdeci">std::chrono::high_resolution_clock::time_point GetTimeNow()</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00014">Timer.hpp:14</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a8282dddf88e0deb3c414235e20a6cb2c"><div class="ttname"><a href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">InferenceModel::GetOutputSize</a></div><div class="ttdeci">unsigned int GetOutputSize(unsigned int outputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00582">InferenceModel.hpp:582</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00029">Types.hpp:29</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a43b9b072a5aad953e50500b71bcbbef7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43b9b072a5aad953e50500b71bcbbef7">&#9670;&nbsp;</a></span>RunAsync() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void RunAsync </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputContainers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputContainers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classarmnn_1_1experimental_1_1_i_async_execution_callback.xhtml">armnn::IAsyncExecutionCallback</a> &gt;&#160;</td>
          <td class="paramname"><em>cb</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_inference_model_8hpp_source.xhtml#l00689">689</a> of file <a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00050">MakeInputTensors()</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00074">MakeOutputTensors()</a>, <a class="el" href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a87f8a6ab85c9ced3702b4ea641ad4bb5">armnn::Medium</a>, and <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>
<div class="fragment"><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    {</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputContainers.size(); ++i)</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        {</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> expectedOutputDataSize = <a class="code" href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">GetOutputSize</a>(i);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            mapbox::util::apply_visitor([expectedOutputDataSize, i](<span class="keyword">auto</span>&amp;&amp; value)</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            {</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> actualOutputDataSize   = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(value.size());</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                <span class="keywordflow">if</span> (actualOutputDataSize &lt; expectedOutputDataSize)</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = i;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                            fmt::format(<span class="stringliteral">&quot;Not enough data for output #{0}: expected &quot;</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                            <span class="stringliteral">&quot;{1} elements, got {2}&quot;</span>, outputIndex, expectedOutputDataSize, actualOutputDataSize));</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                }</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            },</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            outputContainers[i]);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        }</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        std::shared_ptr&lt;armnn::IProfiler&gt; profiler = m_Runtime-&gt;GetProfiler(m_NetworkIdentifier);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        m_Threadpool-&gt;Schedule(m_NetworkIdentifier,</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                               MakeInputTensors(inputContainers),</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                               MakeOutputTensors(outputContainers),</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                               <a class="code" href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a87f8a6ab85c9ced3702b4ea641ad4bb5">armnn::QosExecPriority::Medium</a>,</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                               cb);</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <span class="comment">// if profiling is enabled print out the results</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        <span class="keywordflow">if</span> (profiler &amp;&amp; profiler-&gt;IsProfilingEnabled())</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        {</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            profiler-&gt;Print(std::cout);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        }</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    }</div><div class="ttc" id="class_inference_model_xhtml_a8282dddf88e0deb3c414235e20a6cb2c"><div class="ttname"><a href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">InferenceModel::GetOutputSize</a></div><div class="ttdeci">unsigned int GetOutputSize(unsigned int outputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00582">InferenceModel.hpp:582</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e72227ebe5ac505cf44790f2e6eb488a87f8a6ab85c9ced3702b4ea641ad4bb5"><div class="ttname"><a href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a87f8a6ab85c9ced3702b4ea641ad4bb5">armnn::QosExecPriority::Medium</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>tests/<a class="el" href="_inference_model_8hpp_source.xhtml">InferenceModel.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="class_inference_model.xhtml">InferenceModel</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:43 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
