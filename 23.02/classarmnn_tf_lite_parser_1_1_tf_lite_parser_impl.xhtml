<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: TfLiteParserImpl Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TfLiteParserImpl Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:abfc86471394295357a23b3addd0b5b1c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> = std::unique_ptr&lt; tflite::ModelT &gt;</td></tr>
<tr class="separator:abfc86471394295357a23b3addd0b5b1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a988cb5e216eb87d854414c6a0282eeb4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a988cb5e216eb87d854414c6a0282eeb4">SubgraphPtr</a> = std::unique_ptr&lt; tflite::SubGraphT &gt;</td></tr>
<tr class="separator:a988cb5e216eb87d854414c6a0282eeb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadad81a95152fe5aad839db352d4012c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aadad81a95152fe5aad839db352d4012c">OperatorPtr</a> = std::unique_ptr&lt; tflite::OperatorT &gt;</td></tr>
<tr class="separator:aadad81a95152fe5aad839db352d4012c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab80edc19da7460a95a0ac05902f244b7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab80edc19da7460a95a0ac05902f244b7">OperatorCodePtr</a> = std::unique_ptr&lt; tflite::OperatorCodeT &gt;</td></tr>
<tr class="separator:ab80edc19da7460a95a0ac05902f244b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ab952e29d01028931f75f997ad7cbd4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a4ab952e29d01028931f75f997ad7cbd4">TensorPtr</a> = std::unique_ptr&lt; tflite::TensorT &gt;</td></tr>
<tr class="separator:a4ab952e29d01028931f75f997ad7cbd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3486e6c1a291aa67efd8b280ffb83cc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> = const tflite::TensorT *</td></tr>
<tr class="separator:ac3486e6c1a291aa67efd8b280ffb83cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd8bee7fb9b86485a60bc7ee05114270"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> = std::vector&lt; <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> &gt;</td></tr>
<tr class="separator:abd8bee7fb9b86485a60bc7ee05114270"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7553cea300edaeb5722990f99f042ef0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> = std::pair&lt; size_t, <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> &gt;</td></tr>
<tr class="separator:a7553cea300edaeb5722990f99f042ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86428e0c674542488c7292dfbe2ce381"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> = std::vector&lt; <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> &gt;</td></tr>
<tr class="separator:a86428e0c674542488c7292dfbe2ce381"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab93d9fb8a272789623edfa0b214c40f9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab93d9fb8a272789623edfa0b214c40f9">BufferPtr</a> = std::unique_ptr&lt; tflite::BufferT &gt;</td></tr>
<tr class="separator:ab93d9fb8a272789623edfa0b214c40f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaafbda6e6816876b3d7963cfe64dd2f8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a> = const tflite::BufferT *</td></tr>
<tr class="separator:aaafbda6e6816876b3d7963cfe64dd2f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aed935c554e4f6a4e7b9dcde057d00877"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aed935c554e4f6a4e7b9dcde057d00877">CreateNetworkFromBinaryFile</a> (const char *graphFile)</td></tr>
<tr class="memdesc:aed935c554e4f6a4e7b9dcde057d00877"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a flatbuffers binary file on disk.  <a href="#aed935c554e4f6a4e7b9dcde057d00877">More...</a><br /></td></tr>
<tr class="separator:aed935c554e4f6a4e7b9dcde057d00877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32a96909bc8a8ee9076bd4d5c1028301"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a32a96909bc8a8ee9076bd4d5c1028301">CreateNetworkFromBinary</a> (const std::vector&lt; uint8_t &gt; &amp;binaryContent)</td></tr>
<tr class="memdesc:a32a96909bc8a8ee9076bd4d5c1028301"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a flatbuffers binary.  <a href="#a32a96909bc8a8ee9076bd4d5c1028301">More...</a><br /></td></tr>
<tr class="separator:a32a96909bc8a8ee9076bd4d5c1028301"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a913d452e7766210b59a69d3c658b2862"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a913d452e7766210b59a69d3c658b2862">GetNetworkInputBindingInfo</a> (size_t subgraphId, const std::string &amp;name) const</td></tr>
<tr class="memdesc:a913d452e7766210b59a69d3c658b2862"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve binding info (layer id and tensor info) for the network input identified by the given layer name and subgraph id.  <a href="#a913d452e7766210b59a69d3c658b2862">More...</a><br /></td></tr>
<tr class="separator:a913d452e7766210b59a69d3c658b2862"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59139faede3a07a43c4c8f86bb03dc43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a59139faede3a07a43c4c8f86bb03dc43">GetNetworkOutputBindingInfo</a> (size_t subgraphId, const std::string &amp;name) const</td></tr>
<tr class="memdesc:a59139faede3a07a43c4c8f86bb03dc43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve binding info (layer id and tensor info) for the network output identified by the given layer name and subgraph id.  <a href="#a59139faede3a07a43c4c8f86bb03dc43">More...</a><br /></td></tr>
<tr class="separator:a59139faede3a07a43c4c8f86bb03dc43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b7aed8466cc5792966d271a65285d0e"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1b7aed8466cc5792966d271a65285d0e">GetSubgraphCount</a> () const</td></tr>
<tr class="memdesc:a1b7aed8466cc5792966d271a65285d0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of subgraphs in the parsed model.  <a href="#a1b7aed8466cc5792966d271a65285d0e">More...</a><br /></td></tr>
<tr class="separator:a1b7aed8466cc5792966d271a65285d0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe1ea028d8fcb9942c204d4415ff3319"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#afe1ea028d8fcb9942c204d4415ff3319">GetSubgraphInputTensorNames</a> (size_t subgraphId) const</td></tr>
<tr class="memdesc:afe1ea028d8fcb9942c204d4415ff3319"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the input tensor names for a given subgraph.  <a href="#afe1ea028d8fcb9942c204d4415ff3319">More...</a><br /></td></tr>
<tr class="separator:afe1ea028d8fcb9942c204d4415ff3319"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a949070abe70fabe18cc1eb29d5853f47"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a949070abe70fabe18cc1eb29d5853f47">GetSubgraphOutputTensorNames</a> (size_t subgraphId) const</td></tr>
<tr class="memdesc:a949070abe70fabe18cc1eb29d5853f47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the output tensor names for a given subgraph.  <a href="#a949070abe70fabe18cc1eb29d5853f47">More...</a><br /></td></tr>
<tr class="separator:a949070abe70fabe18cc1eb29d5853f47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9199a42f5fae611db182fb4c31a11df"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ad9199a42f5fae611db182fb4c31a11df">TfLiteParserImpl</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">ITfLiteParser::TfLiteParserOptions</a> &gt; &amp;options=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>())</td></tr>
<tr class="separator:ad9199a42f5fae611db182fb4c31a11df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaccd84a6cf2f9bdd77f833e4b65ffd42"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaccd84a6cf2f9bdd77f833e4b65ffd42">~TfLiteParserImpl</a> ()=default</td></tr>
<tr class="separator:aaccd84a6cf2f9bdd77f833e4b65ffd42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8abb48132e89e5273ca888ca884e305"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac8abb48132e89e5273ca888ca884e305">CreateNetworkFromBinaryAsDynamic</a> (const std::vector&lt; uint8_t &gt; &amp;binaryContent)</td></tr>
<tr class="separator:ac8abb48132e89e5273ca888ca884e305"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0da1e3b0281fa84f8b6f5ce3cd15b7c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a0da1e3b0281fa84f8b6f5ce3cd15b7c0">LoadModel</a> (std::unique_ptr&lt; tflite::ModelT &gt; model)</td></tr>
<tr class="separator:a0da1e3b0281fa84f8b6f5ce3cd15b7c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af9590c2ae8d68b5da999d3d6ab21dd3b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#af9590c2ae8d68b5da999d3d6ab21dd3b">LoadModelFromFile</a> (const char *fileName)</td></tr>
<tr class="separator:af9590c2ae8d68b5da999d3d6ab21dd3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f3fc56b7306b444f06f45cdc4032bbf"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">LoadModelFromBinary</a> (const uint8_t *binaryContent, size_t len)</td></tr>
<tr class="separator:a7f3fc56b7306b444f06f45cdc4032bbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a342a58ab95b91af13b24dd4bdc7e09bb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a342a58ab95b91af13b24dd4bdc7e09bb">GetInputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a342a58ab95b91af13b24dd4bdc7e09bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a279d0891900c191d5a0139e5c11fe488"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a279d0891900c191d5a0139e5c11fe488">GetOutputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a279d0891900c191d5a0139e5c11fe488"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20518e431cb501b172371b850e6c3ec7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">GetSubgraphInputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex)</td></tr>
<tr class="separator:a20518e431cb501b172371b850e6c3ec7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bd7b663eb19e2355b6aa5c36232d6fc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">GetSubgraphOutputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex)</td></tr>
<tr class="separator:a1bd7b663eb19e2355b6aa5c36232d6fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b4b0b88a5e79a88b8b60db76398f575"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; int32_t &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a8b4b0b88a5e79a88b8b60db76398f575">GetInputTensorIds</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a8b4b0b88a5e79a88b8b60db76398f575"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe6c475f92d02dd1eb12acd746e4736f"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; int32_t &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#afe6c475f92d02dd1eb12acd746e4736f">GetOutputTensorIds</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:afe6c475f92d02dd1eb12acd746e4736f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a720f0206e377dd1808acc94b3b12c538"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a720f0206e377dd1808acc94b3b12c538">GetBuffer</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t bufferIndex)</td></tr>
<tr class="separator:a720f0206e377dd1808acc94b3b12c538"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d28f3a07c7ab30f66e7c70ded86eb49"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7d28f3a07c7ab30f66e7c70ded86eb49">OutputShapeOfSqueeze</a> (std::vector&lt; uint32_t &gt; squeezeDims, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputTensorInfo)</td></tr>
<tr class="separator:a7d28f3a07c7ab30f66e7c70ded86eb49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaebfa9a01a0bb8a0935114ff0140cc45"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaebfa9a01a0bb8a0935114ff0140cc45">OutputShapeOfReshape</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputTensorInfo, const std::vector&lt; int32_t &gt; &amp;targetDimsIn)</td></tr>
<tr class="separator:aaebfa9a01a0bb8a0935114ff0140cc45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aa09a8bb02eed50715082d8b7fccd2f8d">GetVersion</a> ()</td></tr>
<tr class="memdesc:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve version in X.Y.Z form.  <a href="#aa09a8bb02eed50715082d8b7fccd2f8d">More...</a><br /></td></tr>
<tr class="separator:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00026">26</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ab93d9fb8a272789623edfa0b214c40f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab93d9fb8a272789623edfa0b214c40f9">&#9670;&nbsp;</a></span>BufferPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab93d9fb8a272789623edfa0b214c40f9">BufferPtr</a> =  std::unique_ptr&lt;tflite::BufferT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00039">39</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="aaafbda6e6816876b3d7963cfe64dd2f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaafbda6e6816876b3d7963cfe64dd2f8">&#9670;&nbsp;</a></span>BufferRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a> =  const tflite::BufferT *</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00040">40</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="abfc86471394295357a23b3addd0b5b1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfc86471394295357a23b3addd0b5b1c">&#9670;&nbsp;</a></span>ModelPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> =  std::unique_ptr&lt;tflite::ModelT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00030">30</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="ab80edc19da7460a95a0ac05902f244b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab80edc19da7460a95a0ac05902f244b7">&#9670;&nbsp;</a></span>OperatorCodePtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab80edc19da7460a95a0ac05902f244b7">OperatorCodePtr</a> =  std::unique_ptr&lt;tflite::OperatorCodeT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00033">33</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="aadad81a95152fe5aad839db352d4012c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aadad81a95152fe5aad839db352d4012c">&#9670;&nbsp;</a></span>OperatorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aadad81a95152fe5aad839db352d4012c">OperatorPtr</a> =  std::unique_ptr&lt;tflite::OperatorT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00032">32</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a988cb5e216eb87d854414c6a0282eeb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a988cb5e216eb87d854414c6a0282eeb4">&#9670;&nbsp;</a></span>SubgraphPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a988cb5e216eb87d854414c6a0282eeb4">SubgraphPtr</a> =  std::unique_ptr&lt;tflite::SubGraphT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00031">31</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a7553cea300edaeb5722990f99f042ef0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7553cea300edaeb5722990f99f042ef0">&#9670;&nbsp;</a></span>TensorIdRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> =  std::pair&lt;size_t, <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00037">37</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a86428e0c674542488c7292dfbe2ce381"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86428e0c674542488c7292dfbe2ce381">&#9670;&nbsp;</a></span>TensorIdRawPtrVector</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> =  std::vector&lt;<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00038">38</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a4ab952e29d01028931f75f997ad7cbd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ab952e29d01028931f75f997ad7cbd4">&#9670;&nbsp;</a></span>TensorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a4ab952e29d01028931f75f997ad7cbd4">TensorPtr</a> =  std::unique_ptr&lt;tflite::TensorT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00034">34</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="ac3486e6c1a291aa67efd8b280ffb83cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3486e6c1a291aa67efd8b280ffb83cc">&#9670;&nbsp;</a></span>TensorRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> =  const tflite::TensorT *</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="abd8bee7fb9b86485a60bc7ee05114270"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd8bee7fb9b86485a60bc7ee05114270">&#9670;&nbsp;</a></span>TensorRawPtrVector</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> =  std::vector&lt;<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00036">36</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad9199a42f5fae611db182fb4c31a11df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9199a42f5fae611db182fb4c31a11df">&#9670;&nbsp;</a></span>TfLiteParserImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml">TfLiteParserImpl</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">ITfLiteParser::TfLiteParserOptions</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>options</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>()</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00719">719</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04798">TfLiteParserImpl::GetInputTensorIds()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">IConnectableLayer::GetNumInputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#aa6e3c075c888e7c16942a468a3aae33c">IConnectableLayer::InferOutputShapes()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00193">TensorInfo::SetShape()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00616">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;: m_Options(options)</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;, m_Network(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;, m_ParserFunctions(tflite::BuiltinOperator_MAX+1, &amp;TfLiteParserImpl::ParseUnsupportedOperator)</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;{</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="comment">// register supported operators</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ABS]                     = &amp;TfLiteParserImpl::ParseAbs;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ADD]                     = &amp;TfLiteParserImpl::ParseAdd;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ARG_MIN]                 = &amp;TfLiteParserImpl::ParseArgMin;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ARG_MAX]                 = &amp;TfLiteParserImpl::ParseArgMax;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_AVERAGE_POOL_2D]         = &amp;TfLiteParserImpl::ParseAveragePool2D;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_BATCH_TO_SPACE_ND]       = &amp;TfLiteParserImpl::ParseBatchToSpaceND;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_BATCH_MATMUL]            = &amp;TfLiteParserImpl::ParseBatchMatMul;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CAST]                    = &amp;TfLiteParserImpl::ParseCast;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CONCATENATION]           = &amp;TfLiteParserImpl::ParseConcatenation;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CONV_2D]                 = &amp;TfLiteParserImpl::ParseConv2D;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="comment">// Conv3D support was added in TF 2.5, so for backwards compatibility a hash define is needed.</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="preprocessor">    #if defined(ARMNN_POST_TFLITE_2_4)</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CONV_3D]                 = &amp;TfLiteParserImpl::ParseConv3D;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CUSTOM]                  = &amp;TfLiteParserImpl::ParseCustomOperator;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DEPTH_TO_SPACE]          = &amp;TfLiteParserImpl::ParseDepthToSpace;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DEPTHWISE_CONV_2D]       = &amp;TfLiteParserImpl::ParseDepthwiseConv2D;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DEQUANTIZE]              = &amp;TfLiteParserImpl::ParseDequantize;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DIV]                     = &amp;TfLiteParserImpl::ParseDiv;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ELU]                     = &amp;TfLiteParserImpl::ParseElu;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_EQUAL]                   = &amp;TfLiteParserImpl::ParseEqual;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_EXP]                     = &amp;TfLiteParserImpl::ParseExp;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_EXPAND_DIMS]             = &amp;TfLiteParserImpl::ParseExpandDims;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_FLOOR_DIV]               = &amp;TfLiteParserImpl::ParseFloorDiv;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_FULLY_CONNECTED]         = &amp;TfLiteParserImpl::ParseFullyConnected;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_GATHER]                  = &amp;TfLiteParserImpl::ParseGather;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_GATHER_ND]               = &amp;TfLiteParserImpl::ParseGatherNd;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_GREATER]                 = &amp;TfLiteParserImpl::ParseGreater;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_GREATER_EQUAL]           = &amp;TfLiteParserImpl::ParseGreaterOrEqual;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_HARD_SWISH]              = &amp;TfLiteParserImpl::ParseHardSwish;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LEAKY_RELU]              = &amp;TfLiteParserImpl::ParseLeakyRelu;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LESS]                    = &amp;TfLiteParserImpl::ParseLess;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LESS_EQUAL]              = &amp;TfLiteParserImpl::ParseLessOrEqual;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOCAL_RESPONSE_NORMALIZATION]</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            = &amp;TfLiteParserImpl::ParseLocalResponseNormalization;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOG]                     = &amp;TfLiteParserImpl::ParseLog;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOGICAL_NOT]             = &amp;TfLiteParserImpl::ParseLogicalNot;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOGISTIC]                = &amp;TfLiteParserImpl::ParseLogistic;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOG_SOFTMAX]             = &amp;TfLiteParserImpl::ParseLogSoftmax;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_L2_NORMALIZATION]        = &amp;TfLiteParserImpl::ParseL2Normalization;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MAX_POOL_2D]             = &amp;TfLiteParserImpl::ParseMaxPool2D;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MAXIMUM]                 = &amp;TfLiteParserImpl::ParseMaximum;</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MEAN]                    = &amp;TfLiteParserImpl::ParseMean;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MINIMUM]                 = &amp;TfLiteParserImpl::ParseMinimum;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MIRROR_PAD]              = &amp;TfLiteParserImpl::ParseMirrorPad;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MUL]                     = &amp;TfLiteParserImpl::ParseMul;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_NEG]                     = &amp;TfLiteParserImpl::ParseNeg;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_NOT_EQUAL]               = &amp;TfLiteParserImpl::ParseNotEqual;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PACK]                    = &amp;TfLiteParserImpl::ParsePack;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PAD]                     = &amp;TfLiteParserImpl::ParsePad;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PADV2]                   = &amp;TfLiteParserImpl::ParsePad;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PRELU]                   = &amp;TfLiteParserImpl::ParsePrelu;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_QUANTIZE]                = &amp;TfLiteParserImpl::ParseQuantize;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RELU]                    = &amp;TfLiteParserImpl::ParseRelu;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RELU6]                   = &amp;TfLiteParserImpl::ParseRelu6;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_REDUCE_MAX]              = &amp;TfLiteParserImpl::ParseReduceMax;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_REDUCE_MIN]              = &amp;TfLiteParserImpl::ParseReduceMin;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_REDUCE_PROD]             = &amp;TfLiteParserImpl::ParseReduceProd;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESHAPE]                 = &amp;TfLiteParserImpl::ParseReshape;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESIZE_BILINEAR]         = &amp;TfLiteParserImpl::ParseResizeBilinear;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESIZE_NEAREST_NEIGHBOR] = &amp;TfLiteParserImpl::ParseResizeNearestNeighbor;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RSQRT]                   = &amp;TfLiteParserImpl::ParseRsqrt;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SQRT]                    = &amp;TfLiteParserImpl::ParseSqrt;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SHAPE]                   = &amp;TfLiteParserImpl::ParseShape;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SIN]                     = &amp;TfLiteParserImpl::ParseSin;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SLICE]                   = &amp;TfLiteParserImpl::ParseSlice;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SOFTMAX]                 = &amp;TfLiteParserImpl::ParseSoftmax;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPACE_TO_BATCH_ND]       = &amp;TfLiteParserImpl::ParseSpaceToBatchND;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPLIT]                   = &amp;TfLiteParserImpl::ParseSplit;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPLIT_V]                 = &amp;TfLiteParserImpl::ParseSplitV;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SQUEEZE]                 = &amp;TfLiteParserImpl::ParseSqueeze;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_STRIDED_SLICE]           = &amp;TfLiteParserImpl::ParseStridedSlice;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SUB]                     = &amp;TfLiteParserImpl::ParseSub;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SUM]                     = &amp;TfLiteParserImpl::ParseSum;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TANH]                    = &amp;TfLiteParserImpl::ParseTanH;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TRANSPOSE]               = &amp;TfLiteParserImpl::ParseTranspose;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TRANSPOSE_CONV]          = &amp;TfLiteParserImpl::ParseTransposeConv;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_UNIDIRECTIONAL_SEQUENCE_LSTM]</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            = &amp;TfLiteParserImpl::ParseUnidirectionalSequenceLSTM;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_UNPACK]                  = &amp;TfLiteParserImpl::ParseUnpack;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="comment">// register supported custom operators</span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    m_CustomParserFunctions[<span class="stringliteral">&quot;TFLite_Detection_PostProcess&quot;</span>]      = &amp;TfLiteParserImpl::ParseDetectionPostProcess;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaccd84a6cf2f9bdd77f833e4b65ffd42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaccd84a6cf2f9bdd77f833e4b65ffd42">&#9670;&nbsp;</a></span>~TfLiteParserImpl()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml">TfLiteParserImpl</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a32a96909bc8a8ee9076bd4d5c1028301"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32a96909bc8a8ee9076bd4d5c1028301">&#9670;&nbsp;</a></span>CreateNetworkFromBinary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinary </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>binaryContent</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a flatbuffers binary. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00930">930</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04699">TfLiteParserImpl::LoadModelFromBinary()</a>.</p>
<div class="fragment"><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;{</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    ResetParser();</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    m_Model = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">LoadModelFromBinary</a>(binaryContent.data(), binaryContent.size());</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel();</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a7f3fc56b7306b444f06f45cdc4032bbf"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">armnnTfLiteParser::TfLiteParserImpl::LoadModelFromBinary</a></div><div class="ttdeci">static ModelPtr LoadModelFromBinary(const uint8_t *binaryContent, size_t len)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04699">TfLiteParser.cpp:4699</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac8abb48132e89e5273ca888ca884e305"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8abb48132e89e5273ca888ca884e305">&#9670;&nbsp;</a></span>CreateNetworkFromBinaryAsDynamic()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> CreateNetworkFromBinaryAsDynamic </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>binaryContent</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aed935c554e4f6a4e7b9dcde057d00877"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed935c554e4f6a4e7b9dcde057d00877">&#9670;&nbsp;</a></span>CreateNetworkFromBinaryFile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinaryFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>graphFile</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a flatbuffers binary file on disk. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00923">923</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04675">TfLiteParserImpl::LoadModelFromFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;{</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    ResetParser();</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    m_Model = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#af9590c2ae8d68b5da999d3d6ab21dd3b">LoadModelFromFile</a>(graphFile);</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel();</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_af9590c2ae8d68b5da999d3d6ab21dd3b"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#af9590c2ae8d68b5da999d3d6ab21dd3b">armnnTfLiteParser::TfLiteParserImpl::LoadModelFromFile</a></div><div class="ttdeci">static ModelPtr LoadModelFromFile(const char *fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04675">TfLiteParser.cpp:4675</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a720f0206e377dd1808acc94b3b12c538"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a720f0206e377dd1808acc94b3b12c538">&#9670;&nbsp;</a></span>GetBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">TfLiteParserImpl::BufferRawPtr</a> GetBuffer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bufferIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05019">5019</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00260">CHECK_BUFFER</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00331">CHECK_BUFFER_SIZE</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00225">CHECK_TENSOR_PTR</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00206">armnn::GetDataTypeName()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00514">TensorInfo::SetConstant()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00248">armnnUtils::ToFloatArray()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00616">armnnDeserializer::ToTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03957">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02882">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02137">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l05020"></a><span class="lineno"> 5020</span>&#160;{</div><div class="line"><a name="l05021"></a><span class="lineno"> 5021</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a7c88d54e3f895030c70330a4c9d76a7a">CHECK_BUFFER</a>(model, bufferIndex);</div><div class="line"><a name="l05022"></a><span class="lineno"> 5022</span>&#160;    <span class="keywordflow">return</span> model-&gt;buffers[bufferIndex].get();</div><div class="line"><a name="l05023"></a><span class="lineno"> 5023</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a7c88d54e3f895030c70330a4c9d76a7a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a7c88d54e3f895030c70330a4c9d76a7a">CHECK_BUFFER</a></div><div class="ttdeci">#define CHECK_BUFFER(MODEL, BUFFER_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00260">TfLiteParser.cpp:260</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a342a58ab95b91af13b24dd4bdc7e09bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a342a58ab95b91af13b24dd4bdc7e09bb">&#9670;&nbsp;</a></span>GetInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TfLiteParserImpl::TensorRawPtrVector</a> GetInputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04718">4718</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03957">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00938">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02882">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02137">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04721"></a><span class="lineno"> 4721</span>&#160;{</div><div class="line"><a name="l04722"></a><span class="lineno"> 4722</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l04723"></a><span class="lineno"> 4723</span>&#160;</div><div class="line"><a name="l04724"></a><span class="lineno"> 4724</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04725"></a><span class="lineno"> 4725</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l04726"></a><span class="lineno"> 4726</span>&#160;</div><div class="line"><a name="l04727"></a><span class="lineno"> 4727</span>&#160;    <span class="keywordtype">size_t</span> inputCount = operatorPtr-&gt;inputs.size();</div><div class="line"><a name="l04728"></a><span class="lineno"> 4728</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> result;</div><div class="line"><a name="l04729"></a><span class="lineno"> 4729</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; inputCount; ++i)</div><div class="line"><a name="l04730"></a><span class="lineno"> 4730</span>&#160;    {</div><div class="line"><a name="l04731"></a><span class="lineno"> 4731</span>&#160;        <span class="comment">// If the input location is -1 then assume input is turned off.</span></div><div class="line"><a name="l04732"></a><span class="lineno"> 4732</span>&#160;        <span class="keywordflow">if</span> (operatorPtr-&gt;inputs[i] == -1)</div><div class="line"><a name="l04733"></a><span class="lineno"> 4733</span>&#160;        {</div><div class="line"><a name="l04734"></a><span class="lineno"> 4734</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l04735"></a><span class="lineno"> 4735</span>&#160;        }</div><div class="line"><a name="l04736"></a><span class="lineno"> 4736</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l04737"></a><span class="lineno"> 4737</span>&#160;        {</div><div class="line"><a name="l04738"></a><span class="lineno"> 4738</span>&#160;            uint32_t inputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(operatorPtr-&gt;inputs[i]);</div><div class="line"><a name="l04739"></a><span class="lineno"> 4739</span>&#160;            result.push_back(subgraphPtr-&gt;tensors[inputId].get());</div><div class="line"><a name="l04740"></a><span class="lineno"> 4740</span>&#160;        }</div><div class="line"><a name="l04741"></a><span class="lineno"> 4741</span>&#160;    }</div><div class="line"><a name="l04742"></a><span class="lineno"> 4742</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04743"></a><span class="lineno"> 4743</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00183">TfLiteParser.cpp:183</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_abd8bee7fb9b86485a60bc7ee05114270"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">armnnTfLiteParser::TfLiteParserImpl::TensorRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorRawPtr &gt; TensorRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00036">TfLiteParser.hpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8b4b0b88a5e79a88b8b60db76398f575"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b4b0b88a5e79a88b8b60db76398f575">&#9670;&nbsp;</a></span>GetInputTensorIds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; int32_t &gt; &amp; GetInputTensorIds </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04798">4798</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03957">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00938">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02882">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02137">TfLiteParserImpl::OutputShapeOfSqueeze()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00719">TfLiteParserImpl::TfLiteParserImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l04801"></a><span class="lineno"> 4801</span>&#160;{</div><div class="line"><a name="l04802"></a><span class="lineno"> 4802</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l04803"></a><span class="lineno"> 4803</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04804"></a><span class="lineno"> 4804</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l04805"></a><span class="lineno"> 4805</span>&#160;    <span class="keywordflow">return</span> operatorPtr-&gt;inputs;</div><div class="line"><a name="l04806"></a><span class="lineno"> 4806</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00183">TfLiteParser.cpp:183</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a913d452e7766210b59a69d3c658b2862"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a913d452e7766210b59a69d3c658b2862">&#9670;&nbsp;</a></span>GetNetworkInputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkInputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieve binding info (layer id and tensor info) for the network input identified by the given layer name and subgraph id. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05197">5197</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04765">TfLiteParserImpl::GetSubgraphInputs()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00514">TensorInfo::SetConstant()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00616">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l05199"></a><span class="lineno"> 5199</span>&#160;{</div><div class="line"><a name="l05200"></a><span class="lineno"> 5200</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l05201"></a><span class="lineno"> 5201</span>&#160;    <span class="keyword">auto</span> inputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">GetSubgraphInputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l05202"></a><span class="lineno"> 5202</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; input : inputs)</div><div class="line"><a name="l05203"></a><span class="lineno"> 5203</span>&#160;    {</div><div class="line"><a name="l05204"></a><span class="lineno"> 5204</span>&#160;        <span class="keywordflow">if</span> (input.second-&gt;name == name)</div><div class="line"><a name="l05205"></a><span class="lineno"> 5205</span>&#160;        {</div><div class="line"><a name="l05206"></a><span class="lineno"> 5206</span>&#160;            <span class="keyword">auto</span> bindingId = GenerateLayerBindingId(subgraphId, input.first);</div><div class="line"><a name="l05207"></a><span class="lineno"> 5207</span>&#160;            <span class="keyword">auto</span> inputTensorInfo = <a class="code" href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">ToTensorInfo</a>(input.second);</div><div class="line"><a name="l05208"></a><span class="lineno"> 5208</span>&#160;            <span class="comment">// Input tensors are always treated as constant tensors during network execution.</span></div><div class="line"><a name="l05209"></a><span class="lineno"> 5209</span>&#160;            inputTensorInfo.SetConstant(<span class="keyword">true</span>);</div><div class="line"><a name="l05210"></a><span class="lineno"> 5210</span>&#160;            <span class="keywordflow">return</span> std::make_pair(bindingId, inputTensorInfo);</div><div class="line"><a name="l05211"></a><span class="lineno"> 5211</span>&#160;        }</div><div class="line"><a name="l05212"></a><span class="lineno"> 5212</span>&#160;    }</div><div class="line"><a name="l05213"></a><span class="lineno"> 5213</span>&#160;</div><div class="line"><a name="l05214"></a><span class="lineno"> 5214</span>&#160;    std::stringstream bindings;</div><div class="line"><a name="l05215"></a><span class="lineno"> 5215</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; input : inputs)</div><div class="line"><a name="l05216"></a><span class="lineno"> 5216</span>&#160;    {</div><div class="line"><a name="l05217"></a><span class="lineno"> 5217</span>&#160;        bindings &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; input.second-&gt;name &lt;&lt; <span class="stringliteral">&quot;&#39; &quot;</span>;</div><div class="line"><a name="l05218"></a><span class="lineno"> 5218</span>&#160;    }</div><div class="line"><a name="l05219"></a><span class="lineno"> 5219</span>&#160;</div><div class="line"><a name="l05220"></a><span class="lineno"> 5220</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l05221"></a><span class="lineno"> 5221</span>&#160;        fmt::format(<span class="stringliteral">&quot;No input binding found for subgraph:{} and name:{}. &quot;</span></div><div class="line"><a name="l05222"></a><span class="lineno"> 5222</span>&#160;                    <span class="stringliteral">&quot;Possible inputs are: [{}] {}&quot;</span>,</div><div class="line"><a name="l05223"></a><span class="lineno"> 5223</span>&#160;                    subgraphId,</div><div class="line"><a name="l05224"></a><span class="lineno"> 5224</span>&#160;                    name,</div><div class="line"><a name="l05225"></a><span class="lineno"> 5225</span>&#160;                    bindings.str(),</div><div class="line"><a name="l05226"></a><span class="lineno"> 5226</span>&#160;                    <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l05227"></a><span class="lineno"> 5227</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a20518e431cb501b172371b850e6c3ec7"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphInputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphInputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04765">TfLiteParser.cpp:4765</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_deserializer_xhtml_a948b8c615ff06defa3b80d2352259ff2"><div class="ttname"><a href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">armnnDeserializer::ToTensorInfo</a></div><div class="ttdeci">armnn::TensorInfo ToTensorInfo(TensorRawPtr tensorPtr)</div><div class="ttdef"><b>Definition:</b> <a href="_deserializer_8cpp_source.xhtml#l00616">Deserializer.cpp:616</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a59139faede3a07a43c4c8f86bb03dc43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59139faede3a07a43c4c8f86bb03dc43">&#9670;&nbsp;</a></span>GetNetworkOutputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkOutputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieve binding info (layer id and tensor info) for the network output identified by the given layer name and subgraph id. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05229">5229</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04782">TfLiteParserImpl::GetSubgraphOutputs()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00616">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l05231"></a><span class="lineno"> 5231</span>&#160;{</div><div class="line"><a name="l05232"></a><span class="lineno"> 5232</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l05233"></a><span class="lineno"> 5233</span>&#160;    <span class="keyword">auto</span> outputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">GetSubgraphOutputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l05234"></a><span class="lineno"> 5234</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputs.size(); ++i)</div><div class="line"><a name="l05235"></a><span class="lineno"> 5235</span>&#160;    {</div><div class="line"><a name="l05236"></a><span class="lineno"> 5236</span>&#160;        <span class="keyword">auto</span> <span class="keyword">const</span> output = outputs[i];</div><div class="line"><a name="l05237"></a><span class="lineno"> 5237</span>&#160;        <span class="keywordflow">if</span> (output.second-&gt;name == name)</div><div class="line"><a name="l05238"></a><span class="lineno"> 5238</span>&#160;        {</div><div class="line"><a name="l05239"></a><span class="lineno"> 5239</span>&#160;            <span class="keyword">auto</span> bindingId = GenerateLayerBindingId(subgraphId, output.first);</div><div class="line"><a name="l05240"></a><span class="lineno"> 5240</span>&#160;            std::vector&lt;unsigned int&gt; shape = m_OverriddenOutputShapes.size() &gt; 0 ?</div><div class="line"><a name="l05241"></a><span class="lineno"> 5241</span>&#160;                                                m_OverriddenOutputShapes[i] : AsUnsignedVector(output.second-&gt;shape);</div><div class="line"><a name="l05242"></a><span class="lineno"> 5242</span>&#160;            <span class="keywordflow">return</span> std::make_pair(bindingId, <a class="code" href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">ToTensorInfo</a>(output.second, shape));</div><div class="line"><a name="l05243"></a><span class="lineno"> 5243</span>&#160;        }</div><div class="line"><a name="l05244"></a><span class="lineno"> 5244</span>&#160;    }</div><div class="line"><a name="l05245"></a><span class="lineno"> 5245</span>&#160;</div><div class="line"><a name="l05246"></a><span class="lineno"> 5246</span>&#160;    std::stringstream bindings;</div><div class="line"><a name="l05247"></a><span class="lineno"> 5247</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; output : outputs)</div><div class="line"><a name="l05248"></a><span class="lineno"> 5248</span>&#160;    {</div><div class="line"><a name="l05249"></a><span class="lineno"> 5249</span>&#160;        bindings &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; output.second-&gt;name &lt;&lt; <span class="stringliteral">&quot;&#39; &quot;</span>;</div><div class="line"><a name="l05250"></a><span class="lineno"> 5250</span>&#160;    }</div><div class="line"><a name="l05251"></a><span class="lineno"> 5251</span>&#160;</div><div class="line"><a name="l05252"></a><span class="lineno"> 5252</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l05253"></a><span class="lineno"> 5253</span>&#160;        fmt::format(<span class="stringliteral">&quot;No output binding found for subgraph:{} and name:{}. &quot;</span></div><div class="line"><a name="l05254"></a><span class="lineno"> 5254</span>&#160;                    <span class="stringliteral">&quot;Possible outputs are: [{}] {}&quot;</span>,</div><div class="line"><a name="l05255"></a><span class="lineno"> 5255</span>&#160;                    subgraphId,</div><div class="line"><a name="l05256"></a><span class="lineno"> 5256</span>&#160;                    name,</div><div class="line"><a name="l05257"></a><span class="lineno"> 5257</span>&#160;                    bindings.str(),</div><div class="line"><a name="l05258"></a><span class="lineno"> 5258</span>&#160;                    <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l05259"></a><span class="lineno"> 5259</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a1bd7b663eb19e2355b6aa5c36232d6fc"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphOutputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphOutputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04782">TfLiteParser.cpp:4782</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_deserializer_xhtml_a948b8c615ff06defa3b80d2352259ff2"><div class="ttname"><a href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">armnnDeserializer::ToTensorInfo</a></div><div class="ttdeci">armnn::TensorInfo ToTensorInfo(TensorRawPtr tensorPtr)</div><div class="ttdef"><b>Definition:</b> <a href="_deserializer_8cpp_source.xhtml#l00616">Deserializer.cpp:616</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a279d0891900c191d5a0139e5c11fe488"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a279d0891900c191d5a0139e5c11fe488">&#9670;&nbsp;</a></span>GetOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TfLiteParserImpl::TensorRawPtrVector</a> GetOutputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04745">4745</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00212">CHECK_TENSOR</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03957">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00938">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02882">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02137">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04748"></a><span class="lineno"> 4748</span>&#160;{</div><div class="line"><a name="l04749"></a><span class="lineno"> 4749</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l04750"></a><span class="lineno"> 4750</span>&#160;</div><div class="line"><a name="l04751"></a><span class="lineno"> 4751</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04752"></a><span class="lineno"> 4752</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l04753"></a><span class="lineno"> 4753</span>&#160;</div><div class="line"><a name="l04754"></a><span class="lineno"> 4754</span>&#160;    <span class="keywordtype">size_t</span> outputCount = operatorPtr-&gt;outputs.size();</div><div class="line"><a name="l04755"></a><span class="lineno"> 4755</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> result(outputCount);</div><div class="line"><a name="l04756"></a><span class="lineno"> 4756</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; outputCount; ++i)</div><div class="line"><a name="l04757"></a><span class="lineno"> 4757</span>&#160;    {</div><div class="line"><a name="l04758"></a><span class="lineno"> 4758</span>&#160;        uint32_t outputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(operatorPtr-&gt;outputs[i]);</div><div class="line"><a name="l04759"></a><span class="lineno"> 4759</span>&#160;        <a class="code" href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a>(model, subgraphIndex, outputId);</div><div class="line"><a name="l04760"></a><span class="lineno"> 4760</span>&#160;        result[i] = subgraphPtr-&gt;tensors[outputId].get();</div><div class="line"><a name="l04761"></a><span class="lineno"> 4761</span>&#160;    }</div><div class="line"><a name="l04762"></a><span class="lineno"> 4762</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04763"></a><span class="lineno"> 4763</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00183">TfLiteParser.cpp:183</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_aa1664dc13adbc85ac12fb584b76bfdae"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a></div><div class="ttdeci">#define CHECK_TENSOR(MODEL, SUBGRAPH_INDEX, TENSOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00212">TfLiteParser.cpp:212</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_abd8bee7fb9b86485a60bc7ee05114270"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">armnnTfLiteParser::TfLiteParserImpl::TensorRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorRawPtr &gt; TensorRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00036">TfLiteParser.hpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe6c475f92d02dd1eb12acd746e4736f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe6c475f92d02dd1eb12acd746e4736f">&#9670;&nbsp;</a></span>GetOutputTensorIds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; int32_t &gt; &amp; GetOutputTensorIds </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04808">4808</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00427">TensorInfo::GetNumBytes()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">IConnectableLayer::GetNumInputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">IConnectableLayer::GetNumOutputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04765">TfLiteParserImpl::GetSubgraphInputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04782">TfLiteParserImpl::GetSubgraphOutputs()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00514">TensorInfo::SetConstant()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00199">TensorInfo::SetDataType()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00616">armnnDeserializer::ToTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03957">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00938">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02882">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02137">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04811"></a><span class="lineno"> 4811</span>&#160;{</div><div class="line"><a name="l04812"></a><span class="lineno"> 4812</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l04813"></a><span class="lineno"> 4813</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04814"></a><span class="lineno"> 4814</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l04815"></a><span class="lineno"> 4815</span>&#160;    <span class="keywordflow">return</span> operatorPtr-&gt;outputs;</div><div class="line"><a name="l04816"></a><span class="lineno"> 4816</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00183">TfLiteParser.cpp:183</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1b7aed8466cc5792966d271a65285d0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b7aed8466cc5792966d271a65285d0e">&#9670;&nbsp;</a></span>GetSubgraphCount()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t GetSubgraphCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the number of subgraphs in the parsed model. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05261">5261</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l05262"></a><span class="lineno"> 5262</span>&#160;{</div><div class="line"><a name="l05263"></a><span class="lineno"> 5263</span>&#160;    <span class="keywordflow">return</span> m_Model-&gt;subgraphs.size();</div><div class="line"><a name="l05264"></a><span class="lineno"> 5264</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a20518e431cb501b172371b850e6c3ec7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20518e431cb501b172371b850e6c3ec7">&#9670;&nbsp;</a></span>GetSubgraphInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TfLiteParserImpl::TensorIdRawPtrVector</a> GetSubgraphInputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04765">4765</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00212">CHECK_TENSOR</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05197">TfLiteParserImpl::GetNetworkInputBindingInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04808">TfLiteParserImpl::GetOutputTensorIds()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05266">TfLiteParserImpl::GetSubgraphInputTensorNames()</a>.</p>
<div class="fragment"><div class="line"><a name="l04767"></a><span class="lineno"> 4767</span>&#160;{</div><div class="line"><a name="l04768"></a><span class="lineno"> 4768</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(model, subgraphIndex);</div><div class="line"><a name="l04769"></a><span class="lineno"> 4769</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04770"></a><span class="lineno"> 4770</span>&#160;</div><div class="line"><a name="l04771"></a><span class="lineno"> 4771</span>&#160;    <span class="keywordtype">size_t</span> inputCount = subgraphPtr-&gt;inputs.size();</div><div class="line"><a name="l04772"></a><span class="lineno"> 4772</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> result(inputCount);</div><div class="line"><a name="l04773"></a><span class="lineno"> 4773</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; inputCount; ++i)</div><div class="line"><a name="l04774"></a><span class="lineno"> 4774</span>&#160;    {</div><div class="line"><a name="l04775"></a><span class="lineno"> 4775</span>&#160;        uint32_t inputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(subgraphPtr-&gt;inputs[i]);</div><div class="line"><a name="l04776"></a><span class="lineno"> 4776</span>&#160;        <a class="code" href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a>(model, subgraphIndex, inputId);</div><div class="line"><a name="l04777"></a><span class="lineno"> 4777</span>&#160;        result[i] = std::make_pair(inputId, subgraphPtr-&gt;tensors[inputId].get());</div><div class="line"><a name="l04778"></a><span class="lineno"> 4778</span>&#160;    }</div><div class="line"><a name="l04779"></a><span class="lineno"> 4779</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04780"></a><span class="lineno"> 4780</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_aa1664dc13adbc85ac12fb584b76bfdae"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a></div><div class="ttdeci">#define CHECK_TENSOR(MODEL, SUBGRAPH_INDEX, TENSOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00212">TfLiteParser.cpp:212</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a86428e0c674542488c7292dfbe2ce381"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">armnnTfLiteParser::TfLiteParserImpl::TensorIdRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorIdRawPtr &gt; TensorIdRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00038">TfLiteParser.hpp:38</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe1ea028d8fcb9942c204d4415ff3319"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe1ea028d8fcb9942c204d4415ff3319">&#9670;&nbsp;</a></span>GetSubgraphInputTensorNames()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSubgraphInputTensorNames </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the input tensor names for a given subgraph. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05266">5266</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04765">TfLiteParserImpl::GetSubgraphInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l05267"></a><span class="lineno"> 5267</span>&#160;{</div><div class="line"><a name="l05268"></a><span class="lineno"> 5268</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l05269"></a><span class="lineno"> 5269</span>&#160;    <span class="keyword">auto</span> inputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">GetSubgraphInputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l05270"></a><span class="lineno"> 5270</span>&#160;    std::vector&lt;std::string&gt; result;</div><div class="line"><a name="l05271"></a><span class="lineno"> 5271</span>&#160;    result.reserve(inputs.size());</div><div class="line"><a name="l05272"></a><span class="lineno"> 5272</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; input : inputs)</div><div class="line"><a name="l05273"></a><span class="lineno"> 5273</span>&#160;    {</div><div class="line"><a name="l05274"></a><span class="lineno"> 5274</span>&#160;        result.push_back(input.second-&gt;name);</div><div class="line"><a name="l05275"></a><span class="lineno"> 5275</span>&#160;    }</div><div class="line"><a name="l05276"></a><span class="lineno"> 5276</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l05277"></a><span class="lineno"> 5277</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a20518e431cb501b172371b850e6c3ec7"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphInputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphInputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04765">TfLiteParser.cpp:4765</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1bd7b663eb19e2355b6aa5c36232d6fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bd7b663eb19e2355b6aa5c36232d6fc">&#9670;&nbsp;</a></span>GetSubgraphOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TfLiteParserImpl::TensorIdRawPtrVector</a> GetSubgraphOutputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04782">4782</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05229">TfLiteParserImpl::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04808">TfLiteParserImpl::GetOutputTensorIds()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05279">TfLiteParserImpl::GetSubgraphOutputTensorNames()</a>.</p>
<div class="fragment"><div class="line"><a name="l04784"></a><span class="lineno"> 4784</span>&#160;{</div><div class="line"><a name="l04785"></a><span class="lineno"> 4785</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(model, subgraphIndex);</div><div class="line"><a name="l04786"></a><span class="lineno"> 4786</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04787"></a><span class="lineno"> 4787</span>&#160;</div><div class="line"><a name="l04788"></a><span class="lineno"> 4788</span>&#160;    <span class="keywordtype">size_t</span> outputCount = subgraphPtr-&gt;outputs.size();</div><div class="line"><a name="l04789"></a><span class="lineno"> 4789</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> result(outputCount);</div><div class="line"><a name="l04790"></a><span class="lineno"> 4790</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; outputCount; ++i)</div><div class="line"><a name="l04791"></a><span class="lineno"> 4791</span>&#160;    {</div><div class="line"><a name="l04792"></a><span class="lineno"> 4792</span>&#160;        uint32_t outputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(subgraphPtr-&gt;outputs[i]);</div><div class="line"><a name="l04793"></a><span class="lineno"> 4793</span>&#160;        result[i] = std::make_pair(outputId, subgraphPtr-&gt;tensors[outputId].get());</div><div class="line"><a name="l04794"></a><span class="lineno"> 4794</span>&#160;    }</div><div class="line"><a name="l04795"></a><span class="lineno"> 4795</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04796"></a><span class="lineno"> 4796</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a86428e0c674542488c7292dfbe2ce381"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">armnnTfLiteParser::TfLiteParserImpl::TensorIdRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorIdRawPtr &gt; TensorIdRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00038">TfLiteParser.hpp:38</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a949070abe70fabe18cc1eb29d5853f47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a949070abe70fabe18cc1eb29d5853f47">&#9670;&nbsp;</a></span>GetSubgraphOutputTensorNames()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSubgraphOutputTensorNames </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the output tensor names for a given subgraph. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05279">5279</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04782">TfLiteParserImpl::GetSubgraphOutputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l05280"></a><span class="lineno"> 5280</span>&#160;{</div><div class="line"><a name="l05281"></a><span class="lineno"> 5281</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l05282"></a><span class="lineno"> 5282</span>&#160;    <span class="keyword">auto</span> outputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">GetSubgraphOutputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l05283"></a><span class="lineno"> 5283</span>&#160;    std::vector&lt;std::string&gt; result;</div><div class="line"><a name="l05284"></a><span class="lineno"> 5284</span>&#160;    result.reserve(outputs.size());</div><div class="line"><a name="l05285"></a><span class="lineno"> 5285</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; output : outputs)</div><div class="line"><a name="l05286"></a><span class="lineno"> 5286</span>&#160;    {</div><div class="line"><a name="l05287"></a><span class="lineno"> 5287</span>&#160;        result.push_back(output.second-&gt;name);</div><div class="line"><a name="l05288"></a><span class="lineno"> 5288</span>&#160;    }</div><div class="line"><a name="l05289"></a><span class="lineno"> 5289</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l05290"></a><span class="lineno"> 5290</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a1bd7b663eb19e2355b6aa5c36232d6fc"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphOutputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphOutputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04782">TfLiteParser.cpp:4782</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa09a8bb02eed50715082d8b7fccd2f8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa09a8bb02eed50715082d8b7fccd2f8d">&#9670;&nbsp;</a></span>GetVersion()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string GetVersion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieve version in X.Y.Z form. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05292">5292</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="include_2armnn_tf_lite_parser_2_version_8hpp_source.xhtml#l00025">TFLITE_PARSER_VERSION</a>.</p>
<div class="fragment"><div class="line"><a name="l05293"></a><span class="lineno"> 5293</span>&#160;{</div><div class="line"><a name="l05294"></a><span class="lineno"> 5294</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="include_2armnn_tf_lite_parser_2_version_8hpp.xhtml#a88c7ccef0cfc85702b48557ec804ef9a">TFLITE_PARSER_VERSION</a>;</div><div class="line"><a name="l05295"></a><span class="lineno"> 5295</span>&#160;}</div><div class="ttc" id="include_2armnn_tf_lite_parser_2_version_8hpp_xhtml_a88c7ccef0cfc85702b48557ec804ef9a"><div class="ttname"><a href="include_2armnn_tf_lite_parser_2_version_8hpp.xhtml#a88c7ccef0cfc85702b48557ec804ef9a">TFLITE_PARSER_VERSION</a></div><div class="ttdeci">#define TFLITE_PARSER_VERSION</div><div class="ttdoc">TFLITE_PARSER_VERSION: &quot;X.Y.Z&quot; where: X = Major version number Y = Minor version number Z = Patch ver...</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_tf_lite_parser_2_version_8hpp_source.xhtml#l00025">Version.hpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0da1e3b0281fa84f8b6f5ce3cd15b7c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0da1e3b0281fa84f8b6f5ce3cd15b7c0">&#9670;&nbsp;</a></span>LoadModel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> LoadModel </td>
          <td>(</td>
          <td class="paramtype">std::unique_ptr&lt; tflite::ModelT &gt;&#160;</td>
          <td class="paramname"><em>model</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00938">938</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00241">TensorShape::AreAllDimensionsSpecified()</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00212">ARMNN_LOG</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00352">CHECK_SUPPORTED_FUSED_ACTIVATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00212">CHECK_TENSOR</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00032">CHECK_VALID_SIZE</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04718">TfLiteParserImpl::GetInputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04798">TfLiteParserImpl::GetInputTensorIds()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04745">TfLiteParserImpl::GetOutputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04808">TfLiteParserImpl::GetOutputTensorIds()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a22b3f11f56aa924c0c1b6ee4d6cc90e1">IOutputSlot::GetOwningIConnectableLayer()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">IConnectableLayer::GetType()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00550">Convolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00621">Convolution3dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00676">DepthwiseConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00623">Convolution3dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00678">DepthwiseConvolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00615">Convolution3dDescriptor::m_DilationX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00672">DepthwiseConvolution2dDescriptor::m_DilationX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00617">Convolution3dDescriptor::m_DilationY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00674">DepthwiseConvolution2dDescriptor::m_DilationY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00619">Convolution3dDescriptor::m_DilationZ</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00607">Convolution3dDescriptor::m_PadBack</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00603">Convolution3dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00666">DepthwiseConvolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00605">Convolution3dDescriptor::m_PadFront</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00597">Convolution3dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00660">DepthwiseConvolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00599">Convolution3dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00662">DepthwiseConvolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00601">Convolution3dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00664">DepthwiseConvolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00609">Convolution3dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00668">DepthwiseConvolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00611">Convolution3dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00670">DepthwiseConvolution2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00613">Convolution3dDescriptor::m_StrideZ</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00986">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">armnn::NDHWC</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00616">armnnDeserializer::ToTensorInfo()</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>
<div class="fragment"><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;{</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    ResetParser();</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    m_Model = std::move(model);</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel();</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7f3fc56b7306b444f06f45cdc4032bbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f3fc56b7306b444f06f45cdc4032bbf">&#9670;&nbsp;</a></span>LoadModelFromBinary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">TfLiteParserImpl::ModelPtr</a> LoadModelFromBinary </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>binaryContent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04699">4699</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00930">TfLiteParserImpl::CreateNetworkFromBinary()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04675">TfLiteParserImpl::LoadModelFromFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l04700"></a><span class="lineno"> 4700</span>&#160;{</div><div class="line"><a name="l04701"></a><span class="lineno"> 4701</span>&#160;    <span class="keywordflow">if</span> (binaryContent == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l04702"></a><span class="lineno"> 4702</span>&#160;     {</div><div class="line"><a name="l04703"></a><span class="lineno"> 4703</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Invalid (null) binary content {}&quot;</span>,</div><div class="line"><a name="l04704"></a><span class="lineno"> 4704</span>&#160;                                       <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l04705"></a><span class="lineno"> 4705</span>&#160;     }</div><div class="line"><a name="l04706"></a><span class="lineno"> 4706</span>&#160;    flatbuffers::Verifier verifier(binaryContent, len);</div><div class="line"><a name="l04707"></a><span class="lineno"> 4707</span>&#160;    <span class="keywordflow">if</span> (verifier.VerifyBuffer&lt;<a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">tflite::Model</a>&gt;() == <span class="keyword">false</span>)</div><div class="line"><a name="l04708"></a><span class="lineno"> 4708</span>&#160;    {</div><div class="line"><a name="l04709"></a><span class="lineno"> 4709</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l04710"></a><span class="lineno"> 4710</span>&#160;            fmt::format(<span class="stringliteral">&quot;Buffer doesn&#39;t conform to the expected Tensorflow Lite &quot;</span></div><div class="line"><a name="l04711"></a><span class="lineno"> 4711</span>&#160;                        <span class="stringliteral">&quot;flatbuffers format. size:{} {}&quot;</span>,</div><div class="line"><a name="l04712"></a><span class="lineno"> 4712</span>&#160;                        len,</div><div class="line"><a name="l04713"></a><span class="lineno"> 4713</span>&#160;                        <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l04714"></a><span class="lineno"> 4714</span>&#160;    }</div><div class="line"><a name="l04715"></a><span class="lineno"> 4715</span>&#160;    <span class="keywordflow">return</span> tflite::UnPackModel(binaryContent);</div><div class="line"><a name="l04716"></a><span class="lineno"> 4716</span>&#160;}</div><div class="ttc" id="namespacearmnn__driver_xhtml_a923b39ec5f83672f50289cbaf5de6798"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">armnn_driver::Model</a></div><div class="ttdeci">::android::nn::Model Model</div><div class="ttdoc">Helper classes. </div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00043">ConversionUtils.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af9590c2ae8d68b5da999d3d6ab21dd3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9590c2ae8d68b5da999d3d6ab21dd3b">&#9670;&nbsp;</a></span>LoadModelFromFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">TfLiteParserImpl::ModelPtr</a> LoadModelFromFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fileName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04675">4675</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04699">TfLiteParserImpl::LoadModelFromBinary()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00923">TfLiteParserImpl::CreateNetworkFromBinaryFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l04676"></a><span class="lineno"> 4676</span>&#160;{</div><div class="line"><a name="l04677"></a><span class="lineno"> 4677</span>&#160;    <span class="keywordflow">if</span> (fileName == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l04678"></a><span class="lineno"> 4678</span>&#160;    {</div><div class="line"><a name="l04679"></a><span class="lineno"> 4679</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Invalid (null) file name {}&quot;</span>,</div><div class="line"><a name="l04680"></a><span class="lineno"> 4680</span>&#160;                                       <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l04681"></a><span class="lineno"> 4681</span>&#160;    }</div><div class="line"><a name="l04682"></a><span class="lineno"> 4682</span>&#160;    std::error_code errorCode;</div><div class="line"><a name="l04683"></a><span class="lineno"> 4683</span>&#160;    fs::path pathToFile(fileName);</div><div class="line"><a name="l04684"></a><span class="lineno"> 4684</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(pathToFile, errorCode))</div><div class="line"><a name="l04685"></a><span class="lineno"> 4685</span>&#160;    {</div><div class="line"><a name="l04686"></a><span class="lineno"> 4686</span>&#160;        <span class="comment">//fmt::format() could not be used here (format error)</span></div><div class="line"><a name="l04687"></a><span class="lineno"> 4687</span>&#160;        std::stringstream msg;</div><div class="line"><a name="l04688"></a><span class="lineno"> 4688</span>&#160;        msg &lt;&lt; <span class="stringliteral">&quot;Cannot find the file (&quot;</span> &lt;&lt; fileName &lt;&lt; <span class="stringliteral">&quot;) errorCode: &quot;</span> &lt;&lt; errorCode</div><div class="line"><a name="l04689"></a><span class="lineno"> 4689</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l04690"></a><span class="lineno"> 4690</span>&#160;</div><div class="line"><a name="l04691"></a><span class="lineno"> 4691</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_file_not_found_exception.xhtml">FileNotFoundException</a>(msg.str());</div><div class="line"><a name="l04692"></a><span class="lineno"> 4692</span>&#160;    }</div><div class="line"><a name="l04693"></a><span class="lineno"> 4693</span>&#160;    std::ifstream file(fileName, std::ios::binary);</div><div class="line"><a name="l04694"></a><span class="lineno"> 4694</span>&#160;    std::string fileContent((std::istreambuf_iterator&lt;char&gt;(file)), std::istreambuf_iterator&lt;char&gt;());</div><div class="line"><a name="l04695"></a><span class="lineno"> 4695</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">LoadModelFromBinary</a>(reinterpret_cast&lt;const uint8_t *&gt;(fileContent.c_str()),</div><div class="line"><a name="l04696"></a><span class="lineno"> 4696</span>&#160;                               fileContent.size());</div><div class="line"><a name="l04697"></a><span class="lineno"> 4697</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_file_not_found_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_file_not_found_exception.xhtml">armnn::FileNotFoundException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00086">Exceptions.hpp:86</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a7f3fc56b7306b444f06f45cdc4032bbf"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">armnnTfLiteParser::TfLiteParserImpl::LoadModelFromBinary</a></div><div class="ttdeci">static ModelPtr LoadModelFromBinary(const uint8_t *binaryContent, size_t len)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04699">TfLiteParser.cpp:4699</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaebfa9a01a0bb8a0935114ff0140cc45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaebfa9a01a0bb8a0935114ff0140cc45">&#9670;&nbsp;</a></span>OutputShapeOfReshape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> OutputShapeOfReshape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>targetDimsIn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02882">2882</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00042">ARMNN_THROW_PARSE_EXCEPTION</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00352">CHECK_SUPPORTED_FUSED_ACTIVATION</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00032">CHECK_VALID_SIZE</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00188">armnnDeserializer::CheckShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05019">TfLiteParserImpl::GetBuffer()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00295">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04718">TfLiteParserImpl::GetInputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04798">TfLiteParserImpl::GetInputTensorIds()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#afcc1c3a20bd2860e0ddd21674389246f">IConnectableLayer::GetName()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00427">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00196">TensorInfo::GetNumElements()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">IConnectableLayer::GetNumOutputSlots()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04745">TfLiteParserImpl::GetOutputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04808">TfLiteParserImpl::GetOutputTensorIds()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00478">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00461">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00196">armnnUtils::GetUnsignedAxis()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01087">LstmDescriptor::m_ActivationFunc</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01220">StackDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00494">FullyConnectedDescriptor::m_BiasEnabled</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00053">LstmInputParams::m_CellBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00059">LstmInputParams::m_CellLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00049">LstmInputParams::m_CellToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00048">LstmInputParams::m_CellToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00050">LstmInputParams::m_CellToOutputWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00498">FullyConnectedDescriptor::m_ConstantWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00717">DetectionPostProcessDescriptor::m_DetectionsPerClass</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00052">LstmInputParams::m_ForgetGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00058">LstmInputParams::m_ForgetLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00051">LstmInputParams::m_InputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00057">LstmInputParams::m_InputLayerNormWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01224">StackDescriptor::m_InputShape</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00042">LstmInputParams::m_InputToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00041">LstmInputParams::m_InputToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00090">LstmInputParamsInfo::m_InputToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00040">LstmInputParams::m_InputToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00043">LstmInputParams::m_InputToOutputWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00715">DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00713">DetectionPostProcessDescriptor::m_MaxDetections</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00959">ResizeDescriptor::m_Method</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00721">DetectionPostProcessDescriptor::m_NmsIouThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00719">DetectionPostProcessDescriptor::m_NmsScoreThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00723">DetectionPostProcessDescriptor::m_NumClasses</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01222">StackDescriptor::m_NumInputs</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00054">LstmInputParams::m_OutputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00060">LstmInputParams::m_OutputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00056">LstmInputParams::m_ProjectionBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00055">LstmInputParams::m_ProjectionWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00046">LstmInputParams::m_RecurrentToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00045">LstmInputParams::m_RecurrentToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00044">LstmInputParams::m_RecurrentToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00047">LstmInputParams::m_RecurrentToOutputWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00733">DetectionPostProcessDescriptor::m_ScaleH</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00731">DetectionPostProcessDescriptor::m_ScaleW</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00727">DetectionPostProcessDescriptor::m_ScaleX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00729">DetectionPostProcessDescriptor::m_ScaleY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00986">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00496">FullyConnectedDescriptor::m_TransposeWeightMatrix</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00725">DetectionPostProcessDescriptor::m_UseRegularNms</a>, <a class="el" href="_types_8hpp_source.xhtml#l00031">armnn::MaxNumOfTensorDimensions</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00019">armnnUtils::ProcessConcatInputTensorInfo()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00158">OriginsDescriptor::SetConcatAxis()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00193">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00310">ViewsDescriptor::SetViewOriginCoord()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00315">ViewsDescriptor::SetViewSize()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00616">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l02884"></a><span class="lineno"> 2884</span>&#160;{</div><div class="line"><a name="l02885"></a><span class="lineno"> 2885</span>&#160;    std::vector&lt;unsigned int&gt; outputDims(targetDimsIn.begin(), targetDimsIn.end());</div><div class="line"><a name="l02886"></a><span class="lineno"> 2886</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> stretchDim = std::find(targetDimsIn.begin(), targetDimsIn.end(), -1);</div><div class="line"><a name="l02887"></a><span class="lineno"> 2887</span>&#160;</div><div class="line"><a name="l02888"></a><span class="lineno"> 2888</span>&#160;    <span class="keywordflow">if</span> (stretchDim != targetDimsIn.end())</div><div class="line"><a name="l02889"></a><span class="lineno"> 2889</span>&#160;    {</div><div class="line"><a name="l02890"></a><span class="lineno"> 2890</span>&#160;        <span class="keywordflow">if</span> (std::find(std::next(stretchDim), targetDimsIn.end(), -1) != targetDimsIn.end())</div><div class="line"><a name="l02891"></a><span class="lineno"> 2891</span>&#160;        {</div><div class="line"><a name="l02892"></a><span class="lineno"> 2892</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02893"></a><span class="lineno"> 2893</span>&#160;                fmt::format(<span class="stringliteral">&quot;At most one component of shape can be -1 {}&quot;</span>, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02894"></a><span class="lineno"> 2894</span>&#160;        }</div><div class="line"><a name="l02895"></a><span class="lineno"> 2895</span>&#160;</div><div class="line"><a name="l02896"></a><span class="lineno"> 2896</span>&#160;        <span class="keyword">auto</span> targetNumElements =</div><div class="line"><a name="l02897"></a><span class="lineno"> 2897</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(</div><div class="line"><a name="l02898"></a><span class="lineno"> 2898</span>&#160;                std::accumulate(targetDimsIn.begin(), targetDimsIn.end(), -1, std::multiplies&lt;int32_t&gt;()));</div><div class="line"><a name="l02899"></a><span class="lineno"> 2899</span>&#160;</div><div class="line"><a name="l02900"></a><span class="lineno"> 2900</span>&#160;        <span class="keyword">auto</span> stretchIndex = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(std::distance(targetDimsIn.begin(), stretchDim));</div><div class="line"><a name="l02901"></a><span class="lineno"> 2901</span>&#160;        outputDims[stretchIndex] = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>() / targetNumElements;</div><div class="line"><a name="l02902"></a><span class="lineno"> 2902</span>&#160;    }</div><div class="line"><a name="l02903"></a><span class="lineno"> 2903</span>&#160;</div><div class="line"><a name="l02904"></a><span class="lineno"> 2904</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()), outputDims.data());</div><div class="line"><a name="l02905"></a><span class="lineno"> 2905</span>&#160;</div><div class="line"><a name="l02906"></a><span class="lineno"> 2906</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> reshapeInfo = inputTensorInfo;</div><div class="line"><a name="l02907"></a><span class="lineno"> 2907</span>&#160;    reshapeInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outputShape);</div><div class="line"><a name="l02908"></a><span class="lineno"> 2908</span>&#160;</div><div class="line"><a name="l02909"></a><span class="lineno"> 2909</span>&#160;    <span class="keywordflow">return</span> reshapeInfo;</div><div class="line"><a name="l02910"></a><span class="lineno"> 2910</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00193">Tensor.hpp:193</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00196">Tensor.hpp:196</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7d28f3a07c7ab30f66e7c70ded86eb49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d28f3a07c7ab30f66e7c70ded86eb49">&#9670;&nbsp;</a></span>OutputShapeOfSqueeze()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> OutputShapeOfSqueeze </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; uint32_t &gt;&#160;</td>
          <td class="paramname"><em>squeezeDims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02137">2137</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00042">ARMNN_THROW_PARSE_EXCEPTION</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00032">CHECK_VALID_SIZE</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l05019">TfLiteParserImpl::GetBuffer()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04718">TfLiteParserImpl::GetInputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04798">TfLiteParserImpl::GetInputTensorIds()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00427">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00196">TensorInfo::GetNumElements()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04745">TfLiteParserImpl::GetOutputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04808">TfLiteParserImpl::GetOutputTensorIds()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00061">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01137">MeanDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00063">ActivationDescriptor::m_B</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01289">StridedSliceDescriptor::m_Begin</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01297">StridedSliceDescriptor::m_BeginMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01310">StridedSliceDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01304">StridedSliceDescriptor::m_EllipsisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01291">StridedSliceDescriptor::m_End</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01300">StridedSliceDescriptor::m_EndMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00059">ActivationDescriptor::m_Function</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01139">MeanDescriptor::m_KeepDims</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01307">StridedSliceDescriptor::m_NewAxisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01171">PadDescriptor::m_PaddingMode</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01165">PadDescriptor::m_PadList</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01168">PadDescriptor::m_PadValue</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01302">StridedSliceDescriptor::m_ShrinkAxisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01293">StridedSliceDescriptor::m_Stride</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00986">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00193">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ae1b3c9c6087a93b07c83e0b04f377a8d">armnn::Signed64</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00616">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;{</div><div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;    <a class="code" href="_verification_helpers_8hpp.xhtml#a479b2821a7a2cbb8fa8eb7f60a47065d">CHECK_VALID_SIZE</a>(squeezeDims.size(), 0, 1, 2, 3, 4);</div><div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> uint32_t dimensionSequence[] = { 0, 1, 2, 3 };</div><div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;</div><div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;    <span class="keywordflow">if</span> (inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 4)</div><div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;    {</div><div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;Input tensor has unexpected number of dimensions:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()</div><div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;           &lt;&lt; <span class="stringliteral">&quot; shape:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;           &lt;&lt; <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(ss.str());</div><div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;    }</div><div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;</div><div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;    <span class="keywordflow">if</span> (squeezeDims.empty())</div><div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;    {</div><div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;        squeezeDims.assign(dimensionSequence,</div><div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;                           dimensionSequence+inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div><div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;    }</div><div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;</div><div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;    std::vector&lt;uint32_t&gt; outputDims;</div><div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;    {</div><div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;        <span class="keywordtype">bool</span> skipSqueeze = (std::find(squeezeDims.begin(), squeezeDims.end(), i) == squeezeDims.end());</div><div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;        <span class="keyword">auto</span> currentDimension = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div><div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;        <span class="keywordflow">if</span> (skipSqueeze || currentDimension != 1)</div><div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;        {</div><div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;            outputDims.push_back(currentDimension);</div><div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;        }</div><div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;    }</div><div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;</div><div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;    <span class="keywordflow">if</span> (outputDims.size() &gt; 4)</div><div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;    {</div><div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;Output tensor has unexpected number of dimensions:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()</div><div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;           &lt;&lt; <span class="stringliteral">&quot; shape:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;           &lt;&lt; <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(ss.str());</div><div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;    }</div><div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;</div><div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()),</div><div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;                                       outputDims.data());</div><div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;</div><div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;    <span class="comment">// we need to preserve the tensor type and the quantization data as well</span></div><div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outTensorInfo = inputTensorInfo;</div><div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;    outTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outShape);</div><div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;</div><div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;    <span class="keywordflow">return</span> outTensorInfo;</div><div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00193">Tensor.hpp:193</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_a479b2821a7a2cbb8fa8eb7f60a47065d"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#a479b2821a7a2cbb8fa8eb7f60a47065d">CHECK_VALID_SIZE</a></div><div class="ttdeci">#define CHECK_VALID_SIZE(ACTUAL,...)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00032">VerificationHelpers.hpp:32</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnnTfLiteParser/<a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a></li>
<li>src/armnnTfLiteParser/<a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml">armnnTfLiteParser</a></li><li class="navelem"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml">TfLiteParserImpl</a></li>
    <li class="footer">Generated on Fri Feb 24 2023 10:24:34 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
