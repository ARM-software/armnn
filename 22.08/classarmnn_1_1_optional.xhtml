<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: Optional&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_optional.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_optional-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Optional&lt; T &gt; Class Template Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_optional_8hpp_source.xhtml">Optional.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Optional&lt; T &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_optional.png" usemap="#Optional_3C_20T_20_3E_map" alt=""/>
  <map id="Optional_3C_20T_20_3E_map" name="Optional_3C_20T_20_3E_map">
<area href="classarmnn_1_1_optional_reference_switch.xhtml" alt="OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;" shape="rect" coords="0,56,357,80"/>
<area href="classarmnn_1_1_optional_base.xhtml" title="OptionalBase is the common functionality between reference and non-reference optional types..." alt="OptionalBase" shape="rect" coords="0,0,357,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ad10f4d634fc3080d680a3a7a004e098f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">BaseSwitch</a> = <a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml">OptionalReferenceSwitch</a>&lt; std::is_reference&lt; T &gt;::<a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>, T &gt;</td></tr>
<tr class="separator:ad10f4d634fc3080d680a3a7a004e098f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_types_classarmnn_1_1_optional_reference_switch"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarmnn_1_1_optional_reference_switch')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;</a></td></tr>
<tr class="memitem:a13da864f1d4a5e3957ba70473f8fbf8d inherit pub_types_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a13da864f1d4a5e3957ba70473f8fbf8d">Base</a> = <a class="el" href="classarmnn_1_1_optional_base.xhtml">OptionalBase</a></td></tr>
<tr class="separator:a13da864f1d4a5e3957ba70473f8fbf8d inherit pub_types_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0ba66c8e63acad2362782737bdc1e50a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional.xhtml#a0ba66c8e63acad2362782737bdc1e50a">Optional</a> () noexcept</td></tr>
<tr class="separator:a0ba66c8e63acad2362782737bdc1e50a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad821ad3ce9685b41025f5f70481ec2d7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional.xhtml#ad821ad3ce9685b41025f5f70481ec2d7">Optional</a> (const T &amp;<a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>)</td></tr>
<tr class="separator:ad821ad3ce9685b41025f5f70481ec2d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27ea92da9f8129f5abfabc4ef53091c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional.xhtml#a27ea92da9f8129f5abfabc4ef53091c9">operator=</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> &amp;other)=default</td></tr>
<tr class="separator:a27ea92da9f8129f5abfabc4ef53091c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5569b19b8dc99204c286f32c2c979eb6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional.xhtml#a5569b19b8dc99204c286f32c2c979eb6">Optional</a> (<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a> empty)</td></tr>
<tr class="separator:a5569b19b8dc99204c286f32c2c979eb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab71d669cf5dc14eb564c64345be02198"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional.xhtml#ab71d669cf5dc14eb564c64345be02198">Optional</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> &amp;other)</td></tr>
<tr class="separator:ab71d669cf5dc14eb564c64345be02198"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6bb5bce1d9fcc1ea1d672543c75db4e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional.xhtml#ad6bb5bce1d9fcc1ea1d672543c75db4e">Optional</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">BaseSwitch</a> &amp;other)</td></tr>
<tr class="separator:ad6bb5bce1d9fcc1ea1d672543c75db4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e14620644d695df278fc6a84c8a63dc"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a2e14620644d695df278fc6a84c8a63dc"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional.xhtml#a2e14620644d695df278fc6a84c8a63dc">Optional</a> (<a class="el" href="structarmnn_1_1_construct_in_place.xhtml">ConstructInPlace</a>, Args &amp;&amp;... args)</td></tr>
<tr class="separator:a2e14620644d695df278fc6a84c8a63dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa68a881b2258017440f00f1bf3cd0e74"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional.xhtml#aa68a881b2258017440f00f1bf3cd0e74">operator==</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:aa68a881b2258017440f00f1bf3cd0e74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Two optionals are considered equal if they are both empty or both contain values which themselves are considered equal (via their own == operator).  <a href="#aa68a881b2258017440f00f1bf3cd0e74">More...</a><br /></td></tr>
<tr class="separator:aa68a881b2258017440f00f1bf3cd0e74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_optional_reference_switch"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_optional_reference_switch')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;</a></td></tr>
<tr class="memitem:ae0e39323497d71182ed4ff2c15f1e565 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#ae0e39323497d71182ed4ff2c15f1e565">OptionalReferenceSwitch</a> () noexcept</td></tr>
<tr class="separator:ae0e39323497d71182ed4ff2c15f1e565 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13961a32b21df02dad8c66e11995f006 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a13961a32b21df02dad8c66e11995f006">OptionalReferenceSwitch</a> (<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>) noexcept</td></tr>
<tr class="separator:a13961a32b21df02dad8c66e11995f006 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6beefcffe9bf038690c90acd176c2263 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a6beefcffe9bf038690c90acd176c2263">OptionalReferenceSwitch</a> (const T &amp;<a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>)</td></tr>
<tr class="separator:a6beefcffe9bf038690c90acd176c2263 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f012dc9cb58d868dc77bb3b4ba3a76d inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a4f012dc9cb58d868dc77bb3b4ba3a76d">OptionalReferenceSwitch</a> (<a class="el" href="structarmnn_1_1_construct_in_place.xhtml">ConstructInPlace</a>, Args &amp;&amp;... args)</td></tr>
<tr class="separator:a4f012dc9cb58d868dc77bb3b4ba3a76d inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66ffe2beacf3f0e66c2ccb21fcfba30f inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a66ffe2beacf3f0e66c2ccb21fcfba30f">OptionalReferenceSwitch</a> (const <a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml">OptionalReferenceSwitch</a> &amp;other)</td></tr>
<tr class="separator:a66ffe2beacf3f0e66c2ccb21fcfba30f inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe5947e3f9acc0738b3ef2ee4cf3547d inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml">OptionalReferenceSwitch</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#abe5947e3f9acc0738b3ef2ee4cf3547d">operator=</a> (const T &amp;<a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>)</td></tr>
<tr class="separator:abe5947e3f9acc0738b3ef2ee4cf3547d inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcdbef8eae7fb1de8ea387da20dd369c inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml">OptionalReferenceSwitch</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#afcdbef8eae7fb1de8ea387da20dd369c">operator=</a> (const <a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml">OptionalReferenceSwitch</a> &amp;other)</td></tr>
<tr class="separator:afcdbef8eae7fb1de8ea387da20dd369c inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affce7d7dd75fd7b406f5112bd54ac7d8 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml">OptionalReferenceSwitch</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#affce7d7dd75fd7b406f5112bd54ac7d8">operator=</a> (<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>)</td></tr>
<tr class="separator:affce7d7dd75fd7b406f5112bd54ac7d8 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf0cbbed2029d141b8a8f1b39c7028f9 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#abf0cbbed2029d141b8a8f1b39c7028f9">~OptionalReferenceSwitch</a> ()</td></tr>
<tr class="separator:abf0cbbed2029d141b8a8f1b39c7028f9 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad20897c5c8bd47f5d4005989bead0e55 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#ad20897c5c8bd47f5d4005989bead0e55">reset</a> ()</td></tr>
<tr class="separator:ad20897c5c8bd47f5d4005989bead0e55 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77c7d528ac063d870b8c8426ec81c1c3 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top">const T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a> () const</td></tr>
<tr class="separator:a77c7d528ac063d870b8c8426ec81c1c3 inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a464298ad7afeafebbb149f566ecabbab inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a464298ad7afeafebbb149f566ecabbab">value</a> ()</td></tr>
<tr class="separator:a464298ad7afeafebbb149f566ecabbab inherit pub_methods_classarmnn_1_1_optional_reference_switch"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_optional_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_optional_base')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_optional_base.xhtml">OptionalBase</a></td></tr>
<tr class="memitem:ac2bde2f7113f72440ad3638eeb4d06f6 inherit pub_methods_classarmnn_1_1_optional_base"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_base.xhtml#ac2bde2f7113f72440ad3638eeb4d06f6">OptionalBase</a> () noexcept</td></tr>
<tr class="separator:ac2bde2f7113f72440ad3638eeb4d06f6 inherit pub_methods_classarmnn_1_1_optional_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86b749ce2c4bc627fa8a1fcfaf0e314f inherit pub_methods_classarmnn_1_1_optional_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a> () const noexcept</td></tr>
<tr class="separator:a86b749ce2c4bc627fa8a1fcfaf0e314f inherit pub_methods_classarmnn_1_1_optional_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a420e60e9788bfa3b52aa3aab72ea3a5e inherit pub_methods_classarmnn_1_1_optional_base"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_base.xhtml#a420e60e9788bfa3b52aa3aab72ea3a5e">operator bool</a> () const noexcept</td></tr>
<tr class="memdesc:a420e60e9788bfa3b52aa3aab72ea3a5e inherit pub_methods_classarmnn_1_1_optional_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Conversion to bool, so can be used in if-statements and similar contexts expecting a bool.  <a href="classarmnn_1_1_optional_base.xhtml#a420e60e9788bfa3b52aa3aab72ea3a5e">More...</a><br /></td></tr>
<tr class="separator:a420e60e9788bfa3b52aa3aab72ea3a5e inherit pub_methods_classarmnn_1_1_optional_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_optional_base"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_optional_base')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_optional_base.xhtml">OptionalBase</a></td></tr>
<tr class="memitem:a50b53f38c96fdf12c90890d2dfbb8719 inherit pro_methods_classarmnn_1_1_optional_base"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_base.xhtml#a50b53f38c96fdf12c90890d2dfbb8719">OptionalBase</a> (bool hasValue) noexcept</td></tr>
<tr class="separator:a50b53f38c96fdf12c90890d2dfbb8719 inherit pro_methods_classarmnn_1_1_optional_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classarmnn_1_1_optional_base"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classarmnn_1_1_optional_base')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classarmnn_1_1_optional_base.xhtml">OptionalBase</a></td></tr>
<tr class="memitem:a53e87efb7e1b2df3dc4420dafaf2ee7e inherit pro_attribs_classarmnn_1_1_optional_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_optional_base.xhtml#a53e87efb7e1b2df3dc4420dafaf2ee7e">m_HasValue</a></td></tr>
<tr class="separator:a53e87efb7e1b2df3dc4420dafaf2ee7e inherit pro_attribs_classarmnn_1_1_optional_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
class armnn::Optional&lt; T &gt;</h3>


<p class="definition">Definition at line <a class="el" href="_optional_8hpp_source.xhtml#l00270">270</a> of file <a class="el" href="_optional_8hpp_source.xhtml">Optional.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ad10f4d634fc3080d680a3a7a004e098f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad10f4d634fc3080d680a3a7a004e098f">&#9670;&nbsp;</a></span>BaseSwitch</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">BaseSwitch</a> =  <a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml">OptionalReferenceSwitch</a>&lt;std::is_reference&lt;T&gt;::<a class="el" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optional_8hpp_source.xhtml#l00273">273</a> of file <a class="el" href="_optional_8hpp_source.xhtml">Optional.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a0ba66c8e63acad2362782737bdc1e50a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ba66c8e63acad2362782737bdc1e50a">&#9670;&nbsp;</a></span>Optional() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optional_8hpp_source.xhtml#l00275">275</a> of file <a class="el" href="_optional_8hpp_source.xhtml">Optional.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;: <a class="code" href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">BaseSwitch</a>{} {}</div><div class="ttc" id="classarmnn_1_1_optional_xhtml_ad10f4d634fc3080d680a3a7a004e098f"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">armnn::Optional::BaseSwitch</a></div><div class="ttdeci">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt; BaseSwitch</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00273">Optional.hpp:273</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad821ad3ce9685b41025f5f70481ec2d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad821ad3ce9685b41025f5f70481ec2d7">&#9670;&nbsp;</a></span>Optional() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optional_8hpp_source.xhtml#l00276">276</a> of file <a class="el" href="_optional_8hpp_source.xhtml">Optional.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;: <a class="code" href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">BaseSwitch</a>{<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>} {}</div><div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml_ad10f4d634fc3080d680a3a7a004e098f"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">armnn::Optional::BaseSwitch</a></div><div class="ttdeci">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt; BaseSwitch</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00273">Optional.hpp:273</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5569b19b8dc99204c286f32c2c979eb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5569b19b8dc99204c286f32c2c979eb6">&#9670;&nbsp;</a></span>Optional() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>&lt; T &gt;&#160;</td>
          <td class="paramname"><em>empty</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optional_8hpp_source.xhtml#l00278">278</a> of file <a class="el" href="_optional_8hpp_source.xhtml">Optional.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;: <a class="code" href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">BaseSwitch</a>{empty} {}</div><div class="ttc" id="classarmnn_1_1_optional_xhtml_ad10f4d634fc3080d680a3a7a004e098f"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">armnn::Optional::BaseSwitch</a></div><div class="ttdeci">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt; BaseSwitch</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00273">Optional.hpp:273</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab71d669cf5dc14eb564c64345be02198"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab71d669cf5dc14eb564c64345be02198">&#9670;&nbsp;</a></span>Optional() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optional_8hpp_source.xhtml#l00279">279</a> of file <a class="el" href="_optional_8hpp_source.xhtml">Optional.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;: <a class="code" href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">BaseSwitch</a>{other} {}</div><div class="ttc" id="classarmnn_1_1_optional_xhtml_ad10f4d634fc3080d680a3a7a004e098f"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">armnn::Optional::BaseSwitch</a></div><div class="ttdeci">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt; BaseSwitch</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00273">Optional.hpp:273</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad6bb5bce1d9fcc1ea1d672543c75db4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6bb5bce1d9fcc1ea1d672543c75db4e">&#9670;&nbsp;</a></span>Optional() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">BaseSwitch</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optional_8hpp_source.xhtml#l00280">280</a> of file <a class="el" href="_optional_8hpp_source.xhtml">Optional.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;: <a class="code" href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">BaseSwitch</a>{other} {}</div><div class="ttc" id="classarmnn_1_1_optional_xhtml_ad10f4d634fc3080d680a3a7a004e098f"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">armnn::Optional::BaseSwitch</a></div><div class="ttdeci">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt; BaseSwitch</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00273">Optional.hpp:273</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2e14620644d695df278fc6a84c8a63dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e14620644d695df278fc6a84c8a63dc">&#9670;&nbsp;</a></span>Optional() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_construct_in_place.xhtml">ConstructInPlace</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optional_8hpp_source.xhtml#l00283">283</a> of file <a class="el" href="_optional_8hpp_source.xhtml">Optional.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                                        :</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <a class="code" href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">BaseSwitch</a>(<a class="code" href="_optional_8hpp.xhtml#acbec11f88a308826fa811f370d363a4a">CONSTRUCT_IN_PLACE</a>, std::forward&lt;Args&gt;(args)...) {}</div><div class="ttc" id="_optional_8hpp_xhtml_acbec11f88a308826fa811f370d363a4a"><div class="ttname"><a href="_optional_8hpp.xhtml#acbec11f88a308826fa811f370d363a4a">CONSTRUCT_IN_PLACE</a></div><div class="ttdeci">#define CONSTRUCT_IN_PLACE</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00041">Optional.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml_ad10f4d634fc3080d680a3a7a004e098f"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml#ad10f4d634fc3080d680a3a7a004e098f">armnn::Optional::BaseSwitch</a></div><div class="ttdeci">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt; BaseSwitch</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00273">Optional.hpp:273</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a27ea92da9f8129f5abfabc4ef53091c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27ea92da9f8129f5abfabc4ef53091c9">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa68a881b2258017440f00f1bf3cd0e74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa68a881b2258017440f00f1bf3cd0e74">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Two optionals are considered equal if they are both empty or both contain values which themselves are considered equal (via their own == operator). </p>

<p class="definition">Definition at line <a class="el" href="_optional_8hpp_source.xhtml#l00288">288</a> of file <a class="el" href="_optional_8hpp_source.xhtml">Optional.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    {</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">if</span> (!this-&gt;<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() &amp;&amp; !rhs.has_value())</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() &amp;&amp; rhs.has_value() &amp;&amp; this-&gt;<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == rhs.value())</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        {</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        }</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>include/armnn/<a class="el" href="_optional_8hpp_source.xhtml">Optional.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:41 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
