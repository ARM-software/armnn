<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/NetworkExecutionUtils/NetworkExecutionUtils.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_network_execution_utils_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NetworkExecutionUtils.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_network_execution_utils_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2022 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_network_execution_utils_8hpp.xhtml">NetworkExecutionUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_filesystem_8hpp.xhtml">armnnUtils/Filesystem.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno"><a class="line" href="_network_execution_utils_8hpp.xhtml#a1842dfaf4b24f36146a0cf6731ed75b7">   10</a></span>&#160;std::vector&lt;std::string&gt; <a class="code" href="_network_execution_utils_8cpp.xhtml#a1842dfaf4b24f36146a0cf6731ed75b7">ParseStringList</a>(<span class="keyword">const</span> std::string&amp; inputString, <span class="keyword">const</span> <span class="keywordtype">char</span>* delimiter)</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;{</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    std::stringstream stream(inputString);</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <span class="keywordflow">return</span> ParseArrayImpl&lt;std::string&gt;(stream, [](<span class="keyword">const</span> std::string&amp; s) {</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1string_utils.xhtml#ac5da14c1462870eef77ca8ac4bb5afe5">armnn::stringUtils::StringTrimCopy</a>(s); }, delimiter);</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;}</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="_network_execution_utils_8hpp.xhtml#ab9be7e320a1879b362298cb198250dae">   17</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="_network_execution_utils_8cpp.xhtml#ab9be7e320a1879b362298cb198250dae">CheckInferenceTimeThreshold</a>(<span class="keyword">const</span> std::chrono::duration&lt;double, std::milli&gt;&amp; duration,</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; thresholdTime)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Inference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;                    &lt;&lt; std::fixed &lt;&lt; duration.count() &lt;&lt; <span class="stringliteral">&quot; ms\n&quot;</span>;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="comment">// If thresholdTime == 0.0 (default), then it hasn&#39;t been supplied at command line</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">if</span> (thresholdTime != 0.0)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                        &lt;&lt; std::fixed &lt;&lt; thresholdTime &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span>;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keyword">auto</span> thresholdMinusInference = thresholdTime - duration.count();</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time - Inference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                        &lt;&lt; std::fixed &lt;&lt; thresholdMinusInference &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordflow">if</span> (thresholdMinusInference &lt; 0)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            std::string errorMessage = <span class="stringliteral">&quot;Elapsed inference time is greater than provided threshold time.&quot;</span>;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; errorMessage;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="_network_execution_utils_8hpp.xhtml#a6506f23e2f4153a68c87ea03ae423b12">   40</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="_network_execution_utils_8cpp.xhtml#a6506f23e2f4153a68c87ea03ae423b12">ValidatePath</a>(<span class="keyword">const</span> std::string&amp; file, <span class="keyword">const</span> <span class="keywordtype">bool</span> expectFile)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(file))</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given file path &#39;&quot;</span> &lt;&lt; file &lt;&lt; <span class="stringliteral">&quot;&#39; does not exist&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">if</span> (!fs::is_regular_file(file) &amp;&amp; expectFile)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given file path &#39;&quot;</span> &lt;&lt; file &lt;&lt; <span class="stringliteral">&quot;&#39; is not a regular file&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="_network_execution_utils_8hpp.xhtml#a7dfb0158a3b76d682b4fcfe434ad2d7a">   55</a></span>&#160;std::vector&lt;unsigned int&gt; <a class="code" href="_network_execution_utils_8cpp.xhtml#a7dfb0158a3b76d682b4fcfe434ad2d7a">ParseArray</a>(std::istream&amp; stream)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> ParseArrayImpl&lt;unsigned int&gt;(</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            stream,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            [](<span class="keyword">const</span> std::string&amp; s) { <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(std::stoi(s)); });</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="_network_execution_utils_8hpp.xhtml#aa8ad60308ed132ba939a09d48a97ac30">   62</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="_network_execution_utils_8cpp.xhtml#aa8ad60308ed132ba939a09d48a97ac30">ValidatePaths</a>(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; fileVec, <span class="keyword">const</span> <span class="keywordtype">bool</span> expectFile)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordtype">bool</span> allPathsValid = <span class="keyword">true</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; file : fileVec)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">if</span>(!<a class="code" href="_network_execution_utils_8cpp.xhtml#a6506f23e2f4153a68c87ea03ae423b12">ValidatePath</a>(file, expectFile))</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            allPathsValid = <span class="keyword">false</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> allPathsValid;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="_network_execution_utils_8hpp.xhtml#a0d853d3a7b138f39cc775c26e2c0821a">   75</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_network_execution_utils_8cpp.xhtml#a0d853d3a7b138f39cc775c26e2c0821a">LogAndThrow</a>(std::string eMsg)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; eMsg;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(eMsg);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="ttc" id="_network_execution_utils_8cpp_xhtml_a0d853d3a7b138f39cc775c26e2c0821a"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#a0d853d3a7b138f39cc775c26e2c0821a">LogAndThrow</a></div><div class="ttdeci">void LogAndThrow(std::string eMsg)</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00075">NetworkExecutionUtils.cpp:75</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_a7dfb0158a3b76d682b4fcfe434ad2d7a"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#a7dfb0158a3b76d682b4fcfe434ad2d7a">ParseArray</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; ParseArray(std::istream &amp;stream)</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00055">NetworkExecutionUtils.cpp:55</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_a1842dfaf4b24f36146a0cf6731ed75b7"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#a1842dfaf4b24f36146a0cf6731ed75b7">ParseStringList</a></div><div class="ttdeci">std::vector&lt; std::string &gt; ParseStringList(const std::string &amp;inputString, const char *delimiter)</div><div class="ttdoc">Splits a given string at every accurance of delimiter into a vector of string. </div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00010">NetworkExecutionUtils.cpp:10</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="_filesystem_8hpp_xhtml"><div class="ttname"><a href="_filesystem_8hpp.xhtml">Filesystem.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1string_utils_xhtml_ac5da14c1462870eef77ca8ac4bb5afe5"><div class="ttname"><a href="namespacearmnn_1_1string_utils.xhtml#ac5da14c1462870eef77ca8ac4bb5afe5">armnn::stringUtils::StringTrimCopy</a></div><div class="ttdeci">std::string StringTrimCopy(const std::string &amp;str, const std::string &amp;chars=&quot;\\\&quot;)</div><div class="ttdoc">Trim from both the start and the end of a string, returns a trimmed copy of the string. </div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8hpp_source.xhtml#l00088">StringUtils.hpp:88</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_aa8ad60308ed132ba939a09d48a97ac30"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#aa8ad60308ed132ba939a09d48a97ac30">ValidatePaths</a></div><div class="ttdeci">bool ValidatePaths(const std::vector&lt; std::string &gt; &amp;fileVec, const bool expectFile)</div><div class="ttdoc">Verifies if a given vector of strings are valid paths. </div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00062">NetworkExecutionUtils.cpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_ab9be7e320a1879b362298cb198250dae"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#ab9be7e320a1879b362298cb198250dae">CheckInferenceTimeThreshold</a></div><div class="ttdeci">bool CheckInferenceTimeThreshold(const std::chrono::duration&lt; double, std::milli &gt; &amp;duration, const double &amp;thresholdTime)</div><div class="ttdoc">Given a measured duration and a threshold time tell the user whether we succeeded or not...</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00017">NetworkExecutionUtils.cpp:17</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_a6506f23e2f4153a68c87ea03ae423b12"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#a6506f23e2f4153a68c87ea03ae423b12">ValidatePath</a></div><div class="ttdeci">bool ValidatePath(const std::string &amp;file, const bool expectFile)</div><div class="ttdoc">Verifies if the given string is a valid path. </div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00040">NetworkExecutionUtils.cpp:40</a></div></div>
<div class="ttc" id="_network_execution_utils_8hpp_xhtml"><div class="ttname"><a href="_network_execution_utils_8hpp.xhtml">NetworkExecutionUtils.hpp</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_bee5dd02b9a5e046b34f7fb0b8e9850a.xhtml">NetworkExecutionUtils</a></li><li class="navelem"><a class="el" href="_network_execution_utils_8cpp.xhtml">NetworkExecutionUtils.cpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:31 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
