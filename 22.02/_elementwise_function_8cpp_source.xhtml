<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/workloads/ElementwiseFunction.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_elementwise_function_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ElementwiseFunction.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_elementwise_function_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_elementwise_function_8hpp.xhtml">ElementwiseFunction.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_broadcast_8hpp.xhtml">Broadcast.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_minimum_8hpp.xhtml">Minimum.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_maximum_8hpp.xhtml">Maximum.hpp</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_abs_8hpp.xhtml">Abs.hpp</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_exp_8hpp.xhtml">Exp.hpp</a>&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_log_8hpp.xhtml">Log.hpp</a>&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_rsqrt_8hpp.xhtml">Rsqrt.hpp</a>&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_sin_8hpp.xhtml">Sin.hpp</a>&quot;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_sqrt_8hpp.xhtml">Sqrt.hpp</a>&quot;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Functor&gt;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="structarmnn_1_1_elementwise_binary_function.xhtml#a12cf00d4ad8e7a82d40b10878fd91507">   23</a></span>&#160;<a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml#a12cf00d4ad8e7a82d40b10878fd91507">ElementwiseBinaryFunction&lt;Functor&gt;::ElementwiseBinaryFunction</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inShape0,</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inShape1,</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; outShape,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                                                              <a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;InType&gt;</a>&amp; inData0,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                                                              <a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;InType&gt;</a>&amp; inData1,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                                              <a class="code" href="classarmnn_1_1_encoder.xhtml">Encoder&lt;OutType&gt;</a>&amp; outData)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="structarmnn_1_1_broadcast_loop.xhtml">BroadcastLoop</a>(inShape0, inShape1, outShape).<a class="code" href="structarmnn_1_1_broadcast_loop.xhtml#ae9f47e12d6c2265d33fed54e88cf179f">Unroll</a>(Functor(), 0, inData0, inData1, outData);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Functor&gt;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="structarmnn_1_1_elementwise_unary_function.xhtml#a6cada5f35c3f1c582a2c8587ddf2b6c6">   34</a></span>&#160;<a class="code" href="structarmnn_1_1_elementwise_unary_function.xhtml#a6cada5f35c3f1c582a2c8587ddf2b6c6">ElementwiseUnaryFunction&lt;Functor&gt;::ElementwiseUnaryFunction</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inShape,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; outShape,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                                            <a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;InType&gt;</a>&amp; inData,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                                            <a class="code" href="classarmnn_1_1_encoder.xhtml">Encoder&lt;OutType&gt;</a>&amp; outData)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="structarmnn_1_1_broadcast_loop.xhtml">BroadcastLoop</a>(inShape, outShape).<a class="code" href="structarmnn_1_1_broadcast_loop.xhtml#ae9f47e12d6c2265d33fed54e88cf179f">Unroll</a>(Functor(), 0, inData, outData);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Functor&gt;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="structarmnn_1_1_logical_binary_function.xhtml#a1fe1e5953d737b0d996687eacebc2614">   43</a></span>&#160;<a class="code" href="structarmnn_1_1_logical_binary_function.xhtml#a1fe1e5953d737b0d996687eacebc2614">LogicalBinaryFunction&lt;Functor&gt;::LogicalBinaryFunction</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inShape0,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inShape1,</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; outShape,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                                      <a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;InType&gt;</a>&amp; inData0,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                                      <a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;InType&gt;</a>&amp; inData1,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                                      <a class="code" href="classarmnn_1_1_encoder.xhtml">Encoder&lt;OutType&gt;</a>&amp; outData)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="structarmnn_1_1_broadcast_loop.xhtml">BroadcastLoop</a>(inShape0, inShape1, outShape).<a class="code" href="structarmnn_1_1_broadcast_loop.xhtml#ae9f47e12d6c2265d33fed54e88cf179f">Unroll</a>(Functor(), 0, inData0, inData1, outData);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Functor&gt;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="structarmnn_1_1_logical_unary_function.xhtml#aa159c0aa6d1b9a6aedc8d9b30944898c">   54</a></span>&#160;<a class="code" href="structarmnn_1_1_logical_unary_function.xhtml#aa159c0aa6d1b9a6aedc8d9b30944898c">LogicalUnaryFunction&lt;Functor&gt;::LogicalUnaryFunction</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inShape,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; outShape,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                                    <a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;InType&gt;</a>&amp; inData,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                                    <a class="code" href="classarmnn_1_1_encoder.xhtml">Encoder&lt;OutType&gt;</a>&amp; outData)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="structarmnn_1_1_broadcast_loop.xhtml">BroadcastLoop</a>(inShape, outShape).<a class="code" href="structarmnn_1_1_broadcast_loop.xhtml#ae9f47e12d6c2265d33fed54e88cf179f">Unroll</a>(Functor(), 0, inData, outData);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;} <span class="comment">//namespace armnn</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::plus&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::minus&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::multiplies&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::divides&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;armnn::maximum&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;armnn::minimum&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::plus&lt;int32_t&gt;</a>&gt;;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::minus&lt;int32_t&gt;</a>&gt;;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::multiplies&lt;int32_t&gt;</a>&gt;;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::divides&lt;int32_t&gt;</a>&gt;;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;armnn::maximum&lt;int32_t&gt;</a>&gt;;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;armnn::minimum&lt;int32_t&gt;</a>&gt;;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">// Comparison</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::equal_to&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::greater&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::greater_equal&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::less&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::less_equal&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction&lt;std::not_equal_to&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">// Unary</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_unary_function.xhtml">armnn::ElementwiseUnaryFunction&lt;armnn::abs&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_unary_function.xhtml">armnn::ElementwiseUnaryFunction&lt;armnn::exp&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_unary_function.xhtml">armnn::ElementwiseUnaryFunction&lt;armnn::log&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_unary_function.xhtml">armnn::ElementwiseUnaryFunction&lt;std::negate&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_unary_function.xhtml">armnn::ElementwiseUnaryFunction&lt;armnn::rsqrt&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_unary_function.xhtml">armnn::ElementwiseUnaryFunction&lt;armnn::sin&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_elementwise_unary_function.xhtml">armnn::ElementwiseUnaryFunction&lt;armnn::sqrt&lt;float&gt;</a>&gt;;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">// Logical Unary</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_logical_unary_function.xhtml">armnn::LogicalUnaryFunction&lt;std::logical_not&lt;bool&gt;</a>&gt;;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_logical_binary_function.xhtml">armnn::LogicalBinaryFunction&lt;std::logical_and&lt;bool&gt;</a>&gt;;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">template</span> <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_logical_binary_function.xhtml">armnn::LogicalBinaryFunction&lt;std::logical_or&lt;bool&gt;</a>&gt;;</div><div class="ttc" id="_elementwise_function_8hpp_xhtml"><div class="ttname"><a href="_elementwise_function_8hpp.xhtml">ElementwiseFunction.hpp</a></div></div>
<div class="ttc" id="_broadcast_8hpp_xhtml"><div class="ttname"><a href="_broadcast_8hpp.xhtml">Broadcast.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_logical_binary_function_xhtml"><div class="ttname"><a href="structarmnn_1_1_logical_binary_function.xhtml">armnn::LogicalBinaryFunction</a></div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_function_8hpp_source.xhtml#l00041">ElementwiseFunction.hpp:41</a></div></div>
<div class="ttc" id="structarmnn_1_1_logical_binary_function_xhtml_a1fe1e5953d737b0d996687eacebc2614"><div class="ttname"><a href="structarmnn_1_1_logical_binary_function.xhtml#a1fe1e5953d737b0d996687eacebc2614">armnn::LogicalBinaryFunction::LogicalBinaryFunction</a></div><div class="ttdeci">LogicalBinaryFunction(const TensorShape &amp;inShape0, const TensorShape &amp;inShape1, const TensorShape &amp;outShape, Decoder&lt; InType &gt; &amp;inData0, Decoder&lt; InType &gt; &amp;inData1, Encoder&lt; OutType &gt; &amp;outData)</div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_function_8cpp_source.xhtml#l00043">ElementwiseFunction.cpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_encoder_xhtml"><div class="ttname"><a href="classarmnn_1_1_encoder.xhtml">armnn::Encoder</a></div><div class="ttdef"><b>Definition:</b> <a href="_base_iterator_8hpp_source.xhtml#l00054">BaseIterator.hpp:54</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_function_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_function.xhtml">armnn::ElementwiseUnaryFunction</a></div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_function_8hpp_source.xhtml#l00029">ElementwiseFunction.hpp:29</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="_sqrt_8hpp_xhtml"><div class="ttname"><a href="_sqrt_8hpp.xhtml">Sqrt.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_function_xhtml_a6cada5f35c3f1c582a2c8587ddf2b6c6"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_function.xhtml#a6cada5f35c3f1c582a2c8587ddf2b6c6">armnn::ElementwiseUnaryFunction::ElementwiseUnaryFunction</a></div><div class="ttdeci">ElementwiseUnaryFunction(const TensorShape &amp;inShape, const TensorShape &amp;outShape, Decoder&lt; InType &gt; &amp;inData, Encoder&lt; OutType &gt; &amp;outData)</div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_function_8cpp_source.xhtml#l00034">ElementwiseFunction.cpp:34</a></div></div>
<div class="ttc" id="_abs_8hpp_xhtml"><div class="ttname"><a href="_abs_8hpp.xhtml">Abs.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_broadcast_loop_xhtml"><div class="ttname"><a href="structarmnn_1_1_broadcast_loop.xhtml">armnn::BroadcastLoop</a></div><div class="ttdef"><b>Definition:</b> <a href="_broadcast_8hpp_source.xhtml#l00014">Broadcast.hpp:14</a></div></div>
<div class="ttc" id="_sin_8hpp_xhtml"><div class="ttname"><a href="_sin_8hpp.xhtml">Sin.hpp</a></div></div>
<div class="ttc" id="_exp_8hpp_xhtml"><div class="ttname"><a href="_exp_8hpp.xhtml">Exp.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_binary_function_xhtml_a12cf00d4ad8e7a82d40b10878fd91507"><div class="ttname"><a href="structarmnn_1_1_elementwise_binary_function.xhtml#a12cf00d4ad8e7a82d40b10878fd91507">armnn::ElementwiseBinaryFunction::ElementwiseBinaryFunction</a></div><div class="ttdeci">ElementwiseBinaryFunction(const TensorShape &amp;inShape0, const TensorShape &amp;inShape1, const TensorShape &amp;outShape, Decoder&lt; InType &gt; &amp;inData0, Decoder&lt; InType &gt; &amp;inData1, Encoder&lt; OutType &gt; &amp;outData)</div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_function_8cpp_source.xhtml#l00023">ElementwiseFunction.cpp:23</a></div></div>
<div class="ttc" id="_log_8hpp_xhtml"><div class="ttname"><a href="_log_8hpp.xhtml">Log.hpp</a></div></div>
<div class="ttc" id="_minimum_8hpp_xhtml"><div class="ttname"><a href="_minimum_8hpp.xhtml">Minimum.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_binary_function_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_binary_function.xhtml">armnn::ElementwiseBinaryFunction</a></div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_function_8hpp_source.xhtml#l00015">ElementwiseFunction.hpp:15</a></div></div>
<div class="ttc" id="_maximum_8hpp_xhtml"><div class="ttname"><a href="_maximum_8hpp.xhtml">Maximum.hpp</a></div></div>
<div class="ttc" id="_rsqrt_8hpp_xhtml"><div class="ttname"><a href="_rsqrt_8hpp.xhtml">Rsqrt.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_broadcast_loop_xhtml_ae9f47e12d6c2265d33fed54e88cf179f"><div class="ttname"><a href="structarmnn_1_1_broadcast_loop.xhtml#ae9f47e12d6c2265d33fed54e88cf179f">armnn::BroadcastLoop::Unroll</a></div><div class="ttdeci">void Unroll(Func operationFunc, unsigned int dimension, DecoderOp &amp;inData0, DecoderOp &amp;inData1, EncoderOp &amp;outData)</div><div class="ttdef"><b>Definition:</b> <a href="_broadcast_8hpp_source.xhtml#l00026">Broadcast.hpp:26</a></div></div>
<div class="ttc" id="structarmnn_1_1_logical_unary_function_xhtml"><div class="ttname"><a href="structarmnn_1_1_logical_unary_function.xhtml">armnn::LogicalUnaryFunction</a></div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_function_8hpp_source.xhtml#l00055">ElementwiseFunction.hpp:55</a></div></div>
<div class="ttc" id="structarmnn_1_1_logical_unary_function_xhtml_aa159c0aa6d1b9a6aedc8d9b30944898c"><div class="ttname"><a href="structarmnn_1_1_logical_unary_function.xhtml#aa159c0aa6d1b9a6aedc8d9b30944898c">armnn::LogicalUnaryFunction::LogicalUnaryFunction</a></div><div class="ttdeci">LogicalUnaryFunction(const TensorShape &amp;inShape, const TensorShape &amp;outShape, Decoder&lt; InType &gt; &amp;inData, Encoder&lt; OutType &gt; &amp;outData)</div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_function_8cpp_source.xhtml#l00054">ElementwiseFunction.cpp:54</a></div></div>
<div class="ttc" id="classarmnn_1_1_decoder_xhtml"><div class="ttname"><a href="classarmnn_1_1_decoder.xhtml">armnn::Decoder</a></div><div class="ttdef"><b>Definition:</b> <a href="_base_iterator_8hpp_source.xhtml#l00037">BaseIterator.hpp:37</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_d2f3b8e2e64df3181ebe92efcc0a3012.xhtml">workloads</a></li><li class="navelem"><a class="el" href="_elementwise_function_8cpp.xhtml">ElementwiseFunction.cpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:00:59 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
