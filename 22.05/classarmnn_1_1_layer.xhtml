<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: Layer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_layer.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classarmnn_1_1_layer-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Layer Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Layer:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_layer.png" usemap="#Layer_map" alt=""/>
  <map id="Layer_map" name="Layer_map">
<area href="classarmnn_1_1_i_connectable_layer.xhtml" title="Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. " alt="IConnectableLayer" shape="rect" coords="0,0,356,24"/>
<area href="classarmnn_1_1_abs_layer.xhtml" alt="AbsLayer" shape="rect" coords="366,112,722,136"/>
<area href="classarmnn_1_1_bindable_layer.xhtml" alt="BindableLayer" shape="rect" coords="366,168,722,192"/>
<area href="classarmnn_1_1_cast_layer.xhtml" title="This layer represents a cast operation. " alt="CastLayer" shape="rect" coords="366,224,722,248"/>
<area href="classarmnn_1_1_constant_layer.xhtml" title="A layer that the constant data can be bound to. " alt="ConstantLayer" shape="rect" coords="366,280,722,304"/>
<area href="classarmnn_1_1_convert_bf16_to_fp32_layer.xhtml" title="This layer converts data type BFloat16 to Float32. " alt="ConvertBf16ToFp32Layer" shape="rect" coords="366,336,722,360"/>
<area href="classarmnn_1_1_convert_fp16_to_fp32_layer.xhtml" title="This layer converts data type Float 16 to Float 32. " alt="ConvertFp16ToFp32Layer" shape="rect" coords="366,392,722,416"/>
<area href="classarmnn_1_1_convert_fp32_to_bf16_layer.xhtml" title="This layer converts data type Float32 to BFloat16. " alt="ConvertFp32ToBf16Layer" shape="rect" coords="366,448,722,472"/>
<area href="classarmnn_1_1_convert_fp32_to_fp16_layer.xhtml" title="This layer converts data type Float 32 to Float 16. " alt="ConvertFp32ToFp16Layer" shape="rect" coords="366,504,722,528"/>
<area href="classarmnn_1_1_debug_layer.xhtml" title="This layer visualizes the data flowing through the network. " alt="DebugLayer" shape="rect" coords="366,560,722,584"/>
<area href="classarmnn_1_1_dequantize_layer.xhtml" title="This layer dequantizes the input tensor. " alt="DequantizeLayer" shape="rect" coords="366,616,722,640"/>
<area href="classarmnn_1_1_elementwise_base_layer.xhtml" title="NOTE: this is an abstract class to encapsulate the element wise operations, it does not implement: st..." alt="ElementwiseBaseLayer" shape="rect" coords="366,672,722,696"/>
<area href="classarmnn_1_1_floor_layer.xhtml" title="This layer represents a floor operation. " alt="FloorLayer" shape="rect" coords="366,728,722,752"/>
<area href="classarmnn_1_1_gather_nd_layer.xhtml" title="This layer represents a GatherNd operator. " alt="GatherNdLayer" shape="rect" coords="366,784,722,808"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; Parameters &gt;" shape="rect" coords="366,840,722,864"/>
<area href="classarmnn_1_1_map_layer.xhtml" title="This layer represents a memory copy operation. " alt="MapLayer" shape="rect" coords="366,896,722,920"/>
<area href="classarmnn_1_1_mem_copy_layer.xhtml" title="This layer represents a memory copy operation. " alt="MemCopyLayer" shape="rect" coords="366,952,722,976"/>
<area href="classarmnn_1_1_mem_import_layer.xhtml" title="This layer represents a memory import operation. " alt="MemImportLayer" shape="rect" coords="366,1008,722,1032"/>
<area href="classarmnn_1_1_merge_layer.xhtml" title="This layer dequantizes the input tensor. " alt="MergeLayer" shape="rect" coords="366,1064,722,1088"/>
<area href="classarmnn_1_1_prelu_layer.xhtml" alt="PreluLayer" shape="rect" coords="366,1120,722,1144"/>
<area href="classarmnn_1_1_quantized_lstm_layer.xhtml" title="This layer represents a QuantizedLstm operation. " alt="QuantizedLstmLayer" shape="rect" coords="366,1176,722,1200"/>
<area href="classarmnn_1_1_quantize_layer.xhtml" alt="QuantizeLayer" shape="rect" coords="366,1232,722,1256"/>
<area href="classarmnn_1_1_rank_layer.xhtml" alt="RankLayer" shape="rect" coords="366,1288,722,1312"/>
<area href="classarmnn_1_1_rsqrt_layer.xhtml" alt="RsqrtLayer" shape="rect" coords="366,1344,722,1368"/>
<area href="classarmnn_1_1_shape_layer.xhtml" alt="ShapeLayer" shape="rect" coords="366,1400,722,1424"/>
<area href="classarmnn_1_1_switch_layer.xhtml" title="This layer calculates both true and false outputs for input. " alt="SwitchLayer" shape="rect" coords="366,1456,722,1480"/>
<area href="classarmnn_1_1_unmap_layer.xhtml" title="This layer represents a memory copy operation. " alt="UnmapLayer" shape="rect" coords="366,1512,722,1536"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; ActivationDescriptor &gt;" shape="rect" coords="366,1568,722,1592"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; ArgMinMaxDescriptor &gt;" shape="rect" coords="366,1624,722,1648"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; BatchNormalizationDescriptor &gt;" shape="rect" coords="366,1680,722,1704"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; BatchToSpaceNdDescriptor &gt;" shape="rect" coords="366,1736,722,1760"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; ChannelShuffleDescriptor &gt;" shape="rect" coords="366,1792,722,1816"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; ComparisonDescriptor &gt;" shape="rect" coords="366,1848,722,1872"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; Convolution2dDescriptor &gt;" shape="rect" coords="366,1904,722,1928"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; Convolution3dDescriptor &gt;" shape="rect" coords="366,1960,722,1984"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; DepthToSpaceDescriptor &gt;" shape="rect" coords="366,2016,722,2040"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; DepthwiseConvolution2dDescriptor &gt;" shape="rect" coords="366,2072,722,2096"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; DetectionPostProcessDescriptor &gt;" shape="rect" coords="366,2128,722,2152"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; ElementwiseUnaryDescriptor &gt;" shape="rect" coords="366,2184,722,2208"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; FakeQuantizationDescriptor &gt;" shape="rect" coords="366,2240,722,2264"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; FillDescriptor &gt;" shape="rect" coords="366,2296,722,2320"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; FullyConnectedDescriptor &gt;" shape="rect" coords="366,2352,722,2376"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; GatherDescriptor &gt;" shape="rect" coords="366,2408,722,2432"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; InstanceNormalizationDescriptor &gt;" shape="rect" coords="366,2464,722,2488"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; L2NormalizationDescriptor &gt;" shape="rect" coords="366,2520,722,2544"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; LogicalBinaryDescriptor &gt;" shape="rect" coords="366,2576,722,2600"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; LogSoftmaxDescriptor &gt;" shape="rect" coords="366,2632,722,2656"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; LstmDescriptor &gt;" shape="rect" coords="366,2688,722,2712"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; MeanDescriptor &gt;" shape="rect" coords="366,2744,722,2768"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; NormalizationDescriptor &gt;" shape="rect" coords="366,2800,722,2824"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; OriginsDescriptor &gt;" shape="rect" coords="366,2856,722,2880"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; PadDescriptor &gt;" shape="rect" coords="366,2912,722,2936"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; PermuteDescriptor &gt;" shape="rect" coords="366,2968,722,2992"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; Pooling2dDescriptor &gt;" shape="rect" coords="366,3024,722,3048"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; Pooling3dDescriptor &gt;" shape="rect" coords="366,3080,722,3104"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; PreCompiledDescriptor &gt;" shape="rect" coords="366,3136,722,3160"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; QLstmDescriptor &gt;" shape="rect" coords="366,3192,722,3216"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; ReduceDescriptor &gt;" shape="rect" coords="366,3248,722,3272"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; ReshapeDescriptor &gt;" shape="rect" coords="366,3304,722,3328"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; ResizeDescriptor &gt;" shape="rect" coords="366,3360,722,3384"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; SliceDescriptor &gt;" shape="rect" coords="366,3416,722,3440"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; SoftmaxDescriptor &gt;" shape="rect" coords="366,3472,722,3496"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; SpaceToBatchNdDescriptor &gt;" shape="rect" coords="366,3528,722,3552"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; SpaceToDepthDescriptor &gt;" shape="rect" coords="366,3584,722,3608"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; StackDescriptor &gt;" shape="rect" coords="366,3640,722,3664"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; StandInDescriptor &gt;" shape="rect" coords="366,3696,722,3720"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; StridedSliceDescriptor &gt;" shape="rect" coords="366,3752,722,3776"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; TransposeConvolution2dDescriptor &gt;" shape="rect" coords="366,3808,722,3832"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; TransposeDescriptor &gt;" shape="rect" coords="366,3864,722,3888"/>
<area href="classarmnn_1_1_layer_with_parameters.xhtml" alt="LayerWithParameters&lt; ViewsDescriptor &gt;" shape="rect" coords="366,3920,722,3944"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5e5ae420d199a0bccae5139d38c30205"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a5e5ae420d199a0bccae5139d38c30205">Layer</a> (unsigned int numInputSlots, unsigned int numOutputSlots, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> type, const char *name)</td></tr>
<tr class="separator:a5e5ae420d199a0bccae5139d38c30205"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a395d070748c18d903705799360088e80"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a395d070748c18d903705799360088e80">Layer</a> (unsigned int numInputSlots, unsigned int numOutputSlots, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> type, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> layout, const char *name)</td></tr>
<tr class="separator:a395d070748c18d903705799360088e80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46fc3fdd4b2a5dd6d184e57983cf20bc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">ExecuteStrategy</a> (<a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a> &amp;strategy) const override</td></tr>
<tr class="memdesc:a46fc3fdd4b2a5dd6d184e57983cf20bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply a visitor to this layer.  <a href="#a46fc3fdd4b2a5dd6d184e57983cf20bc">More...</a><br /></td></tr>
<tr class="separator:a46fc3fdd4b2a5dd6d184e57983cf20bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a97cb6d32661a57fc33bd29b8e41ff4"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a9a97cb6d32661a57fc33bd29b8e41ff4">GetNameStr</a> () const</td></tr>
<tr class="separator:a9a97cb6d32661a57fc33bd29b8e41ff4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2c0edc7ea62a8baaec4d3d9b2b09256"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">GetOutputHandler</a> (unsigned int i=0) const</td></tr>
<tr class="separator:af2c0edc7ea62a8baaec4d3d9b2b09256"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d4e05c17647232c514cfe58ca80744a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a1d4e05c17647232c514cfe58ca80744a">GetOutputHandler</a> (unsigned int i=0)</td></tr>
<tr class="separator:a1d4e05c17647232c514cfe58ca80744a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3560e0733f829e5194887d014a133144"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a3560e0733f829e5194887d014a133144">GetShapeInferenceMethod</a> () const</td></tr>
<tr class="separator:a3560e0733f829e5194887d014a133144"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6f282c92535e2be398a9b350d4e2ee9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#ad6f282c92535e2be398a9b350d4e2ee9">GetAllowExpandedDims</a> () const</td></tr>
<tr class="separator:ad6f282c92535e2be398a9b350d4e2ee9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5f530544d09a44d726f24702b67b35b"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#af5f530544d09a44d726f24702b67b35b">GetInputSlots</a> () const</td></tr>
<tr class="separator:af5f530544d09a44d726f24702b67b35b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98cdff4e0b45f4c80bfcedaf926e16e0"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a98cdff4e0b45f4c80bfcedaf926e16e0">GetOutputSlots</a> () const</td></tr>
<tr class="separator:a98cdff4e0b45f4c80bfcedaf926e16e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6cb8de21ef0da269ec9b67755ae92a0"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#af6cb8de21ef0da269ec9b67755ae92a0">BeginInputSlots</a> ()</td></tr>
<tr class="separator:af6cb8de21ef0da269ec9b67755ae92a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9752e12d6b79e18da1a25f76159d2a72"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a9752e12d6b79e18da1a25f76159d2a72">EndInputSlots</a> ()</td></tr>
<tr class="separator:a9752e12d6b79e18da1a25f76159d2a72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a817d4be6dd88f532d36f51748ec14185"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a817d4be6dd88f532d36f51748ec14185">BeginOutputSlots</a> ()</td></tr>
<tr class="separator:a817d4be6dd88f532d36f51748ec14185"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55f76d98fcd2f5cdac3e2b14536cb7ab"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a55f76d98fcd2f5cdac3e2b14536cb7ab">EndOutputSlots</a> ()</td></tr>
<tr class="separator:a55f76d98fcd2f5cdac3e2b14536cb7ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22485f444124128940e798a42f0b76d9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a22485f444124128940e798a42f0b76d9">IsOutputUnconnected</a> ()</td></tr>
<tr class="separator:a22485f444124128940e798a42f0b76d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac329cade047e952621b59a51a5d5f49"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aac329cade047e952621b59a51a5d5f49">ResetPriority</a> () const</td></tr>
<tr class="separator:aac329cade047e952621b59a51a5d5f49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af97a07195a67a638605b3c325763c2dd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a419086ecb4dc9d0f9e5d8933c87e2ea2">LayerPriority</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#af97a07195a67a638605b3c325763c2dd">GetPriority</a> () const</td></tr>
<tr class="separator:af97a07195a67a638605b3c325763c2dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8e15c530c929ab823d89ae9fd2d3f11"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a> () const override</td></tr>
<tr class="memdesc:ad8e15c530c929ab823d89ae9fd2d3f11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4" title="When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below...">armnn::LayerType</a> of this layer.  <a href="#ad8e15c530c929ab823d89ae9fd2d3f11">More...</a><br /></td></tr>
<tr class="separator:ad8e15c530c929ab823d89ae9fd2d3f11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea909c7327109228ef618d459015def3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a> () const</td></tr>
<tr class="separator:aea909c7327109228ef618d459015def3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdb1d37740e7a083b625d669588b6a0e"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#afdb1d37740e7a083b625d669588b6a0e">GetBackendId</a> () const</td></tr>
<tr class="separator:afdb1d37740e7a083b625d669588b6a0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f6ad59212fa8a47c9265162fff8a274"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a3f6ad59212fa8a47c9265162fff8a274">SetBackendId</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;id)</td></tr>
<tr class="separator:a3f6ad59212fa8a47c9265162fff8a274"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08d1e10a45f15cd0bd02557be35a3864"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a08d1e10a45f15cd0bd02557be35a3864">CreateWorkload</a> (const <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> &amp;factory) const =0</td></tr>
<tr class="separator:a08d1e10a45f15cd0bd02557be35a3864"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ff62126ec713a2708e5fbaa6146a7de"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a3ff62126ec713a2708e5fbaa6146a7de">CreateTensorHandles</a> (const <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;registry, const <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> &amp;factory, const bool IsMemoryManaged=true)</td></tr>
<tr class="separator:a3ff62126ec713a2708e5fbaa6146a7de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae89ff455503aa106d00bf34103d2f2e0"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#ae89ff455503aa106d00bf34103d2f2e0">Clone</a> (<a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph) const =0</td></tr>
<tr class="memdesc:ae89ff455503aa106d00bf34103d2f2e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a dynamically-allocated copy of this layer.  <a href="#ae89ff455503aa106d00bf34103d2f2e0">More...</a><br /></td></tr>
<tr class="separator:ae89ff455503aa106d00bf34103d2f2e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0607e36e88f38c34c71c663164b76776"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a0607e36e88f38c34c71c663164b76776">VerifyLayerConnections</a> (unsigned int expectedConnections, const <a class="el" href="structarmnn_1_1_check_location.xhtml">CheckLocation</a> &amp;location) const</td></tr>
<tr class="separator:a0607e36e88f38c34c71c663164b76776"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84ff600212ba26e665de9b978ec896a4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a84ff600212ba26e665de9b978ec896a4">ValidateTensorShapesFromInputs</a> ()=0</td></tr>
<tr class="separator:a84ff600212ba26e665de9b978ec896a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65ca562c882ad619684445a1402f415a"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a65ca562c882ad619684445a1402f415a">InferOutputShapes</a> (const std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &gt; &amp;inputShapes) const override</td></tr>
<tr class="memdesc:a65ca562c882ad619684445a1402f415a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Infer the shape of the output(s) based on the provided input shape(s)  <a href="#a65ca562c882ad619684445a1402f415a">More...</a><br /></td></tr>
<tr class="separator:a65ca562c882ad619684445a1402f415a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac04cd8de9b9185756eb02463ffd432b1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#ac04cd8de9b9185756eb02463ffd432b1">SerializeLayerParameters</a> (<a class="el" href="namespacearmnn.xhtml#a8c42c6647e31ebe525aeba878d133e45">ParameterStringifyFunction</a> &amp;fn) const</td></tr>
<tr class="memdesc:ac04cd8de9b9185756eb02463ffd432b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to serialize the layer parameters to string.  <a href="#ac04cd8de9b9185756eb02463ffd432b1">More...</a><br /></td></tr>
<tr class="separator:ac04cd8de9b9185756eb02463ffd432b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a339bef86bc340c3d1393ed83950fe8af"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a339bef86bc340c3d1393ed83950fe8af">ReleaseConstantData</a> ()</td></tr>
<tr class="separator:a339bef86bc340c3d1393ed83950fe8af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a386acff5f8430245239ce58d00ba7576"><td class="memTemplParams" colspan="2">template&lt;typename Op &gt; </td></tr>
<tr class="memitem:a386acff5f8430245239ce58d00ba7576"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a386acff5f8430245239ce58d00ba7576">OperateOnConstantTensors</a> (Op op)</td></tr>
<tr class="separator:a386acff5f8430245239ce58d00ba7576"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ddf0cf6f620d59c10e63495ace795d0"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a> () const override</td></tr>
<tr class="memdesc:a7ddf0cf6f620d59c10e63495ace795d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the name of the layer.  <a href="#a7ddf0cf6f620d59c10e63495ace795d0">More...</a><br /></td></tr>
<tr class="separator:a7ddf0cf6f620d59c10e63495ace795d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc0660dc440c8a285b456c9ef6383c26"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#abc0660dc440c8a285b456c9ef6383c26">GetNumInputSlots</a> () const override</td></tr>
<tr class="memdesc:abc0660dc440c8a285b456c9ef6383c26"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of connectable input slots.  <a href="#abc0660dc440c8a285b456c9ef6383c26">More...</a><br /></td></tr>
<tr class="separator:abc0660dc440c8a285b456c9ef6383c26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1594bddc87d6477df300317658f566bb"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">GetNumOutputSlots</a> () const override</td></tr>
<tr class="memdesc:a1594bddc87d6477df300317658f566bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of connectable output slots.  <a href="#a1594bddc87d6477df300317658f566bb">More...</a><br /></td></tr>
<tr class="separator:a1594bddc87d6477df300317658f566bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf8b8e23bf647836592982f97088d375"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a> (unsigned int index) const override</td></tr>
<tr class="memdesc:acf8b8e23bf647836592982f97088d375"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a const input slot handle by slot index.  <a href="#acf8b8e23bf647836592982f97088d375">More...</a><br /></td></tr>
<tr class="separator:acf8b8e23bf647836592982f97088d375"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b50eb1358cdf382f4bc3fc8849f8e8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a1b50eb1358cdf382f4bc3fc8849f8e8e">GetInputSlot</a> (unsigned int index) override</td></tr>
<tr class="memdesc:a1b50eb1358cdf382f4bc3fc8849f8e8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the input slot handle by slot index.  <a href="#a1b50eb1358cdf382f4bc3fc8849f8e8e">More...</a><br /></td></tr>
<tr class="separator:a1b50eb1358cdf382f4bc3fc8849f8e8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e36688a43c35668d8db5257274c68fe"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a> (unsigned int index=0) const override</td></tr>
<tr class="memdesc:a0e36688a43c35668d8db5257274c68fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the const output slot handle by slot index.  <a href="#a0e36688a43c35668d8db5257274c68fe">More...</a><br /></td></tr>
<tr class="separator:a0e36688a43c35668d8db5257274c68fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbd71844785bb2f00a81baca30ea5ff0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#abbd71844785bb2f00a81baca30ea5ff0">GetOutputSlot</a> (unsigned int index=0) override</td></tr>
<tr class="memdesc:abbd71844785bb2f00a81baca30ea5ff0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the output slot handle by slot index.  <a href="#abbd71844785bb2f00a81baca30ea5ff0">More...</a><br /></td></tr>
<tr class="separator:abbd71844785bb2f00a81baca30ea5ff0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d1024208b672a87ef2c1bfaf93d2b9f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a6d1024208b672a87ef2c1bfaf93d2b9f">SetGuid</a> (<a class="el" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid)</td></tr>
<tr class="separator:a6d1024208b672a87ef2c1bfaf93d2b9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dc12f0ee5b232d397bd18ced1a72a64"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">GetGuid</a> () const final</td></tr>
<tr class="memdesc:a8dc12f0ee5b232d397bd18ced1a72a64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the unique id of the layer.  <a href="#a8dc12f0ee5b232d397bd18ced1a72a64">More...</a><br /></td></tr>
<tr class="separator:a8dc12f0ee5b232d397bd18ced1a72a64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a339248d89d5e21534ecf74b4393ed4d2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a339248d89d5e21534ecf74b4393ed4d2">AddRelatedLayerName</a> (const std::string layerName)</td></tr>
<tr class="separator:a339248d89d5e21534ecf74b4393ed4d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e5520194ea4042fe07b0bf53c28f634"><td class="memItemLeft" align="right" valign="top">const std::list&lt; std::string &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a5e5520194ea4042fe07b0bf53c28f634">GetRelatedLayerNames</a> ()</td></tr>
<tr class="separator:a5e5520194ea4042fe07b0bf53c28f634"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72b18e4c5a403bc3fe2fecf20135c8d6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a72b18e4c5a403bc3fe2fecf20135c8d6">Reparent</a> (<a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;dest, std::list&lt; <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> *&gt;::const_iterator iterator)=0</td></tr>
<tr class="separator:a72b18e4c5a403bc3fe2fecf20135c8d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43a46eafee5c08787ab17b4342730c20"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a43a46eafee5c08787ab17b4342730c20">BackendSelectionHint</a> (<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; backend) final</td></tr>
<tr class="memdesc:a43a46eafee5c08787ab17b4342730c20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide a hint for the optimizer as to which backend to prefer for this layer.  <a href="#a43a46eafee5c08787ab17b4342730c20">More...</a><br /></td></tr>
<tr class="separator:a43a46eafee5c08787ab17b4342730c20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ff80e440308295056b57e2adaa42888"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a6ff80e440308295056b57e2adaa42888">GetBackendHint</a> () const</td></tr>
<tr class="separator:a6ff80e440308295056b57e2adaa42888"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a429abdfa769f4d48268938dcaea00904"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a429abdfa769f4d48268938dcaea00904">SetShapeInferenceMethod</a> (<a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a> shapeInferenceMethod)</td></tr>
<tr class="separator:a429abdfa769f4d48268938dcaea00904"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a328c9cf1c3abf2febcce4801ba706541"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a328c9cf1c3abf2febcce4801ba706541">SetAllowExpandedDims</a> (bool allowExpandedDims)</td></tr>
<tr class="separator:a328c9cf1c3abf2febcce4801ba706541"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefb14147290b6b928c5fc924ba035acc"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aefb14147290b6b928c5fc924ba035acc"><td class="memTemplItemLeft" align="right" valign="top">std::shared_ptr&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aefb14147290b6b928c5fc924ba035acc">GetAdditionalInformation</a> () const</td></tr>
<tr class="separator:aefb14147290b6b928c5fc924ba035acc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea1c8483ebeabc0dcbd9090b4f648f1d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aea1c8483ebeabc0dcbd9090b4f648f1d">SetAdditionalInfoForObject</a> (const <a class="el" href="namespacearmnn.xhtml#a2a5caf3721af872f43c7642fec9449bc">AdditionalInfoObjectPtr</a> &amp;additionalInfo)</td></tr>
<tr class="separator:aea1c8483ebeabc0dcbd9090b4f648f1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94a487f29157eeec10e2f9a372487bcc"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a94a487f29157eeec10e2f9a372487bcc">GetParameters</a> () const override</td></tr>
<tr class="memdesc:a94a487f29157eeec10e2f9a372487bcc"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the layer has a descriptor return it.  <a href="#a94a487f29157eeec10e2f9a372487bcc">More...</a><br /></td></tr>
<tr class="separator:a94a487f29157eeec10e2f9a372487bcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_connectable_layer"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_connectable_layer')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a></td></tr>
<tr class="memitem:a16f13e50f6de375ddf35d7b97d3f9728 inherit pub_methods_classarmnn_1_1_i_connectable_layer"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a16f13e50f6de375ddf35d7b97d3f9728">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;Accept is deprecated. The ILayerVisitor that works in conjunction with this &quot; &quot;Accept function is deprecated. Use <a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a> in combination with &quot; &quot;<a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac391db82733633b64fd53688d6e7c17a">ExecuteStrategy</a> <a class="el" href="namespacearmnn.xhtml#a546bd17050a4147165f295e365d56171">instead</a>, which is an ABI/API stable version of the &quot; &quot;visitor pattern.&quot;, &quot;22.05&quot;) virtual void Accept(ILayerVisitor &amp;visitor) const =0</td></tr>
<tr class="memdesc:a16f13e50f6de375ddf35d7b97d3f9728 inherit pub_methods_classarmnn_1_1_i_connectable_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Apply a visitor to this layer.  <a href="classarmnn_1_1_i_connectable_layer.xhtml#a16f13e50f6de375ddf35d7b97d3f9728">More...</a><br /></td></tr>
<tr class="separator:a16f13e50f6de375ddf35d7b97d3f9728 inherit pub_methods_classarmnn_1_1_i_connectable_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:aacfb208d750bdfce1bbd423e5cac76e2"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aacfb208d750bdfce1bbd423e5cac76e2">~Layer</a> ()=default</td></tr>
<tr class="separator:aacfb208d750bdfce1bbd423e5cac76e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc3239f5fc116259bf5451964e803646"><td class="memTemplParams" colspan="2">template&lt;typename QueueDescriptor &gt; </td></tr>
<tr class="memitem:afc3239f5fc116259bf5451964e803646"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#afc3239f5fc116259bf5451964e803646">CollectQueueDescriptorInputs</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;descriptor, <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:afc3239f5fc116259bf5451964e803646"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a499ca5a94d0174ed21786b6994b2cd8c"><td class="memTemplParams" colspan="2">template&lt;typename QueueDescriptor &gt; </td></tr>
<tr class="memitem:a499ca5a94d0174ed21786b6994b2cd8c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a499ca5a94d0174ed21786b6994b2cd8c">CollectQueueDescriptorOutputs</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;descriptor, <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a499ca5a94d0174ed21786b6994b2cd8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb2d638cc0e02c10075e015100996f2d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aeb2d638cc0e02c10075e015100996f2d">ValidateAndCopyShape</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;outputShape, const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;inferredShape, const <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a> shapeInferenceMethod, const std::string &amp;layerName, const unsigned int outputSlotIndex=0)</td></tr>
<tr class="separator:aeb2d638cc0e02c10075e015100996f2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a448afc716fda85394df1e8e5b7d530e8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a448afc716fda85394df1e8e5b7d530e8">VerifyShapeInferenceType</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;outputShape, <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a> shapeInferenceMethod)</td></tr>
<tr class="separator:a448afc716fda85394df1e8e5b7d530e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30a858b2b26d651a066537e499fbf40d"><td class="memTemplParams" colspan="2">template&lt;typename QueueDescriptor &gt; </td></tr>
<tr class="memitem:a30a858b2b26d651a066537e499fbf40d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a30a858b2b26d651a066537e499fbf40d">PrepInfoAndDesc</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;descriptor) const</td></tr>
<tr class="memdesc:a30a858b2b26d651a066537e499fbf40d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to reduce duplication in *Layer<a class="el" href="_elementwise_unary_test_impl_8hpp.xhtml#aa50938ed8f91e09acd4af904dcf5543a">CreateWorkload</a>.  <a href="#a30a858b2b26d651a066537e499fbf40d">More...</a><br /></td></tr>
<tr class="separator:a30a858b2b26d651a066537e499fbf40d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa10fd205c3f5469a9ecb2aa2a3ffd101"><td class="memTemplParams" colspan="2">template&lt;typename LayerType , typename ... Params&gt; </td></tr>
<tr class="memitem:aa10fd205c3f5469a9ecb2aa2a3ffd101"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aa10fd205c3f5469a9ecb2aa2a3ffd101">CloneBase</a> (<a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph, Params &amp;&amp;... params) const</td></tr>
<tr class="separator:aa10fd205c3f5469a9ecb2aa2a3ffd101"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a160bcee27e0c160959073bea90c98092"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#af978f897fb7e115a901cb7ed95f8e532">ConstantTensors</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#a160bcee27e0c160959073bea90c98092">GetConstantTensorsByRef</a> () override</td></tr>
<tr class="separator:a160bcee27e0c160959073bea90c98092"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7f0460d32511de0da525f1817d13e8c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#af7f0460d32511de0da525f1817d13e8c">SetAdditionalInfo</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;descriptor) const</td></tr>
<tr class="separator:af7f0460d32511de0da525f1817d13e8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_connectable_layer"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_connectable_layer')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a></td></tr>
<tr class="memitem:a8c7faf37c1d965431aaa02ae934d67ee inherit pro_methods_classarmnn_1_1_i_connectable_layer"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a8c7faf37c1d965431aaa02ae934d67ee">~IConnectableLayer</a> ()</td></tr>
<tr class="memdesc:a8c7faf37c1d965431aaa02ae934d67ee inherit pro_methods_classarmnn_1_1_i_connectable_layer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Objects are not deletable via the handle.  <a href="classarmnn_1_1_i_connectable_layer.xhtml#a8c7faf37c1d965431aaa02ae934d67ee">More...</a><br /></td></tr>
<tr class="separator:a8c7faf37c1d965431aaa02ae934d67ee inherit pro_methods_classarmnn_1_1_i_connectable_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ac7170f79bd0eadb1b6153e359c023cc0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a2a5caf3721af872f43c7642fec9449bc">AdditionalInfoObjectPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#ac7170f79bd0eadb1b6153e359c023cc0">m_AdditionalInfoObject</a></td></tr>
<tr class="separator:ac7170f79bd0eadb1b6153e359c023cc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa44d91037bba52ba0dec6577509ade3b"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#aa44d91037bba52ba0dec6577509ade3b">m_OutputHandlers</a></td></tr>
<tr class="separator:aa44d91037bba52ba0dec6577509ade3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe508761cc8318b15329ba4acf7fbfec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a></td></tr>
<tr class="separator:afe508761cc8318b15329ba4acf7fbfec"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:afab89afd724f1b07b1aaad6bdc61c47a"><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer.xhtml#afab89afd724f1b07b1aaad6bdc61c47a">Graph</a></td></tr>
<tr class="separator:afab89afd724f1b07b1aaad6bdc61c47a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classarmnn_1_1_i_connectable_layer"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarmnn_1_1_i_connectable_layer')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a></td></tr>
<tr class="memitem:af978f897fb7e115a901cb7ed95f8e532 inherit pub_types_classarmnn_1_1_i_connectable_layer"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#af978f897fb7e115a901cb7ed95f8e532">ConstantTensors</a> = std::vector&lt; std::reference_wrapper&lt; std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_const_tensor_handle.xhtml">ConstTensorHandle</a> &gt; &gt;&gt;</td></tr>
<tr class="separator:af978f897fb7e115a901cb7ed95f8e532 inherit pub_types_classarmnn_1_1_i_connectable_layer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00215">215</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a5e5ae420d199a0bccae5139d38c30205"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e5ae420d199a0bccae5139d38c30205">&#9670;&nbsp;</a></span>Layer() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numInputSlots</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numOutputSlots</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> name for the layer (may be nullptr). </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00247">247</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00243">Layer::GetInputSlots()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00420">Layer::m_OutputHandlers</a>, and <a class="el" href="_workload_data_collector_8hpp_source.xhtml#l00024">WorkloadDataCollector::Push()</a>.</p>
<div class="fragment"><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;: <a class="code" href="classarmnn_1_1_layer.xhtml#a5e5ae420d199a0bccae5139d38c30205">Layer</a>(numInputSlots, numOutputSlots, type, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>, name)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a5e5ae420d199a0bccae5139d38c30205"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a5e5ae420d199a0bccae5139d38c30205">armnn::Layer::Layer</a></div><div class="ttdeci">Layer(unsigned int numInputSlots, unsigned int numOutputSlots, LayerType type, const char *name)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00247">Layer.cpp:247</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a395d070748c18d903705799360088e80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a395d070748c18d903705799360088e80">&#9670;&nbsp;</a></span>Layer() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numInputSlots</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numOutputSlots</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00220">220</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="_layer_8hpp_source.xhtml#l00420">Layer::m_OutputHandlers</a>.</p>
<div class="fragment"><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;: <a class="code" href="classarmnn_1_1_layer.xhtml#aa44d91037bba52ba0dec6577509ade3b">m_OutputHandlers</a>(numOutputSlots)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;, <a class="code" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a>(<a class="code" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">ShapeInferenceMethod::ValidateOnly</a>)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;, m_LayerName(name ? name : <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;, m_Type(type)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;, m_BackendId()</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;, m_BackendHint(EmptyOptional())</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;, m_Guid(arm::pipe::IProfilingService::GetNextGuid())</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(layout);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    m_InputSlots.reserve(numInputSlots);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numInputSlots; ++i)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        m_InputSlots.emplace_back(*<span class="keyword">this</span>, i);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    m_OutputSlots.reserve(numOutputSlots);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numOutputSlots; ++i)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        m_OutputSlots.emplace_back(*<span class="keyword">this</span>, <a class="code" href="classarmnn_1_1_layer.xhtml#aa44d91037bba52ba0dec6577509ade3b">m_OutputHandlers</a>[i]);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1"><div class="ttname"><a href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ShapeInferenceMethod::ValidateOnly</a></div><div class="ttdoc">Validate all output shapes. </div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_aa44d91037bba52ba0dec6577509ade3b"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aa44d91037bba52ba0dec6577509ade3b">armnn::Layer::m_OutputHandlers</a></div><div class="ttdeci">std::vector&lt; OutputHandler &gt; m_OutputHandlers</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00420">Layer.hpp:420</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_afe508761cc8318b15329ba4acf7fbfec"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">armnn::Layer::m_ShapeInferenceMethod</a></div><div class="ttdeci">ShapeInferenceMethod m_ShapeInferenceMethod</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00421">Layer.hpp:421</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aacfb208d750bdfce1bbd423e5cac76e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacfb208d750bdfce1bbd423e5cac76e2">&#9670;&nbsp;</a></span>~Layer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a339248d89d5e21534ecf74b4393ed4d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a339248d89d5e21534ecf74b4393ed4d2">&#9670;&nbsp;</a></span>AddRelatedLayerName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void AddRelatedLayerName </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>layerName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00330">330</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;{ m_RelatedLayerNames.emplace_back(layerName); }</div></div><!-- fragment -->
</div>
</div>
<a id="a43a46eafee5c08787ab17b4342730c20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43a46eafee5c08787ab17b4342730c20">&#9670;&nbsp;</a></span>BackendSelectionHint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void BackendSelectionHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt;&#160;</td>
          <td class="paramname"><em>backend</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">final</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Provide a hint for the optimizer as to which backend to prefer for this layer. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a833170f92e96b3ef414b6cf6e5720d2b">IConnectableLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00336">336</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_optimizer_tests_8cpp_source.xhtml#l00306">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    {</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        m_BackendHint = backend;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="af6cb8de21ef0da269ec9b67755ae92a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6cb8de21ef0da269ec9b67755ae92a0">&#9670;&nbsp;</a></span>BeginInputSlots()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a>&gt;::iterator BeginInputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00247">247</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00012">CreateInputsFrom()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00138">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_convert_fp32_network_to_fp16_8hpp_source.xhtml#l00018">ConvertFp32NetworkToFp16Impl::Run()</a>, <a class="el" href="_move_transpose_up_8hpp_source.xhtml#l00023">MoveTransposeUpImpl::Run()</a>, and <a class="el" href="_move_permute_up_8hpp_source.xhtml#l00023">MovePermuteUpImpl::Run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;{ <span class="keywordflow">return</span> m_InputSlots.begin(); }</div></div><!-- fragment -->
</div>
</div>
<a id="a817d4be6dd88f532d36f51748ec14185"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a817d4be6dd88f532d36f51748ec14185">&#9670;&nbsp;</a></span>BeginOutputSlots()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a>&gt;::iterator BeginOutputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00251">251</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00027">Graph::Graph()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00243">armnn::InsertDebugLayerAfter()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00142">NeonBackend::OptimizeSubgraphView()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">ClBackend::OptimizeSubgraphView()</a>, <a class="el" href="_convert_fp32_network_to_fp16_8hpp_source.xhtml#l00018">ConvertFp32NetworkToFp16Impl::Run()</a>, <a class="el" href="_squash_equal_siblings_8hpp_source.xhtml#l00025">SquashEqualSiblingsImpl&lt; Comparable &gt;::Run()</a>, and <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00216">SplitterLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{ <span class="keywordflow">return</span> m_OutputSlots.begin(); }</div></div><!-- fragment -->
</div>
</div>
<a id="ae89ff455503aa106d00bf34103d2f2e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae89ff455503aa106d00bf34103d2f2e0">&#9670;&nbsp;</a></span>Clone()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a>* Clone </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a dynamically-allocated copy of this layer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">graph</td><td>- The <a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> into which this <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> is being cloned. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarmnn_1_1_q_lstm_layer.xhtml#ac1c16df49489aead2241b460f103f454">QLstmLayer</a>, <a class="el" href="classarmnn_1_1_quantized_lstm_layer.xhtml#a08edea9423b6da5da174ce5269f6e28b">QuantizedLstmLayer</a>, <a class="el" href="classarmnn_1_1_output_layer.xhtml#a4589aa51155f0836bee3c3ed85f47082">OutputLayer</a>, <a class="el" href="classarmnn_1_1_batch_normalization_layer.xhtml#a0a42b443052ed2114f9b8d8eac8bd7fd">BatchNormalizationLayer</a>, <a class="el" href="classarmnn_1_1_concat_layer.xhtml#aabac24cc08de52926e6bed5ffdc48dd8">ConcatLayer</a>, <a class="el" href="classarmnn_1_1_convolution2d_layer.xhtml#acf7bec8b795447d4b23e0339a6561044">Convolution2dLayer</a>, <a class="el" href="classarmnn_1_1_lstm_layer.xhtml#ac6b352652fb2f722e56f5fd62c57ae09">LstmLayer</a>, <a class="el" href="classarmnn_1_1_unidirectional_sequence_lstm_layer.xhtml#a88ce933cddc0e32e2f17fd699185b0eb">UnidirectionalSequenceLstmLayer</a>, <a class="el" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml#a6f56b4ee567a69e7daf2e9bd3053646c">DepthwiseConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_fully_connected_layer.xhtml#ae23412fdfc6726dc1823a18f5e84f8a9">FullyConnectedLayer</a>, <a class="el" href="classarmnn_1_1_splitter_layer.xhtml#a9e2089cbab017e13409f94da71d75770">SplitterLayer</a>, <a class="el" href="classarmnn_1_1_transpose_convolution2d_layer.xhtml#a0ad3ca858bd49041c1a5ce793312dcf8">TransposeConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_detection_post_process_layer.xhtml#a8d3b0c5e823f04841d74a2647e6a5246">DetectionPostProcessLayer</a>, <a class="el" href="classarmnn_1_1_pre_compiled_layer.xhtml#a3a08acd0b68fad7b8116e35c8702d23e">PreCompiledLayer</a>, <a class="el" href="classarmnn_1_1_convolution3d_layer.xhtml#aaa20b55aac06f7510f838b6fb5504426">Convolution3dLayer</a>, <a class="el" href="classarmnn_1_1_constant_layer.xhtml#a5340a3dbbc84afba95fe19d1c8b5fb04">ConstantLayer</a>, <a class="el" href="classarmnn_1_1_permute_layer.xhtml#af3fc26f602263fd5acbe5ff31e98da5b">PermuteLayer</a>, <a class="el" href="classarmnn_1_1_reshape_layer.xhtml#a089160274dcda58247b8a22dd1dddfa7">ReshapeLayer</a>, <a class="el" href="classarmnn_1_1_arg_min_max_layer.xhtml#a043d6257a58f7fee75b00d10006549b2">ArgMinMaxLayer</a>, <a class="el" href="classarmnn_1_1_comparison_layer.xhtml#abbb77b1ee8b485ccd194db4c983a6b07">ComparisonLayer</a>, <a class="el" href="classarmnn_1_1_depth_to_space_layer.xhtml#a1c96a186c37deb90b7f0dd223894fa30">DepthToSpaceLayer</a>, <a class="el" href="classarmnn_1_1_division_layer.xhtml#a4b6e34239c98d4c6363c83e0de44c19c">DivisionLayer</a>, <a class="el" href="classarmnn_1_1_elementwise_unary_layer.xhtml#ab25eba589122a31db3433851bdb77d14">ElementwiseUnaryLayer</a>, <a class="el" href="classarmnn_1_1_gather_layer.xhtml#a3a6486888f04bdb311ab04ce752082e4">GatherLayer</a>, <a class="el" href="classarmnn_1_1_logical_binary_layer.xhtml#a811ee0ce3856889aee26e1bc0ea2abc5">LogicalBinaryLayer</a>, <a class="el" href="classarmnn_1_1_log_softmax_layer.xhtml#a1ee115ea0c7522119fe3fa919094d856">LogSoftmaxLayer</a>, <a class="el" href="classarmnn_1_1_maximum_layer.xhtml#a045edc8bf3182c9763f622d69dcc5f63">MaximumLayer</a>, <a class="el" href="classarmnn_1_1_mean_layer.xhtml#a12a07b8514277e7db725c483e3ab6d03">MeanLayer</a>, <a class="el" href="classarmnn_1_1_minimum_layer.xhtml#a3f18bd606ab297e5aa4178c704d25f7c">MinimumLayer</a>, <a class="el" href="classarmnn_1_1_multiplication_layer.xhtml#a84886e4e27e7b3d775f9e5f53ef792d5">MultiplicationLayer</a>, <a class="el" href="classarmnn_1_1_pad_layer.xhtml#a3664d3e6f5555f990d8615fc512b1d66">PadLayer</a>, <a class="el" href="classarmnn_1_1_prelu_layer.xhtml#af5dd85c2adbf7e9f95d9c984157620a9">PreluLayer</a>, <a class="el" href="classarmnn_1_1_space_to_batch_nd_layer.xhtml#aa00f5b65b97ab5d525bcff625e85f2dc">SpaceToBatchNdLayer</a>, <a class="el" href="classarmnn_1_1_space_to_depth_layer.xhtml#a63f13ce7bafa57a2505563c83579d414">SpaceToDepthLayer</a>, <a class="el" href="classarmnn_1_1_stand_in_layer.xhtml#a7283be538a107c461d94f3e64d5dda42">StandInLayer</a>, <a class="el" href="classarmnn_1_1_subtraction_layer.xhtml#a8f5e68f921977058e5e1d9287b30b9b6">SubtractionLayer</a>, <a class="el" href="classarmnn_1_1_transpose_layer.xhtml#aeda9204b7b0de5754485ae03b1a7e55f">TransposeLayer</a>, <a class="el" href="classarmnn_1_1_abs_layer.xhtml#a0e4116c410fad8f9412b92919db9f709">AbsLayer</a>, <a class="el" href="classarmnn_1_1_addition_layer.xhtml#a841977670b8ce23be34e2c59b601261d">AdditionLayer</a>, <a class="el" href="classarmnn_1_1_batch_to_space_nd_layer.xhtml#acea3e9bebacf2e28a07c81803d87049a">BatchToSpaceNdLayer</a>, <a class="el" href="classarmnn_1_1_cast_layer.xhtml#a8a9b04139dde721b371ff2a16ee0221a">CastLayer</a>, <a class="el" href="classarmnn_1_1_convert_bf16_to_fp32_layer.xhtml#a3b570a90fbda1f4b789b97127809ef84">ConvertBf16ToFp32Layer</a>, <a class="el" href="classarmnn_1_1_convert_fp16_to_fp32_layer.xhtml#a284feab21ac5f71ff86b664e3c55c13d">ConvertFp16ToFp32Layer</a>, <a class="el" href="classarmnn_1_1_convert_fp32_to_bf16_layer.xhtml#a81aec1fcd067d6b4be4cee4b18e39d8d">ConvertFp32ToBf16Layer</a>, <a class="el" href="classarmnn_1_1_debug_layer.xhtml#aa516db393d0c0264fd7f5a0fe2d053b7">DebugLayer</a>, <a class="el" href="classarmnn_1_1_dequantize_layer.xhtml#a6a9cc35b8905d1a1819225d31a93d020">DequantizeLayer</a>, <a class="el" href="classarmnn_1_1_fake_quantization_layer.xhtml#a5dbcb10b38be8b8da9507005c970d601">FakeQuantizationLayer</a>, <a class="el" href="classarmnn_1_1_floor_layer.xhtml#acd412ed7f96e8b8db66250bba6f3d6ba">FloorLayer</a>, <a class="el" href="classarmnn_1_1_gather_nd_layer.xhtml#ac3733efe074cdaffa2ef42cadab39205">GatherNdLayer</a>, <a class="el" href="classarmnn_1_1_input_layer.xhtml#a55eb3d90093b47ba36a4c6467bbb975d">InputLayer</a>, <a class="el" href="classarmnn_1_1_instance_normalization_layer.xhtml#adb99489b451c28860024196ef2228700">InstanceNormalizationLayer</a>, <a class="el" href="classarmnn_1_1_l2_normalization_layer.xhtml#a5c7d477f65ced1cd35cb3381d3579393">L2NormalizationLayer</a>, <a class="el" href="classarmnn_1_1_map_layer.xhtml#a3e6903bd5df0d2b02ea174fe43cf5930">MapLayer</a>, <a class="el" href="classarmnn_1_1_mem_copy_layer.xhtml#a0df281cfac9339574aec2dce1a1631da">MemCopyLayer</a>, <a class="el" href="classarmnn_1_1_mem_import_layer.xhtml#a19f4f800a45aac9473090b85e147acc0">MemImportLayer</a>, <a class="el" href="classarmnn_1_1_merge_layer.xhtml#a1ff5e058af2623a5d1a8a5e1663821bd">MergeLayer</a>, <a class="el" href="classarmnn_1_1_normalization_layer.xhtml#a80b3bd0706d7333aa5f96dba6982b9a9">NormalizationLayer</a>, <a class="el" href="classarmnn_1_1_pooling2d_layer.xhtml#adf1236c5347b7e42a805289ac671e4e3">Pooling2dLayer</a>, <a class="el" href="classarmnn_1_1_pooling3d_layer.xhtml#ae338017bcff3dd4e1925e88e7ae89886">Pooling3dLayer</a>, <a class="el" href="classarmnn_1_1_reduce_layer.xhtml#a4de59b22933eabce862ae43fb24e0e1c">ReduceLayer</a>, <a class="el" href="classarmnn_1_1_resize_layer.xhtml#a4eb20df5c6b827ce8ae0d883d0cebcde">ResizeLayer</a>, <a class="el" href="classarmnn_1_1_rsqrt_layer.xhtml#a71a3d84b5820d9777ed92a570e4fb75b">RsqrtLayer</a>, <a class="el" href="classarmnn_1_1_shape_layer.xhtml#a5cd87ec92bac76b14887717f91c561e1">ShapeLayer</a>, <a class="el" href="classarmnn_1_1_slice_layer.xhtml#af58dcf66fc1339a693e4087791b6a0fc">SliceLayer</a>, <a class="el" href="classarmnn_1_1_softmax_layer.xhtml#a3df177d5eaa4d11373609991930ce3cd">SoftmaxLayer</a>, <a class="el" href="classarmnn_1_1_stack_layer.xhtml#ae4e60b5523a7a1db08e9c87915b5a88e">StackLayer</a>, <a class="el" href="classarmnn_1_1_strided_slice_layer.xhtml#aaa60bec8ce7cb41f20dd031b5e9ece03">StridedSliceLayer</a>, <a class="el" href="classarmnn_1_1_switch_layer.xhtml#a99c6c028dc7f110a2cc01a9e8e3966d1">SwitchLayer</a>, <a class="el" href="classarmnn_1_1_unmap_layer.xhtml#a9cd23ecd4029d174abed9b06002a347d">UnmapLayer</a>, <a class="el" href="classarmnn_1_1_activation_layer.xhtml#aa5206ffba99e78aa257977c30de096d8">ActivationLayer</a>, <a class="el" href="classarmnn_1_1_convert_fp32_to_fp16_layer.xhtml#a7c7e9daf8cb913b45086170030f387db">ConvertFp32ToFp16Layer</a>, <a class="el" href="classarmnn_1_1_fill_layer.xhtml#a35efb9d65e9a1d5b4663243eeeb4ae53">FillLayer</a>, <a class="el" href="classarmnn_1_1_quantize_layer.xhtml#ab5045fc8d66572ecba03096ced51a994">QuantizeLayer</a>, <a class="el" href="classarmnn_1_1_rank_layer.xhtml#ab5045fc8d66572ecba03096ced51a994">RankLayer</a>, and <a class="el" href="classarmnn_1_1_channel_shuffle_layer.xhtml#a8a444cb6b126e660b6543d9cd13705b4">ChannelShuffleLayer</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00027">Graph::Graph()</a>.</p>

</div>
</div>
<a id="aa10fd205c3f5469a9ecb2aa2a3ffd101"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa10fd205c3f5469a9ecb2aa2a3ffd101">&#9670;&nbsp;</a></span>CloneBase()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> * CloneBase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Params &amp;&amp;...&#160;</td>
          <td class="paramname"><em>params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_clone_base_8hpp_source.xhtml#l00014">14</a> of file <a class="el" href="_layer_clone_base_8hpp_source.xhtml">LayerCloneBase.hpp</a>.</p>

<p class="reference">References <a class="el" href="_graph_8hpp_source.xhtml#l00425">Graph::AddLayer()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00340">Layer::GetBackendHint()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00275">Layer::GetBackendId()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00328">Layer::GetGuid()</a>, and <a class="el" href="_layer_8hpp_source.xhtml#l00421">Layer::m_ShapeInferenceMethod</a>.</p>
<div class="fragment"><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>* <span class="keyword">const</span> layer = graph.AddLayer&lt;<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>&gt;(std::forward&lt;Params&gt;(params)...);</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    layer-&gt;BackendSelectionHint(<a class="code" href="classarmnn_1_1_layer.xhtml#a6ff80e440308295056b57e2adaa42888">GetBackendHint</a>());</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    layer-&gt;SetBackendId(<a class="code" href="classarmnn_1_1_layer.xhtml#afdb1d37740e7a083b625d669588b6a0e">GetBackendId</a>());</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    layer-&gt;SetGuid(<a class="code" href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">GetGuid</a>());</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    layer-&gt;SetShapeInferenceMethod(<a class="code" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a>);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    layer-&gt;SetAllowExpandedDims(m_AllowExpandedDims);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keywordflow">return</span> layer;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a6ff80e440308295056b57e2adaa42888"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a6ff80e440308295056b57e2adaa42888">armnn::Layer::GetBackendHint</a></div><div class="ttdeci">Optional&lt; BackendId &gt; GetBackendHint() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00340">Layer.hpp:340</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_afdb1d37740e7a083b625d669588b6a0e"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#afdb1d37740e7a083b625d669588b6a0e">armnn::Layer::GetBackendId</a></div><div class="ttdeci">const BackendId &amp; GetBackendId() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00275">Layer.hpp:275</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_afe508761cc8318b15329ba4acf7fbfec"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">armnn::Layer::m_ShapeInferenceMethod</a></div><div class="ttdeci">ShapeInferenceMethod m_ShapeInferenceMethod</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00421">Layer.hpp:421</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">armnn::LayerType</a></div><div class="ttdeci">LayerType</div><div class="ttdoc">When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below...</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00467">Types.hpp:467</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a8dc12f0ee5b232d397bd18ced1a72a64"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a8dc12f0ee5b232d397bd18ced1a72a64">armnn::Layer::GetGuid</a></div><div class="ttdeci">LayerGuid GetGuid() const final</div><div class="ttdoc">Returns the unique id of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00328">Layer.hpp:328</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afc3239f5fc116259bf5451964e803646"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc3239f5fc116259bf5451964e803646">&#9670;&nbsp;</a></span>CollectQueueDescriptorInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CollectQueueDescriptorInputs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00371">371</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">References <a class="el" href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00026">QueueDescriptor::m_Inputs</a>, and <a class="el" href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00018">WorkloadInfo::m_InputTensorInfos</a>.</p>
<div class="fragment"><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    {</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        WorkloadDataCollector dataCollector(descriptor.m_Inputs, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_InputTensorInfos);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        CollectWorkloadInputs(dataCollector);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a499ca5a94d0174ed21786b6994b2cd8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a499ca5a94d0174ed21786b6994b2cd8c">&#9670;&nbsp;</a></span>CollectQueueDescriptorOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CollectQueueDescriptorOutputs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00378">378</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">References <a class="el" href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00027">QueueDescriptor::m_Outputs</a>, and <a class="el" href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00019">WorkloadInfo::m_OutputTensorInfos</a>.</p>
<div class="fragment"><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    {</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        WorkloadDataCollector dataCollector(descriptor.m_Outputs, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_OutputTensorInfos);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        CollectWorkloadOutputs(dataCollector);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3ff62126ec713a2708e5fbaa6146a7de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ff62126ec713a2708e5fbaa6146a7de">&#9670;&nbsp;</a></span>CreateTensorHandles()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CreateTensorHandles </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;&#160;</td>
          <td class="paramname"><em>registry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>factory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_concat_layer.xhtml#a7763728321afb4eb0d1d00323c3e9121">ConcatLayer</a>, <a class="el" href="classarmnn_1_1_output_layer.xhtml#a9ee9b10188b7e77625fd56952477839d">OutputLayer</a>, and <a class="el" href="classarmnn_1_1_splitter_layer.xhtml#a7763728321afb4eb0d1d00323c3e9121">SplitterLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00279">279</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_output_handler_8cpp_source.xhtml#l00021">OutputHandler::CreateTensorHandles()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00039">TensorHandleFactoryRegistry::GetFactory()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00320">Layer::GetNumOutputSlots()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00230">Layer::GetOutputHandler()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00324">Layer::GetOutputSlot()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00205">OutputSlot::GetTensorHandleFactoryId()</a>, and <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00046">ITensorHandleFactory::LegacyFactoryId</a>.</p>
<div class="fragment"><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx=0; idx &lt; <a class="code" href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">GetNumOutputSlots</a>(); idx++)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        OutputSlot&amp; slot = <a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(idx);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> factoryId = slot.GetTensorHandleFactoryId();</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        OutputHandler&amp; handler = <a class="code" href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">GetOutputHandler</a>(idx);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">if</span> (factoryId == <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a9c95f90eb40e31f629e0e2947b8bc6f9">ITensorHandleFactory::LegacyFactoryId</a>)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            handler.CreateTensorHandles(workloadFactory, IsMemoryManaged);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        {</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            ITensorHandleFactory* handleFactory;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            handleFactory = registry.GetFactory(factoryId);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(handleFactory);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            handler.CreateTensorHandles(*handleFactory, IsMemoryManaged);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a1594bddc87d6477df300317658f566bb"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">armnn::Layer::GetNumOutputSlots</a></div><div class="ttdeci">unsigned int GetNumOutputSlots() const override</div><div class="ttdoc">Returns the number of connectable output slots. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00320">Layer.hpp:320</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_af2c0edc7ea62a8baaec4d3d9b2b09256"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">armnn::Layer::GetOutputHandler</a></div><div class="ttdeci">const OutputHandler &amp; GetOutputHandler(unsigned int i=0) const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00230">Layer.hpp:230</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml_a32f4aa6a7089d877af08928139c2c277"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">armnn::ITensorHandleFactory::FactoryId</a></div><div class="ttdeci">std::string FactoryId</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00045">ITensorHandleFactory.hpp:45</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a0e36688a43c35668d8db5257274c68fe"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">armnn::Layer::GetOutputSlot</a></div><div class="ttdeci">const OutputSlot &amp; GetOutputSlot(unsigned int index=0) const override</div><div class="ttdoc">Get the const output slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00324">Layer.hpp:324</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml_a9c95f90eb40e31f629e0e2947b8bc6f9"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a9c95f90eb40e31f629e0e2947b8bc6f9">armnn::ITensorHandleFactory::LegacyFactoryId</a></div><div class="ttdeci">static const FactoryId LegacyFactoryId</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00046">ITensorHandleFactory.hpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a08d1e10a45f15cd0bd02557be35a3864"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08d1e10a45f15cd0bd02557be35a3864">&#9670;&nbsp;</a></span>CreateWorkload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a>&gt; CreateWorkload </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>factory</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_q_lstm_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">QLstmLayer</a>, <a class="el" href="classarmnn_1_1_quantized_lstm_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">QuantizedLstmLayer</a>, <a class="el" href="classarmnn_1_1_batch_normalization_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">BatchNormalizationLayer</a>, <a class="el" href="classarmnn_1_1_convolution2d_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">Convolution2dLayer</a>, <a class="el" href="classarmnn_1_1_lstm_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">LstmLayer</a>, <a class="el" href="classarmnn_1_1_unidirectional_sequence_lstm_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">UnidirectionalSequenceLstmLayer</a>, <a class="el" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">DepthwiseConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_fully_connected_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">FullyConnectedLayer</a>, <a class="el" href="classarmnn_1_1_pre_compiled_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">PreCompiledLayer</a>, <a class="el" href="classarmnn_1_1_transpose_convolution2d_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">TransposeConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_detection_post_process_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">DetectionPostProcessLayer</a>, <a class="el" href="classarmnn_1_1_channel_shuffle_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ChannelShuffleLayer</a>, <a class="el" href="classarmnn_1_1_convolution3d_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">Convolution3dLayer</a>, <a class="el" href="classarmnn_1_1_constant_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ConstantLayer</a>, <a class="el" href="classarmnn_1_1_permute_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">PermuteLayer</a>, <a class="el" href="classarmnn_1_1_reshape_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ReshapeLayer</a>, <a class="el" href="classarmnn_1_1_arg_min_max_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ArgMinMaxLayer</a>, <a class="el" href="classarmnn_1_1_comparison_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ComparisonLayer</a>, <a class="el" href="classarmnn_1_1_depth_to_space_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">DepthToSpaceLayer</a>, <a class="el" href="classarmnn_1_1_division_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">DivisionLayer</a>, <a class="el" href="classarmnn_1_1_elementwise_unary_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ElementwiseUnaryLayer</a>, <a class="el" href="classarmnn_1_1_gather_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">GatherLayer</a>, <a class="el" href="classarmnn_1_1_logical_binary_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">LogicalBinaryLayer</a>, <a class="el" href="classarmnn_1_1_log_softmax_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">LogSoftmaxLayer</a>, <a class="el" href="classarmnn_1_1_maximum_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">MaximumLayer</a>, <a class="el" href="classarmnn_1_1_mean_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">MeanLayer</a>, <a class="el" href="classarmnn_1_1_minimum_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">MinimumLayer</a>, <a class="el" href="classarmnn_1_1_multiplication_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">MultiplicationLayer</a>, <a class="el" href="classarmnn_1_1_pad_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">PadLayer</a>, <a class="el" href="classarmnn_1_1_prelu_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">PreluLayer</a>, <a class="el" href="classarmnn_1_1_space_to_batch_nd_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">SpaceToBatchNdLayer</a>, <a class="el" href="classarmnn_1_1_space_to_depth_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">SpaceToDepthLayer</a>, <a class="el" href="classarmnn_1_1_stand_in_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">StandInLayer</a>, <a class="el" href="classarmnn_1_1_subtraction_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">SubtractionLayer</a>, <a class="el" href="classarmnn_1_1_transpose_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">TransposeLayer</a>, <a class="el" href="classarmnn_1_1_abs_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">AbsLayer</a>, <a class="el" href="classarmnn_1_1_addition_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">AdditionLayer</a>, <a class="el" href="classarmnn_1_1_batch_to_space_nd_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">BatchToSpaceNdLayer</a>, <a class="el" href="classarmnn_1_1_cast_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">CastLayer</a>, <a class="el" href="classarmnn_1_1_concat_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ConcatLayer</a>, <a class="el" href="classarmnn_1_1_convert_bf16_to_fp32_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ConvertBf16ToFp32Layer</a>, <a class="el" href="classarmnn_1_1_convert_fp16_to_fp32_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ConvertFp16ToFp32Layer</a>, <a class="el" href="classarmnn_1_1_convert_fp32_to_bf16_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ConvertFp32ToBf16Layer</a>, <a class="el" href="classarmnn_1_1_debug_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">DebugLayer</a>, <a class="el" href="classarmnn_1_1_dequantize_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">DequantizeLayer</a>, <a class="el" href="classarmnn_1_1_fake_quantization_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">FakeQuantizationLayer</a>, <a class="el" href="classarmnn_1_1_floor_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">FloorLayer</a>, <a class="el" href="classarmnn_1_1_gather_nd_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">GatherNdLayer</a>, <a class="el" href="classarmnn_1_1_input_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">InputLayer</a>, <a class="el" href="classarmnn_1_1_instance_normalization_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">InstanceNormalizationLayer</a>, <a class="el" href="classarmnn_1_1_l2_normalization_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">L2NormalizationLayer</a>, <a class="el" href="classarmnn_1_1_map_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">MapLayer</a>, <a class="el" href="classarmnn_1_1_mem_copy_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">MemCopyLayer</a>, <a class="el" href="classarmnn_1_1_mem_import_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">MemImportLayer</a>, <a class="el" href="classarmnn_1_1_merge_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">MergeLayer</a>, <a class="el" href="classarmnn_1_1_normalization_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">NormalizationLayer</a>, <a class="el" href="classarmnn_1_1_output_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">OutputLayer</a>, <a class="el" href="classarmnn_1_1_pooling2d_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">Pooling2dLayer</a>, <a class="el" href="classarmnn_1_1_pooling3d_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">Pooling3dLayer</a>, <a class="el" href="classarmnn_1_1_quantize_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">QuantizeLayer</a>, <a class="el" href="classarmnn_1_1_reduce_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ReduceLayer</a>, <a class="el" href="classarmnn_1_1_resize_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ResizeLayer</a>, <a class="el" href="classarmnn_1_1_rsqrt_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">RsqrtLayer</a>, <a class="el" href="classarmnn_1_1_shape_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ShapeLayer</a>, <a class="el" href="classarmnn_1_1_slice_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">SliceLayer</a>, <a class="el" href="classarmnn_1_1_softmax_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">SoftmaxLayer</a>, <a class="el" href="classarmnn_1_1_splitter_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">SplitterLayer</a>, <a class="el" href="classarmnn_1_1_stack_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">StackLayer</a>, <a class="el" href="classarmnn_1_1_strided_slice_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">StridedSliceLayer</a>, <a class="el" href="classarmnn_1_1_switch_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">SwitchLayer</a>, <a class="el" href="classarmnn_1_1_unmap_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">UnmapLayer</a>, <a class="el" href="classarmnn_1_1_activation_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ActivationLayer</a>, <a class="el" href="classarmnn_1_1_convert_fp32_to_fp16_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">ConvertFp32ToFp16Layer</a>, <a class="el" href="classarmnn_1_1_fill_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">FillLayer</a>, and <a class="el" href="classarmnn_1_1_rank_layer.xhtml#adfa912d0c4c6c00f1af2cbfa799572b7">RankLayer</a>.</p>

</div>
</div>
<a id="a9752e12d6b79e18da1a25f76159d2a72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9752e12d6b79e18da1a25f76159d2a72">&#9670;&nbsp;</a></span>EndInputSlots()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a>&gt;::iterator EndInputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00248">248</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00012">CreateInputsFrom()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00138">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_convert_fp32_network_to_fp16_8hpp_source.xhtml#l00018">ConvertFp32NetworkToFp16Impl::Run()</a>, <a class="el" href="_move_transpose_up_8hpp_source.xhtml#l00023">MoveTransposeUpImpl::Run()</a>, and <a class="el" href="_move_permute_up_8hpp_source.xhtml#l00023">MovePermuteUpImpl::Run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{ <span class="keywordflow">return</span> m_InputSlots.end(); }</div></div><!-- fragment -->
</div>
</div>
<a id="a55f76d98fcd2f5cdac3e2b14536cb7ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55f76d98fcd2f5cdac3e2b14536cb7ab">&#9670;&nbsp;</a></span>EndOutputSlots()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a>&gt;::iterator EndOutputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00252">252</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_utils_8cpp_source.xhtml#l00243">armnn::InsertDebugLayerAfter()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00142">NeonBackend::OptimizeSubgraphView()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">ClBackend::OptimizeSubgraphView()</a>, <a class="el" href="_convert_fp32_network_to_fp16_8hpp_source.xhtml#l00018">ConvertFp32NetworkToFp16Impl::Run()</a>, and <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00216">SplitterLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{ <span class="keywordflow">return</span> m_OutputSlots.end(); }</div></div><!-- fragment -->
</div>
</div>
<a id="a46fc3fdd4b2a5dd6d184e57983cf20bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46fc3fdd4b2a5dd6d184e57983cf20bc">&#9670;&nbsp;</a></span>ExecuteStrategy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ExecuteStrategy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a> &amp;&#160;</td>
          <td class="paramname"><em>strategy</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Apply a visitor to this layer. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac391db82733633b64fd53688d6e7c17a">IConnectableLayer</a>.</p>

<p>Reimplemented in <a class="el" href="classarmnn_1_1_bindable_layer.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">BindableLayer</a>, <a class="el" href="classarmnn_1_1_q_lstm_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">QLstmLayer</a>, <a class="el" href="classarmnn_1_1_quantized_lstm_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">QuantizedLstmLayer</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; Parameters &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; FakeQuantizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; SoftmaxDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; ReduceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; LogSoftmaxDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; PreCompiledDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; LstmDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; ChannelShuffleDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; BatchToSpaceNdDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; PermuteDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; SpaceToBatchNdDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; DepthToSpaceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; ReshapeDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; ElementwiseUnaryDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; GatherDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; SpaceToDepthDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; OriginsDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; ViewsDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; Pooling2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; Convolution2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; ActivationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; StandInDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; TransposeDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; StackDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; MeanDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; ComparisonDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; InstanceNormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; TransposeConvolution2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; BatchNormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; ArgMinMaxDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; LogicalBinaryDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; DetectionPostProcessDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; PadDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; Convolution3dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; L2NormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; FillDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; SliceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; DepthwiseConvolution2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; QLstmDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; NormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; FullyConnectedDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; StridedSliceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; ResizeDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">LayerWithParameters&lt; Pooling3dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_unidirectional_sequence_lstm_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">UnidirectionalSequenceLstmLayer</a>, <a class="el" href="classarmnn_1_1_convolution2d_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">Convolution2dLayer</a>, <a class="el" href="classarmnn_1_1_lstm_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">LstmLayer</a>, <a class="el" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">DepthwiseConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_fully_connected_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">FullyConnectedLayer</a>, <a class="el" href="classarmnn_1_1_transpose_convolution2d_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">TransposeConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_batch_normalization_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">BatchNormalizationLayer</a>, <a class="el" href="classarmnn_1_1_constant_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">ConstantLayer</a>, <a class="el" href="classarmnn_1_1_convolution3d_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">Convolution3dLayer</a>, <a class="el" href="classarmnn_1_1_shape_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">ShapeLayer</a>, <a class="el" href="classarmnn_1_1_detection_post_process_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">DetectionPostProcessLayer</a>, <a class="el" href="classarmnn_1_1_pre_compiled_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">PreCompiledLayer</a>, <a class="el" href="classarmnn_1_1_fake_quantization_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">FakeQuantizationLayer</a>, <a class="el" href="classarmnn_1_1_mem_copy_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">MemCopyLayer</a>, <a class="el" href="classarmnn_1_1_mem_import_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">MemImportLayer</a>, <a class="el" href="classarmnn_1_1_elementwise_base_layer.xhtml#a46fc3fdd4b2a5dd6d184e57983cf20bc">ElementwiseBaseLayer</a>, and <a class="el" href="classarmnn_1_1_rank_layer.xhtml#aa8678fecd6d84054895c67b8cf075daf">RankLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00536">536</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_strategy.xhtml#aad5bb4d8050fd428ff03ae6d81e3014c">IStrategy::ExecuteStrategy()</a>, and <a class="el" href="_layer_8hpp_source.xhtml#l00317">Layer::GetName()</a>.</p>
<div class="fragment"><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;{</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    strategy.ExecuteStrategy(<span class="keyword">this</span>, BaseDescriptor(), {}, <a class="code" href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a>());</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a7ddf0cf6f620d59c10e63495ace795d0"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">armnn::Layer::GetName</a></div><div class="ttdeci">const char * GetName() const override</div><div class="ttdoc">Returns the name of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00317">Layer.hpp:317</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aefb14147290b6b928c5fc924ba035acc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefb14147290b6b928c5fc924ba035acc">&#9670;&nbsp;</a></span>GetAdditionalInformation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;T&gt; GetAdditionalInformation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00353">353</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_backend_8cpp_source.xhtml#l00142">NeonBackend::OptimizeSubgraphView()</a>, and <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">ClBackend::OptimizeSubgraphView()</a>.</p>
<div class="fragment"><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordflow">return</span> std::static_pointer_cast&lt;T&gt;(<a class="code" href="classarmnn_1_1_layer.xhtml#ac7170f79bd0eadb1b6153e359c023cc0">m_AdditionalInfoObject</a>);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_ac7170f79bd0eadb1b6153e359c023cc0"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#ac7170f79bd0eadb1b6153e359c023cc0">armnn::Layer::m_AdditionalInfoObject</a></div><div class="ttdeci">AdditionalInfoObjectPtr m_AdditionalInfoObject</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00407">Layer.hpp:407</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad6f282c92535e2be398a9b350d4e2ee9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6f282c92535e2be398a9b350d4e2ee9">&#9670;&nbsp;</a></span>GetAllowExpandedDims()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool GetAllowExpandedDims </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00241">241</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_with_parameters_8hpp_source.xhtml#l00043">LayerWithParameters&lt; Pooling3dDescriptor &gt;::PrepInfoAndDesc()</a>.</p>
<div class="fragment"><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;{ <span class="keywordflow">return</span> m_AllowExpandedDims; };</div></div><!-- fragment -->
</div>
</div>
<a id="a6ff80e440308295056b57e2adaa42888"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ff80e440308295056b57e2adaa42888">&#9670;&nbsp;</a></span>GetBackendHint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt;<a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&gt; GetBackendHint </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00340">340</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l02868">NetworkImpl::AddPrecompiledLayer()</a>, and <a class="el" href="_layer_clone_base_8hpp_source.xhtml#l00014">Layer::CloneBase()</a>.</p>
<div class="fragment"><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;{ <span class="keywordflow">return</span> m_BackendHint; }</div></div><!-- fragment -->
</div>
</div>
<a id="afdb1d37740e7a083b625d669588b6a0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afdb1d37740e7a083b625d669588b6a0e">&#9670;&nbsp;</a></span>GetBackendId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetBackendId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00275">275</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00303">Graph::AddCompatibilityLayers()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01139">armnn::ApplyBackendOptimizations()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00654">armnn::AttemptBackendAssignment()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01512">armnn::CalculateEdgeStrategy()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01362">armnn::CalculateSlotOption()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01267">armnn::CalculateSlotOptionForInput()</a>, <a class="el" href="_layer_clone_base_8hpp_source.xhtml#l00014">Layer::CloneBase()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01850">LoadedNetwork::CreateWorkingMemHandle()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00620">LoadedNetwork::GetOutputTensorInfo()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01335">LoadedNetwork::ImportInputs()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01468">LoadedNetwork::ImportOutputs()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l02091">LoadedNetwork::RegisterDebugCallback()</a>, <a class="el" href="_permute_depthwise_conv2d_weights_8hpp_source.xhtml#l00023">PermuteDepthwiseConv2dWeightsImpl::Run()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01601">armnn::SelectTensorHandleStrategy()</a>, and <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;{ <span class="keywordflow">return</span> m_BackendId; }</div></div><!-- fragment -->
</div>
</div>
<a id="a160bcee27e0c160959073bea90c98092"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a160bcee27e0c160959073bea90c98092">&#9670;&nbsp;</a></span>GetConstantTensorsByRef()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#af978f897fb7e115a901cb7ed95f8e532">ConstantTensors</a> GetConstantTensorsByRef </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a4c2ceb86756bf870d10a9ebe6fe8e14e">IConnectableLayer</a>.</p>

<p>Reimplemented in <a class="el" href="classarmnn_1_1_q_lstm_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">QLstmLayer</a>, <a class="el" href="classarmnn_1_1_quantized_lstm_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">QuantizedLstmLayer</a>, <a class="el" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">DepthwiseConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_convolution2d_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">Convolution2dLayer</a>, <a class="el" href="classarmnn_1_1_unidirectional_sequence_lstm_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">UnidirectionalSequenceLstmLayer</a>, <a class="el" href="classarmnn_1_1_lstm_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">LstmLayer</a>, <a class="el" href="classarmnn_1_1_fully_connected_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">FullyConnectedLayer</a>, <a class="el" href="classarmnn_1_1_transpose_convolution2d_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">TransposeConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_constant_layer.xhtml#a8107df0f1cbbd67eaf174d9459f3669d">ConstantLayer</a>, <a class="el" href="classarmnn_1_1_batch_normalization_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">BatchNormalizationLayer</a>, and <a class="el" href="classarmnn_1_1_detection_post_process_layer.xhtml#abe659a5afa7523f5dbc04bcba9b31f1a">DetectionPostProcessLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00407">407</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;{<span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#af978f897fb7e115a901cb7ed95f8e532">ConstantTensors</a>(); };</div><div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_af978f897fb7e115a901cb7ed95f8e532"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#af978f897fb7e115a901cb7ed95f8e532">armnn::IConnectableLayer::ConstantTensors</a></div><div class="ttdeci">std::vector&lt; std::reference_wrapper&lt; std::shared_ptr&lt; ConstTensorHandle &gt; &gt;&gt; ConstantTensors</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00124">INetwork.hpp:124</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aea909c7327109228ef618d459015def3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea909c7327109228ef618d459015def3">&#9670;&nbsp;</a></span>GetDataType()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> GetDataType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00313">313</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00204">InputSlot::GetConnection()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00322">Layer::GetInputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00319">Layer::GetNumInputSlots()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00324">Layer::GetOutputSlot()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>, and <a class="el" href="_layer_8cpp_source.xhtml#l00092">OutputSlot::GetTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_convert_fp32_network_to_fp16_8hpp_source.xhtml#l00018">ConvertFp32NetworkToFp16Impl::Run()</a>, <a class="el" href="_convert_const_permute_layers_to_const_layers_8hpp_source.xhtml#l00020">ConvertConstPermuteLayersToConstLayers::Run()</a>, <a class="el" href="_fuse_batch_norm_8hpp_source.xhtml#l00027">FuseBatchNorm&lt; ConvLayer, ArmnnType, T &gt;::Run()</a>, <a class="el" href="_convert_fp32_network_to_bf16_8hpp_source.xhtml#l00048">ConvertFp32NetworkToBf16Impl::Run()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00127">IsFloat32Layer::Test()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00135">IsFloat16Layer::Test()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00143">IsBFloat16Layer::Test()</a>, and <a class="el" href="_optimizer_tests_8cpp_source.xhtml#l00306">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_layer.xhtml#abc0660dc440c8a285b456c9ef6383c26">GetNumInputSlots</a>() &gt; 0) <span class="comment">// Ignore the input layer.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0).<a class="code" href="classarmnn_1_1_input_slot.xhtml#a3153abb7c0c0a84629079b2fac7db54f">GetConnection</a>()-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>();</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    }</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>();</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_abc0660dc440c8a285b456c9ef6383c26"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#abc0660dc440c8a285b456c9ef6383c26">armnn::Layer::GetNumInputSlots</a></div><div class="ttdeci">unsigned int GetNumInputSlots() const override</div><div class="ttdoc">Returns the number of connectable input slots. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00319">Layer.hpp:319</a></div></div>
<div class="ttc" id="classarmnn_1_1_input_slot_xhtml_a3153abb7c0c0a84629079b2fac7db54f"><div class="ttname"><a href="classarmnn_1_1_input_slot.xhtml#a3153abb7c0c0a84629079b2fac7db54f">armnn::InputSlot::GetConnection</a></div><div class="ttdeci">const IOutputSlot * GetConnection() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00204">Layer.hpp:204</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_acf8b8e23bf647836592982f97088d375"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">armnn::Layer::GetInputSlot</a></div><div class="ttdeci">const InputSlot &amp; GetInputSlot(unsigned int index) const override</div><div class="ttdoc">Get a const input slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00322">Layer.hpp:322</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a0e36688a43c35668d8db5257274c68fe"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">armnn::Layer::GetOutputSlot</a></div><div class="ttdeci">const OutputSlot &amp; GetOutputSlot(unsigned int index=0) const override</div><div class="ttdoc">Get the const output slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00324">Layer.hpp:324</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a9943775a364fc4ab53b85ac88f311886"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">armnn::IOutputSlot::GetTensorInfo</a></div><div class="ttdeci">virtual const TensorInfo &amp; GetTensorInfo() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ada2ad7d1caeeb4ef6195c8925fad6a65"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">armnn::OutputSlot::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00092">Layer.cpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8dc12f0ee5b232d397bd18ced1a72a64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8dc12f0ee5b232d397bd18ced1a72a64">&#9670;&nbsp;</a></span>GetGuid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> GetGuid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">final</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the unique id of the layer. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">IConnectableLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00328">328</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_clone_base_8hpp_source.xhtml#l00014">Layer::CloneBase()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00020">DebugLayer::CreateWorkload()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00195">OutputSlot::GetOwningLayerGuid()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00142">NeonBackend::OptimizeSubgraphView()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">ClBackend::OptimizeSubgraphView()</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00120">Graph::SerializeToDot()</a>.</p>
<div class="fragment"><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;{ <span class="keywordflow">return</span> m_Guid; }</div></div><!-- fragment -->
</div>
</div>
<a id="acf8b8e23bf647836592982f97088d375"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf8b8e23bf647836592982f97088d375">&#9670;&nbsp;</a></span>GetInputSlot() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a>&amp; GetInputSlot </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a const input slot handle by slot index. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00322">322</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00298">armnn::ChainReduceLayers()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00020">DebugLayer::CreateWorkload()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00129">armnn::optimizations::pad_fold::FoldPadIntoLayer2dImpl()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00313">Layer::GetDataType()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00027">Graph::Graph()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00562">Graph::InferTensorInfos()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00048">InputSlot::Insert()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00138">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00177">armnn::InsertConvertFp32ToBf16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00210">armnn::InsertConvertFp32ToFp16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00243">armnn::InsertDebugLayerAfter()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00142">NeonBackend::OptimizeSubgraphView()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">ClBackend::OptimizeSubgraphView()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l02091">LoadedNetwork::RegisterDebugCallback()</a>, <a class="el" href="_convert_const_dequantisation_layers_to_const_layers_8hpp_source.xhtml#l00018">ConvertConstDequantisationLayersToConstLayersImpl::Run()</a>, <a class="el" href="_transpose_as_reshape_8hpp_source.xhtml#l00018">TransposeAsReshapeImpl::Run()</a>, <a class="el" href="_permute_as_reshape_8hpp_source.xhtml#l00018">PermuteAsReshapeImpl::Run()</a>, <a class="el" href="_optimize_consecutive_reshapes_8hpp_source.xhtml#l00019">OptimizeConsecutiveReshapesImpl::Run()</a>, <a class="el" href="_optimize_inverse_conversions_8hpp_source.xhtml#l00021">OptimizeInverseConversionsImpl::Run()</a>, <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_permute_depthwise_conv2d_weights_8hpp_source.xhtml#l00023">PermuteDepthwiseConv2dWeightsImpl::Run()</a>, <a class="el" href="_optimize_inverse_permutes_8hpp_source.xhtml#l00023">OptimizeInversePermutesImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_move_permute_up_8hpp_source.xhtml#l00023">MovePermuteUpImpl::Run()</a>, <a class="el" href="_move_transpose_up_8hpp_source.xhtml#l00023">MoveTransposeUpImpl::Run()</a>, <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00027">AddBroadcastReshapeLayerImpl::Run()</a>, <a class="el" href="_fuse_batch_norm_8hpp_source.xhtml#l00027">FuseBatchNorm&lt; ConvLayer, ArmnnType, T &gt;::Run()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00023">Convolution3dLayer::SerializeLayerParameters()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00029">DepthwiseConvolution2dLayer::SerializeLayerParameters()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00029">Convolution2dLayer::SerializeLayerParameters()</a>, <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00076">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00035">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00033">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00034">FillLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00034">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00043">ReduceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00034">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00063">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00034">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00037">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00037">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00034">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00045">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00035">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00034">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00034">CastLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00036">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00039">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00105">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00034">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00109">Pooling3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00034">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00033">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00063">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00036">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00037">ShapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00037">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00045">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00044">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00034">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00061">PadLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00035">ChannelShuffleLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00041">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00045">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00107">Convolution3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_nd_layer_8cpp_source.xhtml#l00078">GatherNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00074">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00074">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00099">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00062">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00064">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00058">LogicalBinaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00090">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00070">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00060">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00100">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00062">FullyConnectedLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00122">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00120">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00294">ConcatLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00170">UnidirectionalSequenceLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00168">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00052">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_output_layer_8cpp_source.xhtml#l00032">OutputLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00096">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00170">QLstmLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_layer_8cpp_source.xhtml#l00378">Layer::VerifyLayerConnections()</a>.</p>
<div class="fragment"><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;{ <span class="keywordflow">return</span> m_InputSlots.at(index); }</div></div><!-- fragment -->
</div>
</div>
<a id="a1b50eb1358cdf382f4bc3fc8849f8e8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b50eb1358cdf382f4bc3fc8849f8e8e">&#9670;&nbsp;</a></span>GetInputSlot() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a>&amp; GetInputSlot </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the input slot handle by slot index. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ae3fd4f909aec6a9e150ba82dfad4017f">IConnectableLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00323">323</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;{ <span class="keywordflow">return</span>  m_InputSlots.at(index); }</div></div><!-- fragment -->
</div>
</div>
<a id="af5f530544d09a44d726f24702b67b35b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5f530544d09a44d726f24702b67b35b">&#9670;&nbsp;</a></span>GetInputSlots()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;<a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a>&gt;&amp; GetInputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00243">243</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l00654">armnn::AttemptBackendAssignment()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01362">armnn::CalculateSlotOption()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00267">armnn::ForEachLayerInput()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00328">Layer::GetPriority()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01468">LoadedNetwork::ImportOutputs()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00247">Layer::Layer()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l02091">LoadedNetwork::RegisterDebugCallback()</a>, <a class="el" href="_convert_fp32_network_to_fp16_8hpp_source.xhtml#l00018">ConvertFp32NetworkToFp16Impl::Run()</a>, and <a class="el" href="_subgraph_view_tests_8cpp_source.xhtml#l00712">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;{ <span class="keywordflow">return</span> m_InputSlots; }</div></div><!-- fragment -->
</div>
</div>
<a id="a7ddf0cf6f620d59c10e63495ace795d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ddf0cf6f620d59c10e63495ace795d0">&#9670;&nbsp;</a></span>GetName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* GetName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the name of the layer. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#afcc1c3a20bd2860e0ddd21674389246f">IConnectableLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00317">317</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_rank_layer_8cpp_source.xhtml#l00046">RankLayer::Accept()</a>, <a class="el" href="_addition_layer_8cpp_source.xhtml#l00036">AdditionLayer::Accept()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00049">QuantizeLayer::Accept()</a>, <a class="el" href="_division_layer_8cpp_source.xhtml#l00036">DivisionLayer::Accept()</a>, <a class="el" href="_maximum_layer_8cpp_source.xhtml#l00035">MaximumLayer::Accept()</a>, <a class="el" href="_subtraction_layer_8cpp_source.xhtml#l00036">SubtractionLayer::Accept()</a>, <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00036">MinimumLayer::Accept()</a>, <a class="el" href="_multiplication_layer_8cpp_source.xhtml#l00036">MultiplicationLayer::Accept()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00049">ActivationLayer::Accept()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00055">FillLayer::Accept()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00106">ReduceLayer::Accept()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00050">SoftmaxLayer::Accept()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00050">InstanceNormalizationLayer::Accept()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00050">L2NormalizationLayer::Accept()</a>, <a class="el" href="_input_layer_8cpp_source.xhtml#l00039">InputLayer::Accept()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00056">SwitchLayer::Accept()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00050">DequantizeLayer::Accept()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00050">NormalizationLayer::Accept()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00051">AbsLayer::Accept()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00049">FloorLayer::Accept()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00052">RsqrtLayer::Accept()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00049">LogSoftmaxLayer::Accept()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00107">MeanLayer::Accept()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00062">MergeLayer::Accept()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00099">BatchToSpaceNdLayer::Accept()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00099">StackLayer::Accept()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00115">StridedSliceLayer::Accept()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00090">ArgMinMaxLayer::Accept()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00083">DetectionPostProcessLayer::Accept()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00121">Pooling2dLayer::Accept()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00125">Pooling3dLayer::Accept()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00059">ElementwiseUnaryLayer::Accept()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00093">GatherLayer::Accept()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00079">ResizeLayer::Accept()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00063">SliceLayer::Accept()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00087">SpaceToBatchNdLayer::Accept()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00081">SpaceToDepthLayer::Accept()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00076">LogicalBinaryLayer::Accept()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00079">DepthToSpaceLayer::Accept()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00078">ComparisonLayer::Accept()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00077">PadLayer::Accept()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00120">PreluLayer::Accept()</a>, <a class="el" href="_stand_in_layer_8cpp_source.xhtml#l00045">StandInLayer::Accept()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00075">BatchNormalizationLayer::Accept()</a>, <a class="el" href="_constant_layer_8cpp_source.xhtml#l00066">ConstantLayer::Accept()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00126">TransposeConvolution2dLayer::Accept()</a>, <a class="el" href="_output_layer_8cpp_source.xhtml#l00041">OutputLayer::Accept()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00245">SplitterLayer::Accept()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00150">DepthwiseConvolution2dLayer::Accept()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00085">FullyConnectedLayer::Accept()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00305">LstmLayer::Accept()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00322">ConcatLayer::Accept()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00147">Convolution2dLayer::Accept()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00057">ReshapeLayer::Accept()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00061">TransposeLayer::Accept()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00061">PermuteLayer::Accept()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00174">QuantizedLstmLayer::Accept()</a>, <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00307">QLstmLayer::Accept()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00303">Graph::AddCompatibilityLayers()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00030">ChannelShuffleLayer::Clone()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00028">RankLayer::Clone()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00029">QuantizeLayer::Clone()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00029">FillLayer::Clone()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00029">ConvertFp32ToFp16Layer::Clone()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00028">ActivationLayer::Clone()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00029">InstanceNormalizationLayer::Clone()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00029">SoftmaxLayer::Clone()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00029">L2NormalizationLayer::Clone()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00029">CastLayer::Clone()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00030">StackLayer::Clone()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00042">StridedSliceLayer::Clone()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00034">DebugLayer::Clone()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00027">SwitchLayer::Clone()</a>, <a class="el" href="_map_layer_8cpp_source.xhtml#l00022">MapLayer::Clone()</a>, <a class="el" href="_unmap_layer_8cpp_source.xhtml#l00022">UnmapLayer::Clone()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00028">DequantizeLayer::Clone()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00022">MemCopyLayer::Clone()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00022">MemImportLayer::Clone()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00025">MergeLayer::Clone()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00031">AbsLayer::Clone()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00029">NormalizationLayer::Clone()</a>, <a class="el" href="_input_layer_8cpp_source.xhtml#l00026">InputLayer::Clone()</a>, <a class="el" href="_addition_layer_8cpp_source.xhtml#l00030">AdditionLayer::Clone()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00035">Pooling2dLayer::Clone()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00035">Pooling3dLayer::Clone()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00030">ConvertFp32ToBf16Layer::Clone()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00030">ConvertBf16ToFp32Layer::Clone()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00029">FakeQuantizationLayer::Clone()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00030">ConvertFp16ToFp32Layer::Clone()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00029">FloorLayer::Clone()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00032">SliceLayer::Clone()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00033">ReduceLayer::Clone()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00034">ResizeLayer::Clone()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00031">RsqrtLayer::Clone()</a>, <a class="el" href="_gather_nd_layer_8cpp_source.xhtml#l00029">GatherNdLayer::Clone()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00032">ShapeLayer::Clone()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00039">BatchToSpaceNdLayer::Clone()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00037">SpaceToBatchNdLayer::Clone()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00038">SpaceToDepthLayer::Clone()</a>, <a class="el" href="_stand_in_layer_8cpp_source.xhtml#l00026">StandInLayer::Clone()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00031">PreluLayer::Clone()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00029">LogicalBinaryLayer::Clone()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00029">GatherLayer::Clone()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00036">DepthToSpaceLayer::Clone()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00033">TransposeLayer::Clone()</a>, <a class="el" href="_maximum_layer_8cpp_source.xhtml#l00029">MaximumLayer::Clone()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00031">ComparisonLayer::Clone()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00034">MeanLayer::Clone()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00032">ArgMinMaxLayer::Clone()</a>, <a class="el" href="_division_layer_8cpp_source.xhtml#l00030">DivisionLayer::Clone()</a>, <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00030">MinimumLayer::Clone()</a>, <a class="el" href="_multiplication_layer_8cpp_source.xhtml#l00030">MultiplicationLayer::Clone()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00029">LogSoftmaxLayer::Clone()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00032">PadLayer::Clone()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00029">ElementwiseUnaryLayer::Clone()</a>, <a class="el" href="_subtraction_layer_8cpp_source.xhtml#l00030">SubtractionLayer::Clone()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00030">ReshapeLayer::Clone()</a>, <a class="el" href="_constant_layer_8cpp_source.xhtml#l00030">ConstantLayer::Clone()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00033">PermuteLayer::Clone()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00056">Convolution3dLayer::Clone()</a>, <a class="el" href="_pre_compiled_layer_8cpp_source.xhtml#l00024">PreCompiledLayer::Clone()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00032">DetectionPostProcessLayer::Clone()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00043">TransposeConvolution2dLayer::Clone()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00197">SplitterLayer::Clone()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00038">FullyConnectedLayer::Clone()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00068">DepthwiseConvolution2dLayer::Clone()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00080">LstmLayer::Clone()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00199">ConcatLayer::Clone()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00080">UnidirectionalSequenceLstmLayer::Clone()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00068">Convolution2dLayer::Clone()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00040">BatchNormalizationLayer::Clone()</a>, <a class="el" href="_output_layer_8cpp_source.xhtml#l00027">OutputLayer::Clone()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00047">QuantizedLstmLayer::Clone()</a>, <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00081">QLstmLayer::Clone()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00052">RankLayer::ExecuteStrategy()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00092">ElementwiseBaseLayer::ExecuteStrategy()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00092">DetectionPostProcessLayer::ExecuteStrategy()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00070">ShapeLayer::ExecuteStrategy()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00135">Convolution3dLayer::ExecuteStrategy()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00092">BatchNormalizationLayer::ExecuteStrategy()</a>, <a class="el" href="_constant_layer_8cpp_source.xhtml#l00074">ConstantLayer::ExecuteStrategy()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00143">TransposeConvolution2dLayer::ExecuteStrategy()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00156">DepthwiseConvolution2dLayer::ExecuteStrategy()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00091">FullyConnectedLayer::ExecuteStrategy()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00516">LstmLayer::ExecuteStrategy()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00153">Convolution2dLayer::ExecuteStrategy()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00319">UnidirectionalSequenceLstmLayer::ExecuteStrategy()</a>, <a class="el" href="_layer_with_parameters_8hpp_source.xhtml#l00053">LayerWithParameters&lt; Pooling3dDescriptor &gt;::ExecuteStrategy()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00312">QuantizedLstmLayer::ExecuteStrategy()</a>, <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00539">QLstmLayer::ExecuteStrategy()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00536">Layer::ExecuteStrategy()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00129">armnn::optimizations::pad_fold::FoldPadIntoLayer2dImpl()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00023">ElementwiseBaseLayer::InferOutputShapes()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00562">Graph::InferTensorInfos()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00138">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00177">armnn::InsertConvertFp32ToBf16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00210">armnn::InsertConvertFp32ToFp16LayersAfter()</a>, <a class="el" href="_mock_backend_8cpp_source.xhtml#l00085">armnn::IsLayerOptimizable()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00142">NeonBackend::OptimizeSubgraphView()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">ClBackend::OptimizeSubgraphView()</a>, <a class="el" href="_permute_as_reshape_8hpp_source.xhtml#l00018">PermuteAsReshapeImpl::Run()</a>, <a class="el" href="_transpose_as_reshape_8hpp_source.xhtml#l00018">TransposeAsReshapeImpl::Run()</a>, <a class="el" href="_optimize_consecutive_reshapes_8hpp_source.xhtml#l00019">OptimizeConsecutiveReshapesImpl::Run()</a>, <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_fuse_batch_norm_8hpp_source.xhtml#l00027">FuseBatchNorm&lt; ConvLayer, ArmnnType, T &gt;::Run()</a>, <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>, and <a class="el" href="_observable_8cpp_source.xhtml#l00016">ErasedLayerNamesObservable::Update()</a>.</p>
<div class="fragment"><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;{ <span class="keywordflow">return</span> m_LayerName.c_str(); }</div></div><!-- fragment -->
</div>
</div>
<a id="a9a97cb6d32661a57fc33bd29b8e41ff4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a97cb6d32661a57fc33bd29b8e41ff4">&#9670;&nbsp;</a></span>GetNameStr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; GetNameStr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00225">225</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l00595">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00020">DebugLayer::CreateWorkload()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00620">LoadedNetwork::GetOutputTensorInfo()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00397">Layer::InferOutputShapes()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00243">armnn::InsertDebugLayerAfter()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00044">IsConnected()</a>, <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00027">AddBroadcastReshapeLayerImpl::Run()</a>, <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>, and <a class="el" href="_layer_8cpp_source.xhtml#l00378">Layer::VerifyLayerConnections()</a>.</p>
<div class="fragment"><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">return</span> m_LayerName;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="abc0660dc440c8a285b456c9ef6383c26"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc0660dc440c8a285b456c9ef6383c26">&#9670;&nbsp;</a></span>GetNumInputSlots()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumInputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of connectable input slots. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">IConnectableLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00319">319</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_8cpp_source.xhtml#l00028">armnn::AssertNumberOfInputSlots()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00034">CheckNumberOfInputSlot()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00313">Layer::GetDataType()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00397">Layer::InferOutputShapes()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00562">Graph::InferTensorInfos()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00138">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00063">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00294">ConcatLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_layer_8cpp_source.xhtml#l00378">Layer::VerifyLayerConnections()</a>.</p>
<div class="fragment"><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;{ <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(m_InputSlots.size()); }</div></div><!-- fragment -->
</div>
</div>
<a id="a1594bddc87d6477df300317658f566bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1594bddc87d6477df300317658f566bb">&#9670;&nbsp;</a></span>GetNumOutputSlots()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumOutputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of connectable output slots. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">IConnectableLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00320">320</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_8cpp_source.xhtml#l00159">OutputSlot::CalculateIndexOnOwner()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00039">CheckNumberOfOutputSlot()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00595">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00279">Layer::CreateTensorHandles()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00397">Layer::InferOutputShapes()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00048">InputSlot::Insert()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00177">armnn::InsertConvertFp32ToBf16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00210">armnn::InsertConvertFp32ToFp16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00243">armnn::InsertDebugLayerAfter()</a>, <a class="el" href="_convert_const_dequantisation_layers_to_const_layers_8hpp_source.xhtml#l00018">ConvertConstDequantisationLayersToConstLayersImpl::Run()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01601">armnn::SelectTensorHandleStrategy()</a>, <a class="el" href="_subgraph_view_tests_8cpp_source.xhtml#l00712">TEST_SUITE()</a>, <a class="el" href="_map_layer_8cpp_source.xhtml#l00037">MapLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unmap_layer_8cpp_source.xhtml#l00037">UnmapLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00039">DetectionPostProcessLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;{ <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(m_OutputSlots.size()); }</div></div><!-- fragment -->
</div>
</div>
<a id="af2c0edc7ea62a8baaec4d3d9b2b09256"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2c0edc7ea62a8baaec4d3d9b2b09256">&#9670;&nbsp;</a></span>GetOutputHandler() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a>&amp; GetOutputHandler </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>i</em> = <code>0</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00230">230</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_8cpp_source.xhtml#l00279">Layer::CreateTensorHandles()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00048">InputSlot::Insert()</a>, <a class="el" href="_transpose_as_reshape_8hpp_source.xhtml#l00018">TransposeAsReshapeImpl::Run()</a>, <a class="el" href="_permute_as_reshape_8hpp_source.xhtml#l00018">PermuteAsReshapeImpl::Run()</a>, <a class="el" href="_optimize_consecutive_reshapes_8hpp_source.xhtml#l00019">OptimizeConsecutiveReshapesImpl::Run()</a>, <a class="el" href="_move_permute_up_8hpp_source.xhtml#l00023">MovePermuteUpImpl::Run()</a>, <a class="el" href="_move_transpose_up_8hpp_source.xhtml#l00023">MoveTransposeUpImpl::Run()</a>, <a class="el" href="_move_permute_up_tests_8cpp_source.xhtml#l00012">TEST_SUITE()</a>, and <a class="el" href="_input_layer_8cpp_source.xhtml#l00031">InputLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer.xhtml#aa44d91037bba52ba0dec6577509ade3b">m_OutputHandlers</a>[i];</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_aa44d91037bba52ba0dec6577509ade3b"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#aa44d91037bba52ba0dec6577509ade3b">armnn::Layer::m_OutputHandlers</a></div><div class="ttdeci">std::vector&lt; OutputHandler &gt; m_OutputHandlers</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00420">Layer.hpp:420</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1d4e05c17647232c514cfe58ca80744a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d4e05c17647232c514cfe58ca80744a">&#9670;&nbsp;</a></span>GetOutputHandler() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a>&amp; GetOutputHandler </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>i</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00235">235</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span>OutputHandler&amp;<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span><span class="keyword">const </span><a class="code" href="classarmnn_1_1_layer.xhtml#a5e5ae420d199a0bccae5139d38c30205">Layer</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">GetOutputHandler</a>(i));</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a5e5ae420d199a0bccae5139d38c30205"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a5e5ae420d199a0bccae5139d38c30205">armnn::Layer::Layer</a></div><div class="ttdeci">Layer(unsigned int numInputSlots, unsigned int numOutputSlots, LayerType type, const char *name)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00247">Layer.cpp:247</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_af2c0edc7ea62a8baaec4d3d9b2b09256"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">armnn::Layer::GetOutputHandler</a></div><div class="ttdeci">const OutputHandler &amp; GetOutputHandler(unsigned int i=0) const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00230">Layer.hpp:230</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0e36688a43c35668d8db5257274c68fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e36688a43c35668d8db5257274c68fe">&#9670;&nbsp;</a></span>GetOutputSlot() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a>&amp; GetOutputSlot </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em> = <code>0</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the const output slot handle by slot index. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00324">324</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00303">Graph::AddCompatibilityLayers()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02036">NetworkImpl::AddConvolution2dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02089">NetworkImpl::AddDepthwiseConvolution2dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01948">NetworkImpl::AddFullyConnectedLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00654">armnn::AttemptBackendAssignment()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00159">OutputSlot::CalculateIndexOnOwner()</a>, <a class="el" href="_arm_compute_subgraph_utils_8hpp_source.xhtml#l00298">armnn::ChainReduceLayers()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00595">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00178">SplitterLayer::CreateTensorHandles()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00180">ConcatLayer::CreateTensorHandles()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00279">Layer::CreateTensorHandles()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00129">armnn::optimizations::pad_fold::FoldPadIntoLayer2dImpl()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00313">Layer::GetDataType()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00048">InputSlot::Insert()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00138">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00177">armnn::InsertConvertFp32ToBf16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00210">armnn::InsertConvertFp32ToFp16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00243">armnn::InsertDebugLayerAfter()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00044">IsConnected()</a>, <a class="el" href="_convert_const_dequantisation_layers_to_const_layers_8hpp_source.xhtml#l00018">ConvertConstDequantisationLayersToConstLayersImpl::Run()</a>, <a class="el" href="_permute_as_reshape_8hpp_source.xhtml#l00018">PermuteAsReshapeImpl::Run()</a>, <a class="el" href="_transpose_as_reshape_8hpp_source.xhtml#l00018">TransposeAsReshapeImpl::Run()</a>, <a class="el" href="_optimize_consecutive_reshapes_8hpp_source.xhtml#l00019">OptimizeConsecutiveReshapesImpl::Run()</a>, <a class="el" href="_convert_const_permute_layers_to_const_layers_8hpp_source.xhtml#l00020">ConvertConstPermuteLayersToConstLayers::Run()</a>, <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_optimize_inverse_conversions_8hpp_source.xhtml#l00021">OptimizeInverseConversionsImpl::Run()</a>, <a class="el" href="_move_permute_up_8hpp_source.xhtml#l00023">MovePermuteUpImpl::Run()</a>, <a class="el" href="_move_transpose_up_8hpp_source.xhtml#l00023">MoveTransposeUpImpl::Run()</a>, <a class="el" href="_optimize_inverse_permutes_8hpp_source.xhtml#l00023">OptimizeInversePermutesImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_permute_depthwise_conv2d_weights_8hpp_source.xhtml#l00023">PermuteDepthwiseConv2dWeightsImpl::Run()</a>, <a class="el" href="_fuse_batch_norm_8hpp_source.xhtml#l00027">FuseBatchNorm&lt; ConvLayer, ArmnnType, T &gt;::Run()</a>, <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00027">AddBroadcastReshapeLayerImpl::Run()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01601">armnn::SelectTensorHandleStrategy()</a>, <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00422">Layer::ValidateAndCopyShape()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00076">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00034">RankLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00035">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00033">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00034">FillLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00034">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00043">ReduceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00034">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00037">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00034">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00034">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00063">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00105">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00034">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00039">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00037">ShapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00035">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00037">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00045">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00034">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00034">CastLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00109">Pooling3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00034">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00033">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00063">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00036">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00036">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00037">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00045">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00061">PadLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00044">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00034">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00035">ChannelShuffleLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00045">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_constant_layer_8cpp_source.xhtml#l00045">ConstantLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00041">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00107">Convolution3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_nd_layer_8cpp_source.xhtml#l00078">GatherNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00039">DetectionPostProcessLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00074">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00074">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00099">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00070">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00058">LogicalBinaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00100">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00090">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00060">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00062">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00064">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00122">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00062">FullyConnectedLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00216">SplitterLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00120">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00294">ConcatLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00168">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00170">UnidirectionalSequenceLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00052">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00096">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00170">QLstmLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{ <span class="keywordflow">return</span> m_OutputSlots.at(index); }</div></div><!-- fragment -->
</div>
</div>
<a id="abbd71844785bb2f00a81baca30ea5ff0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbd71844785bb2f00a81baca30ea5ff0">&#9670;&nbsp;</a></span>GetOutputSlot() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a>&amp; GetOutputSlot </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the output slot handle by slot index. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a75bfde3503c1b21c397bb095f55db990">IConnectableLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00325">325</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;{ <span class="keywordflow">return</span> m_OutputSlots.at(index); }</div></div><!-- fragment -->
</div>
</div>
<a id="a98cdff4e0b45f4c80bfcedaf926e16e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98cdff4e0b45f4c80bfcedaf926e16e0">&#9670;&nbsp;</a></span>GetOutputSlots()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;<a class="el" href="classarmnn_1_1_output_slot.xhtml">OutputSlot</a>&gt;&amp; GetOutputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00244">244</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00303">Graph::AddCompatibilityLayers()</a>, <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00288">armnn::ForEachLayerOutput()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01335">LoadedNetwork::ImportInputs()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00063">Graph::Print()</a>, and <a class="el" href="_loaded_network_8cpp_source.xhtml#l02091">LoadedNetwork::RegisterDebugCallback()</a>.</p>
<div class="fragment"><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{ <span class="keywordflow">return</span> m_OutputSlots; }</div></div><!-- fragment -->
</div>
</div>
<a id="a94a487f29157eeec10e2f9a372487bcc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94a487f29157eeec10e2f9a372487bcc">&#9670;&nbsp;</a></span>GetParameters()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a>&amp; GetParameters </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If the layer has a descriptor return it. </p>
<p>The base descriptor can then be cast to the correct descriptor class. If the layer has no associated descriptor a struct of type <a class="el" href="structarmnn_1_1_null_descriptor.xhtml" title="Null Descriptor used as a return value from the IConnectableLayer GetParameters method by layers whic...">NullDescriptor</a> will be returned. Note: NullDescriptors can be detected because they return true when the <a class="el" href="structarmnn_1_1_base_descriptor.xhtml" title="Base class for all descriptors. ">BaseDescriptor</a> IsNull function is invoked. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a7ce723f9ed0cba4430ec1fc11daa4ce9">IConnectableLayer</a>.</p>

<p>Reimplemented in <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; Parameters &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; FakeQuantizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; SoftmaxDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; ReduceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; LogSoftmaxDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; PreCompiledDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; LstmDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; ChannelShuffleDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; BatchToSpaceNdDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; PermuteDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; SpaceToBatchNdDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; DepthToSpaceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; ReshapeDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; ElementwiseUnaryDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; GatherDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; SpaceToDepthDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; OriginsDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; ViewsDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; Pooling2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; Convolution2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; ActivationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; StandInDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; TransposeDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; StackDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; MeanDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; ComparisonDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; InstanceNormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; TransposeConvolution2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; BatchNormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; ArgMinMaxDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; LogicalBinaryDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; DetectionPostProcessDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; PadDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; Convolution3dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; L2NormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; FillDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; SliceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; DepthwiseConvolution2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; QLstmDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; NormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; FullyConnectedDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; StridedSliceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; ResizeDescriptor &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#afa3e8a8f23589b1eaddbe203825bbdcf">LayerWithParameters&lt; Pooling3dDescriptor &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00363">363</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;{ <span class="keywordflow">return</span> m_NullDescriptor; }</div></div><!-- fragment -->
</div>
</div>
<a id="af97a07195a67a638605b3c325763c2dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af97a07195a67a638605b3c325763c2dd">&#9670;&nbsp;</a></span>GetPriority()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a419086ecb4dc9d0f9e5d8933c87e2ea2">LayerPriority</a> GetPriority </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00328">328</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00243">Layer::GetInputSlots()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00118">OutputSlot::GetOwningLayer()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00328">Layer::GetPriority()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00271">Layer::GetType()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, and <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_8cpp_source.xhtml#l00328">Layer::GetPriority()</a>, and <a class="el" href="_squash_equal_siblings_8hpp_source.xhtml#l00025">SquashEqualSiblingsImpl&lt; Comparable &gt;::Run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;{</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    constexpr <a class="code" href="namespacearmnn.xhtml#a419086ecb4dc9d0f9e5d8933c87e2ea2">LayerPriority</a> inputPrio = std::numeric_limits&lt;LayerPriority&gt;::lowest();</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    constexpr <a class="code" href="namespacearmnn.xhtml#a419086ecb4dc9d0f9e5d8933c87e2ea2">LayerPriority</a> outputPrio = std::numeric_limits&lt;LayerPriority&gt;::max();</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a>)</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        m_Priority = inputPrio;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        m_Priority = outputPrio;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_Priority == 0)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keywordflow">if</span> (m_Visiting)</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        {</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            <span class="keywordflow">throw</span> GraphValidationException(<span class="stringliteral">&quot;Graph has circular dependencies: cannot walk&quot;</span>);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        }</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keyword">auto</span> maxPrio = [](<span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a419086ecb4dc9d0f9e5d8933c87e2ea2">LayerPriority</a> prio, <span class="keyword">const</span> InputSlot&amp; slot) -&gt; <a class="code" href="namespacearmnn.xhtml#a419086ecb4dc9d0f9e5d8933c87e2ea2">LayerPriority</a></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <span class="keyword">const</span> OutputSlot *outputSlot = slot.GetConnectedOutputSlot();</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                <span class="keywordflow">if</span> (outputSlot)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                {</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_layer.xhtml#a5e5ae420d199a0bccae5139d38c30205">Layer</a>&amp; input = outputSlot-&gt;GetOwningLayer();</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                    <span class="keywordflow">return</span> std::max(prio, input.GetPriority());</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                {</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    <span class="comment">// unconnected input slot</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                    <span class="keywordflow">return</span> prio;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                }</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            };</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        m_Visiting = <span class="keyword">true</span>;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a419086ecb4dc9d0f9e5d8933c87e2ea2">LayerPriority</a> parentPrio = std::accumulate(<a class="code" href="classarmnn_1_1_layer.xhtml#af5f530544d09a44d726f24702b67b35b">GetInputSlots</a>().cbegin(), <a class="code" href="classarmnn_1_1_layer.xhtml#af5f530544d09a44d726f24702b67b35b">GetInputSlots</a>().cend(), 0U, maxPrio);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        m_Visiting = <span class="keyword">false</span>;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">if</span> (parentPrio &gt;= outputPrio)</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">throw</span> GraphValidationException(<span class="stringliteral">&quot;Graph has too many edges&quot;</span>);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        }</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        m_Priority = parentPrio + 1U;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    }</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordflow">return</span> m_Priority;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a419086ecb4dc9d0f9e5d8933c87e2ea2"><div class="ttname"><a href="namespacearmnn.xhtml#a419086ecb4dc9d0f9e5d8933c87e2ea2">armnn::LayerPriority</a></div><div class="ttdeci">unsigned int LayerPriority</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00212">Layer.hpp:212</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_af5f530544d09a44d726f24702b67b35b"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#af5f530544d09a44d726f24702b67b35b">armnn::Layer::GetInputSlots</a></div><div class="ttdeci">const std::vector&lt; InputSlot &gt; &amp; GetInputSlots() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00243">Layer.hpp:243</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_ad8e15c530c929ab823d89ae9fd2d3f11"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const override</div><div class="ttdoc">Returns the armnn::LayerType of this layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00271">Layer.hpp:271</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a5e5ae420d199a0bccae5139d38c30205"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a5e5ae420d199a0bccae5139d38c30205">armnn::Layer::Layer</a></div><div class="ttdeci">Layer(unsigned int numInputSlots, unsigned int numOutputSlots, LayerType type, const char *name)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00247">Layer.cpp:247</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5e5520194ea4042fe07b0bf53c28f634"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e5520194ea4042fe07b0bf53c28f634">&#9670;&nbsp;</a></span>GetRelatedLayerNames()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::list&lt;std::string&gt;&amp; GetRelatedLayerNames </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00332">332</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_observable_8cpp_source.xhtml#l00016">ErasedLayerNamesObservable::Update()</a>.</p>
<div class="fragment"><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;{ <span class="keywordflow">return</span> m_RelatedLayerNames; }</div></div><!-- fragment -->
</div>
</div>
<a id="a3560e0733f829e5194887d014a133144"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3560e0733f829e5194887d014a133144">&#9670;&nbsp;</a></span>GetShapeInferenceMethod()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a> GetShapeInferenceMethod </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00240">240</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{ <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a>; };</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_afe508761cc8318b15329ba4acf7fbfec"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">armnn::Layer::m_ShapeInferenceMethod</a></div><div class="ttdeci">ShapeInferenceMethod m_ShapeInferenceMethod</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00421">Layer.hpp:421</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad8e15c530c929ab823d89ae9fd2d3f11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8e15c530c929ab823d89ae9fd2d3f11">&#9670;&nbsp;</a></span>GetType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> GetType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4" title="When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below...">armnn::LayerType</a> of this layer. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">IConnectableLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00271">271</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l01139">armnn::ApplyBackendOptimizations()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00028">armnn::AssertNumberOfInputSlots()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00654">armnn::AttemptBackendAssignment()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01512">armnn::CalculateEdgeStrategy()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01362">armnn::CalculateSlotOption()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01267">armnn::CalculateSlotOptionForInput()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00595">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00129">armnn::optimizations::pad_fold::FoldPadIntoLayer2dImpl()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00328">Layer::GetPriority()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01335">LoadedNetwork::ImportInputs()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01468">LoadedNetwork::ImportOutputs()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00023">ElementwiseBaseLayer::InferOutputShapes()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00397">Layer::InferOutputShapes()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00562">Graph::InferTensorInfos()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_reshape_layer_8hpp_source.xhtml#l00042">ReshapeLayer::IsEqual()</a>, <a class="el" href="_transpose_layer_8hpp_source.xhtml#l00055">TransposeLayer::IsEqual()</a>, <a class="el" href="_permute_layer_8hpp_source.xhtml#l00057">PermuteLayer::IsEqual()</a>, <a class="el" href="_transpose_layer_8hpp_source.xhtml#l00046">TransposeLayer::IsInverse()</a>, <a class="el" href="_permute_layer_8hpp_source.xhtml#l00048">PermuteLayer::IsInverse()</a>, <a class="el" href="est_utils_2_test_utils_8hpp_source.xhtml#l00016">IsLayerOfType()</a>, <a class="el" href="_mock_backend_8cpp_source.xhtml#l00060">armnn::IsLayerSupported()</a>, <a class="el" href="_neon_backend_8cpp_source.xhtml#l00142">NeonBackend::OptimizeSubgraphView()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">ClBackend::OptimizeSubgraphView()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l02091">LoadedNetwork::RegisterDebugCallback()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00580">armnn::ReturnWithError()</a>, <a class="el" href="_convert_fp32_network_to_fp16_8hpp_source.xhtml#l00018">ConvertFp32NetworkToFp16Impl::Run()</a>, <a class="el" href="_convert_const_dequantisation_layers_to_const_layers_8hpp_source.xhtml#l00018">ConvertConstDequantisationLayersToConstLayersImpl::Run()</a>, <a class="el" href="_add_debug_8hpp_source.xhtml#l00019">AddDebugImpl::Run()</a>, <a class="el" href="_optimize_consecutive_reshapes_8hpp_source.xhtml#l00019">OptimizeConsecutiveReshapesImpl::Run()</a>, <a class="el" href="_convert_const_permute_layers_to_const_layers_8hpp_source.xhtml#l00020">ConvertConstPermuteLayersToConstLayers::Run()</a>, <a class="el" href="_optimize_inverse_conversions_8hpp_source.xhtml#l00021">OptimizeInverseConversionsImpl::Run()</a>, <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_redirect_members_to_constant_inputs_8hpp_source.xhtml#l00023">RedirectMembersToConstantInputsImpl::Run()</a>, <a class="el" href="_move_permute_up_8hpp_source.xhtml#l00023">MovePermuteUpImpl::Run()</a>, <a class="el" href="_permute_depthwise_conv2d_weights_8hpp_source.xhtml#l00023">PermuteDepthwiseConv2dWeightsImpl::Run()</a>, <a class="el" href="_move_transpose_up_8hpp_source.xhtml#l00023">MoveTransposeUpImpl::Run()</a>, <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00027">AddBroadcastReshapeLayerImpl::Run()</a>, <a class="el" href="_fuse_batch_norm_8hpp_source.xhtml#l00027">FuseBatchNorm&lt; ConvLayer, ArmnnType, T &gt;::Run()</a>, <a class="el" href="_optimization_8hpp_source.xhtml#l00038">OptimizeForTypeImpl&lt; BaseType, OptimizeForConnectionImpl&lt; BaseType, ChildType, Wrapped &gt; &gt;::Run()</a>, <a class="el" href="_convert_fp32_network_to_bf16_8hpp_source.xhtml#l00048">ConvertFp32NetworkToBf16Impl::Run()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01601">armnn::SelectTensorHandleStrategy()</a>, <a class="el" href="_optimizer_tests_8cpp_source.xhtml#l00306">TEST_SUITE()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00076">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_layer_8cpp_source.xhtml#l00378">Layer::VerifyLayerConnections()</a>.</p>
<div class="fragment"><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{ <span class="keywordflow">return</span> m_Type; }</div></div><!-- fragment -->
</div>
</div>
<a id="a65ca562c882ad619684445a1402f415a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65ca562c882ad619684445a1402f415a">&#9670;&nbsp;</a></span>InferOutputShapes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &gt; InferOutputShapes </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputShapes</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Infer the shape of the output(s) based on the provided input shape(s) </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#aa6e3c075c888e7c16942a468a3aae33c">IConnectableLayer</a>.</p>

<p>Reimplemented in <a class="el" href="classarmnn_1_1_q_lstm_layer.xhtml#a65ca562c882ad619684445a1402f415a">QLstmLayer</a>, <a class="el" href="classarmnn_1_1_quantized_lstm_layer.xhtml#a65ca562c882ad619684445a1402f415a">QuantizedLstmLayer</a>, <a class="el" href="classarmnn_1_1_concat_layer.xhtml#a65ca562c882ad619684445a1402f415a">ConcatLayer</a>, <a class="el" href="classarmnn_1_1_convolution2d_layer.xhtml#a65ca562c882ad619684445a1402f415a">Convolution2dLayer</a>, <a class="el" href="classarmnn_1_1_lstm_layer.xhtml#a65ca562c882ad619684445a1402f415a">LstmLayer</a>, <a class="el" href="classarmnn_1_1_unidirectional_sequence_lstm_layer.xhtml#a65ca562c882ad619684445a1402f415a">UnidirectionalSequenceLstmLayer</a>, <a class="el" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml#a65ca562c882ad619684445a1402f415a">DepthwiseConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_fully_connected_layer.xhtml#a65ca562c882ad619684445a1402f415a">FullyConnectedLayer</a>, <a class="el" href="classarmnn_1_1_splitter_layer.xhtml#a65ca562c882ad619684445a1402f415a">SplitterLayer</a>, <a class="el" href="classarmnn_1_1_transpose_convolution2d_layer.xhtml#a65ca562c882ad619684445a1402f415a">TransposeConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_convolution3d_layer.xhtml#a65ca562c882ad619684445a1402f415a">Convolution3dLayer</a>, <a class="el" href="classarmnn_1_1_constant_layer.xhtml#a65ca562c882ad619684445a1402f415a">ConstantLayer</a>, <a class="el" href="classarmnn_1_1_permute_layer.xhtml#a65ca562c882ad619684445a1402f415a">PermuteLayer</a>, <a class="el" href="classarmnn_1_1_reshape_layer.xhtml#a65ca562c882ad619684445a1402f415a">ReshapeLayer</a>, <a class="el" href="classarmnn_1_1_pad_layer.xhtml#a65ca562c882ad619684445a1402f415a">PadLayer</a>, <a class="el" href="classarmnn_1_1_stand_in_layer.xhtml#a65ca562c882ad619684445a1402f415a">StandInLayer</a>, <a class="el" href="classarmnn_1_1_batch_to_space_nd_layer.xhtml#a65ca562c882ad619684445a1402f415a">BatchToSpaceNdLayer</a>, <a class="el" href="classarmnn_1_1_pooling2d_layer.xhtml#a65ca562c882ad619684445a1402f415a">Pooling2dLayer</a>, <a class="el" href="classarmnn_1_1_pooling3d_layer.xhtml#a65ca562c882ad619684445a1402f415a">Pooling3dLayer</a>, <a class="el" href="classarmnn_1_1_resize_layer.xhtml#a65ca562c882ad619684445a1402f415a">ResizeLayer</a>, <a class="el" href="classarmnn_1_1_shape_layer.xhtml#a65ca562c882ad619684445a1402f415a">ShapeLayer</a>, <a class="el" href="classarmnn_1_1_slice_layer.xhtml#a65ca562c882ad619684445a1402f415a">SliceLayer</a>, <a class="el" href="classarmnn_1_1_stack_layer.xhtml#a65ca562c882ad619684445a1402f415a">StackLayer</a>, <a class="el" href="classarmnn_1_1_transpose_layer.xhtml#a65ca562c882ad619684445a1402f415a">TransposeLayer</a>, <a class="el" href="classarmnn_1_1_merge_layer.xhtml#a65ca562c882ad619684445a1402f415a">MergeLayer</a>, <a class="el" href="classarmnn_1_1_comparison_layer.xhtml#a65ca562c882ad619684445a1402f415a">ComparisonLayer</a>, <a class="el" href="classarmnn_1_1_depth_to_space_layer.xhtml#a65ca562c882ad619684445a1402f415a">DepthToSpaceLayer</a>, <a class="el" href="classarmnn_1_1_logical_binary_layer.xhtml#a65ca562c882ad619684445a1402f415a">LogicalBinaryLayer</a>, <a class="el" href="classarmnn_1_1_prelu_layer.xhtml#a65ca562c882ad619684445a1402f415a">PreluLayer</a>, <a class="el" href="classarmnn_1_1_space_to_batch_nd_layer.xhtml#a65ca562c882ad619684445a1402f415a">SpaceToBatchNdLayer</a>, <a class="el" href="classarmnn_1_1_space_to_depth_layer.xhtml#a65ca562c882ad619684445a1402f415a">SpaceToDepthLayer</a>, <a class="el" href="classarmnn_1_1_arg_min_max_layer.xhtml#a65ca562c882ad619684445a1402f415a">ArgMinMaxLayer</a>, <a class="el" href="classarmnn_1_1_elementwise_unary_layer.xhtml#a65ca562c882ad619684445a1402f415a">ElementwiseUnaryLayer</a>, <a class="el" href="classarmnn_1_1_gather_layer.xhtml#a65ca562c882ad619684445a1402f415a">GatherLayer</a>, <a class="el" href="classarmnn_1_1_strided_slice_layer.xhtml#a65ca562c882ad619684445a1402f415a">StridedSliceLayer</a>, <a class="el" href="classarmnn_1_1_gather_nd_layer.xhtml#a65ca562c882ad619684445a1402f415a">GatherNdLayer</a>, and <a class="el" href="classarmnn_1_1_elementwise_base_layer.xhtml#a65ca562c882ad619684445a1402f415a">ElementwiseBaseLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00397">397</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00203">CHECK_LOCATION</a>, <a class="el" href="_internal_types_8cpp_source.xhtml#l00013">armnn::GetLayerTypeAsCString()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00225">Layer::GetNameStr()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00319">Layer::GetNumInputSlots()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00320">Layer::GetNumOutputSlots()</a>, and <a class="el" href="_layer_8hpp_source.xhtml#l00271">Layer::GetType()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00035">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00033">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00034">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00034">FillLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00034">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00036">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00037">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00037">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00035">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00034">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00034">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00034">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00034">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00033">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00034">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00034">CastLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00039">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00036">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00035">ChannelShuffleLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00034">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00052">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;{</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(<a class="code" href="classarmnn_1_1_layer.xhtml#abc0660dc440c8a285b456c9ef6383c26">GetNumInputSlots</a>() != 0);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(<a class="code" href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">GetNumOutputSlots</a>() != 0);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="comment">// By default we return what we got, meaning the output shape(s) are the same as the input(s).</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="comment">// This only works if the number of inputs and outputs are the same. Since we are in the Layer</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="comment">// base class, this means the implementation needs to be overridden in the specific layers for</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="comment">// the other cases. So the missing implementation justifies the UnimplementedException.</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_layer.xhtml#abc0660dc440c8a285b456c9ef6383c26">GetNumInputSlots</a>() != <a class="code" href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">GetNumOutputSlots</a>())</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    {</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordflow">throw</span> UnimplementedException(</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                fmt::format(<span class="stringliteral">&quot;Default implementation for InferOutputShapes can only be used for &quot;</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                            <span class="stringliteral">&quot;layers with the same number of input and output slots. This doesn&#39;t &quot;</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                            <span class="stringliteral">&quot;hold for {0} layer {1} (#inputs={2} #outputs={3}) {4}&quot;</span>,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                            <a class="code" href="namespacearmnn.xhtml#addb6b14dd1b632263ffe77430259a7c4">GetLayerTypeAsCString</a>(this-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a>()),</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                            <a class="code" href="classarmnn_1_1_layer.xhtml#a9a97cb6d32661a57fc33bd29b8e41ff4">GetNameStr</a>(),</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                            <a class="code" href="classarmnn_1_1_layer.xhtml#abc0660dc440c8a285b456c9ef6383c26">GetNumInputSlots</a>(),</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                            <a class="code" href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">GetNumOutputSlots</a>(),</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                            <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    }</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">return</span> inputShapes;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_abc0660dc440c8a285b456c9ef6383c26"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#abc0660dc440c8a285b456c9ef6383c26">armnn::Layer::GetNumInputSlots</a></div><div class="ttdeci">unsigned int GetNumInputSlots() const override</div><div class="ttdoc">Returns the number of connectable input slots. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00319">Layer.hpp:319</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a1594bddc87d6477df300317658f566bb"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">armnn::Layer::GetNumOutputSlots</a></div><div class="ttdeci">unsigned int GetNumOutputSlots() const override</div><div class="ttdoc">Returns the number of connectable output slots. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00320">Layer.hpp:320</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a9a97cb6d32661a57fc33bd29b8e41ff4"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a9a97cb6d32661a57fc33bd29b8e41ff4">armnn::Layer::GetNameStr</a></div><div class="ttdeci">const std::string &amp; GetNameStr() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00225">Layer.hpp:225</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_ad8e15c530c929ab823d89ae9fd2d3f11"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const override</div><div class="ttdoc">Returns the armnn::LayerType of this layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00271">Layer.hpp:271</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00203">Exceptions.hpp:203</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_addb6b14dd1b632263ffe77430259a7c4"><div class="ttname"><a href="namespacearmnn.xhtml#addb6b14dd1b632263ffe77430259a7c4">armnn::GetLayerTypeAsCString</a></div><div class="ttdeci">const char * GetLayerTypeAsCString(LayerType type)</div><div class="ttdef"><b>Definition:</b> <a href="_internal_types_8cpp_source.xhtml#l00013">InternalTypes.cpp:13</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a22485f444124128940e798a42f0b76d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22485f444124128940e798a42f0b76d9">&#9670;&nbsp;</a></span>IsOutputUnconnected()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsOutputUnconnected </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00255">255</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_optimization_8hpp_source.xhtml#l00084">OptimizeForConnectionImpl&lt; BaseType, ChildType, Wrapped &gt;::Run()</a>, and <a class="el" href="_optimization_8hpp_source.xhtml#l00136">OptimizeForExclusiveConnectionImpl&lt; BaseType, ChildType, Wrapped &gt;::Run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numConnections = 0;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; output : <a class="code" href="classarmnn_1_1_layer.xhtml#a98cdff4e0b45f4c80bfcedaf926e16e0">GetOutputSlots</a>())</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            numConnections += output.GetNumConnections();</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordflow">return</span> (<a class="code" href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">GetNumOutputSlots</a>() &gt; 0) &amp;&amp; (numConnections == 0);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a1594bddc87d6477df300317658f566bb"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a1594bddc87d6477df300317658f566bb">armnn::Layer::GetNumOutputSlots</a></div><div class="ttdeci">unsigned int GetNumOutputSlots() const override</div><div class="ttdoc">Returns the number of connectable output slots. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00320">Layer.hpp:320</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a98cdff4e0b45f4c80bfcedaf926e16e0"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a98cdff4e0b45f4c80bfcedaf926e16e0">armnn::Layer::GetOutputSlots</a></div><div class="ttdeci">const std::vector&lt; OutputSlot &gt; &amp; GetOutputSlots() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00244">Layer.hpp:244</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a386acff5f8430245239ce58d00ba7576"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a386acff5f8430245239ce58d00ba7576">&#9670;&nbsp;</a></span>OperateOnConstantTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void OperateOnConstantTensors </td>
          <td>(</td>
          <td class="paramtype">Op&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00304">304</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_8cpp_source.xhtml#l00304">Layer::ReleaseConstantData()</a>, and <a class="el" href="_convert_constants_8hpp_source.xhtml#l00114">ConvertConstants&lt; Converter, Predicate &gt;::Run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> constant : <a class="code" href="classarmnn_1_1_layer.xhtml#a160bcee27e0c160959073bea90c98092">GetConstantTensorsByRef</a>())</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        {</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keywordflow">if</span> (constant.get())</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                op(constant);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    };</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a160bcee27e0c160959073bea90c98092"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a160bcee27e0c160959073bea90c98092">armnn::Layer::GetConstantTensorsByRef</a></div><div class="ttdeci">virtual ConstantTensors GetConstantTensorsByRef() override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00407">Layer.hpp:407</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a30a858b2b26d651a066537e499fbf40d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30a858b2b26d651a066537e499fbf40d">&#9670;&nbsp;</a></span>PrepInfoAndDesc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> PrepInfoAndDesc </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Helper function to reduce duplication in *Layer<a class="el" href="_elementwise_unary_test_impl_8hpp.xhtml#aa50938ed8f91e09acd4af904dcf5543a">CreateWorkload</a>. </p>

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00394">394</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00021">ConvertFp32ToFp16Layer::CreateWorkload()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00020">RankLayer::CreateWorkload()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00022">AbsLayer::CreateWorkload()</a>, <a class="el" href="_addition_layer_8cpp_source.xhtml#l00022">AdditionLayer::CreateWorkload()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00024">ShapeLayer::CreateWorkload()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00022">RsqrtLayer::CreateWorkload()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00021">FloorLayer::CreateWorkload()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00027">MemCopyLayer::CreateWorkload()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00020">DebugLayer::CreateWorkload()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00027">MemImportLayer::CreateWorkload()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00022">ConvertBf16ToFp32Layer::CreateWorkload()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00019">DequantizeLayer::CreateWorkload()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00019">QuantizeLayer::CreateWorkload()</a>, <a class="el" href="_unmap_layer_8cpp_source.xhtml#l00027">UnmapLayer::CreateWorkload()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00021">CastLayer::CreateWorkload()</a>, <a class="el" href="_map_layer_8cpp_source.xhtml#l00027">MapLayer::CreateWorkload()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00019">SwitchLayer::CreateWorkload()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00022">ConvertFp16ToFp32Layer::CreateWorkload()</a>, <a class="el" href="_gather_nd_layer_8cpp_source.xhtml#l00021">GatherNdLayer::CreateWorkload()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00022">ConvertFp32ToBf16Layer::CreateWorkload()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00023">PreluLayer::CreateWorkload()</a>, <a class="el" href="_division_layer_8cpp_source.xhtml#l00022">DivisionLayer::CreateWorkload()</a>, <a class="el" href="_subtraction_layer_8cpp_source.xhtml#l00022">SubtractionLayer::CreateWorkload()</a>, <a class="el" href="_maximum_layer_8cpp_source.xhtml#l00021">MaximumLayer::CreateWorkload()</a>, <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00022">MinimumLayer::CreateWorkload()</a>, <a class="el" href="_multiplication_layer_8cpp_source.xhtml#l00022">MultiplicationLayer::CreateWorkload()</a>, <a class="el" href="_constant_layer_8cpp_source.xhtml#l00021">ConstantLayer::CreateWorkload()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00022">QuantizedLstmLayer::CreateWorkload()</a>, and <a class="el" href="_layer_with_parameters_8hpp_source.xhtml#l00043">LayerWithParameters&lt; Pooling3dDescriptor &gt;::PrepInfoAndDesc()</a>.</p>
<div class="fragment"><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    {</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        WorkloadInfo <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <a class="code" href="classarmnn_1_1_layer.xhtml#afc3239f5fc116259bf5451964e803646">CollectQueueDescriptorInputs</a>(descriptor, info);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <a class="code" href="classarmnn_1_1_layer.xhtml#a499ca5a94d0174ed21786b6994b2cd8c">CollectQueueDescriptorOutputs</a>(descriptor, info);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_afc3239f5fc116259bf5451964e803646"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#afc3239f5fc116259bf5451964e803646">armnn::Layer::CollectQueueDescriptorInputs</a></div><div class="ttdeci">void CollectQueueDescriptorInputs(QueueDescriptor &amp;descriptor, WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00371">Layer.hpp:371</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a499ca5a94d0174ed21786b6994b2cd8c"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a499ca5a94d0174ed21786b6994b2cd8c">armnn::Layer::CollectQueueDescriptorOutputs</a></div><div class="ttdeci">void CollectQueueDescriptorOutputs(QueueDescriptor &amp;descriptor, WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00378">Layer.hpp:378</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a339bef86bc340c3d1393ed83950fe8af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a339bef86bc340c3d1393ed83950fe8af">&#9670;&nbsp;</a></span>ReleaseConstantData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ReleaseConstantData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_constant_layer.xhtml#a49a08bdbd40e6913a9a3e1418aa1f43a">ConstantLayer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00304">304</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00304">Layer::OperateOnConstantTensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_release_constant_data_test_8cpp_source.xhtml#l00026">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// Now free up the static data.</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#a386acff5f8430245239ce58d00ba7576">OperateOnConstantTensors</a>([](std::shared_ptr&lt;ConstTensorHandle&gt;&amp; handle)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                 {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                     handle.reset();</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                 });</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a386acff5f8430245239ce58d00ba7576"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a386acff5f8430245239ce58d00ba7576">armnn::Layer::OperateOnConstantTensors</a></div><div class="ttdeci">void OperateOnConstantTensors(Op op)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00304">Layer.hpp:304</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a72b18e4c5a403bc3fe2fecf20135c8d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72b18e4c5a403bc3fe2fecf20135c8d6">&#9670;&nbsp;</a></span>Reparent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Reparent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::list&lt; <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> *&gt;::const_iterator&#160;</td>
          <td class="paramname"><em>iterator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_graph_8hpp_source.xhtml#l00115">Graph::operator=()</a>.</p>

</div>
</div>
<a id="aac329cade047e952621b59a51a5d5f49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac329cade047e952621b59a51a5d5f49">&#9670;&nbsp;</a></span>ResetPriority()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ResetPriority </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00322">322</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;{</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    m_Priority = 0;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    m_Visiting = <span class="keyword">false</span>;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac04cd8de9b9185756eb02463ffd432b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac04cd8de9b9185756eb02463ffd432b1">&#9670;&nbsp;</a></span>SerializeLayerParameters()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SerializeLayerParameters </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a8c42c6647e31ebe525aeba878d133e45">ParameterStringifyFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>fn</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Helper to serialize the layer parameters to string. </p>
<p>(currently used in DotSerializer and company). </p>

<p>Reimplemented in <a class="el" href="classarmnn_1_1_convolution2d_layer.xhtml#a2ca654770a1890f15e3c7aab98e434a5">Convolution2dLayer</a>, <a class="el" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml#a2ca654770a1890f15e3c7aab98e434a5">DepthwiseConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_convolution3d_layer.xhtml#a2ca654770a1890f15e3c7aab98e434a5">Convolution3dLayer</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; Parameters &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; FakeQuantizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; SoftmaxDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; ReduceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; LogSoftmaxDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; PreCompiledDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; LstmDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; ChannelShuffleDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; BatchToSpaceNdDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; PermuteDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; SpaceToBatchNdDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; DepthToSpaceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; ReshapeDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; ElementwiseUnaryDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; GatherDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; SpaceToDepthDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; OriginsDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; ViewsDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; Pooling2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; Convolution2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; ActivationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; StandInDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; TransposeDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; StackDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; MeanDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; ComparisonDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; InstanceNormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; TransposeConvolution2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; BatchNormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; ArgMinMaxDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; LogicalBinaryDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; DetectionPostProcessDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; PadDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; Convolution3dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; L2NormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; FillDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; SliceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; DepthwiseConvolution2dDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; QLstmDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; NormalizationDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; FullyConnectedDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; StridedSliceDescriptor &gt;</a>, <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; ResizeDescriptor &gt;</a>, and <a class="el" href="classarmnn_1_1_layer_with_parameters.xhtml#a2ca654770a1890f15e3c7aab98e434a5">LayerWithParameters&lt; Pooling3dDescriptor &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00505">505</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_internal_types_8cpp_source.xhtml#l00013">armnn::GetLayerTypeAsCString()</a>, and <a class="el" href="_serialize_layer_parameters_8hpp_source.xhtml#l00025">StringifyLayerParameters&lt; LayerParameter &gt;::Serialize()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_with_parameters_8hpp_source.xhtml#l00022">LayerWithParameters&lt; Pooling3dDescriptor &gt;::SerializeLayerParameters()</a>.</p>
<div class="fragment"><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;{</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    std::string guid = std::to_string(m_Guid);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    std::string layerType = <a class="code" href="namespacearmnn.xhtml#addb6b14dd1b632263ffe77430259a7c4">GetLayerTypeAsCString</a>(m_Type);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    std::string backendId = std::string(m_BackendId);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keywordflow">if</span> (!(guid.compare(<span class="stringliteral">&quot;&quot;</span>) == 0) &amp;&amp; !guid.empty())</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        fn(<span class="stringliteral">&quot;Guid&quot;</span>, guid);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    }</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keywordflow">if</span>(!(m_LayerName.compare(<span class="stringliteral">&quot;&quot;</span>) == 0) &amp;&amp; !m_LayerName.empty())</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    {</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        fn(<span class="stringliteral">&quot;LayerName&quot;</span>,m_LayerName);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    }</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordflow">if</span>(!(layerType.compare(<span class="stringliteral">&quot;&quot;</span>) == 0) &amp;&amp; !layerType.empty())</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    {</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        fn(<span class="stringliteral">&quot;LayerType&quot;</span>,layerType);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    }</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keywordflow">if</span>(!(backendId.compare(<span class="stringliteral">&quot;&quot;</span>) == 0) &amp;&amp; !backendId.empty())</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        fn(<span class="stringliteral">&quot;BackendID&quot;</span>,backendId);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    std::shared_ptr&lt;ActivationDescriptor&gt;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            activationDescPtr = GetAdditionalInformation&lt;ActivationDescriptor&gt;();</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keywordflow">if</span> (activationDescPtr)</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    {</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <a class="code" href="structarmnn_1_1_stringify_layer_parameters.xhtml#a84990e31a235f27cd3d7f3fc90fa0035">StringifyLayerParameters&lt;ActivationDescriptor&gt;::Serialize</a>(fn, *activationDescPtr.get());</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    }</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_stringify_layer_parameters_xhtml_a84990e31a235f27cd3d7f3fc90fa0035"><div class="ttname"><a href="structarmnn_1_1_stringify_layer_parameters.xhtml#a84990e31a235f27cd3d7f3fc90fa0035">armnn::StringifyLayerParameters::Serialize</a></div><div class="ttdeci">static void Serialize(ParameterStringifyFunction &amp;, const LayerParameter &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="_serialize_layer_parameters_8hpp_source.xhtml#l00025">SerializeLayerParameters.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_addb6b14dd1b632263ffe77430259a7c4"><div class="ttname"><a href="namespacearmnn.xhtml#addb6b14dd1b632263ffe77430259a7c4">armnn::GetLayerTypeAsCString</a></div><div class="ttdeci">const char * GetLayerTypeAsCString(LayerType type)</div><div class="ttdef"><b>Definition:</b> <a href="_internal_types_8cpp_source.xhtml#l00013">InternalTypes.cpp:13</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af7f0460d32511de0da525f1817d13e8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7f0460d32511de0da525f1817d13e8c">&#9670;&nbsp;</a></span>SetAdditionalInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAdditionalInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00274">274</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00028">QueueDescriptor::m_AdditionalInfoObject</a>, and <a class="el" href="_layer_8hpp_source.xhtml#l00407">Layer::m_AdditionalInfoObject</a>.</p>

<p class="reference">Referenced by <a class="el" href="_activation_layer_8cpp_source.xhtml#l00020">ActivationLayer::CreateWorkload()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00021">ConvertFp32ToFp16Layer::CreateWorkload()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00021">FillLayer::CreateWorkload()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00020">RankLayer::CreateWorkload()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00022">AbsLayer::CreateWorkload()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00020">DebugLayer::CreateWorkload()</a>, <a class="el" href="_map_layer_8cpp_source.xhtml#l00027">MapLayer::CreateWorkload()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00022">StridedSliceLayer::CreateWorkload()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00022">StackLayer::CreateWorkload()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00019">SwitchLayer::CreateWorkload()</a>, <a class="el" href="_unmap_layer_8cpp_source.xhtml#l00027">UnmapLayer::CreateWorkload()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00021">SoftmaxLayer::CreateWorkload()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00024">SliceLayer::CreateWorkload()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00027">MemCopyLayer::CreateWorkload()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00022">RsqrtLayer::CreateWorkload()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00027">MemImportLayer::CreateWorkload()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00022">ReduceLayer::CreateWorkload()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00019">DequantizeLayer::CreateWorkload()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00021">NormalizationLayer::CreateWorkload()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00027">Pooling2dLayer::CreateWorkload()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00027">Pooling3dLayer::CreateWorkload()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00021">FakeQuantizationLayer::CreateWorkload()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00031">BatchToSpaceNdLayer::CreateWorkload()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00019">QuantizeLayer::CreateWorkload()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00022">ConvertBf16ToFp32Layer::CreateWorkload()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00022">ConvertFp16ToFp32Layer::CreateWorkload()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00021">FloorLayer::CreateWorkload()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00026">ResizeLayer::CreateWorkload()</a>, <a class="el" href="_addition_layer_8cpp_source.xhtml#l00022">AdditionLayer::CreateWorkload()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00022">ConvertFp32ToBf16Layer::CreateWorkload()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00024">ShapeLayer::CreateWorkload()</a>, <a class="el" href="_gather_nd_layer_8cpp_source.xhtml#l00021">GatherNdLayer::CreateWorkload()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00021">CastLayer::CreateWorkload()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00021">InstanceNormalizationLayer::CreateWorkload()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00021">L2NormalizationLayer::CreateWorkload()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00021">GatherLayer::CreateWorkload()</a>, <a class="el" href="_subtraction_layer_8cpp_source.xhtml#l00022">SubtractionLayer::CreateWorkload()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00023">ComparisonLayer::CreateWorkload()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00025">DepthToSpaceLayer::CreateWorkload()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00025">TransposeLayer::CreateWorkload()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00021">LogSoftmaxLayer::CreateWorkload()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00027">SpaceToBatchNdLayer::CreateWorkload()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00024">ArgMinMaxLayer::CreateWorkload()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00027">SpaceToDepthLayer::CreateWorkload()</a>, <a class="el" href="_multiplication_layer_8cpp_source.xhtml#l00022">MultiplicationLayer::CreateWorkload()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00022">PadLayer::CreateWorkload()</a>, <a class="el" href="_division_layer_8cpp_source.xhtml#l00022">DivisionLayer::CreateWorkload()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00023">PreluLayer::CreateWorkload()</a>, <a class="el" href="_maximum_layer_8cpp_source.xhtml#l00021">MaximumLayer::CreateWorkload()</a>, <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00022">MinimumLayer::CreateWorkload()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00024">MeanLayer::CreateWorkload()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00022">ReshapeLayer::CreateWorkload()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00025">PermuteLayer::CreateWorkload()</a>, <a class="el" href="_constant_layer_8cpp_source.xhtml#l00021">ConstantLayer::CreateWorkload()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00048">Convolution3dLayer::CreateWorkload()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00022">ChannelShuffleLayer::CreateWorkload()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00023">DetectionPostProcessLayer::CreateWorkload()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00025">TransposeConvolution2dLayer::CreateWorkload()</a>, <a class="el" href="_pre_compiled_layer_8cpp_source.xhtml#l00031">PreCompiledLayer::CreateWorkload()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00050">DepthwiseConvolution2dLayer::CreateWorkload()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00022">FullyConnectedLayer::CreateWorkload()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00049">Convolution2dLayer::CreateWorkload()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00022">UnidirectionalSequenceLstmLayer::CreateWorkload()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00022">LstmLayer::CreateWorkload()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00021">BatchNormalizationLayer::CreateWorkload()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00022">QuantizedLstmLayer::CreateWorkload()</a>, and <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00022">QLstmLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;{</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    descriptor.m_AdditionalInfoObject = <a class="code" href="classarmnn_1_1_layer.xhtml#ac7170f79bd0eadb1b6153e359c023cc0">m_AdditionalInfoObject</a>.get();</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_ac7170f79bd0eadb1b6153e359c023cc0"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#ac7170f79bd0eadb1b6153e359c023cc0">armnn::Layer::m_AdditionalInfoObject</a></div><div class="ttdeci">AdditionalInfoObjectPtr m_AdditionalInfoObject</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00407">Layer.hpp:407</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aea1c8483ebeabc0dcbd9090b4f648f1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea1c8483ebeabc0dcbd9090b4f648f1d">&#9670;&nbsp;</a></span>SetAdditionalInfoForObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAdditionalInfoForObject </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a2a5caf3721af872f43c7642fec9449bc">AdditionalInfoObjectPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>additionalInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00358">358</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <a class="code" href="classarmnn_1_1_layer.xhtml#ac7170f79bd0eadb1b6153e359c023cc0">m_AdditionalInfoObject</a> = additionalInfo;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_ac7170f79bd0eadb1b6153e359c023cc0"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#ac7170f79bd0eadb1b6153e359c023cc0">armnn::Layer::m_AdditionalInfoObject</a></div><div class="ttdeci">AdditionalInfoObjectPtr m_AdditionalInfoObject</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00407">Layer.hpp:407</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a328c9cf1c3abf2febcce4801ba706541"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a328c9cf1c3abf2febcce4801ba706541">&#9670;&nbsp;</a></span>SetAllowExpandedDims()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAllowExpandedDims </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>allowExpandedDims</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00347">347</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        m_AllowExpandedDims = allowExpandedDims;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a3f6ad59212fa8a47c9265162fff8a274"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f6ad59212fa8a47c9265162fff8a274">&#9670;&nbsp;</a></span>SetBackendId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetBackendId </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00276">276</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">References <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml#l00027">CreateWorkload()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l02868">NetworkImpl::AddPrecompiledLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00654">armnn::AttemptBackendAssignment()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00243">armnn::InsertDebugLayerAfter()</a>, <a class="el" href="_permute_depthwise_conv2d_weights_8hpp_source.xhtml#l00023">PermuteDepthwiseConv2dWeightsImpl::Run()</a>, and <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{ m_BackendId = id; }</div></div><!-- fragment -->
</div>
</div>
<a id="a6d1024208b672a87ef2c1bfaf93d2b9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d1024208b672a87ef2c1bfaf93d2b9f">&#9670;&nbsp;</a></span>SetGuid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetGuid </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a>&#160;</td>
          <td class="paramname"><em>guid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00327">327</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;{ m_Guid = guid; }</div></div><!-- fragment -->
</div>
</div>
<a id="a429abdfa769f4d48268938dcaea00904"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a429abdfa769f4d48268938dcaea00904">&#9670;&nbsp;</a></span>SetShapeInferenceMethod()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetShapeInferenceMethod </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a>&#160;</td>
          <td class="paramname"><em>shapeInferenceMethod</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00342">342</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <a class="code" href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">m_ShapeInferenceMethod</a> = shapeInferenceMethod;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_afe508761cc8318b15329ba4acf7fbfec"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#afe508761cc8318b15329ba4acf7fbfec">armnn::Layer::m_ShapeInferenceMethod</a></div><div class="ttdeci">ShapeInferenceMethod m_ShapeInferenceMethod</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00421">Layer.hpp:421</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aeb2d638cc0e02c10075e015100996f2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb2d638cc0e02c10075e015100996f2d">&#9670;&nbsp;</a></span>ValidateAndCopyShape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ValidateAndCopyShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>outputShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>inferredShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a>&#160;</td>
          <td class="paramname"><em>shapeInferenceMethod</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>layerName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>outputSlotIndex</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00422">422</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00092">TensorShape::GetDimensionality()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00211">TensorShape::GetDimensionSpecificity()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00324">Layer::GetOutputSlot()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00092">OutputSlot::GetTensorInfo()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00087">OutputSlot::SetTensorInfo()</a>, <a class="el" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Specified</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00134">armnnUtils::SqueezeDims()</a>, and <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ValidateOnly</a>.</p>

<p class="reference">Referenced by <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00076">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00034">RankLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00035">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00033">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00043">ReduceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00034">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00037">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00037">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00033">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00037">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00034">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00105">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00045">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00109">Pooling3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00036">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00034">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00035">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00034">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00034">CastLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00063">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00036">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00037">ShapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00034">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00034">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00039">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00034">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00063">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00044">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00061">PadLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00045">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00035">ChannelShuffleLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00034">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00045">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00041">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00107">Convolution3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_nd_layer_8cpp_source.xhtml#l00078">GatherNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00074">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00039">DetectionPostProcessLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00074">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00099">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00062">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00060">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00090">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00070">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00100">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00064">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00058">LogicalBinaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00122">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00062">FullyConnectedLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00216">SplitterLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00120">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00168">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00170">UnidirectionalSequenceLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00052">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00096">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00170">QLstmLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;{</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">if</span> (shapeInferenceMethod == <a class="code" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">ShapeInferenceMethod::ValidateOnly</a>)</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    {</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keywordflow">if</span> (m_AllowExpandedDims)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        {</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            std::vector&lt;unsigned int&gt; outputDims = <a class="code" href="namespacearmnn_utils.xhtml#ac7f0575b4a8c9ba80c5b0695ada4dd92">armnnUtils::SqueezeDims</a>(outputShape);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            std::vector&lt;unsigned int&gt; inferredDims = <a class="code" href="namespacearmnn_utils.xhtml#ac7f0575b4a8c9ba80c5b0695ada4dd92">armnnUtils::SqueezeDims</a>(inferredShape);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="keywordflow">if</span> (outputDims.size() != inferredDims.size())</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            {</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                std::stringstream ss;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                ss &lt;&lt; layerName &lt;&lt; <span class="stringliteral">&quot;: TensorShape set on OutputSlot[&quot;</span> &lt;&lt; outputSlotIndex &lt;&lt;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                   <span class="stringliteral">&quot;] does not match the inferred shape. &quot;</span>;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                ss &lt;&lt; outputShape &lt;&lt; <span class="stringliteral">&quot; != &quot;</span> &lt;&lt; inferredShape;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                <span class="keywordflow">throw</span> LayerValidationException(ss.str());</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            }</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputDims.size(); ++i)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                <span class="keywordflow">if</span> (outputDims[i] != inferredDims[i])</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                {</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                    std::stringstream ss;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                    ss &lt;&lt; layerName &lt;&lt; <span class="stringliteral">&quot;: TensorShape set on OutputSlot[&quot;</span> &lt;&lt; outputSlotIndex &lt;&lt;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                       <span class="stringliteral">&quot;] does not match the inferred shape at dimension index [&quot;</span>;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    ss &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;] &quot;</span> &lt;&lt; outputShape &lt;&lt; <span class="stringliteral">&quot; != &quot;</span> &lt;&lt; inferredShape;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    <span class="keywordflow">throw</span> LayerValidationException(ss.str());</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                }</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            }</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        }</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        {</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            ConditionalThrowIfNotEqual&lt;LayerValidationException&gt;(</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    layerName + <span class="stringliteral">&quot;: TensorShape set on OutputSlot[0] does not match the inferred shape.&quot;</span>,</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                    outputShape,</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                    inferredShape);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    }</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keywordflow">if</span> (outputShape.GetDimensionality() == <a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">Dimensionality::Specified</a>)</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputShape.GetNumDimensions(); ++i)</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        {</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="keywordflow">if</span> (outputShape.GetDimensionSpecificity(i) &amp;&amp; outputShape[i] != inferredShape[i])</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            {</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                std::stringstream ss;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                ss &lt;&lt; layerName &lt;&lt; <span class="stringliteral">&quot;: TensorShape set on OutputSlot[&quot;</span> &lt;&lt; outputSlotIndex &lt;&lt;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                <span class="stringliteral">&quot;] does not match the inferred shape at dimension index [&quot;</span>;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                ss &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;] &quot;</span> &lt;&lt; outputShape &lt;&lt; <span class="stringliteral">&quot; != &quot;</span> &lt;&lt; inferredShape;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                <span class="keywordflow">throw</span> LayerValidationException(ss.str());</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            }</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        }</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    TensorInfo <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a> = <a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(outputSlotIndex).<a class="code" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">GetTensorInfo</a>();</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inferredTensorInfo(inferredShape,</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                                         info.GetDataType(),</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                                         info.GetQuantizationScale(),</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                                         info.GetQuantizationOffset());</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(outputSlotIndex).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inferredTensorInfo);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;}</div><div class="ttc" id="namespacearmnn_utils_xhtml_ac7f0575b4a8c9ba80c5b0695ada4dd92"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ac7f0575b4a8c9ba80c5b0695ada4dd92">armnnUtils::SqueezeDims</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; SqueezeDims(const armnn::TensorShape &amp;tensorShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_utils_8cpp_source.xhtml#l00134">TensorUtils.cpp:134</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1"><div class="ttname"><a href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ShapeInferenceMethod::ValidateOnly</a></div><div class="ttdoc">Validate all output shapes. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a7e5c5771d741dd5473989047a9314728"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">armnn::OutputSlot::SetTensorInfo</a></div><div class="ttdeci">void SetTensorInfo(const TensorInfo &amp;tensorInfo) override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00087">Layer.cpp:87</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a0e36688a43c35668d8db5257274c68fe"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">armnn::Layer::GetOutputSlot</a></div><div class="ttdeci">const OutputSlot &amp; GetOutputSlot(unsigned int index=0) const override</div><div class="ttdoc">Get the const output slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00324">Layer.hpp:324</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_ada2ad7d1caeeb4ef6195c8925fad6a65"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">armnn::OutputSlot::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo() const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00092">Layer.cpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a84ff600212ba26e665de9b978ec896a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84ff600212ba26e665de9b978ec896a4">&#9670;&nbsp;</a></span>ValidateTensorShapesFromInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void ValidateTensorShapesFromInputs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_q_lstm_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">QLstmLayer</a>, <a class="el" href="classarmnn_1_1_quantized_lstm_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">QuantizedLstmLayer</a>, <a class="el" href="classarmnn_1_1_output_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">OutputLayer</a>, <a class="el" href="classarmnn_1_1_batch_normalization_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">BatchNormalizationLayer</a>, <a class="el" href="classarmnn_1_1_concat_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ConcatLayer</a>, <a class="el" href="classarmnn_1_1_convolution2d_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">Convolution2dLayer</a>, <a class="el" href="classarmnn_1_1_lstm_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">LstmLayer</a>, <a class="el" href="classarmnn_1_1_unidirectional_sequence_lstm_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">UnidirectionalSequenceLstmLayer</a>, <a class="el" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">DepthwiseConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_fully_connected_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">FullyConnectedLayer</a>, <a class="el" href="classarmnn_1_1_splitter_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">SplitterLayer</a>, <a class="el" href="classarmnn_1_1_comparison_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ComparisonLayer</a>, <a class="el" href="classarmnn_1_1_depth_to_space_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">DepthToSpaceLayer</a>, <a class="el" href="classarmnn_1_1_logical_binary_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">LogicalBinaryLayer</a>, <a class="el" href="classarmnn_1_1_prelu_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">PreluLayer</a>, <a class="el" href="classarmnn_1_1_space_to_batch_nd_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">SpaceToBatchNdLayer</a>, <a class="el" href="classarmnn_1_1_space_to_depth_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">SpaceToDepthLayer</a>, <a class="el" href="classarmnn_1_1_transpose_convolution2d_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">TransposeConvolution2dLayer</a>, <a class="el" href="classarmnn_1_1_arg_min_max_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ArgMinMaxLayer</a>, <a class="el" href="classarmnn_1_1_detection_post_process_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">DetectionPostProcessLayer</a>, <a class="el" href="classarmnn_1_1_elementwise_unary_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ElementwiseUnaryLayer</a>, <a class="el" href="classarmnn_1_1_gather_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">GatherLayer</a>, <a class="el" href="classarmnn_1_1_strided_slice_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">StridedSliceLayer</a>, <a class="el" href="classarmnn_1_1_gather_nd_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">GatherNdLayer</a>, <a class="el" href="classarmnn_1_1_convolution3d_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">Convolution3dLayer</a>, <a class="el" href="classarmnn_1_1_pre_compiled_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">PreCompiledLayer</a>, <a class="el" href="classarmnn_1_1_constant_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ConstantLayer</a>, <a class="el" href="classarmnn_1_1_permute_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">PermuteLayer</a>, <a class="el" href="classarmnn_1_1_reshape_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ReshapeLayer</a>, <a class="el" href="classarmnn_1_1_channel_shuffle_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ChannelShuffleLayer</a>, <a class="el" href="classarmnn_1_1_log_softmax_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">LogSoftmaxLayer</a>, <a class="el" href="classarmnn_1_1_mean_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">MeanLayer</a>, <a class="el" href="classarmnn_1_1_pad_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">PadLayer</a>, <a class="el" href="classarmnn_1_1_stand_in_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">StandInLayer</a>, <a class="el" href="classarmnn_1_1_transpose_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">TransposeLayer</a>, <a class="el" href="classarmnn_1_1_abs_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">AbsLayer</a>, <a class="el" href="classarmnn_1_1_batch_to_space_nd_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">BatchToSpaceNdLayer</a>, <a class="el" href="classarmnn_1_1_cast_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">CastLayer</a>, <a class="el" href="classarmnn_1_1_convert_bf16_to_fp32_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ConvertBf16ToFp32Layer</a>, <a class="el" href="classarmnn_1_1_convert_fp16_to_fp32_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ConvertFp16ToFp32Layer</a>, <a class="el" href="classarmnn_1_1_convert_fp32_to_bf16_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ConvertFp32ToBf16Layer</a>, <a class="el" href="classarmnn_1_1_debug_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">DebugLayer</a>, <a class="el" href="classarmnn_1_1_dequantize_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">DequantizeLayer</a>, <a class="el" href="classarmnn_1_1_fake_quantization_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">FakeQuantizationLayer</a>, <a class="el" href="classarmnn_1_1_floor_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">FloorLayer</a>, <a class="el" href="classarmnn_1_1_input_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">InputLayer</a>, <a class="el" href="classarmnn_1_1_instance_normalization_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">InstanceNormalizationLayer</a>, <a class="el" href="classarmnn_1_1_l2_normalization_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">L2NormalizationLayer</a>, <a class="el" href="classarmnn_1_1_map_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">MapLayer</a>, <a class="el" href="classarmnn_1_1_mem_copy_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">MemCopyLayer</a>, <a class="el" href="classarmnn_1_1_mem_import_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">MemImportLayer</a>, <a class="el" href="classarmnn_1_1_merge_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">MergeLayer</a>, <a class="el" href="classarmnn_1_1_normalization_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">NormalizationLayer</a>, <a class="el" href="classarmnn_1_1_pooling2d_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">Pooling2dLayer</a>, <a class="el" href="classarmnn_1_1_pooling3d_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">Pooling3dLayer</a>, <a class="el" href="classarmnn_1_1_resize_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ResizeLayer</a>, <a class="el" href="classarmnn_1_1_rsqrt_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">RsqrtLayer</a>, <a class="el" href="classarmnn_1_1_shape_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ShapeLayer</a>, <a class="el" href="classarmnn_1_1_slice_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">SliceLayer</a>, <a class="el" href="classarmnn_1_1_softmax_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">SoftmaxLayer</a>, <a class="el" href="classarmnn_1_1_stack_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">StackLayer</a>, <a class="el" href="classarmnn_1_1_switch_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">SwitchLayer</a>, <a class="el" href="classarmnn_1_1_unmap_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">UnmapLayer</a>, <a class="el" href="classarmnn_1_1_convert_fp32_to_fp16_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ConvertFp32ToFp16Layer</a>, <a class="el" href="classarmnn_1_1_fill_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">FillLayer</a>, <a class="el" href="classarmnn_1_1_reduce_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ReduceLayer</a>, <a class="el" href="classarmnn_1_1_activation_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ActivationLayer</a>, <a class="el" href="classarmnn_1_1_quantize_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">QuantizeLayer</a>, <a class="el" href="classarmnn_1_1_rank_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">RankLayer</a>, and <a class="el" href="classarmnn_1_1_elementwise_base_layer.xhtml#a8c8f543d7e9729362c266d12ec169966">ElementwiseBaseLayer</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_8cpp_source.xhtml#l00097">OutputSlot::IsTensorInfoSet()</a>.</p>

</div>
</div>
<a id="a0607e36e88f38c34c71c663164b76776"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0607e36e88f38c34c71c663164b76776">&#9670;&nbsp;</a></span>VerifyLayerConnections()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void VerifyLayerConnections </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>expectedConnections</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_check_location.xhtml">CheckLocation</a> &amp;&#160;</td>
          <td class="paramname"><em>location</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00378">378</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00029">CheckLocation::AsString()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00322">Layer::GetInputSlot()</a>, <a class="el" href="_internal_types_8cpp_source.xhtml#l00013">armnn::GetLayerTypeAsCString()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00225">Layer::GetNameStr()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00319">Layer::GetNumInputSlots()</a>, and <a class="el" href="_layer_8hpp_source.xhtml#l00271">Layer::GetType()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00076">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00034">RankLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00035">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00033">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00034">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00034">FillLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00043">ReduceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00039">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_map_layer_8cpp_source.xhtml#l00037">MapLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00037">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00033">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00037">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00037">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00034">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00045">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00105">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00109">Pooling3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00036">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00034">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00034">CastLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00034">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00063">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00036">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00035">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00037">ShapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00034">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00034">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00034">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00063">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unmap_layer_8cpp_source.xhtml#l00037">UnmapLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00044">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00061">PadLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00035">ChannelShuffleLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00045">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00034">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00045">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00041">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00107">Convolution3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_nd_layer_8cpp_source.xhtml#l00078">GatherNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00099">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00074">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00039">DetectionPostProcessLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00074">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00060">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00064">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00070">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00058">LogicalBinaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00090">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00100">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00062">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00122">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00168">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00120">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00294">ConcatLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00170">UnidirectionalSequenceLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00052">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00096">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00170">QLstmLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;{</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(<a class="code" href="classarmnn_1_1_layer.xhtml#abc0660dc440c8a285b456c9ef6383c26">GetNumInputSlots</a>() == expectedConnections);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;expectedConnections; ++i)</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(i).GetConnection() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="keywordflow">throw</span> LayerValidationException(</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    fmt::format(<span class="stringliteral">&quot;Input connection #{0} must be connected &quot;</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                <span class="stringliteral">&quot;for {1} layer {2} {3}&quot;</span>,</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                i,</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#addb6b14dd1b632263ffe77430259a7c4">GetLayerTypeAsCString</a>(this-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a>()),</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                <a class="code" href="classarmnn_1_1_layer.xhtml#a9a97cb6d32661a57fc33bd29b8e41ff4">GetNameStr</a>(),</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                location.AsString()));</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        }</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    }</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_abc0660dc440c8a285b456c9ef6383c26"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#abc0660dc440c8a285b456c9ef6383c26">armnn::Layer::GetNumInputSlots</a></div><div class="ttdeci">unsigned int GetNumInputSlots() const override</div><div class="ttdoc">Returns the number of connectable input slots. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00319">Layer.hpp:319</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_acf8b8e23bf647836592982f97088d375"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">armnn::Layer::GetInputSlot</a></div><div class="ttdeci">const InputSlot &amp; GetInputSlot(unsigned int index) const override</div><div class="ttdoc">Get a const input slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00322">Layer.hpp:322</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a9a97cb6d32661a57fc33bd29b8e41ff4"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a9a97cb6d32661a57fc33bd29b8e41ff4">armnn::Layer::GetNameStr</a></div><div class="ttdeci">const std::string &amp; GetNameStr() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00225">Layer.hpp:225</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_ad8e15c530c929ab823d89ae9fd2d3f11"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const override</div><div class="ttdoc">Returns the armnn::LayerType of this layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00271">Layer.hpp:271</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_addb6b14dd1b632263ffe77430259a7c4"><div class="ttname"><a href="namespacearmnn.xhtml#addb6b14dd1b632263ffe77430259a7c4">armnn::GetLayerTypeAsCString</a></div><div class="ttdeci">const char * GetLayerTypeAsCString(LayerType type)</div><div class="ttdef"><b>Definition:</b> <a href="_internal_types_8cpp_source.xhtml#l00013">InternalTypes.cpp:13</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a448afc716fda85394df1e8e5b7d530e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a448afc716fda85394df1e8e5b7d530e8">&#9670;&nbsp;</a></span>VerifyShapeInferenceType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void VerifyShapeInferenceType </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>outputShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a>&#160;</td>
          <td class="paramname"><em>shapeInferenceMethod</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8cpp_source.xhtml#l00491">491</a> of file <a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00241">TensorShape::AreAllDimensionsSpecified()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00092">TensorShape::GetDimensionality()</a>, <a class="el" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">armnn::NotSpecified</a>, and <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ValidateOnly</a>.</p>

<p class="reference">Referenced by <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00076">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00034">RankLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00035">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00033">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00034">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00034">FillLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00043">ReduceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00039">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00037">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00033">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00037">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00037">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00034">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00045">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00105">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00109">Pooling3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00036">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00034">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00034">CastLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00034">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00063">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00036">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00035">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00037">ShapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00034">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00034">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00063">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00034">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00034">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00044">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00061">PadLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00035">ChannelShuffleLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00045">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00045">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00041">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00107">Convolution3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_nd_layer_8cpp_source.xhtml#l00078">GatherNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00074">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00074">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00039">DetectionPostProcessLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00099">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00060">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00062">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00058">LogicalBinaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00090">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00100">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00070">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00064">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00122">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00216">SplitterLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00062">FullyConnectedLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00168">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00120">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00170">UnidirectionalSequenceLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00294">ConcatLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00052">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00096">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00170">QLstmLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;{</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordflow">if</span> (shapeInferenceMethod == <a class="code" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">ShapeInferenceMethod::ValidateOnly</a>)</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    {</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        ConditionalThrow&lt;LayerValidationException&gt;(</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                outputShape.GetDimensionality() != <a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">Dimensionality::NotSpecified</a>,</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                <span class="stringliteral">&quot;Dimensionality can not be NotSpecified while using ShapeInferenceMethod::ValidateOnly&quot;</span>);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        ConditionalThrow&lt;LayerValidationException&gt;(</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                outputShape.AreAllDimensionsSpecified(),</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                <span class="stringliteral">&quot;Unspecified dimension while using ShapeInferenceMethod::ValidateOnly&quot;</span>);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    }</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">armnn::Dimensionality::NotSpecified</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1"><div class="ttname"><a href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ShapeInferenceMethod::ValidateOnly</a></div><div class="ttdoc">Validate all output shapes. </div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="afab89afd724f1b07b1aaad6bdc61c47a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afab89afd724f1b07b1aaad6bdc61c47a">&#9670;&nbsp;</a></span>Graph</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00367">367</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="ac7170f79bd0eadb1b6153e359c023cc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7170f79bd0eadb1b6153e359c023cc0">&#9670;&nbsp;</a></span>m_AdditionalInfoObject</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a2a5caf3721af872f43c7642fec9449bc">AdditionalInfoObjectPtr</a> m_AdditionalInfoObject</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00407">407</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_8cpp_source.xhtml#l00274">Layer::SetAdditionalInfo()</a>.</p>

</div>
</div>
<a id="aa44d91037bba52ba0dec6577509ade3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa44d91037bba52ba0dec6577509ade3b">&#9670;&nbsp;</a></span>m_OutputHandlers</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarmnn_1_1_output_handler.xhtml">OutputHandler</a>&gt; m_OutputHandlers</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00420">420</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, and <a class="el" href="_layer_8cpp_source.xhtml#l00220">Layer::Layer()</a>.</p>

</div>
</div>
<a id="afe508761cc8318b15329ba4acf7fbfec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe508761cc8318b15329ba4acf7fbfec">&#9670;&nbsp;</a></span>m_ShapeInferenceMethod</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9">ShapeInferenceMethod</a> m_ShapeInferenceMethod</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_layer_8hpp_source.xhtml#l00421">421</a> of file <a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_clone_base_8hpp_source.xhtml#l00014">Layer::CloneBase()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00023">ElementwiseBaseLayer::InferOutputShapes()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00076">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00034">RankLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00035">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00033">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00034">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00034">FillLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00043">ReduceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00039">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00033">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00037">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00037">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00036">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00063">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00037">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00045">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00034">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00105">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00036">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00109">Pooling3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00034">CastLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00034">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00035">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00034">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00037">ShapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00034">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00034">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00034">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00063">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00045">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00034">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00044">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00061">PadLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00035">ChannelShuffleLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00045">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00041">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00107">Convolution3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_nd_layer_8cpp_source.xhtml#l00078">GatherNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00099">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00074">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00039">DetectionPostProcessLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00074">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00060">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00058">LogicalBinaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00064">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00070">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00062">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00090">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00100">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00216">SplitterLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00122">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00062">FullyConnectedLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00294">ConcatLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00170">UnidirectionalSequenceLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00168">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00120">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00052">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00096">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00170">QLstmLayer::ValidateTensorShapesFromInputs()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_layer_8hpp_source.xhtml">Layer.hpp</a></li>
<li>src/armnn/<a class="el" href="_layer_8cpp_source.xhtml">Layer.cpp</a></li>
<li>src/armnn/layers/<a class="el" href="_layer_clone_base_8hpp_source.xhtml">LayerCloneBase.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:23 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
