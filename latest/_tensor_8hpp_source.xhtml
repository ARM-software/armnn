<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: include/armnn/Tensor.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_tensor_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Tensor.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_tensor_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017,2022 Arm Ltd and Contributors. All rights reserved.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_exceptions_8hpp.xhtml">Exceptions.hpp</a>&quot;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_optional_8hpp.xhtml">Optional.hpp</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_types_8hpp.xhtml">Types.hpp</a>&quot;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;initializer_list&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_shape.xhtml">   20</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">    /// Empty (invalid) constructor.</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>();</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    /// Constructor for TensorShape</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">    /// @param numDimensions - Tensor rank.</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    /// @param initDimensionsSpecificity (optional) - value to initialize the specificity of each dimension size.</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"></span>    <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDimensions, <span class="keywordtype">bool</span> initDimensionsSpecificity = <span class="keyword">true</span>);</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">    /// Constructor for TensorShape</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">    /// @param numDimensions - Tensor rank.</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">    /// @param dimensionSizes - Size of each of dimension.</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDimensions, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* dimensionSizes);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">    /// Constructor for TensorShape</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">    /// @param dimensionSizeList - Size of each of dimension.</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(std::initializer_list&lt;unsigned int&gt; dimensionSizeList);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">    /// Copy Constructor for TensorShape</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">    /// @param other - TensorShape to copy from.</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; other);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /// Constructor for TensorShape</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    /// @param numDimensions - Tensor rank.</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">    /// @param dimensionSizes - Size of each of dimension.</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /// @param dimensionsSpecificity - Flags to indicate which dimension has its size specified.</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDimensions, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* dimensionSizes, <span class="keyword">const</span> <span class="keywordtype">bool</span>* dimensionsSpecificity);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">    /// Constructor for TensorShape</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">    /// @param dimensionSizeList - Size of each of dimension.</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">    /// @param dimensionsSpecificityList - Flags to indicate which dimension size is specified.</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(std::initializer_list&lt;unsigned int&gt; dimensionSizeList,</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                std::initializer_list&lt;bool&gt; dimensionsSpecificityList);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">    /// Constructor for TensorShape</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /// @param dimensionality - Parameter to indicate if the Tensor is a Scalar, a Tensor of known dimensionality</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">    /// or a Tensor of unknown dimensionality.</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"></span>    <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">TensorShape</a>(<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681">Dimensionality</a> dimensionality);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">    /// Assignation function</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">    /// @param other - TensorShape to copy from.</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a0ca6f42172d27e9799da3e3f7840ac31">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; other);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">    /// Read only operator</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">    /// @param i - Dimension index.</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a6e6dab22049a4432e8306a301dceff52">operator[]</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">    /// Read and write operator</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">    /// @param i - Dimension index.</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a6e6dab22049a4432e8306a301dceff52">operator[]</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">    /// Equality comparison operator</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">    /// @param other - TensorShape to compare with.</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a07e348fae6036aecdaf41e738d1ae9ff">operator==</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; other) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">    /// Inequality comparison operator</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">    /// @param other - TensorShape to compare with.</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a77d202fcd47612eb5a4d6d23a7d4b349">operator!=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; other) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">    /// Function that returns the tensor rank.</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">    /// @return - Tensor rank.</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">    /// Function that calculates the tensor elements by multiplying all dimension size which are Specified.</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">    /// @return - Total number of elements in the tensor.</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">    /// Function that returns the tensor type.</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">    /// @return - Parameter to indicate if the Tensor is a scalar, a Tensor of known dimensionality or</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">    /// a Tensor of unknown dimensionality</span></div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_shape.xhtml#a5a212540c00931bd2a4b4041beda33ae">   92</a></span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681">Dimensionality</a> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a5a212540c00931bd2a4b4041beda33ae">GetDimensionality</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Dimensionality; }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">    /// Gets information about if the dimension size has been specified or not</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">    /// @param i - Dimension index.</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">    /// @return - Flag to indicate if the dimension &quot;i&quot; has a specified size.</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a3919600d4aa8d5cd801a0e0740f62308">GetDimensionSpecificity</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">    /// Sets the tensor rank and therefore the Dimensionality is set to Specified if it was not.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">    /// @param numDimensions - Tensor rank.</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">    /// @param initDimensionsSpecificity (optional) - value to initialize the specificity of each dimension size.</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a82c7d5a6e675b1a876daa9983cd125d2">SetNumDimensions</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDimensions, <span class="keywordtype">bool</span> initDimensionsSpecificity = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">    /// Sets the size of the indicated dimension and Specificity for that dimension is set to true.</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">    /// @param i - Dimension index.</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">    /// @param dimensionSize - size of one dimension.</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#ad82b782a8e1a05b6a3756e73c66d5f90">SetDimensionSize</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimensionSize);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">    /// Checks if there is at least one dimension not specified. AND of all array elements.</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">    /// @return - True when all dimension sizes are specified. False when at least one dimension size is not specified.</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#acccb75bd1d68a81f6ddd61687f51c5a1">AreAllDimensionsSpecified</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">    /// Checks if there is at least one dimension specified. OR of all array elements.</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">    /// @return - True at least one dimension sizes is specified. False when all dimension sizes are not specified.</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a34e12ab75d9073354565c2039f92112b">IsAtLeastOneDimensionSpecified</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keyword">private</span>:<span class="comment"></span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">    /// Array of the dimension sizes.</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span>    std::array&lt;unsigned int, MaxNumOfTensorDimensions&gt; m_Dimensions{};</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">    /// Array of flags to indicate if the size of each of the dimensions is specified or not</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"></span>    std::array&lt;bool, MaxNumOfTensorDimensions&gt; m_DimensionsSpecificity = { {<span class="keyword">true</span>} };</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">    /// Tensor rank</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_NumDimensions{};</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">    /// Tensor type: Specified, NotSpecified or Scalar.</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681">Dimensionality</a> m_Dimensionality = <a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">Dimensionality::Specified</a>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">    /// Checks if the dimension index given is within range.</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">    /// @param i - Dimension index.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> CheckDimensionIndex(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">    /// Checks if the tensor rank given is within range.</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">    /// @param numDimensions - Tensor rank.</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span>    <span class="keyword">static</span> <span class="keywordtype">void</span> CheckValidNumDimensions(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDimensions) ;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">    /// Checks if the size of the dimension index given is specified.</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">    /// @param i - Dimension index.</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> CheckDimensionSpecified(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">    /// Checks if this is a scalar.</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> CheckScalar() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">    /// Checks if the number of dimensions is unknown, i.e. rank is unspecified.</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> CheckUnspecifiedNumDimensions() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">    /// Checks if the number of dimensions is known, i.e. rank is specified.</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> CheckSpecifiedNumDimensions() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;};</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml">  152</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">    /// Empty (invalid) constructor.</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>();</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; shape,</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;               <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType,</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;               <span class="keywordtype">float</span> quantizationScale = 0.0f,</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;               int32_t quantizationOffset = 0,</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;               <span class="keywordtype">bool</span> isConstant = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDimensions,</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;               <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* dimensionSizes,</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;               <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType,</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;               <span class="keywordtype">float</span> quantizationScale = 0.0f,</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;               int32_t quantizationOffset = 0,</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;               <span class="keywordtype">bool</span> isConstant = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; shape,</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;               <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType,</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;               <span class="keyword">const</span> std::vector&lt;float&gt;&amp; quantizationScales,</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;               <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> quantizationDim,</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;               <span class="keywordtype">bool</span> isConstant = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDimensions,</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;               <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* dimensionSizes,</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;               <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType,</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;               <span class="keyword">const</span> std::vector&lt;float&gt;&amp; quantizationScales,</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;               <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> quantizationDim,</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;               <span class="keywordtype">bool</span> isConstant = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; other);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_tensor_info.xhtml#ac45c8c0052476cd66ef732de76dd9bc8">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; other);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a586e1eec08e847abfeb3de3a4038c5ce">operator==</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; other) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a2a944e616dc6fdde5287b17f2265307d">operator!=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; other) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">  191</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()<span class="keyword"> const              </span>{ <span class="keywordflow">return</span> m_Shape; }</div>
<div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#a350bcc7d86f7d9333340a0a04be078f6">  192</a></span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a350bcc7d86f7d9333340a0a04be078f6">GetShape</a>()                          { <span class="keywordflow">return</span> m_Shape; }</div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">  193</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; newShape)       { m_Shape = newShape; }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">  195</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()<span class="keyword"> const            </span>{ <span class="keywordflow">return</span> m_Shape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); }</div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">  196</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>()<span class="keyword"> const              </span>{ <span class="keywordflow">return</span> m_Shape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>(); }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">  198</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()<span class="keyword"> const                     </span>{ <span class="keywordflow">return</span> m_DataType; }</div>
<div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">  199</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">SetDataType</a>(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> type)                  { m_DataType = type; }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">  201</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">HasMultipleQuantizationScales</a>()<span class="keyword"> const       </span>{ <span class="keywordflow">return</span> m_Quantization.m_Scales.size() &gt; 1; }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#ab85cd8cc10c96a7c99c14042c251fc48">HasPerAxisQuantization</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::vector&lt;float&gt; <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">GetQuantizationScales</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">SetQuantizationScales</a>(<span class="keyword">const</span> std::vector&lt;float&gt;&amp; scales);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordtype">float</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(<span class="keywordtype">float</span> scale);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    int32_t <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(int32_t offset);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;unsigned int&gt;</a> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">SetQuantizationDim</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;unsigned int&gt;</a>&amp; quantizationDim);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a7c00efeb540198b33b8558c76e5cc2dd">IsQuantized</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a945263e85c27f3216a8323cfc16d8919">IsConstant</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">    /// Marks the data corresponding to this tensor info as constant.</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">    ///</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">    /// @details: This can allow further optimization on execution</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">    /// @Note: The user has to ensure that the underlying data actually is constant.</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a945263e85c27f3216a8323cfc16d8919">IsConstant</a>=<span class="keyword">true</span>);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">    /// Check that the types are the same and, if quantize, that the quantization parameters are the same.</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">IsTypeSpaceMatch</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; other) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> m_Shape;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>    m_DataType;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordtype">bool</span>        m_IsConstant;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">    /// Vectors of scale and offset are used for per-axis quantization.</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"></span>    <span class="keyword">struct </span>Quantization</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        Quantization()</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            : m_Scales{}</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            , m_Offset(EmptyOptional())</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            , m_QuantizationDim(EmptyOptional()) {}</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        Quantization(<span class="keyword">const</span> Quantization&amp; other)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            : m_Scales(other.m_Scales)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            , m_Offset(other.m_Offset)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            , m_QuantizationDim(other.m_QuantizationDim) {}</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a586e1eec08e847abfeb3de3a4038c5ce">operator==</a>(<span class="keyword">const</span> Quantization&amp; other)<span class="keyword"> const</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="keywordflow">return</span> ((m_Scales == other.m_Scales) &amp;&amp; (m_Offset == other.m_Offset) &amp;&amp;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                (m_QuantizationDim == other.m_QuantizationDim));</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        Quantization&amp; <a class="code" href="classarmnn_1_1_tensor_info.xhtml#ac45c8c0052476cd66ef732de76dd9bc8">operator=</a>(<span class="keyword">const</span> Quantization&amp; other)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keywordflow">if</span>(<span class="keyword">this</span> != &amp;other)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                m_Scales = other.m_Scales;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                m_Offset = other.m_Offset;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                m_QuantizationDim = other.m_QuantizationDim;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        std::vector&lt;float&gt;     m_Scales;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        Optional&lt;int32_t&gt;      m_Offset;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        Optional&lt;unsigned int&gt; m_QuantizationDim;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    } m_Quantization;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;};</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">  274</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">BindingPointInfo</a> = std::pair&lt;armnn::LayerBindingId, armnn::TensorInfo&gt;;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> MemoryType&gt;</div>
<div class="line"><a name="l00277"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml">  277</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;{</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">    /// Empty (invalid) constructor.</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_base_tensor.xhtml#aca0044508ebeb3b236a777db828910ed">BaseTensor</a>();</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">    /// Constructor from a raw memory pointer.</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">    /// @param memoryArea - Region of CPU-addressable memory where tensor data will be stored. Must be valid while</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">    /// workloads are on the fly. Tensor instances do not claim ownership of referenced memory regions, that is,</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">    /// no attempt will be made by ArmNN to free these memory regions automatically.</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_base_tensor.xhtml#aca0044508ebeb3b236a777db828910ed">BaseTensor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>, MemoryType memoryArea);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">    /// Tensors are copyable.</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_base_tensor.xhtml#aca0044508ebeb3b236a777db828910ed">BaseTensor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&amp; other);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">    /// Tensors are copyable.</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&amp; <a class="code" href="classarmnn_1_1_base_tensor.xhtml#a844fc6ba8f5435b5a200072a3ec163af">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&amp;);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">  295</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Info; }</div>
<div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#ab2e02564acd2ce6db36de310702a75de">  296</a></span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_base_tensor.xhtml#ab2e02564acd2ce6db36de310702a75de">GetInfo</a>() { <span class="keywordflow">return</span> m_Info; }</div>
<div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">  297</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; <a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(); }</div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#a350bcc7d86f7d9333340a0a04be078f6">  298</a></span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; <a class="code" href="classarmnn_1_1_base_tensor.xhtml#a350bcc7d86f7d9333340a0a04be078f6">GetShape</a>() { <span class="keywordflow">return</span> m_Info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(); }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#aea909c7327109228ef618d459015def3">  300</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="classarmnn_1_1_base_tensor.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>(); }</div>
<div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">  301</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); }</div>
<div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">  302</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>(); }</div>
<div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">  303</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>(); }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">  305</a></span>&#160;    MemoryType <a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml#aba26e5decca8be8786d8a5faf2e06a49">m_MemoryArea</a>; }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">    /// Protected destructor to stop users from making these</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">    /// (could still new one on the heap and then leak it...)</span></div>
<div class="line"><a name="l00310"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#abac025efeffc6e099a365bdb17b5ca3e">  310</a></span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_base_tensor.xhtml#abac025efeffc6e099a365bdb17b5ca3e">~BaseTensor</a>() {}</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_tensor.xhtml#aba26e5decca8be8786d8a5faf2e06a49">  312</a></span>&#160;    MemoryType <a class="code" href="classarmnn_1_1_base_tensor.xhtml#aba26e5decca8be8786d8a5faf2e06a49">m_MemoryArea</a>;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> m_Info;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;};</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">/// A tensor defined by a TensorInfo (shape and data type) and a mutable backing store.</span></div>
<div class="line"><a name="l00319"></a><span class="lineno"><a class="line" href="classarmnn_1_1_tensor.xhtml">  319</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&lt;void*&gt;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;{</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">    /// Brings in the constructors and assignment operator.</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"></span>    <span class="keyword">using</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor&lt;void*&gt;::BaseTensor</a>;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;};</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">/// A tensor defined by a TensorInfo (shape and data type) and an immutable backing store.</span></div>
<div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_tensor.xhtml">  327</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&lt;const void*&gt;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;{</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">    /// Brings in the constructors and assignment operator.</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment"></span>    <span class="keyword">using</span> <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor&lt;const void*&gt;::BaseTensor</a>;</div>
<div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_tensor.xhtml#a6b6561873c02b1bd9b7a7ae8dd4a339c">  332</a></span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml#a6b6561873c02b1bd9b7a7ae8dd4a339c">ConstTensor</a>() : <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&lt;const void*&gt;()</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        this-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>();</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">    /// ConstTensor implicitly constructed from non-const Tensor.</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">    ///</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">    /// @param other - reference to a constant Tensor.</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">    ///</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">    /// @throws InvalidArgumentException when Tensor parameter TensorInfo is non-constant.</span></div>
<div class="line"><a name="l00342"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_tensor.xhtml#a42aec46c635aa2e38932ca103d2064ed">  342</a></span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_const_tensor.xhtml#a42aec46c635aa2e38932ca103d2064ed">ConstTensor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a>&amp; other) : <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&lt;const void*&gt;(other.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>(), other.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>())</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">if</span> (!this-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>().IsConstant())</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Invalid attempt to construct ConstTensor &quot;</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                           <span class="stringliteral">&quot;from Tensor due to non-constant TensorInfo&quot;</span>);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment">    /// Constructor from a backing container.</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment">    ///</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">    /// @param container - An stl-like container type which implements data() and size() methods.</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">    /// Presence of data() and size() is a strong indicator of the continuous memory layout of the container,</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">    /// which is a requirement for Tensor data. Tensor instances do not claim ownership of referenced memory regions,</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">    /// that is, no attempt will be made by ArmNN to free these memory regions automatically.</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">    ///</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">    /// @throws InvalidArgumentException when isConstant parameter of input TensorInfo is false.</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt; <span class="keyword">template</span>&lt;<span class="keyword">typename</span>, <span class="keyword">typename</span>...&gt; <span class="keyword">class </span>ContainerType, <span class="keyword">typename</span> T, <span class="keyword">typename</span>...ContainerArgs &gt;</div>
<div class="line"><a name="l00360"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_tensor.xhtml#aa04de06d072895b6df9125338d55c205">  360</a></span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml#aa04de06d072895b6df9125338d55c205">ConstTensor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; info, <span class="keyword">const</span> ContainerType&lt;T, ContainerArgs...&gt;&amp; container)</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        : <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&lt;const void*&gt;(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>, container.data())</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keywordflow">if</span> (!this-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>().IsConstant())</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Invalid attempt to construct ConstTensor from non-constant TensorInfo.&quot;</span>);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">if</span> (container.size() * <span class="keyword">sizeof</span>(T) != <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.GetNumBytes())</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Container size is not correct&quot;</span>);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        }</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">    /// ConstTensor constructed from TensorInfo and MemoryType template (a raw memory pointer).</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">    ///</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">    /// @param info - reference to a constant TensorInfo.</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">    /// @param memoryArea - Region of CPU-addressable memory where tensor data will be stored. Must be valid while</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">    /// workloads are on the fly. Tensor instances do not claim ownership of referenced memory regions, that is,</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">    /// no attempt will be made by ArmNN to free these memory regions automatically.</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">    ///</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">    /// @throws InvalidArgumentException when TensorInfo isConstant parameter is false.</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"></span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> MemoryType&gt;</div>
<div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="classarmnn_1_1_const_tensor.xhtml#a2f83b6c57329068aa1ecdbc1e02f556f">  382</a></span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml#a2f83b6c57329068aa1ecdbc1e02f556f">ConstTensor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; info, MemoryType memoryArea)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        : <a class="code" href="classarmnn_1_1_base_tensor.xhtml">BaseTensor</a>&lt;const void*&gt;(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>, memoryArea)</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    {</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">if</span> (!this-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>().IsConstant())</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Invalid attempt to construct ConstTensor from non-constant TensorInfo.&quot;</span>);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    }</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;};</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160; </div>
<div class="line"><a name="l00392"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">  392</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> = std::vector&lt;std::pair&lt;LayerBindingId, class ConstTensor&gt;&gt;;</div>
<div class="line"><a name="l00393"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">  393</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> = std::vector&lt;std::pair&lt;LayerBindingId, class Tensor&gt;&gt;;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;} <span class="comment">// namespace armnn</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_a844fc6ba8f5435b5a200072a3ec163af"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a844fc6ba8f5435b5a200072a3ec163af">armnn::BaseTensor::operator=</a></div><div class="ttdeci">BaseTensor &amp; operator=(const BaseTensor &amp;)</div><div class="ttdoc">Tensors are copyable.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00544">Tensor.cpp:544</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a350bcc7d86f7d9333340a0a04be078f6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a350bcc7d86f7d9333340a0a04be078f6">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">TensorShape &amp; GetShape()</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00192">Tensor.hpp:192</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a></div><div class="ttdeci">@ Specified</div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a770b51078da02f44a819e9f95d8058b5"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">armnn::TensorInfo::GetQuantizationOffset</a></div><div class="ttdeci">int32_t GetQuantizationOffset() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00478">Tensor.cpp:478</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a047ca888c43bd7fb5702853bf72410d0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">armnn::TensorInfo::GetQuantizationScale</a></div><div class="ttdeci">float GetQuantizationScale() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00461">Tensor.cpp:461</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_ab2e02564acd2ce6db36de310702a75de"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#ab2e02564acd2ce6db36de310702a75de">armnn::BaseTensor::GetInfo</a></div><div class="ttdeci">TensorInfo &amp; GetInfo()</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00296">Tensor.hpp:296</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a71975fcec1464d639f1a78f73164d1bd"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">armnn::TensorInfo::SetDataType</a></div><div class="ttdeci">void SetDataType(DataType type)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00199">Tensor.hpp:199</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a6e6dab22049a4432e8306a301dceff52"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a6e6dab22049a4432e8306a301dceff52">armnn::TensorShape::operator[]</a></div><div class="ttdeci">unsigned int operator[](unsigned int i) const</div><div class="ttdoc">Read only operator.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00135">Tensor.cpp:135</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681">armnn::Dimensionality</a></div><div class="ttdeci">Dimensionality</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00158">Types.hpp:158</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a5a212540c00931bd2a4b4041beda33ae"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a5a212540c00931bd2a4b4041beda33ae">armnn::TensorShape::GetDimensionality</a></div><div class="ttdeci">Dimensionality GetDimensionality() const</div><div class="ttdoc">Function that returns the tensor type.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00092">Tensor.hpp:92</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00473">Tensor.cpp:473</a></div></div>
<div class="ttc" id="a_optional_8hpp_xhtml"><div class="ttname"><a href="_optional_8hpp.xhtml">Optional.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorShape::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdoc">Function that calculates the tensor elements by multiplying all dimension size which are Specified.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00181">Tensor.cpp:181</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a586e1eec08e847abfeb3de3a4038c5ce"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a586e1eec08e847abfeb3de3a4038c5ce">armnn::TensorInfo::operator==</a></div><div class="ttdeci">bool operator==(const TensorInfo &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00414">Tensor.cpp:414</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_const_tensor_xhtml_a2f83b6c57329068aa1ecdbc1e02f556f"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml#a2f83b6c57329068aa1ecdbc1e02f556f">armnn::ConstTensor::ConstTensor</a></div><div class="ttdeci">ConstTensor(const TensorInfo &amp;info, MemoryType memoryArea)</div><div class="ttdoc">ConstTensor constructed from TensorInfo and MemoryType template (a raw memory pointer).</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00382">Tensor.hpp:382</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a2a944e616dc6fdde5287b17f2265307d"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a2a944e616dc6fdde5287b17f2265307d">armnn::TensorInfo::operator!=</a></div><div class="ttdeci">bool operator!=(const TensorInfo &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00422">Tensor.cpp:422</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_ac45c8c0052476cd66ef732de76dd9bc8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#ac45c8c0052476cd66ef732de76dd9bc8">armnn::TensorInfo::operator=</a></div><div class="ttdeci">TensorInfo &amp; operator=(const TensorInfo &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00405">Tensor.cpp:405</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::BaseTensor::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00301">Tensor.hpp:301</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a77d202fcd47612eb5a4d6d23a7d4b349"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a77d202fcd47612eb5a4d6d23a7d4b349">armnn::TensorShape::operator!=</a></div><div class="ttdeci">bool operator!=(const TensorShape &amp;other) const</div><div class="ttdoc">Inequality comparison operator.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00169">Tensor.cpp:169</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_a350bcc7d86f7d9333340a0a04be078f6"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a350bcc7d86f7d9333340a0a04be078f6">armnn::BaseTensor::GetShape</a></div><div class="ttdeci">TensorShape &amp; GetShape()</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00298">Tensor.hpp:298</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a519efe8ff6dc3aacdfe8a999415e3e4e"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">armnn::TensorInfo::SetQuantizationDim</a></div><div class="ttdeci">void SetQuantizationDim(const Optional&lt; unsigned int &gt; &amp;quantizationDim)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00499">Tensor.cpp:499</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_const_tensor_xhtml_a6b6561873c02b1bd9b7a7ae8dd4a339c"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml#a6b6561873c02b1bd9b7a7ae8dd4a339c">armnn::ConstTensor::ConstTensor</a></div><div class="ttdeci">ConstTensor()</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00332">Tensor.hpp:332</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_aba26e5decca8be8786d8a5faf2e06a49"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aba26e5decca8be8786d8a5faf2e06a49">armnn::BaseTensor::m_MemoryArea</a></div><div class="ttdeci">MemoryType m_MemoryArea</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00312">Tensor.hpp:312</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a0ca6f42172d27e9799da3e3f7840ac31"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a0ca6f42172d27e9799da3e3f7840ac31">armnn::TensorShape::operator=</a></div><div class="ttdeci">TensorShape &amp; operator=(const TensorShape &amp;other)</div><div class="ttdoc">Assignation function.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00124">Tensor.cpp:124</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_abac025efeffc6e099a365bdb17b5ca3e"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#abac025efeffc6e099a365bdb17b5ca3e">armnn::BaseTensor::~BaseTensor</a></div><div class="ttdeci">~BaseTensor()</div><div class="ttdoc">Protected destructor to stop users from making these (could still new one on the heap and then leak i...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00310">Tensor.hpp:310</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml">armnn::BaseTensor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00277">Tensor.hpp:277</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8ffca1e21bdfa7f945617acd606aac91"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">armnn::TensorInfo::SetConstant</a></div><div class="ttdeci">void SetConstant(const bool IsConstant=true)</div><div class="ttdoc">Marks the data corresponding to this tensor info as constant.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00514">Tensor.cpp:514</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a07e348fae6036aecdaf41e738d1ae9ff"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a07e348fae6036aecdaf41e738d1ae9ff">armnn::TensorShape::operator==</a></div><div class="ttdeci">bool operator==(const TensorShape &amp;other) const</div><div class="ttdoc">Equality comparison operator.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00160">Tensor.cpp:160</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors.</div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a1a8675f9d64c3fb59e6af15362bb6332"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">armnn::TensorInfo::SetQuantizationScales</a></div><div class="ttdeci">void SetQuantizationScales(const std::vector&lt; float &gt; &amp;scales)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00456">Tensor.cpp:456</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a82c7d5a6e675b1a876daa9983cd125d2"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a82c7d5a6e675b1a876daa9983cd125d2">armnn::TensorShape::SetNumDimensions</a></div><div class="ttdeci">void SetNumDimensions(unsigned int numDimensions, bool initDimensionsSpecificity=false)</div><div class="ttdoc">Sets the tensor rank and therefore the Dimensionality is set to Specified if it was not.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00219">Tensor.cpp:219</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00489">Tensor.cpp:489</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a76d053cd9b4373d90682ad646dad334c"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a76d053cd9b4373d90682ad646dad334c">armnn::TensorShape::TensorShape</a></div><div class="ttdeci">TensorShape()</div><div class="ttdoc">Empty (invalid) constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00025">Tensor.cpp:25</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_aca0044508ebeb3b236a777db828910ed"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aca0044508ebeb3b236a777db828910ed">armnn::BaseTensor::BaseTensor</a></div><div class="ttdeci">BaseTensor()</div><div class="ttdoc">Empty (invalid) constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00524">Tensor.cpp:524</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aea909c7327109228ef618d459015def3">armnn::BaseTensor::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00300">Tensor.hpp:300</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a7c00efeb540198b33b8558c76e5cc2dd"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a7c00efeb540198b33b8558c76e5cc2dd">armnn::TensorInfo::IsQuantized</a></div><div class="ttdeci">bool IsQuantized() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00504">Tensor.cpp:504</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a945263e85c27f3216a8323cfc16d8919"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a945263e85c27f3216a8323cfc16d8919">armnn::TensorInfo::IsConstant</a></div><div class="ttdeci">bool IsConstant() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00509">Tensor.cpp:509</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a3919600d4aa8d5cd801a0e0740f62308"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a3919600d4aa8d5cd801a0e0740f62308">armnn::TensorShape::GetDimensionSpecificity</a></div><div class="ttdeci">bool GetDimensionSpecificity(unsigned int i) const</div><div class="ttdoc">Gets information about if the dimension size has been specified or not.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00211">Tensor.cpp:211</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_const_tensor_xhtml_aa04de06d072895b6df9125338d55c205"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml#aa04de06d072895b6df9125338d55c205">armnn::ConstTensor::ConstTensor</a></div><div class="ttdeci">ConstTensor(const TensorInfo &amp;info, const ContainerType&lt; T, ContainerArgs... &gt; &amp;container)</div><div class="ttdoc">Constructor from a backing container.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00360">Tensor.hpp:360</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a22f377fc4e10dc1773a3f979061e85f1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">armnn::TensorInfo::IsTypeSpaceMatch</a></div><div class="ttdeci">bool IsTypeSpaceMatch(const TensorInfo &amp;other) const</div><div class="ttdoc">Check that the types are the same and, if quantize, that the quantization parameters are the same.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00432">Tensor.cpp:432</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00196">Tensor.hpp:196</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_ab85cd8cc10c96a7c99c14042c251fc48"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#ab85cd8cc10c96a7c99c14042c251fc48">armnn::TensorInfo::HasPerAxisQuantization</a></div><div class="ttdeci">bool HasPerAxisQuantization() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00446">Tensor.cpp:446</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::BaseTensor::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00302">Tensor.hpp:302</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8b8fc85ce966c035d789cf22db5088a1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">armnn::TensorInfo::GetQuantizationDim</a></div><div class="ttdeci">Optional&lt; unsigned int &gt; GetQuantizationDim() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00494">Tensor.cpp:494</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::TensorInfo::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00427">Tensor.cpp:427</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_const_tensor_xhtml_a42aec46c635aa2e38932ca103d2064ed"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml#a42aec46c635aa2e38932ca103d2064ed">armnn::ConstTensor::ConstTensor</a></div><div class="ttdeci">ConstTensor(const Tensor &amp;other)</div><div class="ttdoc">ConstTensor implicitly constructed from non-const Tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00342">Tensor.hpp:342</a></div></div>
<div class="ttc" id="a_exceptions_8hpp_xhtml"><div class="ttname"><a href="_exceptions_8hpp.xhtml">Exceptions.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt; unsigned int &gt;</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_af672d1c9e2a120a18926cb645981fbb7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">armnn::TensorInfo::HasMultipleQuantizationScales</a></div><div class="ttdeci">bool HasMultipleQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00201">Tensor.hpp:201</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00193">Tensor.hpp:193</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::BaseTensor::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00297">Tensor.hpp:297</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a34e12ab75d9073354565c2039f92112b"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a34e12ab75d9073354565c2039f92112b">armnn::TensorShape::IsAtLeastOneDimensionSpecified</a></div><div class="ttdeci">bool IsAtLeastOneDimensionSpecified() const</div><div class="ttdoc">Checks if there is at least one dimension specified.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00257">Tensor.cpp:257</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8bc11f1fa23ef42532f9fdd04d355270"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">armnn::TensorInfo::GetQuantizationScales</a></div><div class="ttdeci">std::vector&lt; float &gt; GetQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00451">Tensor.cpp:451</a></div></div>
<div class="ttc" id="a_types_8hpp_xhtml"><div class="ttname"><a href="_types_8hpp.xhtml">Types.hpp</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a21c2ae9fa438faf42669dadda628080c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">armnn::TensorInfo::TensorInfo</a></div><div class="ttdeci">TensorInfo()</div><div class="ttdoc">Empty (invalid) constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00341">Tensor.cpp:341</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::BaseTensor::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00303">Tensor.hpp:303</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_aa81f67ac64f0c249e26499600c45d996"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">armnn::BaseTensor::GetMemoryArea</a></div><div class="ttdeci">MemoryType GetMemoryArea() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00305">Tensor.hpp:305</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_ad82b782a8e1a05b6a3756e73c66d5f90"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#ad82b782a8e1a05b6a3756e73c66d5f90">armnn::TensorShape::SetDimensionSize</a></div><div class="ttdeci">void SetDimensionSize(unsigned int i, unsigned int dimensionSize)</div><div class="ttdoc">Sets the size of the indicated dimension and Specificity for that dimension is set to true.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00232">Tensor.cpp:232</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_acccb75bd1d68a81f6ddd61687f51c5a1"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#acccb75bd1d68a81f6ddd61687f51c5a1">armnn::TensorShape::AreAllDimensionsSpecified</a></div><div class="ttdeci">bool AreAllDimensionsSpecified() const</div><div class="ttdoc">Checks if there is at least one dimension not specified.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00241">Tensor.cpp:241</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_a8aeddebdcf02e1832b22203c08a6b678"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">armnn::BaseTensor::GetInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00295">Tensor.hpp:295</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div><div class="ttdeci">@ info</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_2b72cc348e06937955e62ebdd8a13436.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_tensor_8hpp.xhtml">Tensor.hpp</a></li>
    <li class="footer">Generated on Wed Mar 22 2023 15:52:59 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
