<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: NetworkImpl Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_network_impl.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_network_impl-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NetworkImpl Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Private implementation of <a class="el" href="classarmnn_1_1_i_network.xhtml" title="Main network class which provides the interface for building up a neural network. ...">INetwork</a>.  
 <a href="classarmnn_1_1_network_impl.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_network_8hpp_source.xhtml">Network.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1ba03515c88a4c042bffa446d306caf0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a1ba03515c88a4c042bffa446d306caf0">NetworkImpl</a> (const <a class="el" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">NetworkOptions</a> &amp;networkOptions={})</td></tr>
<tr class="separator:a1ba03515c88a4c042bffa446d306caf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad443897d51b291c83d81d809af07f4e0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#ad443897d51b291c83d81d809af07f4e0">~NetworkImpl</a> ()</td></tr>
<tr class="separator:ad443897d51b291c83d81d809af07f4e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe0a4f719f9752a405e71878da7012ba"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#afe0a4f719f9752a405e71878da7012ba">GetGraph</a> () const</td></tr>
<tr class="separator:afe0a4f719f9752a405e71878da7012ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff3fde909d22ed157046682e70129259"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#aff3fde909d22ed157046682e70129259">PrintGraph</a> ()</td></tr>
<tr class="separator:aff3fde909d22ed157046682e70129259"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6c1c42ea44777302e87ce0fad5ac510"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#aa6c1c42ea44777302e87ce0fad5ac510">AddInputLayer</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> id, const char *name=nullptr)</td></tr>
<tr class="separator:aa6c1c42ea44777302e87ce0fad5ac510"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa51350bdd4976f3dd5a4e9d00a906b2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#aa51350bdd4976f3dd5a4e9d00a906b2c">AddActivationLayer</a> (const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;activationDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:aa51350bdd4976f3dd5a4e9d00a906b2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39f1b38d89c4de186742eafcbb3b1319"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a39f1b38d89c4de186742eafcbb3b1319">AddAdditionLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a39f1b38d89c4de186742eafcbb3b1319"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc8c1c505bca8233fe238b3b7fb80200"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#adc8c1c505bca8233fe238b3b7fb80200">AddArgMinMaxLayer</a> (const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;desc, const char *name=nullptr)</td></tr>
<tr class="separator:adc8c1c505bca8233fe238b3b7fb80200"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b74bd646ccf7ee6eaf3e23a958606ff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a7b74bd646ccf7ee6eaf3e23a958606ff">AddBatchMatMulLayer</a> (const <a class="el" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">BatchMatMulDescriptor</a> &amp;desc, const char *name=nullptr)</td></tr>
<tr class="separator:a7b74bd646ccf7ee6eaf3e23a958606ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f798e19187ac7ae6ae6153ee64ab645"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a8f798e19187ac7ae6ae6153ee64ab645">AddBatchNormalizationLayer</a> (const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;desc, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;mean, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;variance, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;beta, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;gamma, const char *name=nullptr)</td></tr>
<tr class="separator:a8f798e19187ac7ae6ae6153ee64ab645"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a9bcc00ae3d96343c93b437d6f77088"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a9a9bcc00ae3d96343c93b437d6f77088">AddBatchToSpaceNdLayer</a> (const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;batchToSpaceNdDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a9a9bcc00ae3d96343c93b437d6f77088"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72f7f58c37d9d856fcb648b5fa68cf59"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a72f7f58c37d9d856fcb648b5fa68cf59">AddCastLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a72f7f58c37d9d856fcb648b5fa68cf59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c58d2b496d24e637f613af857aa3c3d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a5c58d2b496d24e637f613af857aa3c3d">AddChannelShuffleLayer</a> (const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;channelShuffleDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a5c58d2b496d24e637f613af857aa3c3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7dca3e9f2ab2f2c64b42fc59a67188a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#ac7dca3e9f2ab2f2c64b42fc59a67188a">AddComparisonLayer</a> (const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;comparisonDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:ac7dca3e9f2ab2f2c64b42fc59a67188a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea1059833739d3dccebb3a03ec35a1e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#aea1059833739d3dccebb3a03ec35a1e6">AddConcatLayer</a> (const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;concatDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:aea1059833739d3dccebb3a03ec35a1e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a383e74ef080d4a81b8b371be4b840248"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a383e74ef080d4a81b8b371be4b840248">AddConvolution2dLayer</a> (const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;convolution2dDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a383e74ef080d4a81b8b371be4b840248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43de8213707de0e76d80a32cd4b9b482"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a43de8213707de0e76d80a32cd4b9b482">AddConvolution3dLayer</a> (const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;convolution3dDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a43de8213707de0e76d80a32cd4b9b482"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1aa567f46c30960851c02847dc7b4215"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a1aa567f46c30960851c02847dc7b4215">AddConstantLayer</a> (const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;input, const char *name=nullptr)</td></tr>
<tr class="separator:a1aa567f46c30960851c02847dc7b4215"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1853466264ac187607c96b501a74e2b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#af1853466264ac187607c96b501a74e2b">AddDepthToSpaceLayer</a> (const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;depthToSpaceDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:af1853466264ac187607c96b501a74e2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6771c8752811fcfa91b3f0dee748144"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#ac6771c8752811fcfa91b3f0dee748144">AddDepthwiseConvolution2dLayer</a> (const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;convolution2dDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:ac6771c8752811fcfa91b3f0dee748144"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a357aca04172ed22fa32e5a69122b0fec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a357aca04172ed22fa32e5a69122b0fec">AddDequantizeLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a357aca04172ed22fa32e5a69122b0fec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1134a94265293ea7347180260f787d2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#ac1134a94265293ea7347180260f787d2">AddDetectionPostProcessLayer</a> (const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;anchors, const char *name=nullptr)</td></tr>
<tr class="separator:ac1134a94265293ea7347180260f787d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0aeb4e528cf6ba4b7caca14a94fbcafe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a0aeb4e528cf6ba4b7caca14a94fbcafe">AddDivisionLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a0aeb4e528cf6ba4b7caca14a94fbcafe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a095a9b700dc857edc23c5d3bf088919f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a095a9b700dc857edc23c5d3bf088919f">AddElementwiseUnaryLayer</a> (const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;elementwiseUnaryDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a095a9b700dc857edc23c5d3bf088919f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f19808bdada45222e72edf7671a275a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a0f19808bdada45222e72edf7671a275a">AddMergeLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a0f19808bdada45222e72edf7671a275a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc94c35c0bbe852a60046bf2e756b2e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#afc94c35c0bbe852a60046bf2e756b2e0">AddFillLayer</a> (const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;fillDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:afc94c35c0bbe852a60046bf2e756b2e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a435ea88480b8645026dd45fd692663a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a435ea88480b8645026dd45fd692663a1">AddFloorLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a435ea88480b8645026dd45fd692663a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a471991a84030eb3ae601da2bee757870"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a471991a84030eb3ae601da2bee757870">AddFullyConnectedLayer</a> (const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;fullyConnectedDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a471991a84030eb3ae601da2bee757870"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf5e9645806f49d0fcd7ac07ba187f4e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#aaf5e9645806f49d0fcd7ac07ba187f4e">AddGatherLayer</a> (const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;gatherDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:aaf5e9645806f49d0fcd7ac07ba187f4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af776e284b9e2c4a3563abb8cf5e8ac5e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#af776e284b9e2c4a3563abb8cf5e8ac5e">AddGatherNdLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:af776e284b9e2c4a3563abb8cf5e8ac5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd61d3e7ab67551c75bc219bbc4baeb5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#abd61d3e7ab67551c75bc219bbc4baeb5">AddInstanceNormalizationLayer</a> (const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;desc, const char *name=nullptr)</td></tr>
<tr class="separator:abd61d3e7ab67551c75bc219bbc4baeb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaff51346dadec2c1430abf007fed4cc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#aaff51346dadec2c1430abf007fed4cc9">AddL2NormalizationLayer</a> (const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;desc, const char *name=nullptr)</td></tr>
<tr class="separator:aaff51346dadec2c1430abf007fed4cc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83b33973ca12078166b2436b313627b9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a83b33973ca12078166b2436b313627b9">AddLogSoftmaxLayer</a> (const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;logSoftmaxDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a83b33973ca12078166b2436b313627b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ff7534e1254dfb3ef8288194cca7ce3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a1ff7534e1254dfb3ef8288194cca7ce3">AddLogicalBinaryLayer</a> (const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;logicalBinaryDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a1ff7534e1254dfb3ef8288194cca7ce3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a2fdd4f442952c97a8f24de6700473a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a0a2fdd4f442952c97a8f24de6700473a">AddLstmLayer</a> (const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;params, const char *name=nullptr)</td></tr>
<tr class="separator:a0a2fdd4f442952c97a8f24de6700473a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57590d7777211673d2052f702f0b07a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a57590d7777211673d2052f702f0b07a1">AddMaximumLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a57590d7777211673d2052f702f0b07a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4726f9b7dd11db250d2a494a8a39494"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#ad4726f9b7dd11db250d2a494a8a39494">AddMeanLayer</a> (const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;meanDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:ad4726f9b7dd11db250d2a494a8a39494"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bfd8dee1a0315b651e977c672c0847c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a4bfd8dee1a0315b651e977c672c0847c">AddMinimumLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a4bfd8dee1a0315b651e977c672c0847c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb59f6ba9988dae88e0f48e68d87fc32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#abb59f6ba9988dae88e0f48e68d87fc32">AddMultiplicationLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:abb59f6ba9988dae88e0f48e68d87fc32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c5376053e1f875776d7bc36fd0b7d45"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a6c5376053e1f875776d7bc36fd0b7d45">AddNormalizationLayer</a> (const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;normalizationDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a6c5376053e1f875776d7bc36fd0b7d45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5790069aa11fd1c5bb2e17cecb06528"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#af5790069aa11fd1c5bb2e17cecb06528">AddOutputLayer</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> id, const char *name=nullptr)</td></tr>
<tr class="separator:af5790069aa11fd1c5bb2e17cecb06528"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e2df484ecc65bc82712590b96e04df4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a6e2df484ecc65bc82712590b96e04df4">AddPadLayer</a> (const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;padDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a6e2df484ecc65bc82712590b96e04df4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11f49d84f0cfd8df65f4d5206cd43b6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a11f49d84f0cfd8df65f4d5206cd43b6d">AddPermuteLayer</a> (const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;permuteDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a11f49d84f0cfd8df65f4d5206cd43b6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae913b4351b7027f37eb5657dd7867733"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#ae913b4351b7027f37eb5657dd7867733">AddPooling2dLayer</a> (const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;pooling2dDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:ae913b4351b7027f37eb5657dd7867733"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee282f8e3379d3f5bed1032d20884248"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#aee282f8e3379d3f5bed1032d20884248">AddPooling3dLayer</a> (const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;pooling3dDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:aee282f8e3379d3f5bed1032d20884248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee3a15d2fa419f50a8ac45e6d3c11e16"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#aee3a15d2fa419f50a8ac45e6d3c11e16">AddPrecompiledLayer</a> (const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;preCompiledDescriptor, <a class="el" href="namespacearmnn.xhtml#af362583b7b4c471c434cb0fdb86c2ae2">CompiledBlobPtr</a> compiledBlobPtr, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; &amp;backend, const char *name=nullptr)</td></tr>
<tr class="separator:aee3a15d2fa419f50a8ac45e6d3c11e16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d614a503a34ea3712b388aa4340ddbe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a6d614a503a34ea3712b388aa4340ddbe">AddPreluLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a6d614a503a34ea3712b388aa4340ddbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b426a3feffc76e66d73b5761806e899"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a0b426a3feffc76e66d73b5761806e899">AddQuantizeLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a0b426a3feffc76e66d73b5761806e899"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2acbae0b9e98c94b843677484775c86a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a2acbae0b9e98c94b843677484775c86a">AddQLstmLayer</a> (const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;params, const char *name=nullptr)</td></tr>
<tr class="separator:a2acbae0b9e98c94b843677484775c86a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40067b05f30a3ab65568c826df7a8ea7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a40067b05f30a3ab65568c826df7a8ea7">AddQuantizedLstmLayer</a> (const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a> &amp;params, const char *name=nullptr)</td></tr>
<tr class="separator:a40067b05f30a3ab65568c826df7a8ea7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25563024ec66627ee83727244a53e944"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a25563024ec66627ee83727244a53e944">AddRankLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a25563024ec66627ee83727244a53e944"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0cfae1ea51669892608a1a060d24fa0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#ae0cfae1ea51669892608a1a060d24fa0">AddReduceLayer</a> (const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;reduceDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:ae0cfae1ea51669892608a1a060d24fa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad97411f1fcb2c30c212483d8c673506f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#ad97411f1fcb2c30c212483d8c673506f">AddResizeLayer</a> (const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;resizeDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:ad97411f1fcb2c30c212483d8c673506f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a3380be13fba749fc4208214b049347"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a8a3380be13fba749fc4208214b049347">AddReshapeLayer</a> (const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;reshapeDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a8a3380be13fba749fc4208214b049347"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9dd4b5273829b846ab83b3ae7f3defc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#af9dd4b5273829b846ab83b3ae7f3defc">AddShapeLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:af9dd4b5273829b846ab83b3ae7f3defc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8de6b047fcaff95df48dca683e1f3aa4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a8de6b047fcaff95df48dca683e1f3aa4">AddSliceLayer</a> (const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;sliceDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a8de6b047fcaff95df48dca683e1f3aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30528a3bd85a0dba158bd14e252bd68a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a30528a3bd85a0dba158bd14e252bd68a">AddSoftmaxLayer</a> (const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;softmaxDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a30528a3bd85a0dba158bd14e252bd68a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f6d81d8a4f1f85f3616e8306760061c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a6f6d81d8a4f1f85f3616e8306760061c">AddSplitterLayer</a> (const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;splitterDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a6f6d81d8a4f1f85f3616e8306760061c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72b9d30e9d555bb5c35460b62faedf0d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a72b9d30e9d555bb5c35460b62faedf0d">AddSpaceToBatchNdLayer</a> (const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;spaceToBatchNdDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a72b9d30e9d555bb5c35460b62faedf0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19bad0cc50526ca9f4f84a688812cdf5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a19bad0cc50526ca9f4f84a688812cdf5">AddSpaceToDepthLayer</a> (const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;spaceToDepthDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a19bad0cc50526ca9f4f84a688812cdf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a446181daeb60b49cbcfd9f907f974ec1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a446181daeb60b49cbcfd9f907f974ec1">AddStackLayer</a> (const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;stackDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a446181daeb60b49cbcfd9f907f974ec1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74894d085e78ff80f45fc09dd2381f08"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a74894d085e78ff80f45fc09dd2381f08">AddStandInLayer</a> (const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;descriptor, const char *name=nullptr)</td></tr>
<tr class="separator:a74894d085e78ff80f45fc09dd2381f08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5c93cad39a690af862d49ffaec0d3c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#ac5c93cad39a690af862d49ffaec0d3c0">AddStridedSliceLayer</a> (const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;stridedSliceDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:ac5c93cad39a690af862d49ffaec0d3c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af13795cdf49e63d8bc3cb409592cdb9d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#af13795cdf49e63d8bc3cb409592cdb9d">AddSubtractionLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:af13795cdf49e63d8bc3cb409592cdb9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26e69cda5fe9642f9198c24ae5fdf9bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a26e69cda5fe9642f9198c24ae5fdf9bc">AddSwitchLayer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a26e69cda5fe9642f9198c24ae5fdf9bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41fd7b56923d5625bac2cbfebed1a393"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a41fd7b56923d5625bac2cbfebed1a393">AddTransposeConvolution2dLayer</a> (const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;weights, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;biases, const char *name=nullptr)</td></tr>
<tr class="separator:a41fd7b56923d5625bac2cbfebed1a393"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab067ba4ee9416d93abb8a52f3dc8feba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#ab067ba4ee9416d93abb8a52f3dc8feba">AddTransposeLayer</a> (const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;transposeDescriptor, const char *name=nullptr)</td></tr>
<tr class="separator:ab067ba4ee9416d93abb8a52f3dc8feba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba22dcdeed6e7c489aea6eb798c0a10a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#aba22dcdeed6e7c489aea6eb798c0a10a">AddUnidirectionalSequenceLstmLayer</a> (const <a class="el" href="namespacearmnn.xhtml#ae6c5f1b51bd32133c4dcc632045d6b58">UnidirectionalSequenceLstmDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;params, const char *name=nullptr)</td></tr>
<tr class="separator:aba22dcdeed6e7c489aea6eb798c0a10a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2090bf6670b73c69309ed592068aa3af"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a2090bf6670b73c69309ed592068aa3af">AddConvertFp16ToFp32Layer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:a2090bf6670b73c69309ed592068aa3af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab71c4df72f6587aea671acaacd6a0d9a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#ab71c4df72f6587aea671acaacd6a0d9a">AddConvertFp32ToFp16Layer</a> (const char *name=nullptr)</td></tr>
<tr class="separator:ab71c4df72f6587aea671acaacd6a0d9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72032c65bf8b8acf09b564b7d80078c5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_network_impl.xhtml#a72032c65bf8b8acf09b564b7d80078c5">ExecuteStrategy</a> (<a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a> &amp;strategy) const</td></tr>
<tr class="separator:a72032c65bf8b8acf09b564b7d80078c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Private implementation of <a class="el" href="classarmnn_1_1_i_network.xhtml" title="Main network class which provides the interface for building up a neural network. ...">INetwork</a>. </p>

<p class="definition">Definition at line <a class="el" href="_network_8hpp_source.xhtml#l00031">31</a> of file <a class="el" href="_network_8hpp_source.xhtml">Network.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a1ba03515c88a4c042bffa446d306caf0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ba03515c88a4c042bffa446d306caf0">&#9670;&nbsp;</a></span>NetworkImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_network_impl.xhtml">NetworkImpl</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">NetworkOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>networkOptions</em> = <code>{}</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01814">1814</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;: m_NetworkOptions(networkOptions),</div><div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;  m_Graph(std::make_unique&lt;Graph&gt;(GetShapeInferenceMethod(), GetAllowExpandedDims()))</div><div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<a id="ad443897d51b291c83d81d809af07f4e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad443897d51b291c83d81d809af07f4e0">&#9670;&nbsp;</a></span>~NetworkImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_network_impl.xhtml">NetworkImpl</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01819">1819</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;{</div><div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa51350bdd4976f3dd5a4e9d00a906b2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa51350bdd4976f3dd5a4e9d00a906b2c">&#9670;&nbsp;</a></span>AddActivationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddActivationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>activationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01943">1943</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;{</div><div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ActivationLayer&gt;(activationDescriptor, name);</div><div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a39f1b38d89c4de186742eafcbb3b1319"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39f1b38d89c4de186742eafcbb3b1319">&#9670;&nbsp;</a></span>AddAdditionLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddAdditionLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01989">1989</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;{</div><div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;AdditionLayer&gt;(name);</div><div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="adc8c1c505bca8233fe238b3b7fb80200"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc8c1c505bca8233fe238b3b7fb80200">&#9670;&nbsp;</a></span>AddArgMinMaxLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddArgMinMaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01949">1949</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;{</div><div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ArgMinMaxLayer&gt;(argMinMaxDescriptor, name);</div><div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7b74bd646ccf7ee6eaf3e23a958606ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b74bd646ccf7ee6eaf3e23a958606ff">&#9670;&nbsp;</a></span>AddBatchMatMulLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddBatchMatMulLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">BatchMatMulDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02664">2664</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02665"></a><span class="lineno"> 2665</span>&#160;{</div><div class="line"><a name="l02666"></a><span class="lineno"> 2666</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;BatchMatMulLayer&gt;(desc, name);</div><div class="line"><a name="l02667"></a><span class="lineno"> 2667</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8f798e19187ac7ae6ae6153ee64ab645"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f798e19187ac7ae6ae6153ee64ab645">&#9670;&nbsp;</a></span>AddBatchNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddBatchNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>variance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02004">2004</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">References <a class="el" href="_batch_normalization_layer_8hpp_source.xhtml#l00019">BatchNormalizationLayer::m_Mean</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;{</div><div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> layer = m_Graph-&gt;AddLayer&lt;BatchNormalizationLayer&gt;(desc, name);</div><div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;</div><div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;    layer-&gt;m_Mean = std::make_shared&lt;ScopedTensorHandle&gt;(mean);</div><div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;    layer-&gt;m_Variance = std::make_shared&lt;ScopedTensorHandle&gt;(variance);</div><div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;    layer-&gt;m_Beta = std::make_shared&lt;ScopedTensorHandle&gt;(beta);</div><div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;    layer-&gt;m_Gamma = std::make_shared&lt;ScopedTensorHandle&gt;(gamma);</div><div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;</div><div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;    <span class="keywordflow">return</span> layer;</div><div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9a9bcc00ae3d96343c93b437d6f77088"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a9bcc00ae3d96343c93b437d6f77088">&#9670;&nbsp;</a></span>AddBatchToSpaceNdLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddBatchToSpaceNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>batchToSpaceNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01834">1834</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;{</div><div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;BatchToSpaceNdLayer&gt;(batchToSpaceNdDescriptor, name);</div><div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a72f7f58c37d9d856fcb648b5fa68cf59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72f7f58c37d9d856fcb648b5fa68cf59">&#9670;&nbsp;</a></span>AddCastLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddCastLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01840">1840</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;{</div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;CastLayer&gt;(name);</div><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5c58d2b496d24e637f613af857aa3c3d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c58d2b496d24e637f613af857aa3c3d">&#9670;&nbsp;</a></span>AddChannelShuffleLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddChannelShuffleLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>channelShuffleDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01844">1844</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;{</div><div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ChannelShuffleLayer&gt;(channelShuffleDescriptor, name);</div><div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac7dca3e9f2ab2f2c64b42fc59a67188a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7dca3e9f2ab2f2c64b42fc59a67188a">&#9670;&nbsp;</a></span>AddComparisonLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddComparisonLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>comparisonDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01850">1850</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;{</div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ComparisonLayer&gt;(comparisonDescriptor, name);</div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aea1059833739d3dccebb3a03ec35a1e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea1059833739d3dccebb3a03ec35a1e6">&#9670;&nbsp;</a></span>AddConcatLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddConcatLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>concatDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01874">1874</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;{</div><div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ConcatLayer&gt;(concatDescriptor, name);</div><div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1aa567f46c30960851c02847dc7b4215"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1aa567f46c30960851c02847dc7b4215">&#9670;&nbsp;</a></span>AddConstantLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddConstantLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02060">2060</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">References <a class="el" href="_constant_layer_8hpp_source.xhtml#l00044">ConstantLayer::m_LayerOutput</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;{</div><div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;    <span class="keyword">auto</span> layer = m_Graph-&gt;AddLayer&lt;ConstantLayer&gt;(name);</div><div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;</div><div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;    layer-&gt;m_LayerOutput = std::make_shared&lt;ScopedTensorHandle&gt;(input);</div><div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;</div><div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;    <span class="keywordflow">return</span> layer;</div><div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2090bf6670b73c69309ed592068aa3af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2090bf6670b73c69309ed592068aa3af">&#9670;&nbsp;</a></span>AddConvertFp16ToFp32Layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddConvertFp16ToFp32Layer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01886">1886</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;{</div><div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ConvertFp16ToFp32Layer&gt;(name);</div><div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab71c4df72f6587aea671acaacd6a0d9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab71c4df72f6587aea671acaacd6a0d9a">&#9670;&nbsp;</a></span>AddConvertFp32ToFp16Layer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddConvertFp32ToFp16Layer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01891">1891</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;{</div><div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ConvertFp32ToFp16Layer&gt;(name);</div><div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a383e74ef080d4a81b8b371be4b840248"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a383e74ef080d4a81b8b371be4b840248">&#9670;&nbsp;</a></span>AddConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01880">1880</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;{</div><div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;Convolution2dLayer&gt;(convolution2dDescriptor, name);</div><div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a43de8213707de0e76d80a32cd4b9b482"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43de8213707de0e76d80a32cd4b9b482">&#9670;&nbsp;</a></span>AddConvolution3dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddConvolution3dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution3dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01896">1896</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;{</div><div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;Convolution3dLayer&gt;(convolution3dDescriptor, name);</div><div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af1853466264ac187607c96b501a74e2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1853466264ac187607c96b501a74e2b">&#9670;&nbsp;</a></span>AddDepthToSpaceLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddDepthToSpaceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>depthToSpaceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01902">1902</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;{</div><div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;DepthToSpaceLayer&gt;(depthToSpaceDescriptor, name);</div><div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac6771c8752811fcfa91b3f0dee748144"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6771c8752811fcfa91b3f0dee748144">&#9670;&nbsp;</a></span>AddDepthwiseConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddDepthwiseConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>convolution2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01908">1908</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;{</div><div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;DepthwiseConvolution2dLayer&gt;(convolution2dDescriptor, name);</div><div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a357aca04172ed22fa32e5a69122b0fec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a357aca04172ed22fa32e5a69122b0fec">&#9670;&nbsp;</a></span>AddDequantizeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddDequantizeLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02258">2258</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;{</div><div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;DequantizeLayer&gt;(name);</div><div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac1134a94265293ea7347180260f787d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1134a94265293ea7347180260f787d2">&#9670;&nbsp;</a></span>AddDetectionPostProcessLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddDetectionPostProcessLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01915">1915</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">References <a class="el" href="_detection_post_process_layer_8hpp_source.xhtml#l00020">DetectionPostProcessLayer::m_Anchors</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;{</div><div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> layer = m_Graph-&gt;AddLayer&lt;DetectionPostProcessLayer&gt;(descriptor, name);</div><div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;</div><div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;    layer-&gt;m_Anchors = std::make_shared&lt;ScopedTensorHandle&gt;(anchors);</div><div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;</div><div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;    <span class="keywordflow">return</span> layer;</div><div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0aeb4e528cf6ba4b7caca14a94fbcafe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0aeb4e528cf6ba4b7caca14a94fbcafe">&#9670;&nbsp;</a></span>AddDivisionLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddDivisionLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02233">2233</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02234"></a><span class="lineno"> 2234</span>&#160;{</div><div class="line"><a name="l02235"></a><span class="lineno"> 2235</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;DivisionLayer&gt;(name);</div><div class="line"><a name="l02236"></a><span class="lineno"> 2236</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a095a9b700dc857edc23c5d3bf088919f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a095a9b700dc857edc23c5d3bf088919f">&#9670;&nbsp;</a></span>AddElementwiseUnaryLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddElementwiseUnaryLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>elementwiseUnaryDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01856">1856</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;{</div><div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ElementwiseUnaryLayer&gt;(elementwiseUnaryDescriptor, name);</div><div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afc94c35c0bbe852a60046bf2e756b2e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc94c35c0bbe852a60046bf2e756b2e0">&#9670;&nbsp;</a></span>AddFillLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddFillLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fillDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01862">1862</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;{</div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;FillLayer&gt;(fillDescriptor, name);</div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a435ea88480b8645026dd45fd692663a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a435ea88480b8645026dd45fd692663a1">&#9670;&nbsp;</a></span>AddFloorLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddFloorLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02087">2087</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;{</div><div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;FloorLayer&gt;(name);</div><div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a471991a84030eb3ae601da2bee757870"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a471991a84030eb3ae601da2bee757870">&#9670;&nbsp;</a></span>AddFullyConnectedLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddFullyConnectedLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>fullyConnectedDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01868">1868</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;{</div><div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;FullyConnectedLayer&gt;(fullyConnectedDescriptor, name);</div><div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaf5e9645806f49d0fcd7ac07ba187f4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf5e9645806f49d0fcd7ac07ba187f4e">&#9670;&nbsp;</a></span>AddGatherLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddGatherLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>gatherDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02269">2269</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;{</div><div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;GatherLayer&gt;(gatherDescriptor, name);</div><div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af776e284b9e2c4a3563abb8cf5e8ac5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af776e284b9e2c4a3563abb8cf5e8ac5e">&#9670;&nbsp;</a></span>AddGatherNdLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddGatherNdLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02275">2275</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02276"></a><span class="lineno"> 2276</span>&#160;{</div><div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;GatherNdLayer&gt;(name);</div><div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa6c1c42ea44777302e87ce0fad5ac510"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6c1c42ea44777302e87ce0fad5ac510">&#9670;&nbsp;</a></span>AddInputLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddInputLayer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01829">1829</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;{</div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;InputLayer&gt;(id, name);</div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abd61d3e7ab67551c75bc219bbc4baeb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd61d3e7ab67551c75bc219bbc4baeb5">&#9670;&nbsp;</a></span>AddInstanceNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddInstanceNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02042">2042</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;{</div><div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;InstanceNormalizationLayer&gt;(desc, name);</div><div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaff51346dadec2c1430abf007fed4cc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaff51346dadec2c1430abf007fed4cc9">&#9670;&nbsp;</a></span>AddL2NormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddL2NormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02048">2048</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;{</div><div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;L2NormalizationLayer&gt;(desc, name);</div><div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1ff7534e1254dfb3ef8288194cca7ce3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ff7534e1254dfb3ef8288194cca7ce3">&#9670;&nbsp;</a></span>AddLogicalBinaryLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddLogicalBinaryLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>logicalBinaryDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02516">2516</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02518"></a><span class="lineno"> 2518</span>&#160;{</div><div class="line"><a name="l02519"></a><span class="lineno"> 2519</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;LogicalBinaryLayer&gt;(logicalBinaryDescriptor, name);</div><div class="line"><a name="l02520"></a><span class="lineno"> 2520</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a83b33973ca12078166b2436b313627b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83b33973ca12078166b2436b313627b9">&#9670;&nbsp;</a></span>AddLogSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddLogSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>logSoftmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02054">2054</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;{</div><div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;LogSoftmaxLayer&gt;(desc, name);</div><div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0a2fdd4f442952c97a8f24de6700473a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a2fdd4f442952c97a8f24de6700473a">&#9670;&nbsp;</a></span>AddLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02092">2092</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">References <a class="el" href="_lstm_layer_8hpp_source.xhtml#l00020">LstmLayer::m_BasicParameters</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00053">LstmInputParams::m_CellBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00059">LstmInputParams::m_CellLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00049">LstmInputParams::m_CellToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00048">LstmInputParams::m_CellToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00050">LstmInputParams::m_CellToOutputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00052">LstmInputParams::m_ForgetGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00058">LstmInputParams::m_ForgetLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00051">LstmInputParams::m_InputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00057">LstmInputParams::m_InputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00042">LstmInputParams::m_InputToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00041">LstmInputParams::m_InputToForgetWeights</a>, <a class="el" href="_lstm_parameters_8hpp_source.xhtml#l00057">LstmBasicParameters::m_InputToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00040">LstmInputParams::m_InputToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00043">LstmInputParams::m_InputToOutputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00054">LstmInputParams::m_OutputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00060">LstmInputParams::m_OutputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00056">LstmInputParams::m_ProjectionBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00055">LstmInputParams::m_ProjectionWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00046">LstmInputParams::m_RecurrentToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00045">LstmInputParams::m_RecurrentToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00044">LstmInputParams::m_RecurrentToInputWeights</a>, and <a class="el" href="_lstm_params_8hpp_source.xhtml#l00047">LstmInputParams::m_RecurrentToOutputWeights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;{</div><div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> layer = m_Graph-&gt;AddLayer&lt;LstmLayer&gt;(descriptor, name);</div><div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;</div><div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;    <span class="comment">//Lstm Basic Parameters</span></div><div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;    layer-&gt;m_BasicParameters.m_InputToForgetWeights =</div><div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToForgetWeights));</div><div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;    layer-&gt;m_BasicParameters.m_InputToCellWeights =</div><div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToCellWeights));</div><div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;    layer-&gt;m_BasicParameters.m_InputToOutputWeights =</div><div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToOutputWeights));</div><div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToForgetWeights =</div><div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToForgetWeights));</div><div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToCellWeights =</div><div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToCellWeights));</div><div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToOutputWeights =</div><div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToOutputWeights));</div><div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;    layer-&gt;m_BasicParameters.m_ForgetGateBias =</div><div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ForgetGateBias));</div><div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;    layer-&gt;m_BasicParameters.m_CellBias =</div><div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellBias));</div><div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;    layer-&gt;m_BasicParameters.m_OutputGateBias =</div><div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_OutputGateBias));</div><div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;</div><div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;    <span class="comment">//Lstm Cifg parameters</span></div><div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;    <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;    {</div><div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;        <span class="keywordflow">if</span>(params.m_InputToInputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;        {</div><div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddLstmLayer: Input To Input Weights cannot be NULL &quot;</span></div><div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;                                           <span class="stringliteral">&quot;when CIFG is disabled.&quot;</span>);</div><div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;        }</div><div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;        <span class="keywordflow">if</span>(params.m_RecurrentToInputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;        {</div><div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;                    <span class="stringliteral">&quot;AddLstmLayer: Recurrent To Input Weights cannot be NULL &quot;</span></div><div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;                    <span class="stringliteral">&quot;when CIFG is disabled.&quot;</span>);</div><div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;        }</div><div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;        <span class="keywordflow">if</span>(params.m_InputGateBias == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;        {</div><div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddLstmLayer: Input Gate Bias cannot be NULL &quot;</span></div><div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;                                           <span class="stringliteral">&quot;when CIFG is disabled.&quot;</span>);</div><div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;        }</div><div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;        layer-&gt;m_CifgParameters.m_InputToInputWeights =</div><div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToInputWeights));</div><div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;        layer-&gt;m_CifgParameters.m_RecurrentToInputWeights =</div><div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToInputWeights));</div><div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;        layer-&gt;m_CifgParameters.m_InputGateBias =</div><div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputGateBias));</div><div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;    }</div><div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;</div><div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;    <span class="comment">//Lstm projection parameters</span></div><div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;    <span class="keywordflow">if</span>(descriptor.m_ProjectionEnabled)</div><div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;    {</div><div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;        <span class="keywordflow">if</span>(params.m_ProjectionWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;        {</div><div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddLstmLayer: Projection Weights cannot be NULL &quot;</span></div><div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;                                           <span class="stringliteral">&quot;when projection is enabled.&quot;</span>);</div><div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;        }</div><div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;        layer-&gt;m_ProjectionParameters.m_ProjectionWeights =</div><div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ProjectionWeights));</div><div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;        <span class="keywordflow">if</span>(params.m_ProjectionBias != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;        {</div><div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;            layer-&gt;m_ProjectionParameters.m_ProjectionBias =</div><div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ProjectionBias));</div><div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;        }</div><div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;    }</div><div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;</div><div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;    <span class="comment">//Lstm Peephole params</span></div><div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;    <span class="keywordflow">if</span>(descriptor.m_PeepholeEnabled)</div><div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;    {</div><div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;        <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;        {</div><div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;            <span class="keywordflow">if</span>(params.m_CellToInputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;            {</div><div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddLstmLayer: Cell To Input Weights cannot be NULL &quot;</span></div><div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;                                               <span class="stringliteral">&quot;when Peephole is enabled and CIFG disabled.&quot;</span>);</div><div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;            }</div><div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;</div><div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;            layer-&gt;m_PeepholeParameters.m_CellToInputWeights =</div><div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellToInputWeights));</div><div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;        }</div><div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;</div><div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;        <span class="keywordflow">if</span>(params.m_CellToForgetWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;        {</div><div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddLstmLayer: Cell To Forget Weights cannot be NULL &quot;</span></div><div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;                                           <span class="stringliteral">&quot;when Peephole is enabled.&quot;</span>);</div><div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;        }</div><div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;        <span class="keywordflow">if</span>(params.m_CellToOutputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;        {</div><div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddLstmLayer: Cell To Output Weights cannot be NULL &quot;</span></div><div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;                                           <span class="stringliteral">&quot;when Peephole is enabled.&quot;</span>);</div><div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;        }</div><div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;</div><div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;        layer-&gt;m_PeepholeParameters.m_CellToForgetWeights =</div><div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellToForgetWeights));</div><div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;        layer-&gt;m_PeepholeParameters.m_CellToOutputWeights =</div><div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellToOutputWeights));</div><div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;    }</div><div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;</div><div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;    <span class="comment">//Lstm Layer Normalization params</span></div><div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;    <span class="keywordflow">if</span>(descriptor.m_LayerNormEnabled)</div><div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;    {</div><div class="line"><a name="l02197"></a><span class="lineno"> 2197</span>&#160;        <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;        {</div><div class="line"><a name="l02199"></a><span class="lineno"> 2199</span>&#160;            <span class="keywordflow">if</span>(params.m_InputLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;            {</div><div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddLstmLayer: Input layer normalization weights cannot be NULL &quot;</span></div><div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;                                               <span class="stringliteral">&quot;when layer normalization is enabled and CIFG disabled.&quot;</span>);</div><div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;            }</div><div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;            layer-&gt;m_LayerNormParameters.m_InputLayerNormWeights =</div><div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;                    std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputLayerNormWeights));</div><div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;        }</div><div class="line"><a name="l02207"></a><span class="lineno"> 2207</span>&#160;</div><div class="line"><a name="l02208"></a><span class="lineno"> 2208</span>&#160;        <span class="keywordflow">if</span>(params.m_ForgetLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02209"></a><span class="lineno"> 2209</span>&#160;        {</div><div class="line"><a name="l02210"></a><span class="lineno"> 2210</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddLstmLayer: Forget layer normalization weights cannot be NULL &quot;</span></div><div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;                                           <span class="stringliteral">&quot;when layer normalization is enabled.&quot;</span>);</div><div class="line"><a name="l02212"></a><span class="lineno"> 2212</span>&#160;        }</div><div class="line"><a name="l02213"></a><span class="lineno"> 2213</span>&#160;        <span class="keywordflow">if</span>(params.m_CellLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02214"></a><span class="lineno"> 2214</span>&#160;        {</div><div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddLstmLayer: Cell layer normalization weights cannot be NULL &quot;</span></div><div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;                                           <span class="stringliteral">&quot;when layer normalization is enabled.&quot;</span>);</div><div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;        }</div><div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160;        <span class="keywordflow">if</span>(params.m_OutputLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;        {</div><div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddLstmLayer: Output layer normalization weights cannot be NULL &quot;</span></div><div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160;                                           <span class="stringliteral">&quot;when layer normalization is enabled.&quot;</span>);</div><div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;        }</div><div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;        layer-&gt;m_LayerNormParameters.m_ForgetLayerNormWeights =</div><div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ForgetLayerNormWeights));</div><div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;        layer-&gt;m_LayerNormParameters.m_CellLayerNormWeights =</div><div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellLayerNormWeights));</div><div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;        layer-&gt;m_LayerNormParameters.m_OutputLayerNormWeights =</div><div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_OutputLayerNormWeights));</div><div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;    }</div><div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;    <span class="keywordflow">return</span> layer;</div><div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a57590d7777211673d2052f702f0b07a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57590d7777211673d2052f702f0b07a1">&#9670;&nbsp;</a></span>AddMaximumLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddMaximumLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01979">1979</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;{</div><div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;MaximumLayer&gt;(name);</div><div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad4726f9b7dd11db250d2a494a8a39494"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4726f9b7dd11db250d2a494a8a39494">&#9670;&nbsp;</a></span>AddMeanLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddMeanLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>meanDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02243">2243</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;{</div><div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;MeanLayer&gt;(meanDescriptor,name);</div><div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0f19808bdada45222e72edf7671a275a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f19808bdada45222e72edf7671a275a">&#9670;&nbsp;</a></span>AddMergeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddMergeLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02280">2280</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;{</div><div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;MergeLayer&gt;(name);</div><div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4bfd8dee1a0315b651e977c672c0847c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bfd8dee1a0315b651e977c672c0847c">&#9670;&nbsp;</a></span>AddMinimumLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddMinimumLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01984">1984</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;{</div><div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;MinimumLayer&gt;(name);</div><div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abb59f6ba9988dae88e0f48e68d87fc32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb59f6ba9988dae88e0f48e68d87fc32">&#9670;&nbsp;</a></span>AddMultiplicationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddMultiplicationLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01994">1994</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;{</div><div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;MultiplicationLayer&gt;(name);</div><div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6c5376053e1f875776d7bc36fd0b7d45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c5376053e1f875776d7bc36fd0b7d45">&#9670;&nbsp;</a></span>AddNormalizationLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddNormalizationLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>normalizationDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01955">1955</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;{</div><div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;NormalizationLayer&gt;(normalizationDescriptor, name);</div><div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af5790069aa11fd1c5bb2e17cecb06528"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5790069aa11fd1c5bb2e17cecb06528">&#9670;&nbsp;</a></span>AddOutputLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddOutputLayer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01999">1999</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;{</div><div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;OutputLayer&gt;(id, name);</div><div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6e2df484ecc65bc82712590b96e04df4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e2df484ecc65bc82712590b96e04df4">&#9670;&nbsp;</a></span>AddPadLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPadLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>padDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02248">2248</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;{</div><div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;PadLayer&gt;(padDescriptor,name);</div><div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a11f49d84f0cfd8df65f4d5206cd43b6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11f49d84f0cfd8df65f4d5206cd43b6d">&#9670;&nbsp;</a></span>AddPermuteLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPermuteLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>permuteDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01925">1925</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;{</div><div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;PermuteLayer&gt;(permuteDescriptor, name);</div><div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae913b4351b7027f37eb5657dd7867733"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae913b4351b7027f37eb5657dd7867733">&#9670;&nbsp;</a></span>AddPooling2dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPooling2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>pooling2dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01931">1931</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;{</div><div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;Pooling2dLayer&gt;(pooling2dDescriptor, name);</div><div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aee282f8e3379d3f5bed1032d20884248"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee282f8e3379d3f5bed1032d20884248">&#9670;&nbsp;</a></span>AddPooling3dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPooling3dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>pooling3dDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01937">1937</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;{</div><div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;Pooling3dLayer&gt;(pooling3dDescriptor, name);</div><div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aee3a15d2fa419f50a8ac45e6d3c11e16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee3a15d2fa419f50a8ac45e6d3c11e16">&#9670;&nbsp;</a></span>AddPrecompiledLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPrecompiledLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>preCompiledDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#af362583b7b4c471c434cb0fdb86c2ae2">CompiledBlobPtr</a>&#160;</td>
          <td class="paramname"><em>compiledBlobPtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>backend</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02669">2669</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00342">Layer::GetBackendHint()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00278">Layer::SetBackendId()</a>, <a class="el" href="_pre_compiled_layer_8cpp_source.xhtml#l00047">PreCompiledLayer::SetPreCompiledObject()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02673"></a><span class="lineno"> 2673</span>&#160;{</div><div class="line"><a name="l02674"></a><span class="lineno"> 2674</span>&#160;    <span class="comment">// Method use is for backend users.</span></div><div class="line"><a name="l02675"></a><span class="lineno"> 2675</span>&#160;    PreCompiledLayer* layer;</div><div class="line"><a name="l02676"></a><span class="lineno"> 2676</span>&#160;    <span class="keywordflow">if</span> (name)</div><div class="line"><a name="l02677"></a><span class="lineno"> 2677</span>&#160;    {</div><div class="line"><a name="l02678"></a><span class="lineno"> 2678</span>&#160;        layer = m_Graph-&gt;AddLayer&lt;PreCompiledLayer&gt;(preCompiledDescriptor, name);</div><div class="line"><a name="l02679"></a><span class="lineno"> 2679</span>&#160;    }</div><div class="line"><a name="l02680"></a><span class="lineno"> 2680</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l02681"></a><span class="lineno"> 2681</span>&#160;    {</div><div class="line"><a name="l02682"></a><span class="lineno"> 2682</span>&#160;        layer = m_Graph-&gt;AddLayer&lt;PreCompiledLayer&gt;(preCompiledDescriptor, <span class="stringliteral">&quot;pre-compiled&quot;</span>);</div><div class="line"><a name="l02683"></a><span class="lineno"> 2683</span>&#160;    }</div><div class="line"><a name="l02684"></a><span class="lineno"> 2684</span>&#160;</div><div class="line"><a name="l02685"></a><span class="lineno"> 2685</span>&#160;    <span class="comment">// Assign the pre-compiled object to layer</span></div><div class="line"><a name="l02686"></a><span class="lineno"> 2686</span>&#160;    <span class="comment">// Pass only one compiled network, Arm NN does not handle multiple</span></div><div class="line"><a name="l02687"></a><span class="lineno"> 2687</span>&#160;    <span class="comment">// pre-compiled objects in a single pre-compiled layer currently</span></div><div class="line"><a name="l02688"></a><span class="lineno"> 2688</span>&#160;    layer-&gt;SetPreCompiledObject(std::move(compiledBlobPtr));</div><div class="line"><a name="l02689"></a><span class="lineno"> 2689</span>&#160;</div><div class="line"><a name="l02690"></a><span class="lineno"> 2690</span>&#160;    <span class="keywordflow">if</span> (backend.has_value())</div><div class="line"><a name="l02691"></a><span class="lineno"> 2691</span>&#160;    {</div><div class="line"><a name="l02692"></a><span class="lineno"> 2692</span>&#160;        layer-&gt;SetBackendId(backend.value());</div><div class="line"><a name="l02693"></a><span class="lineno"> 2693</span>&#160;    }</div><div class="line"><a name="l02694"></a><span class="lineno"> 2694</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (layer-&gt;GetBackendHint().has_value())</div><div class="line"><a name="l02695"></a><span class="lineno"> 2695</span>&#160;    {</div><div class="line"><a name="l02696"></a><span class="lineno"> 2696</span>&#160;        layer-&gt;SetBackendId(layer-&gt;GetBackendHint().value());</div><div class="line"><a name="l02697"></a><span class="lineno"> 2697</span>&#160;    }</div><div class="line"><a name="l02698"></a><span class="lineno"> 2698</span>&#160;</div><div class="line"><a name="l02699"></a><span class="lineno"> 2699</span>&#160;    <span class="keywordflow">return</span> layer;</div><div class="line"><a name="l02700"></a><span class="lineno"> 2700</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6d614a503a34ea3712b388aa4340ddbe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d614a503a34ea3712b388aa4340ddbe">&#9670;&nbsp;</a></span>AddPreluLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddPreluLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02290">2290</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;{</div><div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;PreluLayer&gt;(name);</div><div class="line"><a name="l02293"></a><span class="lineno"> 2293</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2acbae0b9e98c94b843677484775c86a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2acbae0b9e98c94b843677484775c86a">&#9670;&nbsp;</a></span>AddQLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddQLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02374">2374</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">References <a class="el" href="_q_lstm_layer_8hpp_source.xhtml#l00083">QLstmLayer::m_BasicParameters</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00053">LstmInputParams::m_CellBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00059">LstmInputParams::m_CellLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00049">LstmInputParams::m_CellToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00048">LstmInputParams::m_CellToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00050">LstmInputParams::m_CellToOutputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00052">LstmInputParams::m_ForgetGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00058">LstmInputParams::m_ForgetLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00051">LstmInputParams::m_InputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00057">LstmInputParams::m_InputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00042">LstmInputParams::m_InputToCellWeights</a>, <a class="el" href="_q_lstm_layer_8hpp_source.xhtml#l00017">QLstmBasicParameters::m_InputToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00041">LstmInputParams::m_InputToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00040">LstmInputParams::m_InputToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00043">LstmInputParams::m_InputToOutputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00054">LstmInputParams::m_OutputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00060">LstmInputParams::m_OutputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00056">LstmInputParams::m_ProjectionBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00055">LstmInputParams::m_ProjectionWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00046">LstmInputParams::m_RecurrentToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00045">LstmInputParams::m_RecurrentToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00044">LstmInputParams::m_RecurrentToInputWeights</a>, and <a class="el" href="_lstm_params_8hpp_source.xhtml#l00047">LstmInputParams::m_RecurrentToOutputWeights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;{</div><div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> layer = m_Graph-&gt;AddLayer&lt;QLstmLayer&gt;(descriptor, name);</div><div class="line"><a name="l02379"></a><span class="lineno"> 2379</span>&#160;</div><div class="line"><a name="l02380"></a><span class="lineno"> 2380</span>&#160;    <span class="comment">// QLstm Basic Parameters</span></div><div class="line"><a name="l02381"></a><span class="lineno"> 2381</span>&#160;    layer-&gt;m_BasicParameters.m_InputToForgetWeights =</div><div class="line"><a name="l02382"></a><span class="lineno"> 2382</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToForgetWeights));</div><div class="line"><a name="l02383"></a><span class="lineno"> 2383</span>&#160;    layer-&gt;m_BasicParameters.m_InputToCellWeights =</div><div class="line"><a name="l02384"></a><span class="lineno"> 2384</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToCellWeights));</div><div class="line"><a name="l02385"></a><span class="lineno"> 2385</span>&#160;    layer-&gt;m_BasicParameters.m_InputToOutputWeights =</div><div class="line"><a name="l02386"></a><span class="lineno"> 2386</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToOutputWeights));</div><div class="line"><a name="l02387"></a><span class="lineno"> 2387</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToForgetWeights =</div><div class="line"><a name="l02388"></a><span class="lineno"> 2388</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToForgetWeights));</div><div class="line"><a name="l02389"></a><span class="lineno"> 2389</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToCellWeights =</div><div class="line"><a name="l02390"></a><span class="lineno"> 2390</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToCellWeights));</div><div class="line"><a name="l02391"></a><span class="lineno"> 2391</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToOutputWeights =</div><div class="line"><a name="l02392"></a><span class="lineno"> 2392</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToOutputWeights));</div><div class="line"><a name="l02393"></a><span class="lineno"> 2393</span>&#160;    layer-&gt;m_BasicParameters.m_ForgetGateBias =</div><div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ForgetGateBias));</div><div class="line"><a name="l02395"></a><span class="lineno"> 2395</span>&#160;    layer-&gt;m_BasicParameters.m_CellBias =</div><div class="line"><a name="l02396"></a><span class="lineno"> 2396</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellBias));</div><div class="line"><a name="l02397"></a><span class="lineno"> 2397</span>&#160;    layer-&gt;m_BasicParameters.m_OutputGateBias =</div><div class="line"><a name="l02398"></a><span class="lineno"> 2398</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_OutputGateBias));</div><div class="line"><a name="l02399"></a><span class="lineno"> 2399</span>&#160;</div><div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;    <span class="comment">// QLstm Cifg parameters</span></div><div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;    <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l02402"></a><span class="lineno"> 2402</span>&#160;    {</div><div class="line"><a name="l02403"></a><span class="lineno"> 2403</span>&#160;        <span class="keywordflow">if</span>(params.m_InputToInputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02404"></a><span class="lineno"> 2404</span>&#160;        {</div><div class="line"><a name="l02405"></a><span class="lineno"> 2405</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddQLstmLayer: Input To Input Weights cannot be NULL&quot;</span>);</div><div class="line"><a name="l02406"></a><span class="lineno"> 2406</span>&#160;        }</div><div class="line"><a name="l02407"></a><span class="lineno"> 2407</span>&#160;</div><div class="line"><a name="l02408"></a><span class="lineno"> 2408</span>&#160;        <span class="keywordflow">if</span>(params.m_RecurrentToInputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02409"></a><span class="lineno"> 2409</span>&#160;        {</div><div class="line"><a name="l02410"></a><span class="lineno"> 2410</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;                    <span class="stringliteral">&quot;AddQLstmLayer: Recurrent To Input Weights cannot be NULL&quot;</span>);</div><div class="line"><a name="l02412"></a><span class="lineno"> 2412</span>&#160;        }</div><div class="line"><a name="l02413"></a><span class="lineno"> 2413</span>&#160;</div><div class="line"><a name="l02414"></a><span class="lineno"> 2414</span>&#160;        <span class="keywordflow">if</span>(params.m_InputGateBias == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02415"></a><span class="lineno"> 2415</span>&#160;        {</div><div class="line"><a name="l02416"></a><span class="lineno"> 2416</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddQLstmLayer: Input Gate Bias cannot be NULL&quot;</span>);</div><div class="line"><a name="l02417"></a><span class="lineno"> 2417</span>&#160;        }</div><div class="line"><a name="l02418"></a><span class="lineno"> 2418</span>&#160;</div><div class="line"><a name="l02419"></a><span class="lineno"> 2419</span>&#160;        layer-&gt;m_CifgParameters.m_InputToInputWeights =</div><div class="line"><a name="l02420"></a><span class="lineno"> 2420</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToInputWeights));</div><div class="line"><a name="l02421"></a><span class="lineno"> 2421</span>&#160;        layer-&gt;m_CifgParameters.m_RecurrentToInputWeights =</div><div class="line"><a name="l02422"></a><span class="lineno"> 2422</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToInputWeights));</div><div class="line"><a name="l02423"></a><span class="lineno"> 2423</span>&#160;        layer-&gt;m_CifgParameters.m_InputGateBias =</div><div class="line"><a name="l02424"></a><span class="lineno"> 2424</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputGateBias));</div><div class="line"><a name="l02425"></a><span class="lineno"> 2425</span>&#160;    }</div><div class="line"><a name="l02426"></a><span class="lineno"> 2426</span>&#160;</div><div class="line"><a name="l02427"></a><span class="lineno"> 2427</span>&#160;    <span class="comment">// QLstm Projection parameters</span></div><div class="line"><a name="l02428"></a><span class="lineno"> 2428</span>&#160;    <span class="keywordflow">if</span>(descriptor.m_ProjectionEnabled)</div><div class="line"><a name="l02429"></a><span class="lineno"> 2429</span>&#160;    {</div><div class="line"><a name="l02430"></a><span class="lineno"> 2430</span>&#160;        <span class="keywordflow">if</span>(params.m_ProjectionWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02431"></a><span class="lineno"> 2431</span>&#160;        {</div><div class="line"><a name="l02432"></a><span class="lineno"> 2432</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddQLstmLayer: Projection Weights cannot be NULL&quot;</span>);</div><div class="line"><a name="l02433"></a><span class="lineno"> 2433</span>&#160;        }</div><div class="line"><a name="l02434"></a><span class="lineno"> 2434</span>&#160;</div><div class="line"><a name="l02435"></a><span class="lineno"> 2435</span>&#160;        layer-&gt;m_ProjectionParameters.m_ProjectionWeights =</div><div class="line"><a name="l02436"></a><span class="lineno"> 2436</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ProjectionWeights));</div><div class="line"><a name="l02437"></a><span class="lineno"> 2437</span>&#160;</div><div class="line"><a name="l02438"></a><span class="lineno"> 2438</span>&#160;        <span class="comment">// Projection bias is optional even if projection is enabled</span></div><div class="line"><a name="l02439"></a><span class="lineno"> 2439</span>&#160;        <span class="keywordflow">if</span>(params.m_ProjectionBias != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02440"></a><span class="lineno"> 2440</span>&#160;        {</div><div class="line"><a name="l02441"></a><span class="lineno"> 2441</span>&#160;            layer-&gt;m_ProjectionParameters.m_ProjectionBias =</div><div class="line"><a name="l02442"></a><span class="lineno"> 2442</span>&#160;                    std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ProjectionBias));</div><div class="line"><a name="l02443"></a><span class="lineno"> 2443</span>&#160;        }</div><div class="line"><a name="l02444"></a><span class="lineno"> 2444</span>&#160;</div><div class="line"><a name="l02445"></a><span class="lineno"> 2445</span>&#160;    }</div><div class="line"><a name="l02446"></a><span class="lineno"> 2446</span>&#160;</div><div class="line"><a name="l02447"></a><span class="lineno"> 2447</span>&#160;    <span class="comment">// QLstm Peephole params</span></div><div class="line"><a name="l02448"></a><span class="lineno"> 2448</span>&#160;    <span class="keywordflow">if</span>(descriptor.m_PeepholeEnabled)</div><div class="line"><a name="l02449"></a><span class="lineno"> 2449</span>&#160;    {</div><div class="line"><a name="l02450"></a><span class="lineno"> 2450</span>&#160;        <span class="keywordflow">if</span>(params.m_CellToForgetWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02451"></a><span class="lineno"> 2451</span>&#160;        {</div><div class="line"><a name="l02452"></a><span class="lineno"> 2452</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddQLstmLayer: Cell To Forget Weights cannot be NULL&quot;</span>);</div><div class="line"><a name="l02453"></a><span class="lineno"> 2453</span>&#160;        }</div><div class="line"><a name="l02454"></a><span class="lineno"> 2454</span>&#160;</div><div class="line"><a name="l02455"></a><span class="lineno"> 2455</span>&#160;        <span class="keywordflow">if</span>(params.m_CellToOutputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02456"></a><span class="lineno"> 2456</span>&#160;        {</div><div class="line"><a name="l02457"></a><span class="lineno"> 2457</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddQLstmLayer: Cell To Output Weights cannot be NULL&quot;</span>);</div><div class="line"><a name="l02458"></a><span class="lineno"> 2458</span>&#160;        }</div><div class="line"><a name="l02459"></a><span class="lineno"> 2459</span>&#160;</div><div class="line"><a name="l02460"></a><span class="lineno"> 2460</span>&#160;        <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l02461"></a><span class="lineno"> 2461</span>&#160;        {</div><div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;            <span class="keywordflow">if</span>(params.m_CellToInputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02463"></a><span class="lineno"> 2463</span>&#160;            {</div><div class="line"><a name="l02464"></a><span class="lineno"> 2464</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddQLstmLayer: Cell To Input Weights cannot be NULL&quot;</span>);</div><div class="line"><a name="l02465"></a><span class="lineno"> 2465</span>&#160;            }</div><div class="line"><a name="l02466"></a><span class="lineno"> 2466</span>&#160;</div><div class="line"><a name="l02467"></a><span class="lineno"> 2467</span>&#160;            layer-&gt;m_PeepholeParameters.m_CellToInputWeights =</div><div class="line"><a name="l02468"></a><span class="lineno"> 2468</span>&#160;                    std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellToInputWeights));</div><div class="line"><a name="l02469"></a><span class="lineno"> 2469</span>&#160;        }</div><div class="line"><a name="l02470"></a><span class="lineno"> 2470</span>&#160;</div><div class="line"><a name="l02471"></a><span class="lineno"> 2471</span>&#160;        layer-&gt;m_PeepholeParameters.m_CellToForgetWeights =</div><div class="line"><a name="l02472"></a><span class="lineno"> 2472</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellToForgetWeights));</div><div class="line"><a name="l02473"></a><span class="lineno"> 2473</span>&#160;        layer-&gt;m_PeepholeParameters.m_CellToOutputWeights =</div><div class="line"><a name="l02474"></a><span class="lineno"> 2474</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellToOutputWeights));</div><div class="line"><a name="l02475"></a><span class="lineno"> 2475</span>&#160;    }</div><div class="line"><a name="l02476"></a><span class="lineno"> 2476</span>&#160;</div><div class="line"><a name="l02477"></a><span class="lineno"> 2477</span>&#160;    <span class="comment">// QLstm Layer Normalization params</span></div><div class="line"><a name="l02478"></a><span class="lineno"> 2478</span>&#160;    <span class="keywordflow">if</span>(descriptor.m_LayerNormEnabled)</div><div class="line"><a name="l02479"></a><span class="lineno"> 2479</span>&#160;    {</div><div class="line"><a name="l02480"></a><span class="lineno"> 2480</span>&#160;        <span class="keywordflow">if</span>(params.m_ForgetLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02481"></a><span class="lineno"> 2481</span>&#160;        {</div><div class="line"><a name="l02482"></a><span class="lineno"> 2482</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddQLstmLayer: Forget layer normalization weights cannot be NULL&quot;</span>);</div><div class="line"><a name="l02483"></a><span class="lineno"> 2483</span>&#160;        }</div><div class="line"><a name="l02484"></a><span class="lineno"> 2484</span>&#160;</div><div class="line"><a name="l02485"></a><span class="lineno"> 2485</span>&#160;        <span class="keywordflow">if</span>(params.m_CellLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;        {</div><div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddQLstmLayer: Cell layer normalization weights cannot be NULL&quot;</span>);</div><div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;        }</div><div class="line"><a name="l02489"></a><span class="lineno"> 2489</span>&#160;</div><div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160;        <span class="keywordflow">if</span>(params.m_OutputLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02491"></a><span class="lineno"> 2491</span>&#160;        {</div><div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddQLstmLayer: Output layer normalization weights cannot be NULL&quot;</span>);</div><div class="line"><a name="l02493"></a><span class="lineno"> 2493</span>&#160;        }</div><div class="line"><a name="l02494"></a><span class="lineno"> 2494</span>&#160;</div><div class="line"><a name="l02495"></a><span class="lineno"> 2495</span>&#160;        <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l02496"></a><span class="lineno"> 2496</span>&#160;        {</div><div class="line"><a name="l02497"></a><span class="lineno"> 2497</span>&#160;            <span class="keywordflow">if</span>(params.m_InputLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02498"></a><span class="lineno"> 2498</span>&#160;            {</div><div class="line"><a name="l02499"></a><span class="lineno"> 2499</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddQLstmLayer: Input layer normalization weights cannot be NULL&quot;</span>);</div><div class="line"><a name="l02500"></a><span class="lineno"> 2500</span>&#160;            }</div><div class="line"><a name="l02501"></a><span class="lineno"> 2501</span>&#160;</div><div class="line"><a name="l02502"></a><span class="lineno"> 2502</span>&#160;            layer-&gt;m_LayerNormParameters.m_InputLayerNormWeights =</div><div class="line"><a name="l02503"></a><span class="lineno"> 2503</span>&#160;                    std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputLayerNormWeights));</div><div class="line"><a name="l02504"></a><span class="lineno"> 2504</span>&#160;        }</div><div class="line"><a name="l02505"></a><span class="lineno"> 2505</span>&#160;</div><div class="line"><a name="l02506"></a><span class="lineno"> 2506</span>&#160;        layer-&gt;m_LayerNormParameters.m_ForgetLayerNormWeights =</div><div class="line"><a name="l02507"></a><span class="lineno"> 2507</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ForgetLayerNormWeights));</div><div class="line"><a name="l02508"></a><span class="lineno"> 2508</span>&#160;        layer-&gt;m_LayerNormParameters.m_CellLayerNormWeights =</div><div class="line"><a name="l02509"></a><span class="lineno"> 2509</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellLayerNormWeights));</div><div class="line"><a name="l02510"></a><span class="lineno"> 2510</span>&#160;        layer-&gt;m_LayerNormParameters.m_OutputLayerNormWeights =</div><div class="line"><a name="l02511"></a><span class="lineno"> 2511</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_OutputLayerNormWeights));</div><div class="line"><a name="l02512"></a><span class="lineno"> 2512</span>&#160;    }</div><div class="line"><a name="l02513"></a><span class="lineno"> 2513</span>&#160;    <span class="keywordflow">return</span> layer;</div><div class="line"><a name="l02514"></a><span class="lineno"> 2514</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a40067b05f30a3ab65568c826df7a8ea7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40067b05f30a3ab65568c826df7a8ea7">&#9670;&nbsp;</a></span>AddQuantizedLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddQuantizedLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02336">2336</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">References <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00108">QuantizedLstmInputParams::GetCellBias()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00103">QuantizedLstmInputParams::GetForgetGateBias()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00098">QuantizedLstmInputParams::GetInputGateBias()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00068">QuantizedLstmInputParams::GetInputToCellWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00063">QuantizedLstmInputParams::GetInputToForgetWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00058">QuantizedLstmInputParams::GetInputToInputWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00073">QuantizedLstmInputParams::GetInputToOutputWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00113">QuantizedLstmInputParams::GetOutputGateBias()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00088">QuantizedLstmInputParams::GetRecurrentToCellWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00083">QuantizedLstmInputParams::GetRecurrentToForgetWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00078">QuantizedLstmInputParams::GetRecurrentToInputWeights()</a>, <a class="el" href="_quantized_lstm_params_8hpp_source.xhtml#l00093">QuantizedLstmInputParams::GetRecurrentToOutputWeights()</a>, <a class="el" href="_quantized_lstm_layer_8hpp_source.xhtml#l00017">QuantizedLstmParameters::m_InputToInputWeights</a>, and <a class="el" href="_quantized_lstm_layer_8hpp_source.xhtml#l00049">QuantizedLstmLayer::m_QuantizedLstmParameters</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160;{</div><div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> layer = m_Graph-&gt;AddLayer&lt;QuantizedLstmLayer&gt;(name);</div><div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;</div><div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160;    <span class="comment">// InputToX weights</span></div><div class="line"><a name="l02342"></a><span class="lineno"> 2342</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_InputToInputWeights =</div><div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetInputToInputWeights());</div><div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_InputToForgetWeights =</div><div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetInputToForgetWeights());</div><div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_InputToCellWeights =</div><div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetInputToCellWeights());</div><div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_InputToOutputWeights =</div><div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetInputToOutputWeights());</div><div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;</div><div class="line"><a name="l02351"></a><span class="lineno"> 2351</span>&#160;    <span class="comment">// RecurrentToX weights</span></div><div class="line"><a name="l02352"></a><span class="lineno"> 2352</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_RecurrentToInputWeights =</div><div class="line"><a name="l02353"></a><span class="lineno"> 2353</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetRecurrentToInputWeights());</div><div class="line"><a name="l02354"></a><span class="lineno"> 2354</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_RecurrentToForgetWeights =</div><div class="line"><a name="l02355"></a><span class="lineno"> 2355</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetRecurrentToForgetWeights());</div><div class="line"><a name="l02356"></a><span class="lineno"> 2356</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_RecurrentToCellWeights =</div><div class="line"><a name="l02357"></a><span class="lineno"> 2357</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetRecurrentToCellWeights());</div><div class="line"><a name="l02358"></a><span class="lineno"> 2358</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_RecurrentToOutputWeights =</div><div class="line"><a name="l02359"></a><span class="lineno"> 2359</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetRecurrentToOutputWeights());</div><div class="line"><a name="l02360"></a><span class="lineno"> 2360</span>&#160;</div><div class="line"><a name="l02361"></a><span class="lineno"> 2361</span>&#160;    <span class="comment">// Bias</span></div><div class="line"><a name="l02362"></a><span class="lineno"> 2362</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_InputGateBias =</div><div class="line"><a name="l02363"></a><span class="lineno"> 2363</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetInputGateBias());</div><div class="line"><a name="l02364"></a><span class="lineno"> 2364</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_ForgetGateBias =</div><div class="line"><a name="l02365"></a><span class="lineno"> 2365</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetForgetGateBias());</div><div class="line"><a name="l02366"></a><span class="lineno"> 2366</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_CellBias =</div><div class="line"><a name="l02367"></a><span class="lineno"> 2367</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetCellBias());</div><div class="line"><a name="l02368"></a><span class="lineno"> 2368</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_OutputGateBias =</div><div class="line"><a name="l02369"></a><span class="lineno"> 2369</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(params.GetOutputGateBias());</div><div class="line"><a name="l02370"></a><span class="lineno"> 2370</span>&#160;</div><div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;    <span class="keywordflow">return</span> layer;</div><div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0b426a3feffc76e66d73b5761806e899"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b426a3feffc76e66d73b5761806e899">&#9670;&nbsp;</a></span>AddQuantizeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddQuantizeLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02253">2253</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;{</div><div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;QuantizeLayer&gt;(name);</div><div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a25563024ec66627ee83727244a53e944"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25563024ec66627ee83727244a53e944">&#9670;&nbsp;</a></span>AddRankLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddRankLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02021">2021</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;{</div><div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;RankLayer&gt;(name);</div><div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae0cfae1ea51669892608a1a060d24fa0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0cfae1ea51669892608a1a060d24fa0">&#9670;&nbsp;</a></span>AddReduceLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddReduceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>reduceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02026">2026</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;{</div><div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ReduceLayer&gt;(reduceDescriptor, name);</div><div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8a3380be13fba749fc4208214b049347"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a3380be13fba749fc4208214b049347">&#9670;&nbsp;</a></span>AddReshapeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddReshapeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>reshapeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02069">2069</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;{</div><div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ReshapeLayer&gt;(reshapeDescriptor, name);</div><div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad97411f1fcb2c30c212483d8c673506f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad97411f1fcb2c30c212483d8c673506f">&#9670;&nbsp;</a></span>AddResizeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddResizeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>resizeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02032">2032</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;{</div><div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ResizeLayer&gt;(resizeDescriptor, name);</div><div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af9dd4b5273829b846ab83b3ae7f3defc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9dd4b5273829b846ab83b3ae7f3defc">&#9670;&nbsp;</a></span>AddShapeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddShapeLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02037">2037</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;{</div><div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;ShapeLayer&gt;(name);</div><div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8de6b047fcaff95df48dca683e1f3aa4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8de6b047fcaff95df48dca683e1f3aa4">&#9670;&nbsp;</a></span>AddSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>sliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01962">1962</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;{</div><div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;SliceLayer&gt;(sliceDescriptor, name);</div><div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a30528a3bd85a0dba158bd14e252bd68a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30528a3bd85a0dba158bd14e252bd68a">&#9670;&nbsp;</a></span>AddSoftmaxLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSoftmaxLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>softmaxDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01967">1967</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;{</div><div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;SoftmaxLayer&gt;(softmaxDescriptor, name);</div><div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a72b9d30e9d555bb5c35460b62faedf0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72b9d30e9d555bb5c35460b62faedf0d">&#9670;&nbsp;</a></span>AddSpaceToBatchNdLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSpaceToBatchNdLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToBatchNdDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02075">2075</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;{</div><div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;SpaceToBatchNdLayer&gt;(spaceToBatchNdDescriptor, name);</div><div class="line"><a name="l02079"></a><span class="lineno"> 2079</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a19bad0cc50526ca9f4f84a688812cdf5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19bad0cc50526ca9f4f84a688812cdf5">&#9670;&nbsp;</a></span>AddSpaceToDepthLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSpaceToDepthLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>spaceToDepthDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02081">2081</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;{</div><div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;SpaceToDepthLayer&gt;(spaceToDepthDescriptor, name);</div><div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6f6d81d8a4f1f85f3616e8306760061c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f6d81d8a4f1f85f3616e8306760061c">&#9670;&nbsp;</a></span>AddSplitterLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSplitterLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>splitterDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01973">1973</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;{</div><div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;SplitterLayer&gt;(splitterDescriptor, name);</div><div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a446181daeb60b49cbcfd9f907f974ec1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a446181daeb60b49cbcfd9f907f974ec1">&#9670;&nbsp;</a></span>AddStackLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddStackLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>stackDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02323">2323</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;{</div><div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;StackLayer&gt;(stackDescriptor, name);</div><div class="line"><a name="l02327"></a><span class="lineno"> 2327</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a74894d085e78ff80f45fc09dd2381f08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74894d085e78ff80f45fc09dd2381f08">&#9670;&nbsp;</a></span>AddStandInLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddStandInLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02330">2330</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02332"></a><span class="lineno"> 2332</span>&#160;{</div><div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;StandInLayer&gt;(desc, name);</div><div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac5c93cad39a690af862d49ffaec0d3c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5c93cad39a690af862d49ffaec0d3c0">&#9670;&nbsp;</a></span>AddStridedSliceLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddStridedSliceLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>stridedSliceDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02263">2263</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160;{</div><div class="line"><a name="l02266"></a><span class="lineno"> 2266</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;StridedSliceLayer&gt;(stridedSliceDescriptor, name);</div><div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af13795cdf49e63d8bc3cb409592cdb9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af13795cdf49e63d8bc3cb409592cdb9d">&#9670;&nbsp;</a></span>AddSubtractionLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSubtractionLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02238">2238</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02239"></a><span class="lineno"> 2239</span>&#160;{</div><div class="line"><a name="l02240"></a><span class="lineno"> 2240</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;SubtractionLayer&gt;(name);</div><div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a26e69cda5fe9642f9198c24ae5fdf9bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26e69cda5fe9642f9198c24ae5fdf9bc">&#9670;&nbsp;</a></span>AddSwitchLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddSwitchLayer </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02285">2285</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;{</div><div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;SwitchLayer&gt;(name);</div><div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a41fd7b56923d5625bac2cbfebed1a393"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41fd7b56923d5625bac2cbfebed1a393">&#9670;&nbsp;</a></span>AddTransposeConvolution2dLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddTransposeConvolution2dLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02295">2295</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">References <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01428">TransposeConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_transpose_convolution2d_layer_8hpp_source.xhtml#l00019">TransposeConvolution2dLayer::m_Weight</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02299"></a><span class="lineno"> 2299</span>&#160;{</div><div class="line"><a name="l02300"></a><span class="lineno"> 2300</span>&#160;    <span class="keywordflow">if</span> (descriptor.m_BiasEnabled &amp;&amp; !biases.has_value())</div><div class="line"><a name="l02301"></a><span class="lineno"> 2301</span>&#160;    {</div><div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddTransposeConvolution2dLayer: Biases cannot be empty&quot;</span>);</div><div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160;    }</div><div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;</div><div class="line"><a name="l02305"></a><span class="lineno"> 2305</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> layer = m_Graph-&gt;AddLayer&lt;TransposeConvolution2dLayer&gt;(descriptor, name);</div><div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;</div><div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160;    layer-&gt;m_Weight = std::make_shared&lt;ScopedTensorHandle&gt;(weights);</div><div class="line"><a name="l02308"></a><span class="lineno"> 2308</span>&#160;</div><div class="line"><a name="l02309"></a><span class="lineno"> 2309</span>&#160;    <span class="keywordflow">if</span> (descriptor.m_BiasEnabled)</div><div class="line"><a name="l02310"></a><span class="lineno"> 2310</span>&#160;    {</div><div class="line"><a name="l02311"></a><span class="lineno"> 2311</span>&#160;        layer-&gt;m_Bias = std::make_shared&lt;ScopedTensorHandle&gt;(biases.value());</div><div class="line"><a name="l02312"></a><span class="lineno"> 2312</span>&#160;    }</div><div class="line"><a name="l02313"></a><span class="lineno"> 2313</span>&#160;</div><div class="line"><a name="l02314"></a><span class="lineno"> 2314</span>&#160;    <span class="keywordflow">return</span> layer;</div><div class="line"><a name="l02315"></a><span class="lineno"> 2315</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab067ba4ee9416d93abb8a52f3dc8feba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab067ba4ee9416d93abb8a52f3dc8feba">&#9670;&nbsp;</a></span>AddTransposeLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddTransposeLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>transposeDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02317">2317</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;{</div><div class="line"><a name="l02320"></a><span class="lineno"> 2320</span>&#160;    <span class="keywordflow">return</span> m_Graph-&gt;AddLayer&lt;TransposeLayer&gt;(transposeDescriptor, name);</div><div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aba22dcdeed6e7c489aea6eb798c0a10a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba22dcdeed6e7c489aea6eb798c0a10a">&#9670;&nbsp;</a></span>AddUnidirectionalSequenceLstmLayer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> * AddUnidirectionalSequenceLstmLayer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ae6c5f1b51bd32133c4dcc632045d6b58">UnidirectionalSequenceLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02522">2522</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">References <a class="el" href="_unidirectional_sequence_lstm_layer_8hpp_source.xhtml#l00020">UnidirectionalSequenceLstmLayer::m_BasicParameters</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00053">LstmInputParams::m_CellBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00059">LstmInputParams::m_CellLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00049">LstmInputParams::m_CellToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00048">LstmInputParams::m_CellToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00050">LstmInputParams::m_CellToOutputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00052">LstmInputParams::m_ForgetGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00058">LstmInputParams::m_ForgetLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00051">LstmInputParams::m_InputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00057">LstmInputParams::m_InputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00042">LstmInputParams::m_InputToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00041">LstmInputParams::m_InputToForgetWeights</a>, <a class="el" href="_lstm_parameters_8hpp_source.xhtml#l00057">LstmBasicParameters::m_InputToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00040">LstmInputParams::m_InputToInputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00043">LstmInputParams::m_InputToOutputWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00054">LstmInputParams::m_OutputGateBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00060">LstmInputParams::m_OutputLayerNormWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00056">LstmInputParams::m_ProjectionBias</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00055">LstmInputParams::m_ProjectionWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00046">LstmInputParams::m_RecurrentToCellWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00045">LstmInputParams::m_RecurrentToForgetWeights</a>, <a class="el" href="_lstm_params_8hpp_source.xhtml#l00044">LstmInputParams::m_RecurrentToInputWeights</a>, and <a class="el" href="_lstm_params_8hpp_source.xhtml#l00047">LstmInputParams::m_RecurrentToOutputWeights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02526"></a><span class="lineno"> 2526</span>&#160;{</div><div class="line"><a name="l02527"></a><span class="lineno"> 2527</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> layer = m_Graph-&gt;AddLayer&lt;UnidirectionalSequenceLstmLayer&gt;(descriptor, name);</div><div class="line"><a name="l02528"></a><span class="lineno"> 2528</span>&#160;</div><div class="line"><a name="l02529"></a><span class="lineno"> 2529</span>&#160;    <span class="comment">//Lstm Basic Parameters</span></div><div class="line"><a name="l02530"></a><span class="lineno"> 2530</span>&#160;    layer-&gt;m_BasicParameters.m_InputToForgetWeights =</div><div class="line"><a name="l02531"></a><span class="lineno"> 2531</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToForgetWeights));</div><div class="line"><a name="l02532"></a><span class="lineno"> 2532</span>&#160;    layer-&gt;m_BasicParameters.m_InputToCellWeights =</div><div class="line"><a name="l02533"></a><span class="lineno"> 2533</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToCellWeights));</div><div class="line"><a name="l02534"></a><span class="lineno"> 2534</span>&#160;    layer-&gt;m_BasicParameters.m_InputToOutputWeights =</div><div class="line"><a name="l02535"></a><span class="lineno"> 2535</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToOutputWeights));</div><div class="line"><a name="l02536"></a><span class="lineno"> 2536</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToForgetWeights =</div><div class="line"><a name="l02537"></a><span class="lineno"> 2537</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToForgetWeights));</div><div class="line"><a name="l02538"></a><span class="lineno"> 2538</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToCellWeights =</div><div class="line"><a name="l02539"></a><span class="lineno"> 2539</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToCellWeights));</div><div class="line"><a name="l02540"></a><span class="lineno"> 2540</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToOutputWeights =</div><div class="line"><a name="l02541"></a><span class="lineno"> 2541</span>&#160;        std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToOutputWeights));</div><div class="line"><a name="l02542"></a><span class="lineno"> 2542</span>&#160;    layer-&gt;m_BasicParameters.m_ForgetGateBias =</div><div class="line"><a name="l02543"></a><span class="lineno"> 2543</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ForgetGateBias));</div><div class="line"><a name="l02544"></a><span class="lineno"> 2544</span>&#160;    layer-&gt;m_BasicParameters.m_CellBias =</div><div class="line"><a name="l02545"></a><span class="lineno"> 2545</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellBias));</div><div class="line"><a name="l02546"></a><span class="lineno"> 2546</span>&#160;    layer-&gt;m_BasicParameters.m_OutputGateBias =</div><div class="line"><a name="l02547"></a><span class="lineno"> 2547</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_OutputGateBias));</div><div class="line"><a name="l02548"></a><span class="lineno"> 2548</span>&#160;</div><div class="line"><a name="l02549"></a><span class="lineno"> 2549</span>&#160;    <span class="comment">//Lstm Cifg parameters</span></div><div class="line"><a name="l02550"></a><span class="lineno"> 2550</span>&#160;    <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l02551"></a><span class="lineno"> 2551</span>&#160;    {</div><div class="line"><a name="l02552"></a><span class="lineno"> 2552</span>&#160;        <span class="keywordflow">if</span>(params.m_InputToInputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02553"></a><span class="lineno"> 2553</span>&#160;        {</div><div class="line"><a name="l02554"></a><span class="lineno"> 2554</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddUnidirectionalSequenceLstmLayer: Input To Input Weights cannot be NULL &quot;</span></div><div class="line"><a name="l02555"></a><span class="lineno"> 2555</span>&#160;                                           <span class="stringliteral">&quot;when CIFG is disabled.&quot;</span>);</div><div class="line"><a name="l02556"></a><span class="lineno"> 2556</span>&#160;        }</div><div class="line"><a name="l02557"></a><span class="lineno"> 2557</span>&#160;        <span class="keywordflow">if</span>(params.m_RecurrentToInputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02558"></a><span class="lineno"> 2558</span>&#160;        {</div><div class="line"><a name="l02559"></a><span class="lineno"> 2559</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l02560"></a><span class="lineno"> 2560</span>&#160;                    <span class="stringliteral">&quot;AddUnidirectionalSequenceLstmLayer: Recurrent To Input Weights cannot be NULL &quot;</span></div><div class="line"><a name="l02561"></a><span class="lineno"> 2561</span>&#160;                    <span class="stringliteral">&quot;when CIFG is disabled.&quot;</span>);</div><div class="line"><a name="l02562"></a><span class="lineno"> 2562</span>&#160;        }</div><div class="line"><a name="l02563"></a><span class="lineno"> 2563</span>&#160;        <span class="keywordflow">if</span>(params.m_InputGateBias == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02564"></a><span class="lineno"> 2564</span>&#160;        {</div><div class="line"><a name="l02565"></a><span class="lineno"> 2565</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddUnidirectionalSequenceLstmLayer: Input Gate Bias cannot be NULL &quot;</span></div><div class="line"><a name="l02566"></a><span class="lineno"> 2566</span>&#160;                                           <span class="stringliteral">&quot;when CIFG is disabled.&quot;</span>);</div><div class="line"><a name="l02567"></a><span class="lineno"> 2567</span>&#160;        }</div><div class="line"><a name="l02568"></a><span class="lineno"> 2568</span>&#160;        layer-&gt;m_CifgParameters.m_InputToInputWeights =</div><div class="line"><a name="l02569"></a><span class="lineno"> 2569</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputToInputWeights));</div><div class="line"><a name="l02570"></a><span class="lineno"> 2570</span>&#160;        layer-&gt;m_CifgParameters.m_RecurrentToInputWeights =</div><div class="line"><a name="l02571"></a><span class="lineno"> 2571</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_RecurrentToInputWeights));</div><div class="line"><a name="l02572"></a><span class="lineno"> 2572</span>&#160;        layer-&gt;m_CifgParameters.m_InputGateBias =</div><div class="line"><a name="l02573"></a><span class="lineno"> 2573</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputGateBias));</div><div class="line"><a name="l02574"></a><span class="lineno"> 2574</span>&#160;    }</div><div class="line"><a name="l02575"></a><span class="lineno"> 2575</span>&#160;</div><div class="line"><a name="l02576"></a><span class="lineno"> 2576</span>&#160;    <span class="comment">//Lstm projection parameters</span></div><div class="line"><a name="l02577"></a><span class="lineno"> 2577</span>&#160;    <span class="keywordflow">if</span>(descriptor.m_ProjectionEnabled)</div><div class="line"><a name="l02578"></a><span class="lineno"> 2578</span>&#160;    {</div><div class="line"><a name="l02579"></a><span class="lineno"> 2579</span>&#160;        <span class="keywordflow">if</span>(params.m_ProjectionWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02580"></a><span class="lineno"> 2580</span>&#160;        {</div><div class="line"><a name="l02581"></a><span class="lineno"> 2581</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddUnidirectionalSequenceLstmLayer: Projection Weights cannot be NULL &quot;</span></div><div class="line"><a name="l02582"></a><span class="lineno"> 2582</span>&#160;                                           <span class="stringliteral">&quot;when projection is enabled.&quot;</span>);</div><div class="line"><a name="l02583"></a><span class="lineno"> 2583</span>&#160;        }</div><div class="line"><a name="l02584"></a><span class="lineno"> 2584</span>&#160;        layer-&gt;m_ProjectionParameters.m_ProjectionWeights =</div><div class="line"><a name="l02585"></a><span class="lineno"> 2585</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ProjectionWeights));</div><div class="line"><a name="l02586"></a><span class="lineno"> 2586</span>&#160;        <span class="keywordflow">if</span>(params.m_ProjectionBias != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02587"></a><span class="lineno"> 2587</span>&#160;        {</div><div class="line"><a name="l02588"></a><span class="lineno"> 2588</span>&#160;            layer-&gt;m_ProjectionParameters.m_ProjectionBias =</div><div class="line"><a name="l02589"></a><span class="lineno"> 2589</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ProjectionBias));</div><div class="line"><a name="l02590"></a><span class="lineno"> 2590</span>&#160;        }</div><div class="line"><a name="l02591"></a><span class="lineno"> 2591</span>&#160;    }</div><div class="line"><a name="l02592"></a><span class="lineno"> 2592</span>&#160;</div><div class="line"><a name="l02593"></a><span class="lineno"> 2593</span>&#160;    <span class="comment">//Lstm Peephole params</span></div><div class="line"><a name="l02594"></a><span class="lineno"> 2594</span>&#160;    <span class="keywordflow">if</span>(descriptor.m_PeepholeEnabled)</div><div class="line"><a name="l02595"></a><span class="lineno"> 2595</span>&#160;    {</div><div class="line"><a name="l02596"></a><span class="lineno"> 2596</span>&#160;        <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l02597"></a><span class="lineno"> 2597</span>&#160;        {</div><div class="line"><a name="l02598"></a><span class="lineno"> 2598</span>&#160;            <span class="keywordflow">if</span>(params.m_CellToInputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02599"></a><span class="lineno"> 2599</span>&#160;            {</div><div class="line"><a name="l02600"></a><span class="lineno"> 2600</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddUnidirectionalSequenceLstmLayer: Cell To Input Weights &quot;</span></div><div class="line"><a name="l02601"></a><span class="lineno"> 2601</span>&#160;                                               <span class="stringliteral">&quot;cannot be NULL when Peephole is enabled and CIFG disabled.&quot;</span>);</div><div class="line"><a name="l02602"></a><span class="lineno"> 2602</span>&#160;            }</div><div class="line"><a name="l02603"></a><span class="lineno"> 2603</span>&#160;</div><div class="line"><a name="l02604"></a><span class="lineno"> 2604</span>&#160;            layer-&gt;m_PeepholeParameters.m_CellToInputWeights =</div><div class="line"><a name="l02605"></a><span class="lineno"> 2605</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellToInputWeights));</div><div class="line"><a name="l02606"></a><span class="lineno"> 2606</span>&#160;        }</div><div class="line"><a name="l02607"></a><span class="lineno"> 2607</span>&#160;</div><div class="line"><a name="l02608"></a><span class="lineno"> 2608</span>&#160;        <span class="keywordflow">if</span>(params.m_CellToForgetWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02609"></a><span class="lineno"> 2609</span>&#160;        {</div><div class="line"><a name="l02610"></a><span class="lineno"> 2610</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddUnidirectionalSequenceLstmLayer: Cell To Forget Weights cannot be NULL &quot;</span></div><div class="line"><a name="l02611"></a><span class="lineno"> 2611</span>&#160;                                           <span class="stringliteral">&quot;when Peephole is enabled.&quot;</span>);</div><div class="line"><a name="l02612"></a><span class="lineno"> 2612</span>&#160;        }</div><div class="line"><a name="l02613"></a><span class="lineno"> 2613</span>&#160;        <span class="keywordflow">if</span>(params.m_CellToOutputWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02614"></a><span class="lineno"> 2614</span>&#160;        {</div><div class="line"><a name="l02615"></a><span class="lineno"> 2615</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddUnidirectionalSequenceLstmLayer: Cell To Output Weights cannot be NULL &quot;</span></div><div class="line"><a name="l02616"></a><span class="lineno"> 2616</span>&#160;                                           <span class="stringliteral">&quot;when Peephole is enabled.&quot;</span>);</div><div class="line"><a name="l02617"></a><span class="lineno"> 2617</span>&#160;        }</div><div class="line"><a name="l02618"></a><span class="lineno"> 2618</span>&#160;</div><div class="line"><a name="l02619"></a><span class="lineno"> 2619</span>&#160;        layer-&gt;m_PeepholeParameters.m_CellToForgetWeights =</div><div class="line"><a name="l02620"></a><span class="lineno"> 2620</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellToForgetWeights));</div><div class="line"><a name="l02621"></a><span class="lineno"> 2621</span>&#160;        layer-&gt;m_PeepholeParameters.m_CellToOutputWeights =</div><div class="line"><a name="l02622"></a><span class="lineno"> 2622</span>&#160;            std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellToOutputWeights));</div><div class="line"><a name="l02623"></a><span class="lineno"> 2623</span>&#160;    }</div><div class="line"><a name="l02624"></a><span class="lineno"> 2624</span>&#160;</div><div class="line"><a name="l02625"></a><span class="lineno"> 2625</span>&#160;    <span class="comment">//Lstm Layer Normalization params</span></div><div class="line"><a name="l02626"></a><span class="lineno"> 2626</span>&#160;    <span class="keywordflow">if</span>(descriptor.m_LayerNormEnabled)</div><div class="line"><a name="l02627"></a><span class="lineno"> 2627</span>&#160;    {</div><div class="line"><a name="l02628"></a><span class="lineno"> 2628</span>&#160;        <span class="keywordflow">if</span>(!descriptor.m_CifgEnabled)</div><div class="line"><a name="l02629"></a><span class="lineno"> 2629</span>&#160;        {</div><div class="line"><a name="l02630"></a><span class="lineno"> 2630</span>&#160;            <span class="keywordflow">if</span>(params.m_InputLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02631"></a><span class="lineno"> 2631</span>&#160;            {</div><div class="line"><a name="l02632"></a><span class="lineno"> 2632</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddUnidirectionalSequenceLstmLayer: Input layer normalization weights &quot;</span></div><div class="line"><a name="l02633"></a><span class="lineno"> 2633</span>&#160;                                               <span class="stringliteral">&quot;cannot be NULL when layer normalization is enabled and CIFG disabled.&quot;</span>);</div><div class="line"><a name="l02634"></a><span class="lineno"> 2634</span>&#160;            }</div><div class="line"><a name="l02635"></a><span class="lineno"> 2635</span>&#160;            layer-&gt;m_LayerNormParameters.m_InputLayerNormWeights =</div><div class="line"><a name="l02636"></a><span class="lineno"> 2636</span>&#160;                    std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_InputLayerNormWeights));</div><div class="line"><a name="l02637"></a><span class="lineno"> 2637</span>&#160;        }</div><div class="line"><a name="l02638"></a><span class="lineno"> 2638</span>&#160;</div><div class="line"><a name="l02639"></a><span class="lineno"> 2639</span>&#160;        <span class="keywordflow">if</span>(params.m_ForgetLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02640"></a><span class="lineno"> 2640</span>&#160;        {</div><div class="line"><a name="l02641"></a><span class="lineno"> 2641</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddUnidirectionalSequenceLstmLayer: Forget layer normalization weights &quot;</span></div><div class="line"><a name="l02642"></a><span class="lineno"> 2642</span>&#160;                                           <span class="stringliteral">&quot;cannot be NULL when layer normalization is enabled.&quot;</span>);</div><div class="line"><a name="l02643"></a><span class="lineno"> 2643</span>&#160;        }</div><div class="line"><a name="l02644"></a><span class="lineno"> 2644</span>&#160;        <span class="keywordflow">if</span>(params.m_CellLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02645"></a><span class="lineno"> 2645</span>&#160;        {</div><div class="line"><a name="l02646"></a><span class="lineno"> 2646</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddUnidirectionalSequenceLstmLayer: Cell layer normalization weights &quot;</span></div><div class="line"><a name="l02647"></a><span class="lineno"> 2647</span>&#160;                                           <span class="stringliteral">&quot;cannot be NULL when layer normalization is enabled.&quot;</span>);</div><div class="line"><a name="l02648"></a><span class="lineno"> 2648</span>&#160;        }</div><div class="line"><a name="l02649"></a><span class="lineno"> 2649</span>&#160;        <span class="keywordflow">if</span>(params.m_OutputLayerNormWeights == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l02650"></a><span class="lineno"> 2650</span>&#160;        {</div><div class="line"><a name="l02651"></a><span class="lineno"> 2651</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;AddUnidirectionalSequenceLstmLayer: Output layer normalization weights &quot;</span></div><div class="line"><a name="l02652"></a><span class="lineno"> 2652</span>&#160;                                           <span class="stringliteral">&quot;cannot be NULL when layer normalization is enabled.&quot;</span>);</div><div class="line"><a name="l02653"></a><span class="lineno"> 2653</span>&#160;        }</div><div class="line"><a name="l02654"></a><span class="lineno"> 2654</span>&#160;        layer-&gt;m_LayerNormParameters.m_ForgetLayerNormWeights =</div><div class="line"><a name="l02655"></a><span class="lineno"> 2655</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_ForgetLayerNormWeights));</div><div class="line"><a name="l02656"></a><span class="lineno"> 2656</span>&#160;        layer-&gt;m_LayerNormParameters.m_CellLayerNormWeights =</div><div class="line"><a name="l02657"></a><span class="lineno"> 2657</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_CellLayerNormWeights));</div><div class="line"><a name="l02658"></a><span class="lineno"> 2658</span>&#160;        layer-&gt;m_LayerNormParameters.m_OutputLayerNormWeights =</div><div class="line"><a name="l02659"></a><span class="lineno"> 2659</span>&#160;                std::make_shared&lt;ScopedTensorHandle&gt;(*(params.m_OutputLayerNormWeights));</div><div class="line"><a name="l02660"></a><span class="lineno"> 2660</span>&#160;    }</div><div class="line"><a name="l02661"></a><span class="lineno"> 2661</span>&#160;    <span class="keywordflow">return</span> layer;</div><div class="line"><a name="l02662"></a><span class="lineno"> 2662</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a72032c65bf8b8acf09b564b7d80078c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72032c65bf8b8acf09b564b7d80078c5">&#9670;&nbsp;</a></span>ExecuteStrategy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ExecuteStrategy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_strategy.xhtml">IStrategy</a> &amp;&#160;</td>
          <td class="paramname"><em>strategy</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l02702">2702</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">References <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l02703"></a><span class="lineno"> 2703</span>&#160;{</div><div class="line"><a name="l02704"></a><span class="lineno"> 2704</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> layer : <a class="code" href="classarmnn_1_1_network_impl.xhtml#afe0a4f719f9752a405e71878da7012ba">GetGraph</a>())</div><div class="line"><a name="l02705"></a><span class="lineno"> 2705</span>&#160;    {</div><div class="line"><a name="l02706"></a><span class="lineno"> 2706</span>&#160;        layer-&gt;ExecuteStrategy(strategy);</div><div class="line"><a name="l02707"></a><span class="lineno"> 2707</span>&#160;    };</div><div class="line"><a name="l02708"></a><span class="lineno"> 2708</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_network_impl_xhtml_afe0a4f719f9752a405e71878da7012ba"><div class="ttname"><a href="classarmnn_1_1_network_impl.xhtml#afe0a4f719f9752a405e71878da7012ba">armnn::NetworkImpl::GetGraph</a></div><div class="ttdeci">const Graph &amp; GetGraph() const</div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00037">Network.hpp:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe0a4f719f9752a405e71878da7012ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe0a4f719f9752a405e71878da7012ba">&#9670;&nbsp;</a></span>GetGraph()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; GetGraph </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8hpp_source.xhtml#l00037">37</a> of file <a class="el" href="_network_8hpp_source.xhtml">Network.hpp</a>.</p>

<p class="reference">References <a class="el" href="_network_8cpp_source.xhtml#l01943">NetworkImpl::AddActivationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01989">NetworkImpl::AddAdditionLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01949">NetworkImpl::AddArgMinMaxLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02664">NetworkImpl::AddBatchMatMulLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02004">NetworkImpl::AddBatchNormalizationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01834">NetworkImpl::AddBatchToSpaceNdLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01840">NetworkImpl::AddCastLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01844">NetworkImpl::AddChannelShuffleLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01850">NetworkImpl::AddComparisonLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01874">NetworkImpl::AddConcatLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02060">NetworkImpl::AddConstantLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01886">NetworkImpl::AddConvertFp16ToFp32Layer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01891">NetworkImpl::AddConvertFp32ToFp16Layer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01880">NetworkImpl::AddConvolution2dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01896">NetworkImpl::AddConvolution3dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01902">NetworkImpl::AddDepthToSpaceLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01908">NetworkImpl::AddDepthwiseConvolution2dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02258">NetworkImpl::AddDequantizeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01915">NetworkImpl::AddDetectionPostProcessLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02233">NetworkImpl::AddDivisionLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01856">NetworkImpl::AddElementwiseUnaryLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01862">NetworkImpl::AddFillLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02087">NetworkImpl::AddFloorLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01868">NetworkImpl::AddFullyConnectedLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02269">NetworkImpl::AddGatherLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02275">NetworkImpl::AddGatherNdLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01829">NetworkImpl::AddInputLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02042">NetworkImpl::AddInstanceNormalizationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02048">NetworkImpl::AddL2NormalizationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02516">NetworkImpl::AddLogicalBinaryLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02054">NetworkImpl::AddLogSoftmaxLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02092">NetworkImpl::AddLstmLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01979">NetworkImpl::AddMaximumLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02243">NetworkImpl::AddMeanLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02280">NetworkImpl::AddMergeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01984">NetworkImpl::AddMinimumLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01994">NetworkImpl::AddMultiplicationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01955">NetworkImpl::AddNormalizationLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01999">NetworkImpl::AddOutputLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02248">NetworkImpl::AddPadLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01925">NetworkImpl::AddPermuteLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01931">NetworkImpl::AddPooling2dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01937">NetworkImpl::AddPooling3dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02669">NetworkImpl::AddPrecompiledLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02290">NetworkImpl::AddPreluLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02374">NetworkImpl::AddQLstmLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02336">NetworkImpl::AddQuantizedLstmLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02253">NetworkImpl::AddQuantizeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02021">NetworkImpl::AddRankLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02026">NetworkImpl::AddReduceLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02069">NetworkImpl::AddReshapeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02032">NetworkImpl::AddResizeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02037">NetworkImpl::AddShapeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01962">NetworkImpl::AddSliceLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01967">NetworkImpl::AddSoftmaxLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02075">NetworkImpl::AddSpaceToBatchNdLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02081">NetworkImpl::AddSpaceToDepthLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01973">NetworkImpl::AddSplitterLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02323">NetworkImpl::AddStackLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02330">NetworkImpl::AddStandInLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02263">NetworkImpl::AddStridedSliceLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02238">NetworkImpl::AddSubtractionLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02285">NetworkImpl::AddSwitchLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02295">NetworkImpl::AddTransposeConvolution2dLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02317">NetworkImpl::AddTransposeLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02522">NetworkImpl::AddUnidirectionalSequenceLstmLayer()</a>, <a class="el" href="_network_8cpp_source.xhtml#l02702">NetworkImpl::ExecuteStrategy()</a>, and <a class="el" href="_network_8cpp_source.xhtml#l01823">NetworkImpl::PrintGraph()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8cpp_source.xhtml#l02702">NetworkImpl::ExecuteStrategy()</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    { <span class="keywordflow">return</span> *m_Graph; }</div></div><!-- fragment -->
</div>
</div>
<a id="aff3fde909d22ed157046682e70129259"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff3fde909d22ed157046682e70129259">&#9670;&nbsp;</a></span>PrintGraph()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> PrintGraph </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_network_8cpp_source.xhtml#l01823">1823</a> of file <a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Success</a>.</p>

<p class="reference">Referenced by <a class="el" href="_network_8hpp_source.xhtml#l00037">NetworkImpl::GetGraph()</a>.</p>
<div class="fragment"><div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;{</div><div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;    m_Graph-&gt;Print();</div><div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a>;</div><div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_network_8hpp_source.xhtml">Network.hpp</a></li>
<li>src/armnn/<a class="el" href="_network_8cpp_source.xhtml">Network.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_network_impl.xhtml">NetworkImpl</a></li>
    <li class="footer">Generated on Fri Feb 24 2023 10:24:32 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
