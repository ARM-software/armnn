<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1optimizations_1_1_permute_and_batch_to_space_as_depth_to_space_impl.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1optimizations_1_1_permute_and_batch_to_space_as_depth_to_space_impl-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Replaces Permute leading into BatchToSpace with a DepthToSpace in the case where the Permute swaps the batch and channels dimensions such that the replacement is valid.  
 <a href="classarmnn_1_1optimizations_1_1_permute_and_batch_to_space_as_depth_to_space_impl.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml">PermuteAndBatchToSpaceAsDepthToSpace.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5a8476ffc04ce7460bb09ad50d1d23de"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1optimizations_1_1_permute_and_batch_to_space_as_depth_to_space_impl.xhtml#a5a8476ffc04ce7460bb09ad50d1d23de">Run</a> (<a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph, <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;connection) const</td></tr>
<tr class="separator:a5a8476ffc04ce7460bb09ad50d1d23de"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename PermuteType&gt;<br />
class armnn::optimizations::PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;</h3>

<p>Replaces Permute leading into BatchToSpace with a DepthToSpace in the case where the Permute swaps the batch and channels dimensions such that the replacement is valid. </p>

<p class="definition">Definition at line <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00018">18</a> of file <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml">PermuteAndBatchToSpaceAsDepthToSpace.hpp</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a5a8476ffc04ce7460bb09ad50d1d23de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a8476ffc04ce7460bb09ad50d1d23de">&#9670;&nbsp;</a></span>Run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Run </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;&#160;</td>
          <td class="paramname"><em>connection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">21</a> of file <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml">PermuteAndBatchToSpaceAsDepthToSpace.hpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::BatchToSpaceNd</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00056">InputSlot::GetConnectedOutputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00206">InputSlot::GetConnection()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00324">Layer::GetInputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00319">Layer::GetName()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00326">Layer::GetOutputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00053">InputSlot::GetOwningLayer()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00119">OutputSlot::GetOwningLayer()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00092">OutputSlot::GetTensorInfo()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00273">Layer::GetType()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00861">BatchToSpaceNdDescriptor::m_Crops</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00863">BatchToSpaceNdDescriptor::m_DataLayout</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00145">OutputSlot::MoveAllConnections()</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::Permute</a>, and <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::Transpose</a>.</p>
<div class="fragment"><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="comment">// Validate base layer (the Permute) is compatible</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        Layer&amp; base = connection.GetConnectedOutputSlot()-&gt;GetOwningLayer();</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">LayerType::Permute</a> || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">LayerType::Transpose</a>);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keyword">const</span> TensorInfo&amp; inputInfo = base.GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keyword">const</span> TensorInfo&amp; intermediateInfo = base.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keywordflow">if</span> (intermediateInfo.GetNumDimensions() != 4)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            <span class="comment">// Must be 4D, otherwise the below checks do not make sense</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">if</span> (!static_cast&lt;PermuteType&amp;&gt;(base).GetParameters().m_DimMappings.IsEqual(PermutationVector{ 3, 1, 2, 0 }))</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="comment">// Must swap batch and channels dimensions, otherwise it is not the (original) channels dimension</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            <span class="comment">// that is being decomposed.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="comment">// Validate child layer (the BatchToSpace) is compatible</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        Layer&amp; child = connection.GetOwningLayer();</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(child.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">LayerType::BatchToSpaceNd</a>);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keyword">const</span> TensorInfo&amp; outputInfo = child.GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keyword">const</span> BatchToSpaceNdDescriptor&amp; batchToSpaceDesc = <span class="keyword">static_cast&lt;</span>BatchToSpaceNdLayer&amp;<span class="keyword">&gt;</span>(child).GetParameters();</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">if</span> (batchToSpaceDesc.m_DataLayout != <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="comment">// The rest of this function assumes NHWC, although in future this restriction could be lifted.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">if</span> (batchToSpaceDesc.m_Crops != std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt;{ { 0, 0 }, { 0, 0 } })</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="comment">// Cropping is not supported in DepthToSpace</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span> (batchToSpaceDesc.m_BlockShape.size() != 2 ||</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        batchToSpaceDesc.m_BlockShape[0] != batchToSpaceDesc.m_BlockShape[1])</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="comment">// Asymmetric or non-2D block sizes are not supported by DepthToSpace</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        uint32_t blockSize = batchToSpaceDesc.m_BlockShape[0];</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">if</span> (outputInfo.GetShape()[0] != 1 || outputInfo.GetShape()[3] != 1)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="comment">// The final output must have 1 batch and 1 channel because these dimensions will be swapped around</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="comment">// once we make the substitution, and it needs to be equivalent.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="comment">// Validate the intermediate tensor quantization params.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// These must be identical to either the input or output quantization params, otherwise the intermediate tensor</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="comment">// may not have sufficient range/precision to preserve the values.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="comment">// This would mean that once we perform the substitution this loss of precision will no longer occur,</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="comment">// so we would have changed the meaning of the network.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordtype">bool</span> isIntermediateQuantParamsSameAsInput =</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                intermediateInfo.GetQuantizationScale() == inputInfo.GetQuantizationScale() &amp;&amp;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                intermediateInfo.GetQuantizationOffset() == inputInfo.GetQuantizationOffset();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordtype">bool</span> isIntermediateQuantParamsSameAsOutput =</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                intermediateInfo.GetQuantizationScale() == outputInfo.GetQuantizationScale() &amp;&amp;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                intermediateInfo.GetQuantizationOffset() == outputInfo.GetQuantizationOffset();</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">if</span> (!isIntermediateQuantParamsSameAsInput &amp;&amp; !isIntermediateQuantParamsSameAsOutput)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="comment">// Insert equivalent DepthToSpace layer</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keyword">const</span> std::string name = std::string(<span class="stringliteral">&quot;merged-&quot;</span>) + base.GetName() + std::string(<span class="stringliteral">&quot;-with-&quot;</span>) + child.GetName();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment">// Inserts equivalent reshape before base layer.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> depthToSpaceDesc(blockSize, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keyword">auto</span>&amp; depthToSpace = *graph.InsertNewLayer&lt;DepthToSpaceLayer&gt;(base.GetInputSlot(0),</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                                                      depthToSpaceDesc,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                                      name.c_str());</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment">// Moves connections from child output to new layer.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment">// Child layer will be removed as it&#39;s left unconnected.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="comment">// Base layer will be removed if left unconnected.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        child.GetOutputSlot().MoveAllConnections(depthToSpace.GetOutputSlot());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::LayerType::BatchToSpaceNd</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::LayerType::Permute</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::LayerType::Transpose</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3647f60510bc8ddaced01c51b0ee8714"><div class="ttname"><a href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">armnn::DepthToSpaceDescriptor</a></div><div class="ttdeci">SpaceToDepthDescriptor DepthToSpaceDescriptor</div><div class="ttdoc">A DepthToSpaceDescriptor for the DepthToSpaceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01039">Descriptors.hpp:1039</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/armnn/optimizations/<a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml">PermuteAndBatchToSpaceAsDepthToSpace.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1optimizations.xhtml">optimizations</a></li><li class="navelem"><a class="el" href="classarmnn_1_1optimizations_1_1_permute_and_batch_to_space_as_depth_to_space_impl.xhtml">PermuteAndBatchToSpaceAsDepthToSpaceImpl</a></li>
    <li class="footer">Generated on Wed Nov 23 2022 10:57:43 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
