<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/profiling/gatordmock/CommandFileParser.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_command_file_parser_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CommandFileParser.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_command_file_parser_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2019 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_command_file_parser_8hpp.xhtml">CommandFileParser.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1gatordmock.xhtml">   16</a></span>&#160;<span class="keyword">namespace </span>gatordmock</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="classarmnn_1_1gatordmock_1_1_command_file_parser.xhtml#a224fc15053b9579998ce82f22038bab1">   19</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1gatordmock_1_1_command_file_parser.xhtml#a224fc15053b9579998ce82f22038bab1">CommandFileParser::ParseFile</a>(std::string CommandFile, <a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a>&amp; mockService)</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    std::ifstream infile(CommandFile);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    std::string line;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;Parsing command file: &quot;</span> &lt;&lt; CommandFile &lt;&lt; std::endl;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordflow">while</span> (mockService.<a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a82bd11e044b4bc9c647fcaa9ce5b3e55">ReceiveThreadRunning</a>() &amp;&amp; std::getline(infile, line))</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        std::istringstream iss(line);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        std::vector&lt;std::string&gt; tokens;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        std::copy(std::istream_iterator&lt;std::string&gt;(iss), std::istream_iterator&lt;std::string&gt;(),</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                  std::back_inserter(tokens));</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">if</span> (tokens.size() &gt; 0)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            std::string command = tokens[0];</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            <span class="keywordflow">if</span> (command == <span class="stringliteral">&quot;DISABLE&quot;</span>)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                <span class="comment">// Send a deactivate timeline packet</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                <span class="comment">// Expected format for the ENABLE command</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                <span class="comment">//      DISABLE</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                mockService.<a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a0fa494c4df7426405e756b74656381ec">SendDeactivateTimelinePacket</a>();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (command == <span class="stringliteral">&quot;ENABLE&quot;</span>)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                <span class="comment">// Send aa activate timeline packet</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                <span class="comment">// Expected format for the ENABLE command</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                <span class="comment">//      ENABLE</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                mockService.<a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a3833c5c6bec750969b5050c031032637">SendActivateTimelinePacket</a>();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (command == <span class="stringliteral">&quot;LIST&quot;</span>)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                <span class="comment">// Request the Counter Directory</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                <span class="comment">// Expected format for the LIST command</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="comment">//      LIST</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                mockService.<a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a2b9de2e6eee97f258fe2d7c765206e8a">SendRequestCounterDir</a>();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">if</span> (command == <span class="stringliteral">&quot;SET&quot;</span>)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="comment">// Send a periodic counter selection packet</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="comment">// Expected format for the SET command</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="comment">//      SET 500000 1 2 5 10</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <span class="comment">// This breaks down to:</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="comment">// SET          command</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="comment">// 500000       polling period in micro seconds</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="comment">// 1 2 5 10     counter list</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keywordflow">if</span> (tokens.size() &gt; 2) <span class="comment">// minimum of 3 tokens.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    uint32_t period = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(std::stoul(tokens[1]));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    std::vector&lt;uint16_t&gt; counters;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    std::transform(tokens.begin() + 2, tokens.end(), std::back_inserter(counters),</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                   [](<span class="keyword">const</span> std::string&amp; str)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                       { <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(std::stoul(str)); });</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    mockService.<a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#abaf2feb0e79566de18721659d896dae1">SendPeriodicCounterSelectionList</a>(period, counters);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    std::cerr &lt;&lt; <span class="stringliteral">&quot;Invalid SET command. Format is: SET &lt;polling period&gt; &lt;id list&gt;&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (command == <span class="stringliteral">&quot;WAIT&quot;</span>)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="comment">// Wait for an interval of time in microseconds</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="comment">// Expected format for the WAIT command</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="comment">//      WAIT 11000000</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="comment">// This breaks down to:</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="comment">// WAIT         command</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="comment">// 11000000     timeout period in microseconds</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">if</span> (tokens.size() &gt; 1) <span class="comment">// minimum of 2 tokens.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    uint32_t timeout = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(std::stoul(tokens[1]));</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    mockService.<a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a18f77daf6b32e5bb456c2bc860140669">WaitCommand</a>(timeout);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    std::cerr &lt;&lt; <span class="stringliteral">&quot;Invalid WAIT command. Format is: WAIT &lt;interval&gt;&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}    <span class="comment">// namespace gatordmock</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}    <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1gatordmock_1_1_command_file_parser_xhtml_a224fc15053b9579998ce82f22038bab1"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_command_file_parser.xhtml#a224fc15053b9579998ce82f22038bab1">armnn::gatordmock::CommandFileParser::ParseFile</a></div><div class="ttdeci">void ParseFile(std::string CommandFile, GatordMockService &amp;mockService)</div><div class="ttdef"><b>Definition:</b> <a href="_command_file_parser_8cpp_source.xhtml#l00019">CommandFileParser.cpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_a0fa494c4df7426405e756b74656381ec"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a0fa494c4df7426405e756b74656381ec">armnn::gatordmock::GatordMockService::SendDeactivateTimelinePacket</a></div><div class="ttdeci">void SendDeactivateTimelinePacket()</div><div class="ttdoc">Send a deactivate timeline packet back to the client. </div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8cpp_source.xhtml#l00054">GatordMockService.cpp:54</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_a3833c5c6bec750969b5050c031032637"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a3833c5c6bec750969b5050c031032637">armnn::gatordmock::GatordMockService::SendActivateTimelinePacket</a></div><div class="ttdeci">void SendActivateTimelinePacket()</div><div class="ttdoc">Send a activate timeline packet back to the client. </div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8cpp_source.xhtml#l00044">GatordMockService.cpp:44</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_a2b9de2e6eee97f258fe2d7c765206e8a"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a2b9de2e6eee97f258fe2d7c765206e8a">armnn::gatordmock::GatordMockService::SendRequestCounterDir</a></div><div class="ttdeci">void SendRequestCounterDir()</div><div class="ttdoc">Send a request counter directory packet back to the client. </div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8cpp_source.xhtml#l00034">GatordMockService.cpp:34</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_a82bd11e044b4bc9c647fcaa9ce5b3e55"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a82bd11e044b4bc9c647fcaa9ce5b3e55">armnn::gatordmock::GatordMockService::ReceiveThreadRunning</a></div><div class="ttdeci">bool ReceiveThreadRunning()</div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00112">GatordMockService.hpp:112</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">armnn::gatordmock::GatordMockService</a></div><div class="ttdoc">A class that implements a Mock Gatord server. </div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00038">GatordMockService.hpp:38</a></div></div>
<div class="ttc" id="_command_file_parser_8hpp_xhtml"><div class="ttname"><a href="_command_file_parser_8hpp.xhtml">CommandFileParser.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_a18f77daf6b32e5bb456c2bc860140669"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a18f77daf6b32e5bb456c2bc860140669">armnn::gatordmock::GatordMockService::WaitCommand</a></div><div class="ttdeci">void WaitCommand(uint32_t timeout)</div><div class="ttdoc">Execute the WAIT command from the comamnd file. </div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8cpp_source.xhtml#l00138">GatordMockService.cpp:138</a></div></div>
<div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_abaf2feb0e79566de18721659d896dae1"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#abaf2feb0e79566de18721659d896dae1">armnn::gatordmock::GatordMockService::SendPeriodicCounterSelectionList</a></div><div class="ttdeci">void SendPeriodicCounterSelectionList(uint32_t period, std::vector&lt; uint16_t &gt; counters)</div><div class="ttdoc">Send the counter list to ArmNN. </div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8cpp_source.xhtml#l00106">GatordMockService.cpp:106</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_659c7018c274c4a27f289b6765351cd5.xhtml">profiling</a></li><li class="navelem"><a class="el" href="dir_0f843ccd982e68996492857574f1c0de.xhtml">gatordmock</a></li><li class="navelem"><a class="el" href="_command_file_parser_8cpp.xhtml">CommandFileParser.cpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:01 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
