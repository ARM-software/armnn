<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: IOutputSlot Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_i_output_slot.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classarmnn_1_1_i_output_slot-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">IOutputSlot Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>An output connection slot for a layer.  
 <a href="classarmnn_1_1_i_output_slot.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_i_network_8hpp_source.xhtml">INetwork.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for IOutputSlot:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_i_output_slot.png" usemap="#IOutputSlot_map" alt=""/>
  <map id="IOutputSlot_map" name="IOutputSlot_map">
<area href="classarmnn_1_1_output_slot.xhtml" alt="OutputSlot" shape="rect" coords="0,56,73,80"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aab97b09d9ee85a105883949abcae52f3"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#aab97b09d9ee85a105883949abcae52f3">GetNumConnections</a> () const =0</td></tr>
<tr class="separator:aab97b09d9ee85a105883949abcae52f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fffb92dc6d2edd5258d574a5862fc83"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9fffb92dc6d2edd5258d574a5862fc83">GetConnection</a> (unsigned int index) const =0</td></tr>
<tr class="separator:a9fffb92dc6d2edd5258d574a5862fc83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a4d336648a2f68565a156201c0f71c6"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a6a4d336648a2f68565a156201c0f71c6">GetConnection</a> (unsigned int index)=0</td></tr>
<tr class="separator:a6a4d336648a2f68565a156201c0f71c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ee4a6c9a2481245487b1b1a70d20fd0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo)=0</td></tr>
<tr class="separator:a5ee4a6c9a2481245487b1b1a70d20fd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9943775a364fc4ab53b85ac88f311886"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a> () const =0</td></tr>
<tr class="separator:a9943775a364fc4ab53b85ac88f311886"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4e57caf059794897b17266090ebcb39"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ab4e57caf059794897b17266090ebcb39">IsTensorInfoSet</a> () const =0</td></tr>
<tr class="separator:ab4e57caf059794897b17266090ebcb39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1835f8756a9f03c02fcf9664e3a0fce"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a> (<a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a> &amp;destination)=0</td></tr>
<tr class="separator:ac1835f8756a9f03c02fcf9664e3a0fce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae16a4d0c56ca96e5d61785bd3e3e7992"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ae16a4d0c56ca96e5d61785bd3e3e7992">Disconnect</a> (<a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a> &amp;slot)=0</td></tr>
<tr class="separator:ae16a4d0c56ca96e5d61785bd3e3e7992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41d30a9cd272e05986d71a69d6ad618b"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a41d30a9cd272e05986d71a69d6ad618b">CalculateIndexOnOwner</a> () const =0</td></tr>
<tr class="separator:a41d30a9cd272e05986d71a69d6ad618b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0c3555b126975ad6b3e250fe2a59534"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ad0c3555b126975ad6b3e250fe2a59534">GetOwningLayerGuid</a> () const =0</td></tr>
<tr class="separator:ad0c3555b126975ad6b3e250fe2a59534"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22b3f11f56aa924c0c1b6ee4d6cc90e1"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a22b3f11f56aa924c0c1b6ee4d6cc90e1">GetOwningIConnectableLayer</a> () const =0</td></tr>
<tr class="separator:a22b3f11f56aa924c0c1b6ee4d6cc90e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:aefb9214c1e4bc5f50e84d113e52e1242"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml#aefb9214c1e4bc5f50e84d113e52e1242">~IOutputSlot</a> ()</td></tr>
<tr class="memdesc:aefb9214c1e4bc5f50e84d113e52e1242"><td class="mdescLeft">&#160;</td><td class="mdescRight">Not user deletable.  <a href="#aefb9214c1e4bc5f50e84d113e52e1242">More...</a><br /></td></tr>
<tr class="separator:aefb9214c1e4bc5f50e84d113e52e1242"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>An output connection slot for a layer. </p>
<p>The output slot may be connected to 1 or more input slots of subsequent layers in the graph. </p>

<p class="definition">Definition at line <a class="el" href="_i_network_8hpp_source.xhtml#l00040">40</a> of file <a class="el" href="_i_network_8hpp_source.xhtml">INetwork.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aefb9214c1e4bc5f50e84d113e52e1242"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefb9214c1e4bc5f50e84d113e52e1242">&#9670;&nbsp;</a></span>~IOutputSlot()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_i_output_slot.xhtml">IOutputSlot</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Not user deletable. </p>

<p class="definition">Definition at line <a class="el" href="_i_network_8hpp_source.xhtml#l00062">62</a> of file <a class="el" href="_i_network_8hpp_source.xhtml">INetwork.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a41d30a9cd272e05986d71a69d6ad618b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41d30a9cd272e05986d71a69d6ad618b">&#9670;&nbsp;</a></span>CalculateIndexOnOwner()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int CalculateIndexOnOwner </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_output_slot.xhtml#a27545b353e48a739981d345b64bb9dc9">OutputSlot</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8cpp_source.xhtml#l01908">SerializerStrategy::GetVersionTable()</a>, and <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00389">SubgraphViewSelector::SelectSubgraphs()</a>.</p>

</div>
</div>
<a id="ac1835f8756a9f03c02fcf9664e3a0fce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1835f8756a9f03c02fcf9664e3a0fce">&#9670;&nbsp;</a></span>Connect()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int Connect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a> &amp;&#160;</td>
          <td class="paramname"><em>destination</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_output_slot.xhtml#a1a173e83ec6aa1f55c7c23707a668a60">OutputSlot</a>.</p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="_async_execution_sample_8cpp-example.xhtml#a14">AsyncExecutionSample.cpp</a>, <a class="el" href="_dynamic_sample_8cpp-example.xhtml#a4">DynamicSample.cpp</a>, and <a class="el" href="_simple_sample_8cpp-example.xhtml#a14">SimpleSample.cpp</a>.</dd>
</dl>
<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03309">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_test_utils_8cpp_source.xhtml#l00012">Connect()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00797">OnnxParserImpl::CreateNetworkFromString()</a>, <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00120">GetSoftmaxProfilerJson()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00824">IDeserializer::DeserializerImpl::LoadGraphFromBinary()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02575">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01861">TfLiteParserImpl::OutputShapeOfSqueeze()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00444">Graph::SubstituteSubgraph()</a>, <a class="el" href="_debug_callback_test_8cpp_source.xhtml#l00014">TEST_SUITE()</a>, <a class="el" href="_const_tensor_layer_visitor_8cpp_source.xhtml#l00110">armnn::TEST_SUITE()</a>, and <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00363">VerifyPostOptimisationStructureTestImpl()</a>.</p>

</div>
</div>
<a id="ae16a4d0c56ca96e5d61785bd3e3e7992"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae16a4d0c56ca96e5d61785bd3e3e7992">&#9670;&nbsp;</a></span>Disconnect()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Disconnect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a> &amp;&#160;</td>
          <td class="paramname"><em>slot</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_output_slot.xhtml#acecc5f85737e89526b0fd2bc4a9cfb9a">OutputSlot</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00444">Graph::SubstituteSubgraph()</a>.</p>

</div>
</div>
<a id="a9fffb92dc6d2edd5258d574a5862fc83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fffb92dc6d2edd5258d574a5862fc83">&#9670;&nbsp;</a></span>GetConnection() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a>* GetConnection </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_output_slot.xhtml#a048e8c1536cf6b8871b093a73a4a3a85">OutputSlot</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00044">IsConnected()</a>, and <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>.</p>

</div>
</div>
<a id="a6a4d336648a2f68565a156201c0f71c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a4d336648a2f68565a156201c0f71c6">&#9670;&nbsp;</a></span>GetConnection() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a>* GetConnection </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_output_slot.xhtml#a79b28a9ef1f9cf237f6f6697589cacb4">OutputSlot</a>.</p>

</div>
</div>
<a id="aab97b09d9ee85a105883949abcae52f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab97b09d9ee85a105883949abcae52f3">&#9670;&nbsp;</a></span>GetNumConnections()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int GetNumConnections </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_output_slot.xhtml#a25b0119c02aece1d341b99953d169c0f">OutputSlot</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00044">IsConnected()</a>, and <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>.</p>

</div>
</div>
<a id="a22b3f11f56aa924c0c1b6ee4d6cc90e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22b3f11f56aa924c0c1b6ee4d6cc90e1">&#9670;&nbsp;</a></span>GetOwningIConnectableLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>&amp; GetOwningIConnectableLayer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_output_slot.xhtml#a07dcdabbae92b5c0d51d2d236db528ed">OutputSlot</a>.</p>

<p class="reference">Referenced by <a class="el" href="_subgraph_view_tests_8cpp_source.xhtml#l01620">TEST_SUITE()</a>.</p>

</div>
</div>
<a id="ad0c3555b126975ad6b3e250fe2a59534"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0c3555b126975ad6b3e250fe2a59534">&#9670;&nbsp;</a></span>GetOwningLayerGuid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearmnn.xhtml#afad4088a9a058114ee5f87246f87bf49">LayerGuid</a> GetOwningLayerGuid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_output_slot.xhtml#a6bd5f82d7627668e46dee6a6c699480b">OutputSlot</a>.</p>

<p class="reference">Referenced by <a class="el" href="_serializer_8cpp_source.xhtml#l01908">SerializerStrategy::GetVersionTable()</a>.</p>

</div>
</div>
<a id="a9943775a364fc4ab53b85ac88f311886"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9943775a364fc4ab53b85ac88f311886">&#9670;&nbsp;</a></span>GetTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; GetTensorInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_output_slot.xhtml#ada2ad7d1caeeb4ef6195c8925fad6a65">OutputSlot</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_8cpp_source.xhtml#l00287">Layer::GetDataType()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l01908">SerializerStrategy::GetVersionTable()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00044">IsConnected()</a>, <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00023">Convolution3dLayer::SerializeLayerParameters()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00029">DepthwiseConvolution2dLayer::SerializeLayerParameters()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00029">Convolution2dLayer::SerializeLayerParameters()</a>, <a class="el" href="_graph_tests_8cpp_source.xhtml#l00022">TEST_SUITE()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00076">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00035">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00033">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00034">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00043">ReduceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00034">FillLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00034">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00037">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00036">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00039">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00037">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00037">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00034">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00105">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00109">Pooling3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00033">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00035">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00034">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00063">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00036">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00045">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00037">ShapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00034">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00034">CastLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00063">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00034">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00034">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00035">ChannelShuffleLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00034">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00044">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00061">PadLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00045">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00045">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00041">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00107">Convolution3dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00043">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00099">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00074">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00074">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00062">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00125">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00090">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00058">LogicalBinaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00100">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00060">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00070">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00064">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00121">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00062">FullyConnectedLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00170">UnidirectionalSequenceLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00168">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00052">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00096">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00170">QLstmLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_serializer_test_utils_8cpp_source.xhtml#l00040">LayerVerifierBase::VerifyNameAndConnections()</a>.</p>

</div>
</div>
<a id="ab4e57caf059794897b17266090ebcb39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4e57caf059794897b17266090ebcb39">&#9670;&nbsp;</a></span>IsTensorInfoSet()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsTensorInfoSet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_output_slot.xhtml#ac51cbac15935434659c8504d6db54e28">OutputSlot</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00560">Graph::InferTensorInfos()</a>.</p>

</div>
</div>
<a id="a5ee4a6c9a2481245487b1b1a70d20fd0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ee4a6c9a2481245487b1b1a70d20fd0">&#9670;&nbsp;</a></span>SetTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SetTensorInfo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">OutputSlot</a>.</p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="_async_execution_sample_8cpp-example.xhtml#a18">AsyncExecutionSample.cpp</a>, <a class="el" href="_dynamic_sample_8cpp-example.xhtml#a9">DynamicSample.cpp</a>, and <a class="el" href="_simple_sample_8cpp-example.xhtml#a18">SimpleSample.cpp</a>.</dd>
</dl>
<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03309">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_test_utils_8cpp_source.xhtml#l00012">Connect()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00797">OnnxParserImpl::CreateNetworkFromString()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02999">IDeserializer::DeserializerImpl::GetLstmDescriptor()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00899">IDeserializer::DeserializerImpl::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02690">IDeserializer::DeserializerImpl::GetNormalizationDescriptor()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l01836">armnnDeserializer::GetOriginsDescriptor()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04079">TfLiteParserImpl::GetOutputTensorIds()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02231">IDeserializer::DeserializerImpl::GetPooling3dDescriptor()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l03130">IDeserializer::DeserializerImpl::GetQLstmDescriptor()</a>, <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00120">GetSoftmaxProfilerJson()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l03562">IDeserializer::DeserializerImpl::GetUnidirectionalSequenceLstmDescriptor()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00768">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02391">IDeserializer::DeserializerImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02575">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01861">TfLiteParserImpl::OutputShapeOfSqueeze()</a>, <a class="el" href="_debug_callback_test_8cpp_source.xhtml#l00014">TEST_SUITE()</a>, and <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00363">VerifyPostOptimisationStructureTestImpl()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>include/armnn/<a class="el" href="_i_network_8hpp_source.xhtml">INetwork.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_i_output_slot.xhtml">IOutputSlot</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:17 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
