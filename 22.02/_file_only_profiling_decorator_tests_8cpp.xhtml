<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/profiling/test/FileOnlyProfilingDecoratorTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_file_only_profiling_decorator_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">FileOnlyProfilingDecoratorTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="_filesystem_8hpp_source.xhtml">armnnUtils/Filesystem.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_profiling_service_8hpp_source.xhtml">ProfilingService.hpp</a>&gt;</code><br />
<code>#include &quot;<a class="el" href="_profiling_test_utils_8hpp_source.xhtml">ProfilingTestUtils.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_print_packet_header_handler_8hpp_source.xhtml">PrintPacketHeaderHandler.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_runtime_8hpp_source.xhtml">Runtime.hpp</a>&gt;</code><br />
<code>#include &quot;<a class="el" href="_test_timeline_packet_handler_8hpp_source.xhtml">TestTimelinePacketHandler.hpp</a>&quot;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
<code>#include &lt;common/include/LabelsAndEventClasses.hpp&gt;</code><br />
<code>#include &lt;cstdio&gt;</code><br />
<code>#include &lt;sstream&gt;</code><br />
<code>#include &lt;sys/stat.h&gt;</code><br />
</div>
<p><a href="_file_only_profiling_decorator_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a2261edd223b39526f6ace0eb0dfc473d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_file_only_profiling_decorator_tests_8cpp.xhtml#a2261edd223b39526f6ace0eb0dfc473d">TEST_SUITE</a> (&quot;FileOnlyProfilingDecoratorTests&quot;)</td></tr>
<tr class="separator:a2261edd223b39526f6ace0eb0dfc473d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a2261edd223b39526f6ace0eb0dfc473d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2261edd223b39526f6ace0eb0dfc473d">&#9670;&nbsp;</a></span>TEST_SUITE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TEST_SUITE </td>
          <td>(</td>
          <td class="paramtype">&quot;FileOnlyProfilingDecoratorTests&quot;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_file_only_profiling_decorator_tests_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="_file_only_profiling_decorator_tests_8cpp_source.xhtml">FileOnlyProfilingDecoratorTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l01174">CompareOutput()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00492">INetwork::Create()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00596">RuntimeImpl::EnqueueWorkload()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_runtime_8hpp_source.xhtml#l00090">RuntimeImpl::GetDeviceSpec()</a>, <a class="el" href="_timeline_model_8hpp_source.xhtml#l00157">TimelineModel::GetErrors()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00565">RuntimeImpl::GetInputTensorInfo()</a>, <a class="el" href="_timeline_model_8cpp_source.xhtml#l00330">armnn::profiling::GetModelDescription()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00570">RuntimeImpl::GetOutputTensorInfo()</a>, <a class="el" href="_test_utils_8cpp_source.xhtml#l00057">armnn::GetProfilingService()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00043">GetSuitableBackendRegistered()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00150">RuntimeImpl::LoadNetwork()</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00146">IRuntime::CreationOptions::ExternalProfilingOptions::m_CapturePeriod</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00136">IRuntime::CreationOptions::ExternalProfilingOptions::m_EnableProfiling</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00144">IRuntime::CreationOptions::ExternalProfilingOptions::m_FileOnly</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00142">IRuntime::CreationOptions::ExternalProfilingOptions::m_IncomingCaptureFile</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00149">IRuntime::CreationOptions::ExternalProfilingOptions::m_LocalPacketHandlers</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00140">IRuntime::CreationOptions::ExternalProfilingOptions::m_OutgoingCaptureFile</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00151">IRuntime::CreationOptions::m_ProfilingOptions</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00138">IRuntime::CreationOptions::ExternalProfilingOptions::m_TimelineEnabled</a>, <a class="el" href="_filesystem_8cpp_source.xhtml#l00023">armnnUtils::Filesystem::NamedTempFile()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01680">armnn::Optimize()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00041">ProfilingService::ResetExternalProfilingOptions()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00036">ProfilingService::ResetGuidGenerator()</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::Rsqrt</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00516">TensorInfo::SetConstant()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, and <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Success</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;TEST_CASE(<span class="stringliteral">&quot;TestFileOnlyProfiling&quot;</span>)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// Get all registered backends</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    std::vector&lt;BackendId&gt; suitableBackends = <a class="code" href="_profiling_test_utils_8cpp.xhtml#ae64165cd8af458ef4a8634c51892ef08">GetSuitableBackendRegistered</a>();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// Run test for each backend separately</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; backend : suitableBackends)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="comment">// Enable m_FileOnly but also provide ILocalPacketHandler which should consume the packets.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="comment">// This won&#39;t dump anything to file.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> creationOptions;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        creationOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>     = <span class="keyword">true</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        creationOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#ad8f8cb971cad412664cd7df58df7eb1e">m_FileOnly</a>            = <span class="keyword">true</span>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        creationOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a2239347f38747f993c324bdd8b1eb146">m_CapturePeriod</a>       = 100;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        creationOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a5b304d775657afbf1fb724af57add374">m_TimelineEnabled</a>     = <span class="keyword">true</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="namespacearmnn_1_1profiling.xhtml#a96b0827ffefa36d7ec2b4ac34a922d12">ILocalPacketHandlerSharedPtr</a> localPacketHandlerPtr = std::make_shared&lt;TestTimelinePacketHandler&gt;();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        creationOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a3c0e8ba6298293937517b6e5c6a79264">m_LocalPacketHandlers</a>.push_back(localPacketHandlerPtr);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="structarmnn_1_1_runtime_impl.xhtml">armnn::RuntimeImpl</a> runtime(creationOptions);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="comment">// ensure the GUID generator is reset to zero</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a22f1d90f329261a58e14827f99090e93">GetProfilingService</a>(&amp;runtime).<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a3ae86439d5449553c50941ff3ecc3d97">ResetGuidGenerator</a>();</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="comment">// Load a simple network</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="comment">// build up the structure of the network</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(INetwork::Create());</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input = net-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> descriptor(UnaryOperation::Rsqrt);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">Rsqrt</a> = net-&gt;AddElementwiseUnaryLayer(descriptor, <span class="stringliteral">&quot;Rsqrt&quot;</span>);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(Rsqrt-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        Rsqrt-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 1, 4, 4 }, DataType::Float32));</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        Rsqrt-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 1, 4, 4 }, DataType::Float32));</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        std::vector&lt;armnn::BackendId&gt; backendsVec {backend};</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, backendsVec, runtime.GetDeviceSpec());</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="comment">// Load it into the runtime. It should succeed.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> netId;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        CHECK(runtime.LoadNetwork(netId, std::move(optNet)) == Status::Success);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="comment">// Creates structures for input &amp; output.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        std::vector&lt;float&gt; inputData(16);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        std::vector&lt;float&gt; outputData(16);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; 16; ++i) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            inputData[i] = 9.0;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            outputData[i] = 3.0;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo = runtime.GetInputTensorInfo(netId, 0);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            {0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>(inputTensorInfo, inputData.data())}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        };</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            {0, <a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a>(runtime.GetOutputTensorInfo(netId, 0), outputData.data())}</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        };</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">// Does the inference.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        runtime.EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keyword">static_cast&lt;</span><a class="code" href="classarmnn_1_1profiling_1_1_test_timeline_packet_handler.xhtml">TestTimelinePacketHandler</a> *<span class="keyword">&gt;</span>(localPacketHandlerPtr.get())-&gt;WaitOnInferenceCompletion(3000);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1profiling_1_1_timeline_model.xhtml">TimelineModel</a> &amp;model =</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="keyword">static_cast&lt;</span><a class="code" href="classarmnn_1_1profiling_1_1_test_timeline_packet_handler.xhtml">TestTimelinePacketHandler</a> *<span class="keyword">&gt;</span>(localPacketHandlerPtr.get())-&gt;GetTimelineModel();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;error : model.<a class="code" href="classarmnn_1_1profiling_1_1_timeline_model.xhtml#af65ad290e953c59b8b3e2db0037f9a9c">GetErrors</a>()) {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            std::cout &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>.what() &lt;&lt; std::endl;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        CHECK(model.<a class="code" href="classarmnn_1_1profiling_1_1_timeline_model.xhtml#af65ad290e953c59b8b3e2db0037f9a9c">GetErrors</a>().empty());</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        std::vector&lt;std::string&gt; desc = <a class="code" href="namespacearmnn_1_1profiling.xhtml#a8e8f20742c192fae6c3854e324f10195">GetModelDescription</a>(model);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        std::vector&lt;std::string&gt; expectedOutput;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;Entity [0] name = input type = layer&quot;</span>);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   connection [17] from entity [0] to entity [1]&quot;</span>);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   child: Entity [26] backendId = &quot;</span> + backend.Get() + <span class="stringliteral">&quot; type = workload&quot;</span>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;Entity [1] name = Rsqrt type = layer&quot;</span>);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   connection [25] from entity [1] to entity [2]&quot;</span>);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   child: Entity [18] backendId = &quot;</span> + backend.Get() + <span class="stringliteral">&quot; type = workload&quot;</span>);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;Entity [2] name = output type = layer&quot;</span>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   child: Entity [30] backendId = &quot;</span> + backend.Get() + <span class="stringliteral">&quot; type = workload&quot;</span>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;Entity [6] processId = [processId] type = network&quot;</span>);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   child: Entity [0] name = input type = layer&quot;</span>);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   child: Entity [1] name = Rsqrt type = layer&quot;</span>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   child: Entity [2] name = output type = layer&quot;</span>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   execution: Entity [34] type = inference&quot;</span>);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   event: [8] class [start_of_life]&quot;</span>);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;Entity [18] backendId = &quot;</span> + backend.Get() + <span class="stringliteral">&quot; type = workload&quot;</span>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   execution: Entity [47] type = workload_execution&quot;</span>);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;Entity [26] backendId = &quot;</span> + backend.Get() + <span class="stringliteral">&quot; type = workload&quot;</span>);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   execution: Entity [39] type = workload_execution&quot;</span>);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;Entity [30] backendId = &quot;</span> + backend.Get() + <span class="stringliteral">&quot; type = workload&quot;</span>);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   execution: Entity [55] type = workload_execution&quot;</span>);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;Entity [34] type = inference&quot;</span>);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   child: Entity [39] type = workload_execution&quot;</span>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   child: Entity [47] type = workload_execution&quot;</span>);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   child: Entity [55] type = workload_execution&quot;</span>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   event: [37] class [start_of_life]&quot;</span>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   event: [63] class [end_of_life]&quot;</span>);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;Entity [39] type = workload_execution&quot;</span>);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   event: [43] class [start_of_life]&quot;</span>);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   event: [45] class [end_of_life]&quot;</span>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;Entity [47] type = workload_execution&quot;</span>);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   event: [51] class [start_of_life]&quot;</span>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   event: [53] class [end_of_life]&quot;</span>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;Entity [55] type = workload_execution&quot;</span>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   event: [59] class [start_of_life]&quot;</span>);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        expectedOutput.push_back(<span class="stringliteral">&quot;   event: [61] class [end_of_life]&quot;</span>);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        CHECK(<a class="code" href="_profiling_test_utils_8cpp.xhtml#a574e305ad5b7b33c40fc025580e30dee">CompareOutput</a>(desc, expectedOutput));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;TEST_CASE(<span class="stringliteral">&quot;DumpOutgoingValidFileEndToEnd&quot;</span>)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// Get all registered backends</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    std::vector&lt;BackendId&gt; suitableBackends = <a class="code" href="_profiling_test_utils_8cpp.xhtml#ae64165cd8af458ef4a8634c51892ef08">GetSuitableBackendRegistered</a>();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// Run test for each backend separately</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; backend : suitableBackends)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="comment">// Create a temporary file name.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        fs::path tempPath = <a class="code" href="namespacearmnn_utils_1_1_filesystem.xhtml#a606d65835d72a332109c3c9f96a01b8a">armnnUtils::Filesystem::NamedTempFile</a>(<span class="stringliteral">&quot;DumpOutgoingValidFileEndToEnd_CaptureFile.txt&quot;</span>);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="comment">// Make sure the file does not exist at this point</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        CHECK(!fs::exists(tempPath));</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>     = <span class="keyword">true</span>;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#ad8f8cb971cad412664cd7df58df7eb1e">m_FileOnly</a>            = <span class="keyword">true</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a36dd18e4f73d470e3234d72198aa5fef">m_IncomingCaptureFile</a> = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#aa0d6aa79d683bc79d20d4ddcf7db87db">m_OutgoingCaptureFile</a> = tempPath.string();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a2239347f38747f993c324bdd8b1eb146">m_CapturePeriod</a>       = 100;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a5b304d775657afbf1fb724af57add374">m_TimelineEnabled</a>     = <span class="keyword">true</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <a class="code" href="namespacearmnn_1_1profiling.xhtml#a96b0827ffefa36d7ec2b4ac34a922d12">ILocalPacketHandlerSharedPtr</a> localPacketHandlerPtr = std::make_shared&lt;TestTimelinePacketHandler&gt;();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a3c0e8ba6298293937517b6e5c6a79264">m_LocalPacketHandlers</a>.push_back(localPacketHandlerPtr);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <a class="code" href="structarmnn_1_1_runtime_impl.xhtml">armnn::RuntimeImpl</a> runtime(options);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="comment">// ensure the GUID generator is reset to zero</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a22f1d90f329261a58e14827f99090e93">GetProfilingService</a>(&amp;runtime).<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a3ae86439d5449553c50941ff3ecc3d97">ResetGuidGenerator</a>();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="comment">// Load a simple network</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="comment">// build up the structure of the network</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(INetwork::Create());</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input = net-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> descriptor(UnaryOperation::Rsqrt);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* Rsqrt = net-&gt;AddElementwiseUnaryLayer(descriptor, <span class="stringliteral">&quot;Rsqrt&quot;</span>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output = net-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(Rsqrt-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        Rsqrt-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 1, 4, 4 }, DataType::Float32));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        Rsqrt-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({ 1, 1, 4, 4 }, DataType::Float32));</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        std::vector&lt;BackendId&gt; backendsVec{backend};</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, backendsVec, runtime.GetDeviceSpec());</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="comment">// Load it into the runtime. It should succeed.</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> netId;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        CHECK(runtime.LoadNetwork(netId, std::move(optNet)) == Status::Success);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="comment">// Creates structures for input &amp; output.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        std::vector&lt;float&gt; inputData(16);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        std::vector&lt;float&gt; outputData(16);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; 16; ++i) {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            inputData[i] = 9.0;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            outputData[i] = 3.0;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo = runtime.GetInputTensorInfo(netId, 0);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> inputTensors</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            {0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>(inputTensorInfo, inputData.data())}</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        };</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> outputTensors</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            {0, <a class="code" href="classarmnn_1_1_tensor.xhtml">Tensor</a>(runtime.GetOutputTensorInfo(netId, 0), outputData.data())}</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        };</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="comment">// Does the inference.</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        runtime.EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keyword">static_cast&lt;</span><a class="code" href="classarmnn_1_1profiling_1_1_test_timeline_packet_handler.xhtml">TestTimelinePacketHandler</a> *<span class="keyword">&gt;</span>(localPacketHandlerPtr.get())-&gt;WaitOnInferenceCompletion(3000);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="comment">// In order to flush the files we need to gracefully close the profiling service.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a22f1d90f329261a58e14827f99090e93">GetProfilingService</a>(&amp;runtime).<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ae7a3588986b93e13fda47c7ce4b0627c">ResetExternalProfilingOptions</a>(options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>, <span class="keyword">true</span>);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="comment">// The output file size should be greater than 0.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        CHECK(fs::file_size(tempPath) &gt; 0);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="comment">// NOTE: would be an interesting exercise to take this file and decode it</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="comment">// Delete the tmp file.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        CHECK(fs::remove(tempPath));</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a22f1d90f329261a58e14827f99090e93"><div class="ttname"><a href="namespacearmnn.xhtml#a22f1d90f329261a58e14827f99090e93">armnn::GetProfilingService</a></div><div class="ttdeci">profiling::ProfilingService &amp; GetProfilingService(armnn::RuntimeImpl *runtime)</div><div class="ttdef"><b>Definition:</b> <a href="_test_utils_8cpp_source.xhtml#l00057">TestUtils.cpp:57</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a96b0827ffefa36d7ec2b4ac34a922d12"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a96b0827ffefa36d7ec2b4ac34a922d12">armnn::profiling::ILocalPacketHandlerSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; ILocalPacketHandler &gt; ILocalPacketHandlerSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_local_packet_handler_8hpp_source.xhtml#l00074">ILocalPacketHandler.hpp:74</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00066">INetwork.hpp:66</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml_aa0d6aa79d683bc79d20d4ddcf7db87db"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#aa0d6aa79d683bc79d20d4ddcf7db87db">armnn::IRuntime::CreationOptions::ExternalProfilingOptions::m_OutgoingCaptureFile</a></div><div class="ttdeci">std::string m_OutgoingCaptureFile</div><div class="ttdoc">Path to a file in which outgoing timeline profiling messages will be stored. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00140">IRuntime.hpp:140</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_timeline_model_xhtml_af65ad290e953c59b8b3e2db0037f9a9c"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_timeline_model.xhtml#af65ad290e953c59b8b3e2db0037f9a9c">armnn::profiling::TimelineModel::GetErrors</a></div><div class="ttdeci">const std::vector&lt; arm::pipe::ProfilingException &gt; &amp; GetErrors() const</div><div class="ttdef"><b>Definition:</b> <a href="_timeline_model_8hpp_source.xhtml#l00157">TimelineModel.hpp:157</a></div></div>
<div class="ttc" id="_profiling_test_utils_8cpp_xhtml_ae64165cd8af458ef4a8634c51892ef08"><div class="ttname"><a href="_profiling_test_utils_8cpp.xhtml#ae64165cd8af458ef4a8634c51892ef08">GetSuitableBackendRegistered</a></div><div class="ttdeci">std::vector&lt; BackendId &gt; GetSuitableBackendRegistered()</div><div class="ttdoc">Returns a vector of CpuRef, CpuAcc or GpuAcc backends if they where registered. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_test_utils_8cpp_source.xhtml#l00043">ProfilingTestUtils.cpp:43</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml_a36dd18e4f73d470e3234d72198aa5fef"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a36dd18e4f73d470e3234d72198aa5fef">armnn::IRuntime::CreationOptions::ExternalProfilingOptions::m_IncomingCaptureFile</a></div><div class="ttdeci">std::string m_IncomingCaptureFile</div><div class="ttdoc">Path to a file in which incoming timeline profiling messages will be stored. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00142">IRuntime.hpp:142</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">armnn::IRuntime::CreationOptions::ExternalProfilingOptions::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdoc">Indicates whether external profiling is enabled or not. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00136">IRuntime.hpp:136</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml_ad8f8cb971cad412664cd7df58df7eb1e"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#ad8f8cb971cad412664cd7df58df7eb1e">armnn::IRuntime::CreationOptions::ExternalProfilingOptions::m_FileOnly</a></div><div class="ttdeci">bool m_FileOnly</div><div class="ttdoc">Enable profiling output to file only. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00144">IRuntime.hpp:144</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::BoostLogSeverityMapping::error</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a3ae86439d5449553c50941ff3ecc3d97"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a3ae86439d5449553c50941ff3ecc3d97">armnn::profiling::ProfilingService::ResetGuidGenerator</a></div><div class="ttdeci">void ResetGuidGenerator()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00036">ProfilingService.cpp:36</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_test_timeline_packet_handler_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_test_timeline_packet_handler.xhtml">armnn::profiling::TestTimelinePacketHandler</a></div><div class="ttdef"><b>Definition:</b> <a href="_test_timeline_packet_handler_8hpp_source.xhtml#l00046">TestTimelinePacketHandler.hpp:46</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml_a3c0e8ba6298293937517b6e5c6a79264"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a3c0e8ba6298293937517b6e5c6a79264">armnn::IRuntime::CreationOptions::ExternalProfilingOptions::m_LocalPacketHandlers</a></div><div class="ttdeci">std::vector&lt; armnn::profiling::ILocalPacketHandlerSharedPtr &gt; m_LocalPacketHandlers</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00149">IRuntime.hpp:149</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01680">Network.cpp:1680</a></div></div>
<div class="ttc" id="_profiling_test_utils_8cpp_xhtml_a574e305ad5b7b33c40fc025580e30dee"><div class="ttname"><a href="_profiling_test_utils_8cpp.xhtml#a574e305ad5b7b33c40fc025580e30dee">CompareOutput</a></div><div class="ttdeci">bool CompareOutput(std::vector&lt; std::string &gt; output, std::vector&lt; std::string &gt; expectedOutput)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_test_utils_8cpp_source.xhtml#l01174">ProfilingTestUtils.cpp:1174</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00242">INetwork.hpp:242</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_ae7a3588986b93e13fda47c7ce4b0627c"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ae7a3588986b93e13fda47c7ce4b0627c">armnn::profiling::ProfilingService::ResetExternalProfilingOptions</a></div><div class="ttdeci">void ResetExternalProfilingOptions(const ExternalProfilingOptions &amp;options, bool resetProfilingService=false)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00041">ProfilingService.cpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_timeline_model_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_timeline_model.xhtml">armnn::profiling::TimelineModel</a></div><div class="ttdef"><b>Definition:</b> <a href="_timeline_model_8hpp_source.xhtml#l00146">TimelineModel.hpp:146</a></div></div>
<div class="ttc" id="structarmnn_1_1_runtime_impl_xhtml"><div class="ttname"><a href="structarmnn_1_1_runtime_impl.xhtml">armnn::RuntimeImpl</a></div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8hpp_source.xhtml#l00030">Runtime.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a></div><div class="ttdoc">A ElementwiseUnaryDescriptor for the ElementwiseUnaryLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00109">Descriptors.hpp:109</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a8e8f20742c192fae6c3854e324f10195"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a8e8f20742c192fae6c3854e324f10195">armnn::profiling::GetModelDescription</a></div><div class="ttdeci">std::vector&lt; std::string &gt; GetModelDescription(const TimelineModel &amp;model)</div><div class="ttdef"><b>Definition:</b> <a href="_timeline_model_8cpp_source.xhtml#l00330">TimelineModel.cpp:330</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8ffca1e21bdfa7f945617acd606aac91"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">armnn::TensorInfo::SetConstant</a></div><div class="ttdeci">void SetConstant(const bool IsConstant=true)</div><div class="ttdoc">Marks the data corresponding to this tensor info as constant. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00516">Tensor.cpp:516</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml_a2239347f38747f993c324bdd8b1eb146"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a2239347f38747f993c324bdd8b1eb146">armnn::IRuntime::CreationOptions::ExternalProfilingOptions::m_CapturePeriod</a></div><div class="ttdeci">uint32_t m_CapturePeriod</div><div class="ttdoc">The duration at which captured profiling messages will be flushed. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00146">IRuntime.hpp:146</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml_a5b304d775657afbf1fb724af57add374"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a5b304d775657afbf1fb724af57add374">armnn::IRuntime::CreationOptions::ExternalProfilingOptions::m_TimelineEnabled</a></div><div class="ttdeci">bool m_TimelineEnabled</div><div class="ttdoc">Indicates whether external timeline profiling is enabled or not. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00138">IRuntime.hpp:138</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_utils_1_1_filesystem_xhtml_a606d65835d72a332109c3c9f96a01b8a"><div class="ttname"><a href="namespacearmnn_utils_1_1_filesystem.xhtml#a606d65835d72a332109c3c9f96a01b8a">armnnUtils::Filesystem::NamedTempFile</a></div><div class="ttdeci">fs::path NamedTempFile(const char *fileName)</div><div class="ttdoc">Returns a path to a file in the system temporary folder. If the file existed it will be deleted...</div><div class="ttdef"><b>Definition:</b> <a href="_filesystem_8cpp_source.xhtml#l00023">Filesystem.cpp:23</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_a30412a91cadff138686eaeb12f5357cc"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">armnn::IRuntime::CreationOptions::m_ProfilingOptions</a></div><div class="ttdeci">ExternalProfilingOptions m_ProfilingOptions</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00151">IRuntime.hpp:151</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_637c692f14729569dd2eac0c18e2a54a.xhtml">profiling</a></li><li class="navelem"><a class="el" href="dir_6b1198f6e738611120ec65b09506d2f8.xhtml">test</a></li><li class="navelem"><a class="el" href="_file_only_profiling_decorator_tests_8cpp.xhtml">FileOnlyProfilingDecoratorTests.cpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:11 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
